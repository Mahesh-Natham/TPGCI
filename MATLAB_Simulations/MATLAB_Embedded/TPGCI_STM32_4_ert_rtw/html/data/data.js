var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"TPGCI_STM32_4","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"P:\\Projects\\TPGCI\\MATLAB_Simulations\\MATLAB_Embedded\\TPGCI_STM32_4_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'TPGCI_STM32_4'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Mon Mar 31 15:17:32 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: All passed\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"TPGCI_STM32_4.h\"             /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static bool OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  TPGCI_STM32_4_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint main(int argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  TPGCI_STM32_4_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.0001 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (1) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  /* The option 'Remove error status field in real-time model data structure'\r\n   * is selected, therefore the following code does not need to execute.\r\n   */\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"TPGCI_STM32_4.c","type":"source","group":"model","path":"P:\\Projects\\TPGCI\\MATLAB_Simulations\\MATLAB_Embedded\\TPGCI_STM32_4_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: TPGCI_STM32_4.c\r\n *\r\n * Code generated for Simulink model 'TPGCI_STM32_4'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Mon Mar 31 15:17:32 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: All passed\r\n */\r\n\r\n#include \"TPGCI_STM32_4.h\"\r\n#include <stdint.h>\r\n#include <math.h>\r\n#include <float.h>\r\n#include <stdbool.h>\r\n\r\n/* Exported data definition */\r\n\r\n/* Volatile memory section */\r\n/* Definition for custom storage class: Volatile */\r\nvolatile double CCR_max;               /* '<Root>/CCR_max' */\r\nvolatile double Freq;                  /* '<Root>/Freq' */\r\nvolatile double Ia_g;                  /* '<Root>/Ia_g' */\r\nvolatile double Iabc_gain;             /* '<Root>/Iabc_gain' */\r\nvolatile double Ib_g;                  /* '<Root>/Ib_g' */\r\nvolatile double Ic_g;                  /* '<Root>/Ic_g' */\r\nvolatile double Id;                    /* '<Root>/Id' */\r\nvolatile double Id_ref;                /* '<Root>/Id_ref' */\r\nvolatile double Iq;                    /* '<Root>/Iq' */\r\nvolatile double PWMch1;                /* '<Root>/PWMch1' */\r\nvolatile double PWMch2;                /* '<Root>/PWMch2' */\r\nvolatile double PWMch3;                /* '<Root>/PWMch3' */\r\nvolatile double Theta_g;               /* '<Root>/Theta_g' */\r\nvolatile double VDC;                   /* '<Root>/VDC' */\r\nvolatile double Va_g;                  /* '<Root>/Va_g' */\r\nvolatile double Vabc_gain;             /* '<Root>/Vabc_gain' */\r\nvolatile double Vb_g;                  /* '<Root>/Vb_g' */\r\nvolatile double Vc_g;                  /* '<Root>/Vc_g' */\r\nvolatile double Vd_g;                  /* '<Root>/Vd_g' */\r\nvolatile double Vdc_gain;              /* '<Root>/Vdc_gain' */\r\nvolatile double Vq_g;                  /* '<Root>/Vq_g' */\r\nvolatile double m_abc[3];              /* '<Root>/m_abc' */\r\nvolatile double phasedelay;            /* '<Root>/phase delay' */\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\nextern double rt_modd(double u0, double u1);\r\nstatic void RMSExp(double rtu_u, double *rty_y, DW_RMSExp *localDW);\r\nstatic void Subsystempi2delay(uint8_t rtu_Enable, const double rtu_alpha_beta[2],\r\n  double rtu_wt, double *rty_dq, double *rty_dq_j);\r\nstatic void Subsystem1(uint8_t rtu_Enable, const double rtu_alpha_beta[2],\r\n  double rtu_wt, double *rty_dq, double *rty_dq_e);\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *    '<Root>/RMS Exp'\r\n *    '<Root>/RMS Exp1'\r\n */\r\nstatic void RMSExp(double rtu_u, double *rty_y, DW_RMSExp *localDW)\r\n{\r\n  if (!localDW->rmsSquared_not_empty) {\r\n    localDW->rmsSquared = rtu_u * rtu_u;\r\n    localDW->rmsSquared_not_empty = true;\r\n  }\r\n\r\n  localDW->rmsSquared = rtu_u * rtu_u * 0.01 + 0.99 * localDW->rmsSquared;\r\n  *rty_y = localDW->rmsSquared;\r\n  *rty_y = sqrt(*rty_y);\r\n}\r\n\r\n/*\r\n * Output and update for enable system:\r\n *    '<S166>/Subsystem - pi//2 delay'\r\n *    '<S172>/Subsystem - pi//2 delay'\r\n */\r\nstatic void Subsystempi2delay(uint8_t rtu_Enable, const double rtu_alpha_beta[2],\r\n  double rtu_wt, double *rty_dq, double *rty_dq_j)\r\n{\r\n  /* Outputs for Enabled SubSystem: '<S166>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S170>/Enable'\r\n   */\r\n  if (rtu_Enable > 0) {\r\n    double tmp;\r\n    double tmp_0;\r\n\r\n    /* Fcn: '<S170>/Fcn' incorporates:\r\n     *  Fcn: '<S170>/Fcn1'\r\n     */\r\n    tmp = cos(rtu_wt);\r\n    tmp_0 = sin(rtu_wt);\r\n    *rty_dq = rtu_alpha_beta[0] * tmp_0 - rtu_alpha_beta[1] * tmp;\r\n\r\n    /* Fcn: '<S170>/Fcn1' */\r\n    *rty_dq_j = rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S166>/Subsystem - pi//2 delay' */\r\n}\r\n\r\n/*\r\n * Output and update for enable system:\r\n *    '<S166>/Subsystem1'\r\n *    '<S172>/Subsystem1'\r\n */\r\nstatic void Subsystem1(uint8_t rtu_Enable, const double rtu_alpha_beta[2],\r\n  double rtu_wt, double *rty_dq, double *rty_dq_e)\r\n{\r\n  /* Outputs for Enabled SubSystem: '<S166>/Subsystem1' incorporates:\r\n   *  EnablePort: '<S171>/Enable'\r\n   */\r\n  if (rtu_Enable > 0) {\r\n    double tmp;\r\n    double tmp_0;\r\n\r\n    /* Fcn: '<S171>/Fcn' incorporates:\r\n     *  Fcn: '<S171>/Fcn1'\r\n     */\r\n    tmp = sin(rtu_wt);\r\n    tmp_0 = cos(rtu_wt);\r\n    *rty_dq = rtu_alpha_beta[0] * tmp_0 + rtu_alpha_beta[1] * tmp;\r\n\r\n    /* Fcn: '<S171>/Fcn1' */\r\n    *rty_dq_e = -rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<S166>/Subsystem1' */\r\n}\r\n\r\ndouble rt_modd(double u0, double u1)\r\n{\r\n  double y;\r\n  y = u0;\r\n  if (u1 == 0.0) {\r\n    if (u0 == 0.0) {\r\n      y = u1;\r\n    }\r\n  } else if (u0 == 0.0) {\r\n    y = 0.0 / u1;\r\n  } else {\r\n    bool yEq;\r\n    y = fmod(u0, u1);\r\n    yEq = (y == 0.0);\r\n    if ((!yEq) && (u1 > floor(u1))) {\r\n      double q;\r\n      q = fabs(u0 / u1);\r\n      yEq = (fabs(q - floor(q + 0.5)) <= DBL_EPSILON * q);\r\n    }\r\n\r\n    if (yEq) {\r\n      y = 0.0;\r\n    } else if ((u0 < 0.0) != (u1 < 0.0)) {\r\n      y += u1;\r\n    }\r\n  }\r\n\r\n  return y;\r\n}\r\n\r\n/* Model step function */\r\nvoid TPGCI_STM32_4_step(void)\r\n{\r\n  double rtb_Gain1[3];\r\n  double rtb_Gain1_p[3];\r\n  double rtb_Add2;\r\n  double rtb_Divide;\r\n  double rtb_Divide1;\r\n  double rtb_Divide_idx_0_tmp;\r\n  double rtb_Divide_idx_0_tmp_0;\r\n  double rtb_Filter;\r\n  double rtb_Integrator_l;\r\n  double rtb_Mod1;\r\n  double rtb_Saturation;\r\n  double rtb_Sum8;\r\n  int32_t i;\r\n  for (i = 0; i < 3; i++) {\r\n    /* Gain: '<S173>/Gain3' */\r\n    rtb_Mod1 = rtConstP.pooled5[i + 3];\r\n    rtb_Sum8 = rtConstP.pooled5[i];\r\n    rtb_Saturation = rtConstP.pooled5[i + 6];\r\n\r\n    /* Gain: '<S173>/Gain1' incorporates:\r\n     *  Gain: '<S173>/Gain3'\r\n     *  Inport: '<Root>/Ia_g'\r\n     *  Inport: '<Root>/Ib_g'\r\n     *  Inport: '<Root>/Ic_g'\r\n     */\r\n    rtb_Gain1[i] = ((rtb_Mod1 * Ib_g + rtb_Sum8 * Ia_g) + rtb_Saturation * Ic_g)\r\n      * 0.66666666666666663;\r\n\r\n    /* Gain: '<S167>/Gain1' incorporates:\r\n     *  Gain: '<S167>/Gain3'\r\n     *  Inport: '<Root>/Va_g'\r\n     *  Inport: '<Root>/Vb_g'\r\n     *  Inport: '<Root>/Vc_g'\r\n     */\r\n    rtb_Gain1_p[i] = ((rtb_Mod1 * Vb_g + rtb_Sum8 * Va_g) + rtb_Saturation *\r\n                      Vc_g) * 0.66666666666666663;\r\n  }\r\n\r\n  /* Math: '<Root>/Mod1' incorporates:\r\n   *  Constant: '<Root>/Constant3'\r\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\r\n   */\r\n  rtb_Mod1 = rt_modd(rtDW.DiscreteTimeIntegrator_DSTATE, 6.2831853071795862);\r\n\r\n  /* Outputs for Enabled SubSystem: '<S172>/Subsystem1' */\r\n  Subsystem1(0, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_n, &rtDW.Fcn1_h);\r\n\r\n  /* End of Outputs for SubSystem: '<S172>/Subsystem1' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S172>/Subsystem - pi//2 delay' */\r\n  Subsystempi2delay(rtConstB.Compare_b, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_k1,\r\n                    &rtDW.Fcn1_j);\r\n\r\n  /* End of Outputs for SubSystem: '<S172>/Subsystem - pi//2 delay' */\r\n\r\n  /* MATLAB Function: '<Root>/RMS Exp1' incorporates:\r\n   *  Outport: '<Root>/Id'\r\n   *  Switch: '<S172>/Switch'\r\n   */\r\n  RMSExp(rtDW.Fcn_k1, (double *)&Id, &rtDW.sf_RMSExp1);\r\n\r\n  /* Product: '<Root>/Product3' incorporates:\r\n   *  Inport: '<Root>/Iabc_gain'\r\n   *  Inport: '<Root>/Id_ref'\r\n   *  Product: '<Root>/Product4'\r\n   */\r\n  rtb_Integrator_l = Id_ref * Iabc_gain;\r\n\r\n  /* Sum: '<Root>/Sum8' incorporates:\r\n   *  Outport: '<Root>/Id'\r\n   *  Product: '<Root>/Product3'\r\n   */\r\n  rtb_Sum8 = rtb_Integrator_l - Id;\r\n\r\n  /* Sum: '<S108>/Sum' incorporates:\r\n   *  DiscreteIntegrator: '<S99>/Integrator'\r\n   */\r\n  rtb_Saturation = rtb_Sum8 + rtDW.Integrator_DSTATE;\r\n\r\n  /* Saturate: '<S106>/Saturation' */\r\n  if (rtb_Saturation > 10.0) {\r\n    rtb_Saturation = 10.0;\r\n  } else if (rtb_Saturation < -10.0) {\r\n    rtb_Saturation = -10.0;\r\n  }\r\n\r\n  /* End of Saturate: '<S106>/Saturation' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S166>/Subsystem1' */\r\n  Subsystem1(0, &rtb_Gain1_p[0], rtb_Mod1, &rtDW.Fcn_a, &rtDW.Fcn1_ic);\r\n\r\n  /* End of Outputs for SubSystem: '<S166>/Subsystem1' */\r\n\r\n  /* Outputs for Enabled SubSystem: '<S166>/Subsystem - pi//2 delay' */\r\n  Subsystempi2delay(rtConstB.Compare_i, &rtb_Gain1_p[0], rtb_Mod1, &rtDW.Fcn_nk,\r\n                    &rtDW.Fcn1_l);\r\n\r\n  /* End of Outputs for SubSystem: '<S166>/Subsystem - pi//2 delay' */\r\n\r\n  /* MATLAB Function: '<Root>/RMS Exp' incorporates:\r\n   *  Outport: '<Root>/Vd_g'\r\n   *  Switch: '<S166>/Switch'\r\n   */\r\n  RMSExp(rtDW.Fcn_nk, (double *)&Vd_g, &rtDW.sf_RMSExp);\r\n\r\n  /* Sum: '<Root>/Sum10' incorporates:\r\n   *  Outport: '<Root>/Vd_g'\r\n   *  Sum: '<Root>/Sum9'\r\n   */\r\n  rtb_Filter = rtb_Saturation + Vd_g;\r\n\r\n  /* Product: '<Root>/Product6' incorporates:\r\n   *  Constant: '<S3>/Constant5'\r\n   *  Inport: '<Root>/VDC'\r\n   *  Inport: '<Root>/Vdc_gain'\r\n   *  Product: '<Root>/Product8'\r\n   *  Product: '<S3>/Divide2'\r\n   */\r\n  rtb_Add2 = 1.0 / Vdc_gain * VDC;\r\n\r\n  /* Product: '<Root>/Divide' incorporates:\r\n   *  Constant: '<Root>/Constant'\r\n   *  Constant: '<S1>/Constant5'\r\n   *  Inport: '<Root>/Vabc_gain'\r\n   *  Product: '<Root>/Product'\r\n   *  Product: '<Root>/Product5'\r\n   *  Product: '<Root>/Product6'\r\n   *  Product: '<S1>/Divide2'\r\n   */\r\n  rtb_Divide = rtb_Filter * 2.0 * (1.0 / Vabc_gain) / rtb_Add2;\r\n\r\n  /* Sum: '<Root>/Sum11' incorporates:\r\n   *  Switch: '<S172>/Switch'\r\n   */\r\n  rtb_Integrator_l -= rtDW.Fcn1_j;\r\n\r\n  /* Product: '<Root>/Divide1' incorporates:\r\n   *  Constant: '<Root>/Constant9'\r\n   *  Constant: '<S2>/Constant5'\r\n   *  DiscreteIntegrator: '<S149>/Integrator'\r\n   *  Inport: '<Root>/Vabc_gain'\r\n   *  Product: '<Root>/Product1'\r\n   *  Product: '<Root>/Product7'\r\n   *  Product: '<S2>/Divide2'\r\n   *  Sum: '<Root>/Sum13'\r\n   *  Sum: '<S158>/Sum'\r\n   *  Switch: '<S166>/Switch'\r\n   */\r\n  rtb_Divide1 = ((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) + rtDW.Fcn1_l) *\r\n    2.0 * (1.0 / Vabc_gain) / rtb_Add2;\r\n\r\n  /* Sum: '<S13>/Add2' incorporates:\r\n   *  Gain: '<S13>/Gain1'\r\n   *  Inport: '<Root>/phase delay'\r\n   */\r\n  rtb_Add2 = 0.017453292519943295 * phasedelay + rtb_Mod1;\r\n\r\n  /* Outputs for Enabled SubSystem: '<S179>/Subsystem - pi//2 delay' incorporates:\r\n   *  EnablePort: '<S182>/Enable'\r\n   */\r\n  /* Fcn: '<S182>/Fcn' incorporates:\r\n   *  Fcn: '<S182>/Fcn1'\r\n   */\r\n  rtb_Divide_idx_0_tmp = cos(rtb_Add2);\r\n  rtb_Divide_idx_0_tmp_0 = sin(rtb_Add2);\r\n\r\n  /* Switch: '<S179>/Switch' incorporates:\r\n   *  Fcn: '<S182>/Fcn'\r\n   *  Fcn: '<S182>/Fcn1'\r\n   */\r\n  rtb_Add2 = rtb_Divide * rtb_Divide_idx_0_tmp_0 + rtb_Divide1 *\r\n    rtb_Divide_idx_0_tmp;\r\n  rtb_Divide = -rtb_Divide * rtb_Divide_idx_0_tmp + rtb_Divide1 *\r\n    rtb_Divide_idx_0_tmp_0;\r\n\r\n  /* End of Outputs for SubSystem: '<S179>/Subsystem - pi//2 delay' */\r\n  for (i = 0; i < 3; i++) {\r\n    /* Gain: '<S178>/Gain3' incorporates:\r\n     *  Switch: '<S179>/Switch'\r\n     */\r\n    rtb_Divide1 = rtConstP.Gain3_Gain[i + 3] * rtb_Divide +\r\n      rtConstP.Gain3_Gain[i] * rtb_Add2;\r\n\r\n    /* Saturate: '<Root>/Saturation' incorporates:\r\n     *  Gain: '<S178>/Gain3'\r\n     */\r\n    if (rtb_Divide1 > 0.95) {\r\n      rtb_Divide1 = 0.95;\r\n    } else if (rtb_Divide1 < -0.95) {\r\n      rtb_Divide1 = -0.95;\r\n    }\r\n\r\n    /* End of Saturate: '<Root>/Saturation' */\r\n\r\n    /* Outport: '<Root>/m_abc' */\r\n    m_abc[i] = rtb_Divide1;\r\n\r\n    /* Product: '<Root>/Product2' incorporates:\r\n     *  Constant: '<Root>/Constant2'\r\n     *  Gain: '<Root>/Gain'\r\n     *  Inport: '<Root>/CCR_max'\r\n     *  Sum: '<Root>/Add1'\r\n     */\r\n    rtb_Gain1[i] = (rtb_Divide1 + 1.0) * 0.5 * CCR_max;\r\n  }\r\n\r\n  /* Outport: '<Root>/PWMch1' */\r\n  PWMch1 = rtb_Gain1[0];\r\n\r\n  /* Outport: '<Root>/PWMch2' */\r\n  PWMch2 = rtb_Gain1[1];\r\n\r\n  /* Outport: '<Root>/PWMch3' */\r\n  PWMch3 = rtb_Gain1[2];\r\n\r\n  /* Outport: '<Root>/Vq_g' incorporates:\r\n   *  Switch: '<S166>/Switch'\r\n   */\r\n  Vq_g = rtDW.Fcn1_l;\r\n\r\n  /* Outport: '<Root>/Iq' incorporates:\r\n   *  Switch: '<S172>/Switch'\r\n   */\r\n  Iq = rtDW.Fcn1_j;\r\n\r\n  /* Outport: '<Root>/Vdc_cal' */\r\n  rtY.Vdc_cal = rtb_Filter;\r\n\r\n  /* Gain: '<S52>/Filter Coefficient' incorporates:\r\n   *  DiscreteIntegrator: '<S44>/Filter'\r\n   *  Gain: '<S42>/Derivative Gain'\r\n   *  Sum: '<S44>/SumD'\r\n   */\r\n  rtb_Divide = (0.0 - rtDW.Filter_DSTATE) * 100.0;\r\n\r\n  /* Sum: '<Root>/Add' incorporates:\r\n   *  Constant: '<Root>/w_ff'\r\n   *  DiscreteIntegrator: '<S49>/Integrator'\r\n   *  Gain: '<S54>/Proportional Gain'\r\n   *  Sum: '<S58>/Sum'\r\n   *  Switch: '<S166>/Switch'\r\n   */\r\n  rtb_Divide1 = ((10.0 * rtDW.Fcn1_l + rtDW.Integrator_DSTATE_f) + rtb_Divide) +\r\n    314.15926535897933;\r\n\r\n  /* Outport: '<Root>/Freq' incorporates:\r\n   *  Gain: '<Root>/Gain12'\r\n   */\r\n  Freq = 0.15915 * rtb_Divide1;\r\n\r\n  /* Outport: '<Root>/pi_out' */\r\n  rtY.pi_out = rtb_Saturation;\r\n\r\n  /* Outport: '<Root>/Theta_g' */\r\n  Theta_g = rtb_Mod1;\r\n\r\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */\r\n  rtDW.DiscreteTimeIntegrator_DSTATE += 0.0001 * rtb_Divide1;\r\n\r\n  /* Update for DiscreteIntegrator: '<S99>/Integrator' incorporates:\r\n   *  Gain: '<S96>/Integral Gain'\r\n   */\r\n  rtDW.Integrator_DSTATE += 100.0 * rtb_Sum8 * 0.0001;\r\n  if (rtDW.Integrator_DSTATE > 10.0) {\r\n    rtDW.Integrator_DSTATE = 10.0;\r\n  } else if (rtDW.Integrator_DSTATE < -10.0) {\r\n    rtDW.Integrator_DSTATE = -10.0;\r\n  }\r\n\r\n  /* End of Update for DiscreteIntegrator: '<S99>/Integrator' */\r\n\r\n  /* Update for DiscreteIntegrator: '<S149>/Integrator' incorporates:\r\n   *  Gain: '<S146>/Integral Gain'\r\n   */\r\n  rtDW.Integrator_DSTATE_e += 100.0 * rtb_Integrator_l * 0.0001;\r\n\r\n  /* Update for DiscreteIntegrator: '<S49>/Integrator' incorporates:\r\n   *  Gain: '<S46>/Integral Gain'\r\n   *  Switch: '<S166>/Switch'\r\n   */\r\n  rtDW.Integrator_DSTATE_f += 10000.0 * rtDW.Fcn1_l * 0.0001;\r\n\r\n  /* Update for DiscreteIntegrator: '<S44>/Filter' */\r\n  rtDW.Filter_DSTATE += 0.0001 * rtb_Divide;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid TPGCI_STM32_4_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"TPGCI_STM32_4.h","type":"header","group":"model","path":"P:\\Projects\\TPGCI\\MATLAB_Simulations\\MATLAB_Embedded\\TPGCI_STM32_4_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: TPGCI_STM32_4.h\r\n *\r\n * Code generated for Simulink model 'TPGCI_STM32_4'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Mon Mar 31 15:17:32 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: All passed\r\n */\r\n\r\n#ifndef TPGCI_STM32_4_h_\r\n#define TPGCI_STM32_4_h_\r\n#ifndef TPGCI_STM32_4_COMMON_INCLUDES_\r\n#define TPGCI_STM32_4_COMMON_INCLUDES_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#endif                                 /* TPGCI_STM32_4_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>/RMS Exp' */\r\ntypedef struct {\r\n  double rmsSquared;                   /* '<Root>/RMS Exp' */\r\n  bool rmsSquared_not_empty;           /* '<Root>/RMS Exp' */\r\n} DW_RMSExp;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  DW_RMSExp sf_RMSExp1;                /* '<Root>/RMS Exp1' */\r\n  DW_RMSExp sf_RMSExp;                 /* '<Root>/RMS Exp' */\r\n  double Fcn_n;                        /* '<S177>/Fcn' */\r\n  double Fcn1_h;                       /* '<S177>/Fcn1' */\r\n  double Fcn_k1;                       /* '<S176>/Fcn' */\r\n  double Fcn1_j;                       /* '<S176>/Fcn1' */\r\n  double Fcn_a;                        /* '<S171>/Fcn' */\r\n  double Fcn1_ic;                      /* '<S171>/Fcn1' */\r\n  double Fcn_nk;                       /* '<S170>/Fcn' */\r\n  double Fcn1_l;                       /* '<S170>/Fcn1' */\r\n  double DiscreteTimeIntegrator_DSTATE;/* '<Root>/Discrete-Time Integrator' */\r\n  double Integrator_DSTATE;            /* '<S99>/Integrator' */\r\n  double Integrator_DSTATE_e;          /* '<S149>/Integrator' */\r\n  double Integrator_DSTATE_f;          /* '<S49>/Integrator' */\r\n  double Filter_DSTATE;                /* '<S44>/Filter' */\r\n} DW;\r\n\r\n/* Invariant block signals (default storage) */\r\ntypedef struct {\r\n  const uint8_t Compare_i;             /* '<S169>/Compare' */\r\n  const uint8_t Compare_b;             /* '<S175>/Compare' */\r\n} ConstB;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Pooled Parameter (Expression: [ 1   -1/2   -1/2; 0   sqrt(3)/2   -sqrt(3)/2; 1/2  1/2  1/2 ] )\r\n   * Referenced by:\r\n   *   '<S167>/Gain3'\r\n   *   '<S173>/Gain3'\r\n   */\r\n  double pooled5[9];\r\n\r\n  /* Expression: [ 1   0   1; -1/2  sqrt(3)/2   1; -1/2  -sqrt(3)/2  1 ]\r\n   * Referenced by: '<S178>/Gain3'\r\n   */\r\n  double Gain3_Gain[9];\r\n} ConstP;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  double pi_out;                       /* '<Root>/pi_out' */\r\n  double Vdc_cal;                      /* '<Root>/Vdc_cal' */\r\n} ExtY;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\nextern const ConstB rtConstB;          /* constant block i/o */\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstP rtConstP;\r\n\r\n/* Model entry point functions */\r\nextern void TPGCI_STM32_4_initialize(void);\r\nextern void TPGCI_STM32_4_step(void);\r\n\r\n/* Exported data declaration */\r\n\r\n/* Volatile memory section */\r\n/* Declaration for custom storage class: Volatile */\r\nextern volatile double CCR_max;        /* '<Root>/CCR_max' */\r\nextern volatile double Freq;           /* '<Root>/Freq' */\r\nextern volatile double Ia_g;           /* '<Root>/Ia_g' */\r\nextern volatile double Iabc_gain;      /* '<Root>/Iabc_gain' */\r\nextern volatile double Ib_g;           /* '<Root>/Ib_g' */\r\nextern volatile double Ic_g;           /* '<Root>/Ic_g' */\r\nextern volatile double Id;             /* '<Root>/Id' */\r\nextern volatile double Id_ref;         /* '<Root>/Id_ref' */\r\nextern volatile double Iq;             /* '<Root>/Iq' */\r\nextern volatile double PWMch1;         /* '<Root>/PWMch1' */\r\nextern volatile double PWMch2;         /* '<Root>/PWMch2' */\r\nextern volatile double PWMch3;         /* '<Root>/PWMch3' */\r\nextern volatile double Theta_g;        /* '<Root>/Theta_g' */\r\nextern volatile double VDC;            /* '<Root>/VDC' */\r\nextern volatile double Va_g;           /* '<Root>/Va_g' */\r\nextern volatile double Vabc_gain;      /* '<Root>/Vabc_gain' */\r\nextern volatile double Vb_g;           /* '<Root>/Vb_g' */\r\nextern volatile double Vc_g;           /* '<Root>/Vc_g' */\r\nextern volatile double Vd_g;           /* '<Root>/Vd_g' */\r\nextern volatile double Vdc_gain;       /* '<Root>/Vdc_gain' */\r\nextern volatile double Vq_g;           /* '<Root>/Vq_g' */\r\nextern volatile double m_abc[3];       /* '<Root>/m_abc' */\r\nextern volatile double phasedelay;     /* '<Root>/phase delay' */\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S104>/Proportional Gain' : Eliminated nontunable gain of 1\r\n * Block '<S154>/Proportional Gain' : Eliminated nontunable gain of 1\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'TPGCI_STM32_4'\r\n * '<S1>'   : 'TPGCI_STM32_4/1//Vabc_gain'\r\n * '<S2>'   : 'TPGCI_STM32_4/1//Vabc_gain1'\r\n * '<S3>'   : 'TPGCI_STM32_4/1//Vdc_gain'\r\n * '<S4>'   : 'TPGCI_STM32_4/1//Vdc_gain1'\r\n * '<S5>'   : 'TPGCI_STM32_4/PID Controller1'\r\n * '<S6>'   : 'TPGCI_STM32_4/PID Controller4'\r\n * '<S7>'   : 'TPGCI_STM32_4/PID Controller5'\r\n * '<S8>'   : 'TPGCI_STM32_4/RMS Exp'\r\n * '<S9>'   : 'TPGCI_STM32_4/RMS Exp1'\r\n * '<S10>'  : 'TPGCI_STM32_4/abc to dq0'\r\n * '<S11>'  : 'TPGCI_STM32_4/abc to dq1'\r\n * '<S12>'  : 'TPGCI_STM32_4/dq0 to abc1'\r\n * '<S13>'  : 'TPGCI_STM32_4/theta+delay'\r\n * '<S14>'  : 'TPGCI_STM32_4/wl*id'\r\n * '<S15>'  : 'TPGCI_STM32_4/wl*iq'\r\n * '<S16>'  : 'TPGCI_STM32_4/PID Controller1/Anti-windup'\r\n * '<S17>'  : 'TPGCI_STM32_4/PID Controller1/D Gain'\r\n * '<S18>'  : 'TPGCI_STM32_4/PID Controller1/External Derivative'\r\n * '<S19>'  : 'TPGCI_STM32_4/PID Controller1/Filter'\r\n * '<S20>'  : 'TPGCI_STM32_4/PID Controller1/Filter ICs'\r\n * '<S21>'  : 'TPGCI_STM32_4/PID Controller1/I Gain'\r\n * '<S22>'  : 'TPGCI_STM32_4/PID Controller1/Ideal P Gain'\r\n * '<S23>'  : 'TPGCI_STM32_4/PID Controller1/Ideal P Gain Fdbk'\r\n * '<S24>'  : 'TPGCI_STM32_4/PID Controller1/Integrator'\r\n * '<S25>'  : 'TPGCI_STM32_4/PID Controller1/Integrator ICs'\r\n * '<S26>'  : 'TPGCI_STM32_4/PID Controller1/N Copy'\r\n * '<S27>'  : 'TPGCI_STM32_4/PID Controller1/N Gain'\r\n * '<S28>'  : 'TPGCI_STM32_4/PID Controller1/P Copy'\r\n * '<S29>'  : 'TPGCI_STM32_4/PID Controller1/Parallel P Gain'\r\n * '<S30>'  : 'TPGCI_STM32_4/PID Controller1/Reset Signal'\r\n * '<S31>'  : 'TPGCI_STM32_4/PID Controller1/Saturation'\r\n * '<S32>'  : 'TPGCI_STM32_4/PID Controller1/Saturation Fdbk'\r\n * '<S33>'  : 'TPGCI_STM32_4/PID Controller1/Sum'\r\n * '<S34>'  : 'TPGCI_STM32_4/PID Controller1/Sum Fdbk'\r\n * '<S35>'  : 'TPGCI_STM32_4/PID Controller1/Tracking Mode'\r\n * '<S36>'  : 'TPGCI_STM32_4/PID Controller1/Tracking Mode Sum'\r\n * '<S37>'  : 'TPGCI_STM32_4/PID Controller1/Tsamp - Integral'\r\n * '<S38>'  : 'TPGCI_STM32_4/PID Controller1/Tsamp - Ngain'\r\n * '<S39>'  : 'TPGCI_STM32_4/PID Controller1/postSat Signal'\r\n * '<S40>'  : 'TPGCI_STM32_4/PID Controller1/preSat Signal'\r\n * '<S41>'  : 'TPGCI_STM32_4/PID Controller1/Anti-windup/Passthrough'\r\n * '<S42>'  : 'TPGCI_STM32_4/PID Controller1/D Gain/Internal Parameters'\r\n * '<S43>'  : 'TPGCI_STM32_4/PID Controller1/External Derivative/Error'\r\n * '<S44>'  : 'TPGCI_STM32_4/PID Controller1/Filter/Disc. Forward Euler Filter'\r\n * '<S45>'  : 'TPGCI_STM32_4/PID Controller1/Filter ICs/Internal IC - Filter'\r\n * '<S46>'  : 'TPGCI_STM32_4/PID Controller1/I Gain/Internal Parameters'\r\n * '<S47>'  : 'TPGCI_STM32_4/PID Controller1/Ideal P Gain/Passthrough'\r\n * '<S48>'  : 'TPGCI_STM32_4/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n * '<S49>'  : 'TPGCI_STM32_4/PID Controller1/Integrator/Discrete'\r\n * '<S50>'  : 'TPGCI_STM32_4/PID Controller1/Integrator ICs/Internal IC'\r\n * '<S51>'  : 'TPGCI_STM32_4/PID Controller1/N Copy/Disabled'\r\n * '<S52>'  : 'TPGCI_STM32_4/PID Controller1/N Gain/Internal Parameters'\r\n * '<S53>'  : 'TPGCI_STM32_4/PID Controller1/P Copy/Disabled'\r\n * '<S54>'  : 'TPGCI_STM32_4/PID Controller1/Parallel P Gain/Internal Parameters'\r\n * '<S55>'  : 'TPGCI_STM32_4/PID Controller1/Reset Signal/Disabled'\r\n * '<S56>'  : 'TPGCI_STM32_4/PID Controller1/Saturation/Passthrough'\r\n * '<S57>'  : 'TPGCI_STM32_4/PID Controller1/Saturation Fdbk/Disabled'\r\n * '<S58>'  : 'TPGCI_STM32_4/PID Controller1/Sum/Sum_PID'\r\n * '<S59>'  : 'TPGCI_STM32_4/PID Controller1/Sum Fdbk/Disabled'\r\n * '<S60>'  : 'TPGCI_STM32_4/PID Controller1/Tracking Mode/Disabled'\r\n * '<S61>'  : 'TPGCI_STM32_4/PID Controller1/Tracking Mode Sum/Passthrough'\r\n * '<S62>'  : 'TPGCI_STM32_4/PID Controller1/Tsamp - Integral/TsSignalSpecification'\r\n * '<S63>'  : 'TPGCI_STM32_4/PID Controller1/Tsamp - Ngain/Passthrough'\r\n * '<S64>'  : 'TPGCI_STM32_4/PID Controller1/postSat Signal/Forward_Path'\r\n * '<S65>'  : 'TPGCI_STM32_4/PID Controller1/preSat Signal/Forward_Path'\r\n * '<S66>'  : 'TPGCI_STM32_4/PID Controller4/Anti-windup'\r\n * '<S67>'  : 'TPGCI_STM32_4/PID Controller4/D Gain'\r\n * '<S68>'  : 'TPGCI_STM32_4/PID Controller4/External Derivative'\r\n * '<S69>'  : 'TPGCI_STM32_4/PID Controller4/Filter'\r\n * '<S70>'  : 'TPGCI_STM32_4/PID Controller4/Filter ICs'\r\n * '<S71>'  : 'TPGCI_STM32_4/PID Controller4/I Gain'\r\n * '<S72>'  : 'TPGCI_STM32_4/PID Controller4/Ideal P Gain'\r\n * '<S73>'  : 'TPGCI_STM32_4/PID Controller4/Ideal P Gain Fdbk'\r\n * '<S74>'  : 'TPGCI_STM32_4/PID Controller4/Integrator'\r\n * '<S75>'  : 'TPGCI_STM32_4/PID Controller4/Integrator ICs'\r\n * '<S76>'  : 'TPGCI_STM32_4/PID Controller4/N Copy'\r\n * '<S77>'  : 'TPGCI_STM32_4/PID Controller4/N Gain'\r\n * '<S78>'  : 'TPGCI_STM32_4/PID Controller4/P Copy'\r\n * '<S79>'  : 'TPGCI_STM32_4/PID Controller4/Parallel P Gain'\r\n * '<S80>'  : 'TPGCI_STM32_4/PID Controller4/Reset Signal'\r\n * '<S81>'  : 'TPGCI_STM32_4/PID Controller4/Saturation'\r\n * '<S82>'  : 'TPGCI_STM32_4/PID Controller4/Saturation Fdbk'\r\n * '<S83>'  : 'TPGCI_STM32_4/PID Controller4/Sum'\r\n * '<S84>'  : 'TPGCI_STM32_4/PID Controller4/Sum Fdbk'\r\n * '<S85>'  : 'TPGCI_STM32_4/PID Controller4/Tracking Mode'\r\n * '<S86>'  : 'TPGCI_STM32_4/PID Controller4/Tracking Mode Sum'\r\n * '<S87>'  : 'TPGCI_STM32_4/PID Controller4/Tsamp - Integral'\r\n * '<S88>'  : 'TPGCI_STM32_4/PID Controller4/Tsamp - Ngain'\r\n * '<S89>'  : 'TPGCI_STM32_4/PID Controller4/postSat Signal'\r\n * '<S90>'  : 'TPGCI_STM32_4/PID Controller4/preSat Signal'\r\n * '<S91>'  : 'TPGCI_STM32_4/PID Controller4/Anti-windup/Passthrough'\r\n * '<S92>'  : 'TPGCI_STM32_4/PID Controller4/D Gain/Disabled'\r\n * '<S93>'  : 'TPGCI_STM32_4/PID Controller4/External Derivative/Disabled'\r\n * '<S94>'  : 'TPGCI_STM32_4/PID Controller4/Filter/Disabled'\r\n * '<S95>'  : 'TPGCI_STM32_4/PID Controller4/Filter ICs/Disabled'\r\n * '<S96>'  : 'TPGCI_STM32_4/PID Controller4/I Gain/Internal Parameters'\r\n * '<S97>'  : 'TPGCI_STM32_4/PID Controller4/Ideal P Gain/Passthrough'\r\n * '<S98>'  : 'TPGCI_STM32_4/PID Controller4/Ideal P Gain Fdbk/Disabled'\r\n * '<S99>'  : 'TPGCI_STM32_4/PID Controller4/Integrator/Discrete'\r\n * '<S100>' : 'TPGCI_STM32_4/PID Controller4/Integrator ICs/Internal IC'\r\n * '<S101>' : 'TPGCI_STM32_4/PID Controller4/N Copy/Disabled wSignal Specification'\r\n * '<S102>' : 'TPGCI_STM32_4/PID Controller4/N Gain/Disabled'\r\n * '<S103>' : 'TPGCI_STM32_4/PID Controller4/P Copy/Disabled'\r\n * '<S104>' : 'TPGCI_STM32_4/PID Controller4/Parallel P Gain/Internal Parameters'\r\n * '<S105>' : 'TPGCI_STM32_4/PID Controller4/Reset Signal/Disabled'\r\n * '<S106>' : 'TPGCI_STM32_4/PID Controller4/Saturation/Enabled'\r\n * '<S107>' : 'TPGCI_STM32_4/PID Controller4/Saturation Fdbk/Disabled'\r\n * '<S108>' : 'TPGCI_STM32_4/PID Controller4/Sum/Sum_PI'\r\n * '<S109>' : 'TPGCI_STM32_4/PID Controller4/Sum Fdbk/Disabled'\r\n * '<S110>' : 'TPGCI_STM32_4/PID Controller4/Tracking Mode/Disabled'\r\n * '<S111>' : 'TPGCI_STM32_4/PID Controller4/Tracking Mode Sum/Passthrough'\r\n * '<S112>' : 'TPGCI_STM32_4/PID Controller4/Tsamp - Integral/TsSignalSpecification'\r\n * '<S113>' : 'TPGCI_STM32_4/PID Controller4/Tsamp - Ngain/Passthrough'\r\n * '<S114>' : 'TPGCI_STM32_4/PID Controller4/postSat Signal/Forward_Path'\r\n * '<S115>' : 'TPGCI_STM32_4/PID Controller4/preSat Signal/Forward_Path'\r\n * '<S116>' : 'TPGCI_STM32_4/PID Controller5/Anti-windup'\r\n * '<S117>' : 'TPGCI_STM32_4/PID Controller5/D Gain'\r\n * '<S118>' : 'TPGCI_STM32_4/PID Controller5/External Derivative'\r\n * '<S119>' : 'TPGCI_STM32_4/PID Controller5/Filter'\r\n * '<S120>' : 'TPGCI_STM32_4/PID Controller5/Filter ICs'\r\n * '<S121>' : 'TPGCI_STM32_4/PID Controller5/I Gain'\r\n * '<S122>' : 'TPGCI_STM32_4/PID Controller5/Ideal P Gain'\r\n * '<S123>' : 'TPGCI_STM32_4/PID Controller5/Ideal P Gain Fdbk'\r\n * '<S124>' : 'TPGCI_STM32_4/PID Controller5/Integrator'\r\n * '<S125>' : 'TPGCI_STM32_4/PID Controller5/Integrator ICs'\r\n * '<S126>' : 'TPGCI_STM32_4/PID Controller5/N Copy'\r\n * '<S127>' : 'TPGCI_STM32_4/PID Controller5/N Gain'\r\n * '<S128>' : 'TPGCI_STM32_4/PID Controller5/P Copy'\r\n * '<S129>' : 'TPGCI_STM32_4/PID Controller5/Parallel P Gain'\r\n * '<S130>' : 'TPGCI_STM32_4/PID Controller5/Reset Signal'\r\n * '<S131>' : 'TPGCI_STM32_4/PID Controller5/Saturation'\r\n * '<S132>' : 'TPGCI_STM32_4/PID Controller5/Saturation Fdbk'\r\n * '<S133>' : 'TPGCI_STM32_4/PID Controller5/Sum'\r\n * '<S134>' : 'TPGCI_STM32_4/PID Controller5/Sum Fdbk'\r\n * '<S135>' : 'TPGCI_STM32_4/PID Controller5/Tracking Mode'\r\n * '<S136>' : 'TPGCI_STM32_4/PID Controller5/Tracking Mode Sum'\r\n * '<S137>' : 'TPGCI_STM32_4/PID Controller5/Tsamp - Integral'\r\n * '<S138>' : 'TPGCI_STM32_4/PID Controller5/Tsamp - Ngain'\r\n * '<S139>' : 'TPGCI_STM32_4/PID Controller5/postSat Signal'\r\n * '<S140>' : 'TPGCI_STM32_4/PID Controller5/preSat Signal'\r\n * '<S141>' : 'TPGCI_STM32_4/PID Controller5/Anti-windup/Passthrough'\r\n * '<S142>' : 'TPGCI_STM32_4/PID Controller5/D Gain/Disabled'\r\n * '<S143>' : 'TPGCI_STM32_4/PID Controller5/External Derivative/Disabled'\r\n * '<S144>' : 'TPGCI_STM32_4/PID Controller5/Filter/Disabled'\r\n * '<S145>' : 'TPGCI_STM32_4/PID Controller5/Filter ICs/Disabled'\r\n * '<S146>' : 'TPGCI_STM32_4/PID Controller5/I Gain/Internal Parameters'\r\n * '<S147>' : 'TPGCI_STM32_4/PID Controller5/Ideal P Gain/Passthrough'\r\n * '<S148>' : 'TPGCI_STM32_4/PID Controller5/Ideal P Gain Fdbk/Disabled'\r\n * '<S149>' : 'TPGCI_STM32_4/PID Controller5/Integrator/Discrete'\r\n * '<S150>' : 'TPGCI_STM32_4/PID Controller5/Integrator ICs/Internal IC'\r\n * '<S151>' : 'TPGCI_STM32_4/PID Controller5/N Copy/Disabled wSignal Specification'\r\n * '<S152>' : 'TPGCI_STM32_4/PID Controller5/N Gain/Disabled'\r\n * '<S153>' : 'TPGCI_STM32_4/PID Controller5/P Copy/Disabled'\r\n * '<S154>' : 'TPGCI_STM32_4/PID Controller5/Parallel P Gain/Internal Parameters'\r\n * '<S155>' : 'TPGCI_STM32_4/PID Controller5/Reset Signal/Disabled'\r\n * '<S156>' : 'TPGCI_STM32_4/PID Controller5/Saturation/Passthrough'\r\n * '<S157>' : 'TPGCI_STM32_4/PID Controller5/Saturation Fdbk/Disabled'\r\n * '<S158>' : 'TPGCI_STM32_4/PID Controller5/Sum/Sum_PI'\r\n * '<S159>' : 'TPGCI_STM32_4/PID Controller5/Sum Fdbk/Disabled'\r\n * '<S160>' : 'TPGCI_STM32_4/PID Controller5/Tracking Mode/Disabled'\r\n * '<S161>' : 'TPGCI_STM32_4/PID Controller5/Tracking Mode Sum/Passthrough'\r\n * '<S162>' : 'TPGCI_STM32_4/PID Controller5/Tsamp - Integral/TsSignalSpecification'\r\n * '<S163>' : 'TPGCI_STM32_4/PID Controller5/Tsamp - Ngain/Passthrough'\r\n * '<S164>' : 'TPGCI_STM32_4/PID Controller5/postSat Signal/Forward_Path'\r\n * '<S165>' : 'TPGCI_STM32_4/PID Controller5/preSat Signal/Forward_Path'\r\n * '<S166>' : 'TPGCI_STM32_4/abc to dq0/Alpha-Beta-Zero to dq0'\r\n * '<S167>' : 'TPGCI_STM32_4/abc to dq0/abc to Alpha-Beta-Zero'\r\n * '<S168>' : 'TPGCI_STM32_4/abc to dq0/Alpha-Beta-Zero to dq0/Compare To Constant'\r\n * '<S169>' : 'TPGCI_STM32_4/abc to dq0/Alpha-Beta-Zero to dq0/Compare To Constant1'\r\n * '<S170>' : 'TPGCI_STM32_4/abc to dq0/Alpha-Beta-Zero to dq0/Subsystem - pi//2 delay'\r\n * '<S171>' : 'TPGCI_STM32_4/abc to dq0/Alpha-Beta-Zero to dq0/Subsystem1'\r\n * '<S172>' : 'TPGCI_STM32_4/abc to dq1/Alpha-Beta-Zero to dq0'\r\n * '<S173>' : 'TPGCI_STM32_4/abc to dq1/abc to Alpha-Beta-Zero'\r\n * '<S174>' : 'TPGCI_STM32_4/abc to dq1/Alpha-Beta-Zero to dq0/Compare To Constant'\r\n * '<S175>' : 'TPGCI_STM32_4/abc to dq1/Alpha-Beta-Zero to dq0/Compare To Constant1'\r\n * '<S176>' : 'TPGCI_STM32_4/abc to dq1/Alpha-Beta-Zero to dq0/Subsystem - pi//2 delay'\r\n * '<S177>' : 'TPGCI_STM32_4/abc to dq1/Alpha-Beta-Zero to dq0/Subsystem1'\r\n * '<S178>' : 'TPGCI_STM32_4/dq0 to abc1/Alpha-Beta-Zero to abc'\r\n * '<S179>' : 'TPGCI_STM32_4/dq0 to abc1/dq0 to Alpha-Beta-Zero'\r\n * '<S180>' : 'TPGCI_STM32_4/dq0 to abc1/dq0 to Alpha-Beta-Zero/Compare To Constant'\r\n * '<S181>' : 'TPGCI_STM32_4/dq0 to abc1/dq0 to Alpha-Beta-Zero/Compare To Constant1'\r\n * '<S182>' : 'TPGCI_STM32_4/dq0 to abc1/dq0 to Alpha-Beta-Zero/Subsystem - pi//2 delay'\r\n * '<S183>' : 'TPGCI_STM32_4/dq0 to abc1/dq0 to Alpha-Beta-Zero/Subsystem1'\r\n */\r\n#endif                                 /* TPGCI_STM32_4_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"TPGCI_STM32_4_data.c","type":"source","group":"data","path":"P:\\Projects\\TPGCI\\MATLAB_Simulations\\MATLAB_Embedded\\TPGCI_STM32_4_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: TPGCI_STM32_4_data.c\r\n *\r\n * Code generated for Simulink model 'TPGCI_STM32_4'.\r\n *\r\n * Model version                  : 1.2\r\n * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023\r\n * C/C++ source code generated on : Mon Mar 31 15:17:32 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: All passed\r\n */\r\n\r\n#include \"TPGCI_STM32_4.h\"\r\n\r\n/* Invariant block signals (default storage) */\r\nconst ConstB rtConstB = {\r\n  1U,                                  /* '<S169>/Compare' */\r\n  1U                                   /* '<S175>/Compare' */\r\n};\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstP rtConstP = {\r\n  /* Pooled Parameter (Expression: [ 1   -1/2   -1/2; 0   sqrt(3)/2   -sqrt(3)/2; 1/2  1/2  1/2 ] )\r\n   * Referenced by:\r\n   *   '<S167>/Gain3'\r\n   *   '<S173>/Gain3'\r\n   */\r\n  { 1.0, 0.0, 0.5, -0.5, 0.8660254037844386, 0.5, -0.5, -0.8660254037844386, 0.5\r\n  },\r\n\r\n  /* Expression: [ 1   0   1; -1/2  sqrt(3)/2   1; -1/2  -sqrt(3)/2  1 ]\r\n   * Referenced by: '<S178>/Gain3'\r\n   */\r\n  { 1.0, -0.5, -0.5, 0.0, 0.8660254037844386, -0.8660254037844386, 1.0, 1.0, 1.0\r\n  }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};