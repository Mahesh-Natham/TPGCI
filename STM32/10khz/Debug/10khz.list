
10khz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c27c  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800c550  0800c550  0000d550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c7e8  0800c7e8  0000d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800c7ec  0800c7ec  0000d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000078  24000000  0800c7f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006e8  24000078  0800c868  0000e078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000760  0800c868  0000e760  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000159b3  00000000  00000000  0000e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000028c5  00000000  00000000  00023a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012d0  00000000  00000000  00026320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e7b  00000000  00000000  000275f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003466f  00000000  00000000  0002846b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017fd5  00000000  00000000  0005cada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d310  00000000  00000000  00074aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d1dbf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005424  00000000  00000000  001d1e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  001d7228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c534 	.word	0x0800c534

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800c534 	.word	0x0800c534

08000310 <applyLowPassFilter>:
#include "butterworth_filter.h"

float applyLowPassFilter(float input, float* inputBuffer, float* outputBuffer) {
 8000310:	b480      	push	{r7}
 8000312:	b087      	sub	sp, #28
 8000314:	af00      	add	r7, sp, #0
 8000316:	ed87 0a03 	vstr	s0, [r7, #12]
 800031a:	60b8      	str	r0, [r7, #8]
 800031c:	6079      	str	r1, [r7, #4]
    // Shift previous inputs and outputs
    inputBuffer[2] = inputBuffer[1];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3308      	adds	r3, #8
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	601a      	str	r2, [r3, #0]
    inputBuffer[1] = inputBuffer[0];
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	3304      	adds	r3, #4
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	601a      	str	r2, [r3, #0]
    inputBuffer[0] = input;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

    outputBuffer[2] = outputBuffer[1];
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3308      	adds	r3, #8
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	6852      	ldr	r2, [r2, #4]
 8000340:	601a      	str	r2, [r3, #0]
    outputBuffer[1] = outputBuffer[0];
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3304      	adds	r3, #4
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	601a      	str	r2, [r3, #0]

    // Calculate the filtered output
    float output = B0 * inputBuffer[0] + B1 * inputBuffer[1] + B2 * inputBuffer[2]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	edd3 7a00 	vldr	s15, [r3]
 8000352:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80003c8 <applyLowPassFilter+0xb8>
 8000356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3304      	adds	r3, #4
 800035e:	edd3 7a00 	vldr	s15, [r3]
 8000362:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80003cc <applyLowPassFilter+0xbc>
 8000366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800036a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3308      	adds	r3, #8
 8000372:	edd3 7a00 	vldr	s15, [r3]
 8000376:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80003c8 <applyLowPassFilter+0xb8>
 800037a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800037e:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - A1 * outputBuffer[1] - A2 * outputBuffer[2];
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3304      	adds	r3, #4
 8000386:	edd3 7a00 	vldr	s15, [r3]
 800038a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80003d0 <applyLowPassFilter+0xc0>
 800038e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3308      	adds	r3, #8
 800039a:	edd3 7a00 	vldr	s15, [r3]
 800039e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80003d4 <applyLowPassFilter+0xc4>
 80003a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float output = B0 * inputBuffer[0] + B1 * inputBuffer[1] + B2 * inputBuffer[2]
 80003a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003aa:	edc7 7a05 	vstr	s15, [r7, #20]

    outputBuffer[0] = output;  // Store current output for next iteration
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	601a      	str	r2, [r3, #0]

    return output;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	ee07 3a90 	vmov	s15, r3
}
 80003ba:	eeb0 0a67 	vmov.f32	s0, s15
 80003be:	371c      	adds	r7, #28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	3a77a513 	.word	0x3a77a513
 80003cc:	3af7a513 	.word	0x3af7a513
 80003d0:	3ff4a234 	.word	0x3ff4a234
 80003d4:	3f6a3c21 	.word	0x3f6a3c21

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003dc:	f000 fdd0 	bl	8000f80 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f001 f9d2 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f83a 	bl	800045c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003e8:	f000 f8a8 	bl	800053c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 fbc0 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 80003f0:	f000 fb8e 	bl	8000b10 <MX_DMA_Init>
  MX_ADC1_Init();
 80003f4:	f000 f8d2 	bl	800059c <MX_ADC1_Init>
  MX_ADC2_Init();
 80003f8:	f000 f96c 	bl	80006d4 <MX_ADC2_Init>
  MX_ADC3_Init();
 80003fc:	f000 f9f4 	bl	80007e8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000400:	f000 fa74 	bl	80008ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000404:	f000 fb36 	bl	8000a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <main+0x64>)
 800040a:	f009 faad 	bl	8009968 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800040e:	480c      	ldr	r0, [pc, #48]	@ (8000440 <main+0x68>)
 8000410:	f009 faaa 	bl	8009968 <HAL_TIM_Base_Start_IT>

  // Start the ADC in DMA mode, with 3 channels
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)VoltageadcBuffer, 3);
 8000414:	2203      	movs	r2, #3
 8000416:	490b      	ldr	r1, [pc, #44]	@ (8000444 <main+0x6c>)
 8000418:	480b      	ldr	r0, [pc, #44]	@ (8000448 <main+0x70>)
 800041a:	f001 ff8b 	bl	8002334 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)CurrentadcBuffer, 3);
 800041e:	2203      	movs	r2, #3
 8000420:	490a      	ldr	r1, [pc, #40]	@ (800044c <main+0x74>)
 8000422:	480b      	ldr	r0, [pc, #44]	@ (8000450 <main+0x78>)
 8000424:	f001 ff86 	bl	8002334 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)DCSenseBuffer, 2);
 8000428:	2202      	movs	r2, #2
 800042a:	490a      	ldr	r1, [pc, #40]	@ (8000454 <main+0x7c>)
 800042c:	480a      	ldr	r0, [pc, #40]	@ (8000458 <main+0x80>)
 800042e:	f001 ff81 	bl	8002334 <HAL_ADC_Start_DMA>

  TPGCI_STM32_4_initialize();
 8000432:	f00b f8d9 	bl	800b5e8 <TPGCI_STM32_4_initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000436:	bf00      	nop
 8000438:	e7fd      	b.n	8000436 <main+0x5e>
 800043a:	bf00      	nop
 800043c:	2400034c 	.word	0x2400034c
 8000440:	24000398 	.word	0x24000398
 8000444:	24000404 	.word	0x24000404
 8000448:	24000094 	.word	0x24000094
 800044c:	2400040c 	.word	0x2400040c
 8000450:	24000104 	.word	0x24000104
 8000454:	24000414 	.word	0x24000414
 8000458:	24000174 	.word	0x24000174

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b09c      	sub	sp, #112	@ 0x70
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000466:	224c      	movs	r2, #76	@ 0x4c
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f00b f8c3 	bl	800b5f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2220      	movs	r2, #32
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f00b f8bd 	bl	800b5f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800047c:	2002      	movs	r0, #2
 800047e:	f005 feab 	bl	80061d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000482:	2300      	movs	r3, #0
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	4b2c      	ldr	r3, [pc, #176]	@ (8000538 <SystemClock_Config+0xdc>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a2b      	ldr	r2, [pc, #172]	@ (8000538 <SystemClock_Config+0xdc>)
 800048c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b29      	ldr	r3, [pc, #164]	@ (8000538 <SystemClock_Config+0xdc>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800049e:	bf00      	nop
 80004a0:	4b25      	ldr	r3, [pc, #148]	@ (8000538 <SystemClock_Config+0xdc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004ac:	d1f8      	bne.n	80004a0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	2302      	movs	r3, #2
 80004b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004b6:	2340      	movs	r3, #64	@ 0x40
 80004b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ba:	2302      	movs	r3, #2
 80004bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004be:	2300      	movs	r3, #0
 80004c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004c2:	2304      	movs	r3, #4
 80004c4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80004c6:	2322      	movs	r3, #34	@ 0x22
 80004c8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004ca:	2301      	movs	r3, #1
 80004cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ce:	2304      	movs	r3, #4
 80004d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004d6:	230c      	movs	r3, #12
 80004d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004da:	2300      	movs	r3, #0
 80004dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80004de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e8:	4618      	mov	r0, r3
 80004ea:	f005 feaf 	bl	800624c <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004f4:	f000 fd70 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f8:	233f      	movs	r3, #63	@ 0x3f
 80004fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fc:	2303      	movs	r3, #3
 80004fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000504:	2308      	movs	r3, #8
 8000506:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000508:	2340      	movs	r3, #64	@ 0x40
 800050a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800050c:	2340      	movs	r3, #64	@ 0x40
 800050e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000514:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000516:	2340      	movs	r3, #64	@ 0x40
 8000518:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2103      	movs	r1, #3
 800051e:	4618      	mov	r0, r3
 8000520:	f006 fa6e 	bl	8006a00 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800052a:	f000 fd55 	bl	8000fd8 <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3770      	adds	r7, #112	@ 0x70
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	58024800 	.word	0x58024800

0800053c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0ae      	sub	sp, #184	@ 0xb8
 8000540:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	22b8      	movs	r2, #184	@ 0xb8
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f00b f854 	bl	800b5f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800054e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000552:	f04f 0300 	mov.w	r3, #0
 8000556:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800055a:	2304      	movs	r3, #4
 800055c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800055e:	230c      	movs	r3, #12
 8000560:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000562:	2302      	movs	r3, #2
 8000564:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000566:	2302      	movs	r3, #2
 8000568:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800056e:	23c0      	movs	r3, #192	@ 0xc0
 8000570:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4618      	mov	r0, r3
 8000584:	f006 fdb2 	bl	80070ec <HAL_RCCEx_PeriphCLKConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800058e:	f000 fd23 	bl	8000fd8 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	37b8      	adds	r7, #184	@ 0xb8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	@ 0x30
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2224      	movs	r2, #36	@ 0x24
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f00b f81e 	bl	800b5f6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ba:	4b41      	ldr	r3, [pc, #260]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005bc:	4a41      	ldr	r2, [pc, #260]	@ (80006c4 <MX_ADC1_Init+0x128>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005c0:	4b3f      	ldr	r3, [pc, #252]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80005c6:	4b3e      	ldr	r3, [pc, #248]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005cc:	4b3c      	ldr	r3, [pc, #240]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005d2:	4b3b      	ldr	r3, [pc, #236]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d8:	4b39      	ldr	r3, [pc, #228]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005de:	4b38      	ldr	r3, [pc, #224]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80005e4:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80005f2:	4b33      	ldr	r3, [pc, #204]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005f4:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80005f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005fa:	4b31      	ldr	r3, [pc, #196]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80005fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000600:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000602:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_ADC1_Init+0x124>)
 8000604:	2203      	movs	r2, #3
 8000606:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <MX_ADC1_Init+0x124>)
 800060a:	2200      	movs	r2, #0
 800060c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0x124>)
 8000610:	2200      	movs	r2, #0
 8000612:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <MX_ADC1_Init+0x124>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0x124>)
 800061e:	2201      	movs	r2, #1
 8000620:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000622:	4827      	ldr	r0, [pc, #156]	@ (80006c0 <MX_ADC1_Init+0x124>)
 8000624:	f001 fc7e 	bl	8001f24 <HAL_ADC_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800062e:	f000 fcd3 	bl	8000fd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000636:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063a:	4619      	mov	r1, r3
 800063c:	4820      	ldr	r0, [pc, #128]	@ (80006c0 <MX_ADC1_Init+0x124>)
 800063e:	f003 f8e5 	bl	800380c <HAL_ADCEx_MultiModeConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000648:	f000 fcc6 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0x12c>)
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2306      	movs	r3, #6
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000658:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800065c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800065e:	2304      	movs	r3, #4
 8000660:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4813      	ldr	r0, [pc, #76]	@ (80006c0 <MX_ADC1_Init+0x124>)
 8000672:	f002 f993 	bl	800299c <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800067c:	f000 fcac 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_ADC1_Init+0x130>)
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000684:	230c      	movs	r3, #12
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <MX_ADC1_Init+0x124>)
 800068e:	f002 f985 	bl	800299c <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000698:	f000 fc9e 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <MX_ADC1_Init+0x134>)
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006a0:	2312      	movs	r3, #18
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_ADC1_Init+0x124>)
 80006aa:	f002 f977 	bl	800299c <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80006b4:	f000 fc90 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3730      	adds	r7, #48	@ 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	24000094 	.word	0x24000094
 80006c4:	40022000 	.word	0x40022000
 80006c8:	08600004 	.word	0x08600004
 80006cc:	0c900008 	.word	0x0c900008
 80006d0:	19200040 	.word	0x19200040

080006d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2224      	movs	r2, #36	@ 0x24
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00a ff88 	bl	800b5f6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e6:	4b3b      	ldr	r3, [pc, #236]	@ (80007d4 <MX_ADC2_Init+0x100>)
 80006e8:	4a3b      	ldr	r2, [pc, #236]	@ (80007d8 <MX_ADC2_Init+0x104>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ec:	4b39      	ldr	r3, [pc, #228]	@ (80007d4 <MX_ADC2_Init+0x100>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006f2:	4b38      	ldr	r3, [pc, #224]	@ (80007d4 <MX_ADC2_Init+0x100>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006f8:	4b36      	ldr	r3, [pc, #216]	@ (80007d4 <MX_ADC2_Init+0x100>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006fe:	4b35      	ldr	r3, [pc, #212]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000700:	2208      	movs	r2, #8
 8000702:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000704:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000706:	2200      	movs	r2, #0
 8000708:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070a:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <MX_ADC2_Init+0x100>)
 800070c:	2200      	movs	r2, #0
 800070e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8000710:	4b30      	ldr	r3, [pc, #192]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000712:	2203      	movs	r2, #3
 8000714:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800071e:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000720:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000728:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000730:	2203      	movs	r2, #3
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000736:	2200      	movs	r2, #0
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC2_Init+0x100>)
 800073c:	2200      	movs	r2, #0
 800073e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_ADC2_Init+0x100>)
 800074a:	2201      	movs	r2, #1
 800074c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074e:	4821      	ldr	r0, [pc, #132]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000750:	f001 fbe8 	bl	8001f24 <HAL_ADC_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800075a:	f000 fc3d 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_ADC2_Init+0x108>)
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000762:	2306      	movs	r3, #6
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800076e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000770:	2304      	movs	r3, #4
 8000772:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <MX_ADC2_Init+0x100>)
 8000784:	f002 f90a 	bl	800299c <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 800078e:	f000 fc23 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_ADC2_Init+0x10c>)
 8000794:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000796:	230c      	movs	r3, #12
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <MX_ADC2_Init+0x100>)
 80007a0:	f002 f8fc 	bl	800299c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 80007aa:	f000 fc15 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <MX_ADC2_Init+0x110>)
 80007b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007b2:	2312      	movs	r3, #18
 80007b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_ADC2_Init+0x100>)
 80007bc:	f002 f8ee 	bl	800299c <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 80007c6:	f000 fc07 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	24000104 	.word	0x24000104
 80007d8:	40022100 	.word	0x40022100
 80007dc:	08600004 	.word	0x08600004
 80007e0:	19200040 	.word	0x19200040
 80007e4:	4b840000 	.word	0x4b840000

080007e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2224      	movs	r2, #36	@ 0x24
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f00a fefe 	bl	800b5f6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007fa:	4b38      	ldr	r3, [pc, #224]	@ (80008dc <MX_ADC3_Init+0xf4>)
 80007fc:	4a38      	ldr	r2, [pc, #224]	@ (80008e0 <MX_ADC3_Init+0xf8>)
 80007fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000800:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000806:	4b35      	ldr	r3, [pc, #212]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000808:	2208      	movs	r2, #8
 800080a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800080c:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000812:	4b32      	ldr	r3, [pc, #200]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000814:	2201      	movs	r2, #1
 8000816:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000818:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800081a:	2208      	movs	r2, #8
 800081c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800081e:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000820:	2200      	movs	r2, #0
 8000822:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000824:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000826:	2200      	movs	r2, #0
 8000828:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 800082a:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800082c:	2202      	movs	r2, #2
 800082e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000838:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800083a:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000840:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000852:	2200      	movs	r2, #0
 8000854:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000858:	2203      	movs	r2, #3
 800085a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800085e:	2200      	movs	r2, #0
 8000860:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000864:	2200      	movs	r2, #0
 8000866:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_ADC3_Init+0xf4>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000872:	2200      	movs	r2, #0
 8000874:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000876:	4819      	ldr	r0, [pc, #100]	@ (80008dc <MX_ADC3_Init+0xf4>)
 8000878:	f001 fb54 	bl	8001f24 <HAL_ADC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000882:	f000 fba9 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <MX_ADC3_Init+0xfc>)
 8000888:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088a:	2306      	movs	r3, #6
 800088c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000892:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000896:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000898:	2304      	movs	r3, #4
 800089a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <MX_ADC3_Init+0xf4>)
 80008aa:	f002 f877 	bl	800299c <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80008b4:	f000 fb90 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_ADC3_Init+0x100>)
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008bc:	230c      	movs	r3, #12
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_ADC3_Init+0xf4>)
 80008c6:	f002 f869 	bl	800299c <HAL_ADC_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80008d0:	f000 fb82 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	@ 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	24000174 	.word	0x24000174
 80008e0:	58026000 	.word	0x58026000
 80008e4:	04300002 	.word	0x04300002
 80008e8:	08600004 	.word	0x08600004

080008ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	@ 0x70
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000900:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2234      	movs	r2, #52	@ 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f00a fe65 	bl	800b5f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800092c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <MX_TIM1_Init+0x180>)
 800092e:	4a50      	ldr	r2, [pc, #320]	@ (8000a70 <MX_TIM1_Init+0x184>)
 8000930:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000932:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b4c      	ldr	r3, [pc, #304]	@ (8000a6c <MX_TIM1_Init+0x180>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500;
 800093e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000940:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 8000944:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000946:	4b49      	ldr	r3, [pc, #292]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800094c:	4b47      	ldr	r3, [pc, #284]	@ (8000a6c <MX_TIM1_Init+0x180>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b46      	ldr	r3, [pc, #280]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000958:	4844      	ldr	r0, [pc, #272]	@ (8000a6c <MX_TIM1_Init+0x180>)
 800095a:	f008 ffad 	bl	80098b8 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000964:	f000 fb38 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800096e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000972:	4619      	mov	r1, r3
 8000974:	483d      	ldr	r0, [pc, #244]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000976:	f009 faf9 	bl	8009f6c <HAL_TIM_ConfigClockSource>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000980:	f000 fb2a 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000984:	4839      	ldr	r0, [pc, #228]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000986:	f009 f875 	bl	8009a74 <HAL_TIM_PWM_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000990:	f000 fb22 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000994:	2320      	movs	r3, #32
 8000996:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009a4:	4619      	mov	r1, r3
 80009a6:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <MX_TIM1_Init+0x180>)
 80009a8:	f00a f820 	bl	800a9ec <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009b2:	f000 fb11 	bl	8000fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	@ 0x60
 80009b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	4824      	ldr	r0, [pc, #144]	@ (8000a6c <MX_TIM1_Init+0x180>)
 80009dc:	f009 f9b2 	bl	8009d44 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80009e6:	f000 faf7 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009ee:	2204      	movs	r2, #4
 80009f0:	4619      	mov	r1, r3
 80009f2:	481e      	ldr	r0, [pc, #120]	@ (8000a6c <MX_TIM1_Init+0x180>)
 80009f4:	f009 f9a6 	bl	8009d44 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80009fe:	f000 faeb 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a06:	2208      	movs	r2, #8
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000a0c:	f009 f99a 	bl	8009d44 <HAL_TIM_PWM_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a16:	f000 fadf 	bl	8000fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000a26:	23ff      	movs	r3, #255	@ 0xff
 8000a28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000a50:	f00a f868 	bl	800ab24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000a5a:	f000 fabd 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5e:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <MX_TIM1_Init+0x180>)
 8000a60:	f000 fce8 	bl	8001434 <HAL_TIM_MspPostInit>

}
 8000a64:	bf00      	nop
 8000a66:	3770      	adds	r7, #112	@ 0x70
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2400034c 	.word	0x2400034c
 8000a70:	40010000 	.word	0x40010000

08000a74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 13750;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000aa8:	f243 52b6 	movw	r2, #13750	@ 0x35b6
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aba:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000abc:	f008 fefc 	bl	80098b8 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ac6:	f000 fa87 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000ad8:	f009 fa48 	bl	8009f6c <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ae2:	f000 fa79 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <MX_TIM2_Init+0x98>)
 8000af4:	f009 ff7a 	bl	800a9ec <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000afe:	f000 fa6b 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	24000398 	.word	0x24000398

08000b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_DMA_Init+0x5c>)
 8000b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b1c:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <MX_DMA_Init+0x5c>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_DMA_Init+0x5c>)
 8000b28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f003 f824 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b3e:	200b      	movs	r0, #11
 8000b40:	f003 f83b 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	200c      	movs	r0, #12
 8000b4a:	f003 f81c 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b4e:	200c      	movs	r0, #12
 8000b50:	f003 f833 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	200d      	movs	r0, #13
 8000b5a:	f003 f814 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b5e:	200d      	movs	r0, #13
 8000b60:	f003 f82b 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	58024400 	.word	0x58024400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b76:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0320 	and.w	r3, r3, #32
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b94:	4b28      	ldr	r3, [pc, #160]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a27      	ldr	r2, [pc, #156]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	4a18      	ldr	r2, [pc, #96]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_GPIO_Init+0xc8>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	371c      	adds	r7, #28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d109      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x26>
//    	 adc_start = TIM1->CNT;
//    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMch1);
//    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMch2);
//    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWMch3);
    	Tim1_check++;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]
    }
    if (htim->Instance == TIM2) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c6a:	d109      	bne.n	8000c80 <HAL_TIM_PeriodElapsedCallback+0x44>
    	Tim2_check++;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000c76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	24000418 	.word	0x24000418
 8000c94:	2400041c 	.word	0x2400041c

08000c98 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a91      	ldr	r2, [pc, #580]	@ (8000eec <HAL_ADC_ConvCpltCallback+0x254>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d16f      	bne.n	8000d8a <HAL_ADC_ConvCpltCallback+0xf2>
    {
        // Convert the raw ADC values to voltages (0 to 3.3V scale)
    	float rawR = ((((float)VoltageadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_R_OFFSET);
 8000caa:	4b91      	ldr	r3, [pc, #580]	@ (8000ef0 <HAL_ADC_ConvCpltCallback+0x258>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	ee07 3a90 	vmov	s15, r3
 8000cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cb6:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000cba:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000cbe:	eddf 7a8e 	vldr	s15, [pc, #568]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cca:	4b8c      	ldr	r3, [pc, #560]	@ (8000efc <HAL_ADC_ConvCpltCallback+0x264>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd4:	edc7 7a07 	vstr	s15, [r7, #28]
    	float rawY = ((((float)VoltageadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_Y_OFFSET);
 8000cd8:	4b85      	ldr	r3, [pc, #532]	@ (8000ef0 <HAL_ADC_ConvCpltCallback+0x258>)
 8000cda:	885b      	ldrh	r3, [r3, #2]
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000ce8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000cec:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000cf8:	4b81      	ldr	r3, [pc, #516]	@ (8000f00 <HAL_ADC_ConvCpltCallback+0x268>)
 8000cfa:	edd3 7a00 	vldr	s15, [r3]
 8000cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d02:	edc7 7a06 	vstr	s15, [r7, #24]
    	float rawB = ((((float)VoltageadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_B_OFFSET);
 8000d06:	4b7a      	ldr	r3, [pc, #488]	@ (8000ef0 <HAL_ADC_ConvCpltCallback+0x258>)
 8000d08:	889b      	ldrh	r3, [r3, #4]
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d12:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000d16:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d1a:	eddf 7a77 	vldr	s15, [pc, #476]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000d26:	4b77      	ldr	r3, [pc, #476]	@ (8000f04 <HAL_ADC_ConvCpltCallback+0x26c>)
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d30:	edc7 7a05 	vstr	s15, [r7, #20]
        // Apply the filter to each phase voltage
        VOLTAGE_R_PHASE = applyLowPassFilter(rawR, VoltageR_Input, VoltageR_Output);
 8000d34:	4974      	ldr	r1, [pc, #464]	@ (8000f08 <HAL_ADC_ConvCpltCallback+0x270>)
 8000d36:	4875      	ldr	r0, [pc, #468]	@ (8000f0c <HAL_ADC_ConvCpltCallback+0x274>)
 8000d38:	ed97 0a07 	vldr	s0, [r7, #28]
 8000d3c:	f7ff fae8 	bl	8000310 <applyLowPassFilter>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b72      	ldr	r3, [pc, #456]	@ (8000f10 <HAL_ADC_ConvCpltCallback+0x278>)
 8000d46:	edc3 7a00 	vstr	s15, [r3]
        VOLTAGE_Y_PHASE = applyLowPassFilter(rawY, VoltageY_Input, VoltageY_Output);
 8000d4a:	4972      	ldr	r1, [pc, #456]	@ (8000f14 <HAL_ADC_ConvCpltCallback+0x27c>)
 8000d4c:	4872      	ldr	r0, [pc, #456]	@ (8000f18 <HAL_ADC_ConvCpltCallback+0x280>)
 8000d4e:	ed97 0a06 	vldr	s0, [r7, #24]
 8000d52:	f7ff fadd 	bl	8000310 <applyLowPassFilter>
 8000d56:	eef0 7a40 	vmov.f32	s15, s0
 8000d5a:	4b70      	ldr	r3, [pc, #448]	@ (8000f1c <HAL_ADC_ConvCpltCallback+0x284>)
 8000d5c:	edc3 7a00 	vstr	s15, [r3]
        VOLTAGE_B_PHASE = applyLowPassFilter(rawB, VoltageB_Input, VoltageB_Output);
 8000d60:	496f      	ldr	r1, [pc, #444]	@ (8000f20 <HAL_ADC_ConvCpltCallback+0x288>)
 8000d62:	4870      	ldr	r0, [pc, #448]	@ (8000f24 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000d64:	ed97 0a05 	vldr	s0, [r7, #20]
 8000d68:	f7ff fad2 	bl	8000310 <applyLowPassFilter>
 8000d6c:	eef0 7a40 	vmov.f32	s15, s0
 8000d70:	4b6d      	ldr	r3, [pc, #436]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0x290>)
 8000d72:	edc3 7a00 	vstr	s15, [r3]
    	ADC1_Check++;
 8000d76:	4b6d      	ldr	r3, [pc, #436]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x294>)
 8000d78:	edd3 7a00 	vldr	s15, [r3]
 8000d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d84:	4b69      	ldr	r3, [pc, #420]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x294>)
 8000d86:	edc3 7a00 	vstr	s15, [r3]
//    	adc_end1 = TIM1->CNT;
//    	adc_time1 = adc_end1 - adc_start;
    }
    if (hadc->Instance == ADC2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a68      	ldr	r2, [pc, #416]	@ (8000f30 <HAL_ADC_ConvCpltCallback+0x298>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d16f      	bne.n	8000e74 <HAL_ADC_ConvCpltCallback+0x1dc>
    {

    	float rawIR = ((((float)CurrentadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-CURRENT_R_OFFSET);
 8000d94:	4b67      	ldr	r3, [pc, #412]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0x29c>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da0:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000da4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000da8:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000db4:	4b60      	ldr	r3, [pc, #384]	@ (8000f38 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8000db6:	edd3 7a00 	vldr	s15, [r3]
 8000dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dbe:	edc7 7a04 	vstr	s15, [r7, #16]
    	float rawIY = ((((float)CurrentadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-CURRENT_Y_OFFSET);
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0x29c>)
 8000dc4:	885b      	ldrh	r3, [r3, #2]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dce:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000dd2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000dd6:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000de2:	4b56      	ldr	r3, [pc, #344]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dec:	edc7 7a03 	vstr	s15, [r7, #12]
    	float rawIB = ((((float)CurrentadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-CURRENT_B_OFFSET);
 8000df0:	4b50      	ldr	r3, [pc, #320]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0x29c>)
 8000df2:	889b      	ldrh	r3, [r3, #4]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dfc:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e04:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e10:	4b4b      	ldr	r3, [pc, #300]	@ (8000f40 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000e12:	edd3 7a00 	vldr	s15, [r3]
 8000e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e1a:	edc7 7a02 	vstr	s15, [r7, #8]
    	CURRENT_R_PHASE = applyLowPassFilter(rawIR, CurrentR_Input, CurrentR_Output);
 8000e1e:	4949      	ldr	r1, [pc, #292]	@ (8000f44 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8000e20:	4849      	ldr	r0, [pc, #292]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8000e22:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e26:	f7ff fa73 	bl	8000310 <applyLowPassFilter>
 8000e2a:	eef0 7a40 	vmov.f32	s15, s0
 8000e2e:	4b47      	ldr	r3, [pc, #284]	@ (8000f4c <HAL_ADC_ConvCpltCallback+0x2b4>)
 8000e30:	edc3 7a00 	vstr	s15, [r3]
    	CURRENT_Y_PHASE = applyLowPassFilter(rawIY, CurrentY_Input, CurrentY_Output);
 8000e34:	4946      	ldr	r1, [pc, #280]	@ (8000f50 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8000e36:	4847      	ldr	r0, [pc, #284]	@ (8000f54 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8000e38:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e3c:	f7ff fa68 	bl	8000310 <applyLowPassFilter>
 8000e40:	eef0 7a40 	vmov.f32	s15, s0
 8000e44:	4b44      	ldr	r3, [pc, #272]	@ (8000f58 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8000e46:	edc3 7a00 	vstr	s15, [r3]
    	CURRENT_B_PHASE = applyLowPassFilter(rawIB, CurrentB_Input, CurrentB_Output);
 8000e4a:	4944      	ldr	r1, [pc, #272]	@ (8000f5c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8000e4c:	4844      	ldr	r0, [pc, #272]	@ (8000f60 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8000e4e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e52:	f7ff fa5d 	bl	8000310 <applyLowPassFilter>
 8000e56:	eef0 7a40 	vmov.f32	s15, s0
 8000e5a:	4b42      	ldr	r3, [pc, #264]	@ (8000f64 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8000e5c:	edc3 7a00 	vstr	s15, [r3]
    	ADC2_Check++;
 8000e60:	4b41      	ldr	r3, [pc, #260]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8000e70:	edc3 7a00 	vstr	s15, [r3]
//    	adc_end2 = TIM1->CNT;
//    	adc_time2 = adc_end2 - adc_start;
    }
    if (hadc->Instance == ADC3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a3c      	ldr	r2, [pc, #240]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0x2d4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d131      	bne.n	8000ee2 <HAL_ADC_ConvCpltCallback+0x24a>
    {

    	DC_Voltage = (((float)DCSenseBuffer[0] * VREF) / ADC_16bRESOLUTION);
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000e8e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e92:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000e96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9e:	4b35      	ldr	r3, [pc, #212]	@ (8000f74 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
    	DC_Current = (((float)DCSenseBuffer[1] * VREF) / ADC_16bRESOLUTION);
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000ef4 <HAL_ADC_ConvCpltCallback+0x25c>
 8000eb4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000eb8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8000ef8 <HAL_ADC_ConvCpltCallback+0x260>
 8000ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8000ec6:	edc3 7a00 	vstr	s15, [r3]
    	TPGCI_STM32_4_step();
 8000eca:	f00a f869 	bl	800afa0 <TPGCI_STM32_4_step>
    	ADC3_Check++;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <HAL_ADC_ConvCpltCallback+0x2e4>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000edc:	4b27      	ldr	r3, [pc, #156]	@ (8000f7c <HAL_ADC_ConvCpltCallback+0x2e4>)
 8000ede:	edc3 7a00 	vstr	s15, [r3]
//    	adc_end3 = TIM1->CNT;
//    	adc_time3 = adc_end3 - adc_start;
    }

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	24000404 	.word	0x24000404
 8000ef4:	40533333 	.word	0x40533333
 8000ef8:	0000ffff 	.word	0x0000ffff
 8000efc:	24000000 	.word	0x24000000
 8000f00:	24000004 	.word	0x24000004
 8000f04:	24000008 	.word	0x24000008
 8000f08:	24000438 	.word	0x24000438
 8000f0c:	2400042c 	.word	0x2400042c
 8000f10:	240003e4 	.word	0x240003e4
 8000f14:	24000450 	.word	0x24000450
 8000f18:	24000444 	.word	0x24000444
 8000f1c:	240003e8 	.word	0x240003e8
 8000f20:	24000468 	.word	0x24000468
 8000f24:	2400045c 	.word	0x2400045c
 8000f28:	240003ec 	.word	0x240003ec
 8000f2c:	24000420 	.word	0x24000420
 8000f30:	40022100 	.word	0x40022100
 8000f34:	2400040c 	.word	0x2400040c
 8000f38:	2400000c 	.word	0x2400000c
 8000f3c:	24000010 	.word	0x24000010
 8000f40:	24000014 	.word	0x24000014
 8000f44:	24000480 	.word	0x24000480
 8000f48:	24000474 	.word	0x24000474
 8000f4c:	240003f0 	.word	0x240003f0
 8000f50:	24000498 	.word	0x24000498
 8000f54:	2400048c 	.word	0x2400048c
 8000f58:	240003f4 	.word	0x240003f4
 8000f5c:	240004b0 	.word	0x240004b0
 8000f60:	240004a4 	.word	0x240004a4
 8000f64:	240003f8 	.word	0x240003f8
 8000f68:	24000424 	.word	0x24000424
 8000f6c:	58026000 	.word	0x58026000
 8000f70:	24000414 	.word	0x24000414
 8000f74:	240003fc 	.word	0x240003fc
 8000f78:	24000400 	.word	0x24000400
 8000f7c:	24000428 	.word	0x24000428

08000f80 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f92:	f002 fe2d 	bl	8003bf0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fa2:	231f      	movs	r3, #31
 8000fa4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fa6:	2387      	movs	r3, #135	@ 0x87
 8000fa8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 fe4b 	bl	8003c60 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f002 fe28 	bl	8003c20 <HAL_MPU_Enable>

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_MspInit+0x30>)
 8000fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ff0:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_MspInit+0x30>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b090      	sub	sp, #64	@ 0x40
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a8c      	ldr	r2, [pc, #560]	@ (8001268 <HAL_ADC_MspInit+0x250>)
 8001036:	4293      	cmp	r3, r2
 8001038:	f040 8088 	bne.w	800114c <HAL_ADC_MspInit+0x134>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800103c:	4b8b      	ldr	r3, [pc, #556]	@ (800126c <HAL_ADC_MspInit+0x254>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	4a8a      	ldr	r2, [pc, #552]	@ (800126c <HAL_ADC_MspInit+0x254>)
 8001044:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001046:	4b89      	ldr	r3, [pc, #548]	@ (800126c <HAL_ADC_MspInit+0x254>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d10e      	bne.n	800106c <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800104e:	4b88      	ldr	r3, [pc, #544]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001054:	4a86      	ldr	r2, [pc, #536]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001056:	f043 0320 	orr.w	r3, r3, #32
 800105a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800105e:	4b84      	ldr	r3, [pc, #528]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800106a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b80      	ldr	r3, [pc, #512]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a7f      	ldr	r2, [pc, #508]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b7c      	ldr	r3, [pc, #496]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b79      	ldr	r3, [pc, #484]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a77      	ldr	r2, [pc, #476]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b75      	ldr	r3, [pc, #468]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a8:	2340      	movs	r3, #64	@ 0x40
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2303      	movs	r3, #3
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010b8:	4619      	mov	r1, r3
 80010ba:	486e      	ldr	r0, [pc, #440]	@ (8001274 <HAL_ADC_MspInit+0x25c>)
 80010bc:	f004 fee4 	bl	8005e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	2303      	movs	r3, #3
 80010c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	4868      	ldr	r0, [pc, #416]	@ (8001278 <HAL_ADC_MspInit+0x260>)
 80010d6:	f004 fed7 	bl	8005e88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80010da:	4b68      	ldr	r3, [pc, #416]	@ (800127c <HAL_ADC_MspInit+0x264>)
 80010dc:	4a68      	ldr	r2, [pc, #416]	@ (8001280 <HAL_ADC_MspInit+0x268>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010e0:	4b66      	ldr	r3, [pc, #408]	@ (800127c <HAL_ADC_MspInit+0x264>)
 80010e2:	2209      	movs	r2, #9
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e6:	4b65      	ldr	r3, [pc, #404]	@ (800127c <HAL_ADC_MspInit+0x264>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b63      	ldr	r3, [pc, #396]	@ (800127c <HAL_ADC_MspInit+0x264>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b62      	ldr	r3, [pc, #392]	@ (800127c <HAL_ADC_MspInit+0x264>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <HAL_ADC_MspInit+0x264>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001100:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001102:	4b5e      	ldr	r3, [pc, #376]	@ (800127c <HAL_ADC_MspInit+0x264>)
 8001104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001108:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800110a:	4b5c      	ldr	r3, [pc, #368]	@ (800127c <HAL_ADC_MspInit+0x264>)
 800110c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001110:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001112:	4b5a      	ldr	r3, [pc, #360]	@ (800127c <HAL_ADC_MspInit+0x264>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001118:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_ADC_MspInit+0x264>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111e:	4857      	ldr	r0, [pc, #348]	@ (800127c <HAL_ADC_MspInit+0x264>)
 8001120:	f002 fdde 	bl	8003ce0 <HAL_DMA_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800112a:	f7ff ff55 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	@ (800127c <HAL_ADC_MspInit+0x264>)
 8001132:	659a      	str	r2, [r3, #88]	@ 0x58
 8001134:	4a51      	ldr	r2, [pc, #324]	@ (800127c <HAL_ADC_MspInit+0x264>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2012      	movs	r0, #18
 8001140:	f002 fd21 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001144:	2012      	movs	r0, #18
 8001146:	f002 fd38 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800114a:	e11e      	b.n	800138a <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a4c      	ldr	r2, [pc, #304]	@ (8001284 <HAL_ADC_MspInit+0x26c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	f040 809c 	bne.w	8001290 <HAL_ADC_MspInit+0x278>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001158:	4b44      	ldr	r3, [pc, #272]	@ (800126c <HAL_ADC_MspInit+0x254>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	4a43      	ldr	r2, [pc, #268]	@ (800126c <HAL_ADC_MspInit+0x254>)
 8001160:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001162:	4b42      	ldr	r3, [pc, #264]	@ (800126c <HAL_ADC_MspInit+0x254>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10e      	bne.n	8001188 <HAL_ADC_MspInit+0x170>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800116a:	4b41      	ldr	r3, [pc, #260]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800116c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001170:	4a3f      	ldr	r2, [pc, #252]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800117a:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800117c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	4a38      	ldr	r2, [pc, #224]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001198:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	4a30      	ldr	r2, [pc, #192]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001270 <HAL_ADC_MspInit+0x258>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4827      	ldr	r0, [pc, #156]	@ (8001274 <HAL_ADC_MspInit+0x25c>)
 80011d8:	f004 fe56 	bl	8005e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011dc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4821      	ldr	r0, [pc, #132]	@ (8001278 <HAL_ADC_MspInit+0x260>)
 80011f2:	f004 fe49 	bl	8005e88 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <HAL_ADC_MspInit+0x274>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 80011fe:	220a      	movs	r2, #10
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001210:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001214:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001218:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800121c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001224:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800122c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800123a:	4813      	ldr	r0, [pc, #76]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 800123c:	f002 fd50 	bl	8003ce0 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_ADC_MspInit+0x232>
      Error_Handler();
 8001246:	f7ff fec7 	bl	8000fd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 800124e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_ADC_MspInit+0x270>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	2012      	movs	r0, #18
 800125c:	f002 fc93 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001260:	2012      	movs	r0, #18
 8001262:	f002 fcaa 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 8001266:	e090      	b.n	800138a <HAL_ADC_MspInit+0x372>
 8001268:	40022000 	.word	0x40022000
 800126c:	240004bc 	.word	0x240004bc
 8001270:	58024400 	.word	0x58024400
 8001274:	58020000 	.word	0x58020000
 8001278:	58021400 	.word	0x58021400
 800127c:	240001e4 	.word	0x240001e4
 8001280:	40020010 	.word	0x40020010
 8001284:	40022100 	.word	0x40022100
 8001288:	2400025c 	.word	0x2400025c
 800128c:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a3f      	ldr	r2, [pc, #252]	@ (8001394 <HAL_ADC_MspInit+0x37c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d177      	bne.n	800138a <HAL_ADC_MspInit+0x372>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800129a:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b8:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a36      	ldr	r2, [pc, #216]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <HAL_ADC_MspInit+0x380>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001306:	4619      	mov	r1, r3
 8001308:	4824      	ldr	r0, [pc, #144]	@ (800139c <HAL_ADC_MspInit+0x384>)
 800130a:	f004 fdbd 	bl	8005e88 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800130e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001312:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001316:	f000 fac9 	bl	80018ac <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 800131a:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 800131c:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <HAL_ADC_MspInit+0x38c>)
 800131e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001322:	2273      	movs	r2, #115	@ 0x73
 8001324:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 800133c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001340:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001348:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800134a:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800135e:	4810      	ldr	r0, [pc, #64]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001360:	f002 fcbe 	bl	8003ce0 <HAL_DMA_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_ADC_MspInit+0x356>
      Error_Handler();
 800136a:	f7ff fe35 	bl	8000fd8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001372:	659a      	str	r2, [r3, #88]	@ 0x58
 8001374:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <HAL_ADC_MspInit+0x388>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	207f      	movs	r0, #127	@ 0x7f
 8001380:	f002 fc01 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001384:	207f      	movs	r0, #127	@ 0x7f
 8001386:	f002 fc18 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3740      	adds	r7, #64	@ 0x40
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	58026000 	.word	0x58026000
 8001398:	58024400 	.word	0x58024400
 800139c:	58021400 	.word	0x58021400
 80013a0:	240002d4 	.word	0x240002d4
 80013a4:	40020040 	.word	0x40020040

080013a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1d      	ldr	r2, [pc, #116]	@ (800142c <HAL_TIM_Base_MspInit+0x84>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d117      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_TIM_Base_MspInit+0x88>)
 80013bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001430 <HAL_TIM_Base_MspInit+0x88>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <HAL_TIM_Base_MspInit+0x88>)
 80013cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2019      	movs	r0, #25
 80013de:	f002 fbd2 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013e2:	2019      	movs	r0, #25
 80013e4:	f002 fbe9 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013e8:	e01b      	b.n	8001422 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f2:	d116      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <HAL_TIM_Base_MspInit+0x88>)
 80013f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001430 <HAL_TIM_Base_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_TIM_Base_MspInit+0x88>)
 8001406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201c      	movs	r0, #28
 8001418:	f002 fbb5 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800141c:	201c      	movs	r0, #28
 800141e:	f002 fbcc 	bl	8003bba <HAL_NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40010000 	.word	0x40010000
 8001430:	58024400 	.word	0x58024400

08001434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	@ 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <HAL_TIM_MspPostInit+0xa8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d13e      	bne.n	80014d4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	4b22      	ldr	r3, [pc, #136]	@ (80014e0 <HAL_TIM_MspPostInit+0xac>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145c:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <HAL_TIM_MspPostInit+0xac>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <HAL_TIM_MspPostInit+0xac>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_TIM_MspPostInit+0xac>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147a:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_TIM_MspPostInit+0xac>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001484:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <HAL_TIM_MspPostInit+0xac>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001492:	2303      	movs	r3, #3
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <HAL_TIM_MspPostInit+0xb0>)
 80014ae:	f004 fceb 	bl	8005e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80014b2:	f44f 532c 	mov.w	r3, #11008	@ 0x2b00
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	@ (80014e8 <HAL_TIM_MspPostInit+0xb4>)
 80014d0:	f004 fcda 	bl	8005e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	@ 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010000 	.word	0x40010000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58020400 	.word	0x58020400
 80014e8:	58021000 	.word	0x58021000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <MemManage_Handler+0x4>

08001504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f993 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <DMA1_Stream0_IRQHandler+0x10>)
 8001552:	f003 f987 	bl	8004864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	240001e4 	.word	0x240001e4

08001560 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <DMA1_Stream1_IRQHandler+0x10>)
 8001566:	f003 f97d 	bl	8004864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2400025c 	.word	0x2400025c

08001574 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <DMA1_Stream2_IRQHandler+0x10>)
 800157a:	f003 f973 	bl	8004864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	240002d4 	.word	0x240002d4

08001588 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800158c:	4803      	ldr	r0, [pc, #12]	@ (800159c <ADC_IRQHandler+0x14>)
 800158e:	f000 ffad 	bl	80024ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001592:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <ADC_IRQHandler+0x18>)
 8001594:	f000 ffaa 	bl	80024ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	24000094 	.word	0x24000094
 80015a0:	24000104 	.word	0x24000104

080015a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a8:	4802      	ldr	r0, [pc, #8]	@ (80015b4 <TIM1_UP_IRQHandler+0x10>)
 80015aa:	f008 fac4 	bl	8009b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2400034c 	.word	0x2400034c

080015b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015bc:	4802      	ldr	r0, [pc, #8]	@ (80015c8 <TIM2_IRQHandler+0x10>)
 80015be:	f008 faba 	bl	8009b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	24000398 	.word	0x24000398

080015cc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <ADC3_IRQHandler+0x10>)
 80015d2:	f000 ff8b 	bl	80024ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	24000174 	.word	0x24000174

080015e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015e4:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <SystemInit+0x100>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ea:	4a3d      	ldr	r2, [pc, #244]	@ (80016e0 <SystemInit+0x100>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015f4:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <SystemInit+0x104>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	2b06      	cmp	r3, #6
 80015fe:	d807      	bhi.n	8001610 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001600:	4b38      	ldr	r3, [pc, #224]	@ (80016e4 <SystemInit+0x104>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 030f 	bic.w	r3, r3, #15
 8001608:	4a36      	ldr	r2, [pc, #216]	@ (80016e4 <SystemInit+0x104>)
 800160a:	f043 0307 	orr.w	r3, r3, #7
 800160e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001610:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <SystemInit+0x108>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a34      	ldr	r2, [pc, #208]	@ (80016e8 <SystemInit+0x108>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800161c:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <SystemInit+0x108>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001622:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <SystemInit+0x108>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4930      	ldr	r1, [pc, #192]	@ (80016e8 <SystemInit+0x108>)
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <SystemInit+0x10c>)
 800162a:	4013      	ands	r3, r2
 800162c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800162e:	4b2d      	ldr	r3, [pc, #180]	@ (80016e4 <SystemInit+0x104>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <SystemInit+0x104>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 030f 	bic.w	r3, r3, #15
 8001642:	4a28      	ldr	r2, [pc, #160]	@ (80016e4 <SystemInit+0x104>)
 8001644:	f043 0307 	orr.w	r3, r3, #7
 8001648:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800164a:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <SystemInit+0x108>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <SystemInit+0x108>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001656:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <SystemInit+0x108>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800165c:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <SystemInit+0x108>)
 800165e:	4a24      	ldr	r2, [pc, #144]	@ (80016f0 <SystemInit+0x110>)
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <SystemInit+0x108>)
 8001664:	4a23      	ldr	r2, [pc, #140]	@ (80016f4 <SystemInit+0x114>)
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <SystemInit+0x108>)
 800166a:	4a23      	ldr	r2, [pc, #140]	@ (80016f8 <SystemInit+0x118>)
 800166c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <SystemInit+0x108>)
 8001670:	2200      	movs	r2, #0
 8001672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <SystemInit+0x108>)
 8001676:	4a20      	ldr	r2, [pc, #128]	@ (80016f8 <SystemInit+0x118>)
 8001678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <SystemInit+0x108>)
 800167c:	2200      	movs	r2, #0
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <SystemInit+0x108>)
 8001682:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <SystemInit+0x118>)
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <SystemInit+0x108>)
 8001688:	2200      	movs	r2, #0
 800168a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800168c:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <SystemInit+0x108>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a15      	ldr	r2, [pc, #84]	@ (80016e8 <SystemInit+0x108>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <SystemInit+0x108>)
 800169a:	2200      	movs	r2, #0
 800169c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <SystemInit+0x108>)
 80016a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d113      	bne.n	80016d4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <SystemInit+0x108>)
 80016ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016b2:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <SystemInit+0x108>)
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <SystemInit+0x11c>)
 80016be:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016c2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <SystemInit+0x108>)
 80016c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80016ca:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <SystemInit+0x108>)
 80016cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	52002000 	.word	0x52002000
 80016e8:	58024400 	.word	0x58024400
 80016ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80016f0:	02020200 	.word	0x02020200
 80016f4:	01ff0000 	.word	0x01ff0000
 80016f8:	01010280 	.word	0x01010280
 80016fc:	52004000 	.word	0x52004000

08001700 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <ExitRun0Mode+0x2c>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a08      	ldr	r2, [pc, #32]	@ (800172c <ExitRun0Mode+0x2c>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001710:	bf00      	nop
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <ExitRun0Mode+0x2c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f9      	beq.n	8001712 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	58024800 	.word	0x58024800

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800176c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001734:	f7ff ffe4 	bl	8001700 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001738:	f7ff ff52 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f009 ff57 	bl	800b614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7fe fe37 	bl	80003d8 <main>
  bx  lr
 800176a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001774:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001778:	0800c7f0 	.word	0x0800c7f0
  ldr r2, =_sbss
 800177c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001780:	24000760 	.word	0x24000760

08001784 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <BDMA_Channel0_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178e:	2003      	movs	r0, #3
 8001790:	f002 f9ee 	bl	8003b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001794:	f005 faea 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_Init+0x68>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	4913      	ldr	r1, [pc, #76]	@ (80017f4 <HAL_Init+0x6c>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
 80017b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_Init+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <HAL_Init+0x6c>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_Init+0x70>)
 80017ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017cc:	4a0b      	ldr	r2, [pc, #44]	@ (80017fc <HAL_Init+0x74>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f814 	bl	8001800 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e002      	b.n	80017e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017e2:	f7ff fbff 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	0800c550 	.word	0x0800c550
 80017f8:	2400001c 	.word	0x2400001c
 80017fc:	24000018 	.word	0x24000018

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_InitTick+0x60>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e021      	b.n	8001858 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_InitTick+0x64>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_InitTick+0x60>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f002 f9d3 	bl	8003bd6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f002 f99d 	bl	8003b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x68>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	24000024 	.word	0x24000024
 8001864:	24000018 	.word	0x24000018
 8001868:	24000020 	.word	0x24000020

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	24000024 	.word	0x24000024
 8001890:	240004c0 	.word	0x240004c0

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	240004c0 	.word	0x240004c0

080018ac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80018b6:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	4904      	ldr	r1, [pc, #16]	@ (80018d4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	58000400 	.word	0x58000400

080018d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	609a      	str	r2, [r3, #8]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <LL_ADC_SetChannelPreselection+0x70>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d027      	beq.n	80019a2 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <LL_ADC_SetChannelPreselection+0x2c>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	0e9b      	lsrs	r3, r3, #26
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	2201      	movs	r2, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	e015      	b.n	8001998 <LL_ADC_SetChannelPreselection+0x58>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001982:	2320      	movs	r3, #32
 8001984:	e003      	b.n	800198e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2201      	movs	r2, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	69d2      	ldr	r2, [r2, #28]
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	58026000 	.word	0x58026000

080019b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3360      	adds	r3, #96	@ 0x60
 80019c6:	461a      	mov	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <LL_ADC_SetOffset+0x60>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10b      	bne.n	80019f0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019ee:	e00b      	b.n	8001a08 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	58026000 	.word	0x58026000

08001a18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3360      	adds	r3, #96	@ 0x60
 8001a26:	461a      	mov	r2, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	611a      	str	r2, [r3, #16]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d00e      	beq.n	8001aaa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3360      	adds	r3, #96	@ 0x60
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	601a      	str	r2, [r3, #0]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	58026000 	.word	0x58026000

08001abc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <LL_ADC_SetOffsetSaturation+0x40>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d10e      	bne.n	8001aee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3360      	adds	r3, #96	@ 0x60
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	58026000 	.word	0x58026000

08001b00 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <LL_ADC_SetOffsetSign+0x40>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10e      	bne.n	8001b32 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3360      	adds	r3, #96	@ 0x60
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	58026000 	.word	0x58026000

08001b44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3360      	adds	r3, #96	@ 0x60
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <LL_ADC_SetOffsetState+0x50>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d108      	bne.n	8001b78 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001b76:	e007      	b.n	8001b88 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	601a      	str	r2, [r3, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	58026000 	.word	0x58026000

08001b98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3330      	adds	r3, #48	@ 0x30
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	4413      	add	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	211f      	movs	r1, #31
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 011f 	and.w	r1, r3, #31
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f023 0203 	bic.w	r2, r3, #3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d107      	bne.n	8001c7e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60da      	str	r2, [r3, #12]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	58026000 	.word	0x58026000

08001c90 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b087      	sub	sp, #28
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0e5b      	lsrs	r3, r3, #25
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	0d1b      	lsrs	r3, r3, #20
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2107      	movs	r1, #7
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	0d1b      	lsrs	r3, r3, #20
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d00:	bf00      	nop
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d84 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d115      	bne.n	8001d4c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0318 	and.w	r3, r3, #24
 8001d36:	4914      	ldr	r1, [pc, #80]	@ (8001d88 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d38:	40d9      	lsrs	r1, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	400b      	ands	r3, r1
 8001d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d42:	431a      	orrs	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d4a:	e014      	b.n	8001d76 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0318 	and.w	r3, r3, #24
 8001d62:	4909      	ldr	r1, [pc, #36]	@ (8001d88 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d64:	40d9      	lsrs	r1, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	400b      	ands	r3, r1
 8001d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	58026000 	.word	0x58026000
 8001d88:	000fffff 	.word	0x000fffff

08001d8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 031f 	and.w	r3, r3, #31
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6093      	str	r3, [r2, #8]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	5fffffc0 	.word	0x5fffffc0

08001de8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001df8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	6fffffc0 	.word	0x6fffffc0

08001e38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <LL_ADC_Enable+0x24>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	7fffffc0 	.word	0x7fffffc0

08001e88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <LL_ADC_IsEnabled+0x18>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <LL_ADC_IsEnabled+0x1a>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <LL_ADC_REG_StartConversion+0x24>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	7fffffc0 	.word	0x7fffffc0

08001ed8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d101      	bne.n	8001ef0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d101      	bne.n	8001f16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1ee      	b.n	800231c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff f863 	bl	8001018 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff3f 	bl	8001de8 <LL_ADC_IsDeepPowerDownEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff25 	bl	8001dc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff5a 	bl	8001e38 <LL_ADC_IsInternalRegulatorEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d114      	bne.n	8001fb4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff3e 	bl	8001e10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f94:	4b8e      	ldr	r3, [pc, #568]	@ (80021d0 <HAL_ADC_Init+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	4a8e      	ldr	r2, [pc, #568]	@ (80021d4 <HAL_ADC_Init+0x2b0>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa6:	e002      	b.n	8001fae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f9      	bne.n	8001fa8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff3d 	bl	8001e38 <LL_ADC_IsInternalRegulatorEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff77 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 8001fea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 8188 	bne.w	800230a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f040 8184 	bne.w	800230a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002006:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff36 	bl	8001e88 <LL_ADC_IsEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d136      	bne.n	8002090 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6c      	ldr	r2, [pc, #432]	@ (80021d8 <HAL_ADC_Init+0x2b4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_ADC_Init+0x112>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6a      	ldr	r2, [pc, #424]	@ (80021dc <HAL_ADC_Init+0x2b8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10e      	bne.n	8002054 <HAL_ADC_Init+0x130>
 8002036:	4868      	ldr	r0, [pc, #416]	@ (80021d8 <HAL_ADC_Init+0x2b4>)
 8002038:	f7ff ff26 	bl	8001e88 <LL_ADC_IsEnabled>
 800203c:	4604      	mov	r4, r0
 800203e:	4867      	ldr	r0, [pc, #412]	@ (80021dc <HAL_ADC_Init+0x2b8>)
 8002040:	f7ff ff22 	bl	8001e88 <LL_ADC_IsEnabled>
 8002044:	4603      	mov	r3, r0
 8002046:	4323      	orrs	r3, r4
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e008      	b.n	8002066 <HAL_ADC_Init+0x142>
 8002054:	4862      	ldr	r0, [pc, #392]	@ (80021e0 <HAL_ADC_Init+0x2bc>)
 8002056:	f7ff ff17 	bl	8001e88 <LL_ADC_IsEnabled>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5a      	ldr	r2, [pc, #360]	@ (80021d8 <HAL_ADC_Init+0x2b4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_ADC_Init+0x15a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a58      	ldr	r2, [pc, #352]	@ (80021dc <HAL_ADC_Init+0x2b8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_ADC_Init+0x15e>
 800207e:	4a59      	ldr	r2, [pc, #356]	@ (80021e4 <HAL_ADC_Init+0x2c0>)
 8002080:	e000      	b.n	8002084 <HAL_ADC_Init+0x160>
 8002082:	4a59      	ldr	r2, [pc, #356]	@ (80021e8 <HAL_ADC_Init+0x2c4>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7ff fc24 	bl	80018d8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_ADC_Init+0x2bc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d129      	bne.n	80020ee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7e5b      	ldrb	r3, [r3, #25]
 800209e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020a4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80020aa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d013      	beq.n	80020dc <HAL_ADC_Init+0x1b8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d00d      	beq.n	80020d8 <HAL_ADC_Init+0x1b4>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b1c      	cmp	r3, #28
 80020c2:	d007      	beq.n	80020d4 <HAL_ADC_Init+0x1b0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b18      	cmp	r3, #24
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_Init+0x1ac>
 80020cc:	2318      	movs	r3, #24
 80020ce:	e006      	b.n	80020de <HAL_ADC_Init+0x1ba>
 80020d0:	2300      	movs	r3, #0
 80020d2:	e004      	b.n	80020de <HAL_ADC_Init+0x1ba>
 80020d4:	2310      	movs	r3, #16
 80020d6:	e002      	b.n	80020de <HAL_ADC_Init+0x1ba>
 80020d8:	2308      	movs	r3, #8
 80020da:	e000      	b.n	80020de <HAL_ADC_Init+0x1ba>
 80020dc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80020de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e00e      	b.n	800210c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7e5b      	ldrb	r3, [r3, #25]
 80020f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002106:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d106      	bne.n	8002124 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	3b01      	subs	r3, #1
 800211c:	045b      	lsls	r3, r3, #17
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <HAL_ADC_Init+0x2bc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d115      	bne.n	8002176 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_ADC_Init+0x2c8>)
 8002152:	4013      	ands	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	69b9      	ldr	r1, [r7, #24]
 800215a:	430b      	orrs	r3, r1
 800215c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	e009      	b.n	800218a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <HAL_ADC_Init+0x2cc>)
 800217e:	4013      	ands	r3, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	69b9      	ldr	r1, [r7, #24]
 8002186:	430b      	orrs	r3, r1
 8002188:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fea2 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 8002194:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff feaf 	bl	8001efe <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 808e 	bne.w	80022c6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 808a 	bne.w	80022c6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_ADC_Init+0x2bc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d11b      	bne.n	80021f4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7e1b      	ldrb	r3, [r3, #24]
 80021c0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021c8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e018      	b.n	8002202 <HAL_ADC_Init+0x2de>
 80021d0:	24000018 	.word	0x24000018
 80021d4:	053e2d63 	.word	0x053e2d63
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40022100 	.word	0x40022100
 80021e0:	58026000 	.word	0x58026000
 80021e4:	40022300 	.word	0x40022300
 80021e8:	58026300 	.word	0x58026300
 80021ec:	fff04007 	.word	0xfff04007
 80021f0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e1b      	ldrb	r3, [r3, #24]
 80021f8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4b46      	ldr	r3, [pc, #280]	@ (8002324 <HAL_ADC_Init+0x400>)
 800220a:	4013      	ands	r3, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	69b9      	ldr	r1, [r7, #24]
 8002212:	430b      	orrs	r3, r1
 8002214:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800221c:	2b01      	cmp	r3, #1
 800221e:	d137      	bne.n	8002290 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002224:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a3f      	ldr	r2, [pc, #252]	@ (8002328 <HAL_ADC_Init+0x404>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d116      	bne.n	800225e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	4b3d      	ldr	r3, [pc, #244]	@ (800232c <HAL_ADC_Init+0x408>)
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002242:	4311      	orrs	r1, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800224e:	430a      	orrs	r2, r1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	e020      	b.n	80022a0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b32      	ldr	r3, [pc, #200]	@ (8002330 <HAL_ADC_Init+0x40c>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800226c:	3a01      	subs	r2, #1
 800226e:	0411      	lsls	r1, r2, #16
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800227a:	4311      	orrs	r1, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002280:	430a      	orrs	r2, r1
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	e007      	b.n	80022a0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <HAL_ADC_Init+0x404>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d002      	beq.n	80022c6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f001 f95d 	bl	8003580 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10c      	bne.n	80022e8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f023 010f 	bic.w	r1, r3, #15
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e6:	e007      	b.n	80022f8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 020f 	bic.w	r2, r2, #15
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022fc:	f023 0303 	bic.w	r3, r3, #3
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	661a      	str	r2, [r3, #96]	@ 0x60
 8002308:	e007      	b.n	800231a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800231a:	7ffb      	ldrb	r3, [r7, #31]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3724      	adds	r7, #36	@ 0x24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}
 8002324:	ffffbffc 	.word	0xffffbffc
 8002328:	58026000 	.word	0x58026000
 800232c:	fc00f81f 	.word	0xfc00f81f
 8002330:	fc00f81e 	.word	0xfc00f81e

08002334 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a60      	ldr	r2, [pc, #384]	@ (80024c8 <HAL_ADC_Start_DMA+0x194>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_ADC_Start_DMA+0x20>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5f      	ldr	r2, [pc, #380]	@ (80024cc <HAL_ADC_Start_DMA+0x198>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_ADC_Start_DMA+0x24>
 8002354:	4b5e      	ldr	r3, [pc, #376]	@ (80024d0 <HAL_ADC_Start_DMA+0x19c>)
 8002356:	e000      	b.n	800235a <HAL_ADC_Start_DMA+0x26>
 8002358:	4b5e      	ldr	r3, [pc, #376]	@ (80024d4 <HAL_ADC_Start_DMA+0x1a0>)
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fd16 	bl	8001d8c <LL_ADC_GetMultimode>
 8002360:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fdb6 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 80a2 	bne.w	80024b8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Start_DMA+0x4e>
 800237e:	2302      	movs	r3, #2
 8002380:	e09d      	b.n	80024be <HAL_ADC_Start_DMA+0x18a>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d003      	beq.n	800239e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b09      	cmp	r3, #9
 800239a:	f040 8086 	bne.w	80024aa <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 ffd0 	bl	8003344 <ADC_Enable>
 80023a4:	4603      	mov	r3, r0
 80023a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d178      	bne.n	80024a0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023b2:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <HAL_ADC_Start_DMA+0x1a4>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a42      	ldr	r2, [pc, #264]	@ (80024cc <HAL_ADC_Start_DMA+0x198>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d002      	beq.n	80023ce <HAL_ADC_Start_DMA+0x9a>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Start_DMA+0x9c>
 80023ce:	4b3e      	ldr	r3, [pc, #248]	@ (80024c8 <HAL_ADC_Start_DMA+0x194>)
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d002      	beq.n	80023de <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023fa:	f023 0206 	bic.w	r2, r3, #6
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	665a      	str	r2, [r3, #100]	@ 0x64
 8002402:	e002      	b.n	800240a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a33      	ldr	r2, [pc, #204]	@ (80024dc <HAL_ADC_Start_DMA+0x1a8>)
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002416:	4a32      	ldr	r2, [pc, #200]	@ (80024e0 <HAL_ADC_Start_DMA+0x1ac>)
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	4a31      	ldr	r2, [pc, #196]	@ (80024e4 <HAL_ADC_Start_DMA+0x1b0>)
 8002420:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	221c      	movs	r2, #28
 8002428:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0210 	orr.w	r2, r2, #16
 8002440:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a28      	ldr	r2, [pc, #160]	@ (80024e8 <HAL_ADC_Start_DMA+0x1b4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10f      	bne.n	800246c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7ff fbfe 	bl	8001c5c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fbe9 	bl	8001c3c <LL_ADC_EnableDMAReq>
 800246a:	e007      	b.n	800247c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7ff fbcd 	bl	8001c16 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3340      	adds	r3, #64	@ 0x40
 8002486:	4619      	mov	r1, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f001 ff80 	bl	8004390 <HAL_DMA_Start_IT>
 8002490:	4603      	mov	r3, r0
 8002492:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fd09 	bl	8001eb0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800249e:	e00d      	b.n	80024bc <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80024a8:	e008      	b.n	80024bc <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80024b6:	e001      	b.n	80024bc <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40022000 	.word	0x40022000
 80024cc:	40022100 	.word	0x40022100
 80024d0:	40022300 	.word	0x40022300
 80024d4:	58026300 	.word	0x58026300
 80024d8:	fffff0fe 	.word	0xfffff0fe
 80024dc:	08003459 	.word	0x08003459
 80024e0:	08003531 	.word	0x08003531
 80024e4:	0800354d 	.word	0x0800354d
 80024e8:	58026000 	.word	0x58026000

080024ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a87      	ldr	r2, [pc, #540]	@ (800272c <HAL_ADC_IRQHandler+0x240>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_ADC_IRQHandler+0x30>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a86      	ldr	r2, [pc, #536]	@ (8002730 <HAL_ADC_IRQHandler+0x244>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_ADC_IRQHandler+0x34>
 800251c:	4b85      	ldr	r3, [pc, #532]	@ (8002734 <HAL_ADC_IRQHandler+0x248>)
 800251e:	e000      	b.n	8002522 <HAL_ADC_IRQHandler+0x36>
 8002520:	4b85      	ldr	r3, [pc, #532]	@ (8002738 <HAL_ADC_IRQHandler+0x24c>)
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fc32 	bl	8001d8c <LL_ADC_GetMultimode>
 8002528:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d017      	beq.n	8002564 <HAL_ADC_IRQHandler+0x78>
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f001 f94e 	bl	80037f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2202      	movs	r2, #2
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d004      	beq.n	8002578 <HAL_ADC_IRQHandler+0x8c>
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8083 	beq.w	800268a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d07d      	beq.n	800268a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff faf4 	bl	8001b98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d062      	beq.n	800267c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002730 <HAL_ADC_IRQHandler+0x244>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d002      	beq.n	80025c6 <HAL_ADC_IRQHandler+0xda>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e000      	b.n	80025c8 <HAL_ADC_IRQHandler+0xdc>
 80025c6:	4b59      	ldr	r3, [pc, #356]	@ (800272c <HAL_ADC_IRQHandler+0x240>)
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d008      	beq.n	80025e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d002      	beq.n	80025e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b09      	cmp	r3, #9
 80025e0:	d104      	bne.n	80025ec <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	e00c      	b.n	8002606 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002730 <HAL_ADC_IRQHandler+0x244>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d002      	beq.n	80025fc <HAL_ADC_IRQHandler+0x110>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e000      	b.n	80025fe <HAL_ADC_IRQHandler+0x112>
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_ADC_IRQHandler+0x240>)
 80025fe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d135      	bne.n	800267c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	d12e      	bne.n	800267c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc58 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11a      	bne.n	8002664 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 020c 	bic.w	r2, r2, #12
 800263c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002642:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d112      	bne.n	800267c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60
 8002662:	e00b      	b.n	800267c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002668:	f043 0210 	orr.w	r2, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002674:	f043 0201 	orr.w	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7fe fb0b 	bl	8000c98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_ADC_IRQHandler+0x1b2>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10b      	bne.n	80026b6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a0 	beq.w	80027ea <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 809a 	beq.w	80027ea <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fadc 	bl	8001c90 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026d8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fa5a 	bl	8001b98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026e4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_ADC_IRQHandler+0x244>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d002      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x20a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	e000      	b.n	80026f8 <HAL_ADC_IRQHandler+0x20c>
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_ADC_IRQHandler+0x240>)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d008      	beq.n	8002712 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b06      	cmp	r3, #6
 800270a:	d002      	beq.n	8002712 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b07      	cmp	r3, #7
 8002710:	d104      	bne.n	800271c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	e014      	b.n	8002746 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a03      	ldr	r2, [pc, #12]	@ (8002730 <HAL_ADC_IRQHandler+0x244>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00a      	beq.n	800273c <HAL_ADC_IRQHandler+0x250>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	e008      	b.n	800273e <HAL_ADC_IRQHandler+0x252>
 800272c:	40022000 	.word	0x40022000
 8002730:	40022100 	.word	0x40022100
 8002734:	40022300 	.word	0x40022300
 8002738:	58026300 	.word	0x58026300
 800273c:	4b84      	ldr	r3, [pc, #528]	@ (8002950 <HAL_ADC_IRQHandler+0x464>)
 800273e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d047      	beq.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_ADC_IRQHandler+0x27a>
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03f      	beq.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002762:	2b00      	cmp	r3, #0
 8002764:	d13a      	bne.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d133      	bne.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d12e      	bne.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fbbb 	bl	8001efe <LL_ADC_INJ_IsConversionOngoing>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11a      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800279c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d112      	bne.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ba:	f043 0201 	orr.w	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80027c2:	e00b      	b.n	80027dc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 ffe3 	bl	80037a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2260      	movs	r2, #96	@ 0x60
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d011      	beq.n	8002818 <HAL_ADC_IRQHandler+0x32c>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8b2 	bl	8002974 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2280      	movs	r2, #128	@ 0x80
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <HAL_ADC_IRQHandler+0x35c>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002830:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 ffc9 	bl	80037d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_ADC_IRQHandler+0x38c>
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002860:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 ffbb 	bl	80037e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002876:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	d043      	beq.n	800290a <HAL_ADC_IRQHandler+0x41e>
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d03e      	beq.n	800290a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002894:	2301      	movs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	e021      	b.n	80028de <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002950 <HAL_ADC_IRQHandler+0x464>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x3c8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a29      	ldr	r2, [pc, #164]	@ (8002954 <HAL_ADC_IRQHandler+0x468>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_IRQHandler+0x3cc>
 80028b4:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_ADC_IRQHandler+0x46c>)
 80028b6:	e000      	b.n	80028ba <HAL_ADC_IRQHandler+0x3ce>
 80028b8:	4b28      	ldr	r3, [pc, #160]	@ (800295c <HAL_ADC_IRQHandler+0x470>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fa74 	bl	8001da8 <LL_ADC_GetMultiDMATransfer>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80028c6:	2301      	movs	r3, #1
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ca:	e008      	b.n	80028de <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80028da:	2301      	movs	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10e      	bne.n	8002902 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f4:	f043 0202 	orr.w	r2, r3, #2
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f843 	bl	8002988 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2210      	movs	r2, #16
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d018      	beq.n	8002946 <HAL_ADC_IRQHandler+0x45a>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800292e:	f043 0208 	orr.w	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800293e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 ff3b 	bl	80037bc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	@ 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000
 8002954:	40022100 	.word	0x40022100
 8002958:	40022300 	.word	0x40022300
 800295c:	58026300 	.word	0x58026300

08002960 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b0a5      	sub	sp, #148	@ 0x94
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029b6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4aa4      	ldr	r2, [pc, #656]	@ (8002c50 <HAL_ADC_ConfigChannel+0x2b4>)
 80029be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x34>
 80029ca:	2302      	movs	r3, #2
 80029cc:	f000 bca2 	b.w	8003314 <HAL_ADC_ConfigChannel+0x978>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fa7b 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f040 8486 	bne.w	80032f6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db31      	blt.n	8002a56 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a97      	ldr	r2, [pc, #604]	@ (8002c54 <HAL_ADC_ConfigChannel+0x2b8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x7e>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	2201      	movs	r2, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	e016      	b.n	8002a48 <HAL_ADC_ConfigChannel+0xac>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8002a32:	2320      	movs	r3, #32
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8002a36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2201      	movs	r2, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	69d1      	ldr	r1, [r2, #28]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f7ff f8ab 	bl	8001bbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fa33 	bl	8001ed8 <LL_ADC_REG_IsConversionOngoing>
 8002a72:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fa3f 	bl	8001efe <LL_ADC_INJ_IsConversionOngoing>
 8002a80:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 824a 	bne.w	8002f22 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 8245 	bne.w	8002f22 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f7ff f906 	bl	8001cb6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a69      	ldr	r2, [pc, #420]	@ (8002c54 <HAL_ADC_ConfigChannel+0x2b8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	08db      	lsrs	r3, r3, #3
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ace:	e032      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ad0:	4b61      	ldr	r3, [pc, #388]	@ (8002c58 <HAL_ADC_ConfigChannel+0x2bc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002adc:	d10b      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x15a>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	e01d      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x196>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x180>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	e00a      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x196>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d048      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b4e:	f7fe ff31 	bl	80019b4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3f      	ldr	r2, [pc, #252]	@ (8002c54 <HAL_ADC_ConfigChannel+0x2b8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d119      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6919      	ldr	r1, [r3, #16]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f7fe ffc9 	bl	8001b00 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6919      	ldr	r1, [r3, #16]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x1ea>
 8002b80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b84:	e000      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x1ec>
 8002b86:	2300      	movs	r3, #0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f7fe ff97 	bl	8001abc <LL_ADC_SetOffsetSaturation>
 8002b8e:	e1c8      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6919      	ldr	r1, [r3, #16]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d102      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x20c>
 8002ba2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002ba6:	e000      	b.n	8002baa <HAL_ADC_ConfigChannel+0x20e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	461a      	mov	r2, r3
 8002bac:	f7fe ff64 	bl	8001a78 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6919      	ldr	r1, [r3, #16]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	7e1b      	ldrb	r3, [r3, #24]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x22a>
 8002bc0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x22c>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f7fe ff3b 	bl	8001a44 <LL_ADC_SetDataRightShift>
 8002bce:	e1a8      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_ADC_ConfigChannel+0x2b8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f040 815b 	bne.w	8002e92 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe ff18 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x26c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe ff0d 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	e017      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x29c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe ff02 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8002c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10b      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x2c0>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	e017      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x2e4>
 8002c50:	47ff0000 	.word	0x47ff0000
 8002c54:	58026000 	.word	0x58026000
 8002c58:	5c001000 	.word	0x5c001000
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d106      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe ff59 	bl	8001b44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe febd 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x322>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe feb2 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	e017      	b.n	8002cee <HAL_ADC_ConfigChannel+0x352>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fea7 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cd8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x36a>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	e011      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x38e>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	e003      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d106      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe ff04 	bl	8001b44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2102      	movs	r1, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe fe68 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x3cc>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2102      	movs	r1, #2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fe5d 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	f003 021f 	and.w	r2, r3, #31
 8002d66:	e017      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x3fc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fe52 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x414>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	e011      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x438>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d106      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe feaf 	bl	8001b44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2103      	movs	r1, #3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe fe13 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x476>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2103      	movs	r1, #3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fe08 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	0e9b      	lsrs	r3, r3, #26
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	e017      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x4a6>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2103      	movs	r1, #3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fdfd 	bl	8001a18 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	61fb      	str	r3, [r7, #28]
  return result;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e003      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x4be>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	e011      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x4e2>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	613b      	str	r3, [r7, #16]
  return result;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d14f      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2103      	movs	r1, #3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fe5a 	bl	8001b44 <LL_ADC_SetOffsetState>
 8002e90:	e047      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	069b      	lsls	r3, r3, #26
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002eb4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	069b      	lsls	r3, r3, #26
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d107      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ed8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	069b      	lsls	r3, r3, #26
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d107      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002efc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	069b      	lsls	r3, r3, #26
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f20:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe ffae 	bl	8001e88 <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 81ea 	bne.w	8003308 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f7fe fee3 	bl	8001d0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a7a      	ldr	r2, [pc, #488]	@ (8003134 <HAL_ADC_ConfigChannel+0x798>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	f040 80e0 	bne.w	8003112 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4977      	ldr	r1, [pc, #476]	@ (8003138 <HAL_ADC_ConfigChannel+0x79c>)
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d147      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x654>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4975      	ldr	r1, [pc, #468]	@ (800313c <HAL_ADC_ConfigChannel+0x7a0>)
 8002f66:	428b      	cmp	r3, r1
 8002f68:	d040      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x650>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4974      	ldr	r1, [pc, #464]	@ (8003140 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f70:	428b      	cmp	r3, r1
 8002f72:	d039      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x64c>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4972      	ldr	r1, [pc, #456]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f7a:	428b      	cmp	r3, r1
 8002f7c:	d032      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x648>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4971      	ldr	r1, [pc, #452]	@ (8003148 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f84:	428b      	cmp	r3, r1
 8002f86:	d02b      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x644>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	496f      	ldr	r1, [pc, #444]	@ (800314c <HAL_ADC_ConfigChannel+0x7b0>)
 8002f8e:	428b      	cmp	r3, r1
 8002f90:	d024      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0x640>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	496e      	ldr	r1, [pc, #440]	@ (8003150 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x63c>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	496c      	ldr	r1, [pc, #432]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 8002fa2:	428b      	cmp	r3, r1
 8002fa4:	d016      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x638>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	496b      	ldr	r1, [pc, #428]	@ (8003158 <HAL_ADC_ConfigChannel+0x7bc>)
 8002fac:	428b      	cmp	r3, r1
 8002fae:	d00f      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x634>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4969      	ldr	r1, [pc, #420]	@ (800315c <HAL_ADC_ConfigChannel+0x7c0>)
 8002fb6:	428b      	cmp	r3, r1
 8002fb8:	d008      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x630>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4968      	ldr	r1, [pc, #416]	@ (8003160 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x62c>
 8002fc4:	4b67      	ldr	r3, [pc, #412]	@ (8003164 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fc6:	e0a0      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e09e      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fcc:	4b66      	ldr	r3, [pc, #408]	@ (8003168 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fce:	e09c      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fd0:	4b66      	ldr	r3, [pc, #408]	@ (800316c <HAL_ADC_ConfigChannel+0x7d0>)
 8002fd2:	e09a      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fd4:	4b60      	ldr	r3, [pc, #384]	@ (8003158 <HAL_ADC_ConfigChannel+0x7bc>)
 8002fd6:	e098      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 8002fda:	e096      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fdc:	4b64      	ldr	r3, [pc, #400]	@ (8003170 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fde:	e094      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fe2:	e092      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	@ (8003178 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fe6:	e090      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fe8:	4b64      	ldr	r3, [pc, #400]	@ (800317c <HAL_ADC_ConfigChannel+0x7e0>)
 8002fea:	e08e      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e08c      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4962      	ldr	r1, [pc, #392]	@ (8003180 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ff6:	428b      	cmp	r3, r1
 8002ff8:	d140      	bne.n	800307c <HAL_ADC_ConfigChannel+0x6e0>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	494f      	ldr	r1, [pc, #316]	@ (800313c <HAL_ADC_ConfigChannel+0x7a0>)
 8003000:	428b      	cmp	r3, r1
 8003002:	d039      	beq.n	8003078 <HAL_ADC_ConfigChannel+0x6dc>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	494d      	ldr	r1, [pc, #308]	@ (8003140 <HAL_ADC_ConfigChannel+0x7a4>)
 800300a:	428b      	cmp	r3, r1
 800300c:	d032      	beq.n	8003074 <HAL_ADC_ConfigChannel+0x6d8>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	494c      	ldr	r1, [pc, #304]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 8003014:	428b      	cmp	r3, r1
 8003016:	d02b      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x6d4>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	494a      	ldr	r1, [pc, #296]	@ (8003148 <HAL_ADC_ConfigChannel+0x7ac>)
 800301e:	428b      	cmp	r3, r1
 8003020:	d024      	beq.n	800306c <HAL_ADC_ConfigChannel+0x6d0>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4949      	ldr	r1, [pc, #292]	@ (800314c <HAL_ADC_ConfigChannel+0x7b0>)
 8003028:	428b      	cmp	r3, r1
 800302a:	d01d      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x6cc>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4947      	ldr	r1, [pc, #284]	@ (8003150 <HAL_ADC_ConfigChannel+0x7b4>)
 8003032:	428b      	cmp	r3, r1
 8003034:	d016      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x6c8>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4946      	ldr	r1, [pc, #280]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 800303c:	428b      	cmp	r3, r1
 800303e:	d00f      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x6c4>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4944      	ldr	r1, [pc, #272]	@ (8003158 <HAL_ADC_ConfigChannel+0x7bc>)
 8003046:	428b      	cmp	r3, r1
 8003048:	d008      	beq.n	800305c <HAL_ADC_ConfigChannel+0x6c0>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4944      	ldr	r1, [pc, #272]	@ (8003160 <HAL_ADC_ConfigChannel+0x7c4>)
 8003050:	428b      	cmp	r3, r1
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x6bc>
 8003054:	4b43      	ldr	r3, [pc, #268]	@ (8003164 <HAL_ADC_ConfigChannel+0x7c8>)
 8003056:	e058      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003058:	2300      	movs	r3, #0
 800305a:	e056      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 800305c:	4b43      	ldr	r3, [pc, #268]	@ (800316c <HAL_ADC_ConfigChannel+0x7d0>)
 800305e:	e054      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003060:	4b3d      	ldr	r3, [pc, #244]	@ (8003158 <HAL_ADC_ConfigChannel+0x7bc>)
 8003062:	e052      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003064:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 8003066:	e050      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003068:	4b41      	ldr	r3, [pc, #260]	@ (8003170 <HAL_ADC_ConfigChannel+0x7d4>)
 800306a:	e04e      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 800306c:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <HAL_ADC_ConfigChannel+0x7d8>)
 800306e:	e04c      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003070:	4b41      	ldr	r3, [pc, #260]	@ (8003178 <HAL_ADC_ConfigChannel+0x7dc>)
 8003072:	e04a      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003074:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_ADC_ConfigChannel+0x7e0>)
 8003076:	e048      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003078:	2301      	movs	r3, #1
 800307a:	e046      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4940      	ldr	r1, [pc, #256]	@ (8003184 <HAL_ADC_ConfigChannel+0x7e8>)
 8003082:	428b      	cmp	r3, r1
 8003084:	d140      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x76c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	492c      	ldr	r1, [pc, #176]	@ (800313c <HAL_ADC_ConfigChannel+0x7a0>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d039      	beq.n	8003104 <HAL_ADC_ConfigChannel+0x768>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	492a      	ldr	r1, [pc, #168]	@ (8003140 <HAL_ADC_ConfigChannel+0x7a4>)
 8003096:	428b      	cmp	r3, r1
 8003098:	d032      	beq.n	8003100 <HAL_ADC_ConfigChannel+0x764>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4929      	ldr	r1, [pc, #164]	@ (8003144 <HAL_ADC_ConfigChannel+0x7a8>)
 80030a0:	428b      	cmp	r3, r1
 80030a2:	d02b      	beq.n	80030fc <HAL_ADC_ConfigChannel+0x760>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4927      	ldr	r1, [pc, #156]	@ (8003148 <HAL_ADC_ConfigChannel+0x7ac>)
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d024      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x75c>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4926      	ldr	r1, [pc, #152]	@ (800314c <HAL_ADC_ConfigChannel+0x7b0>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d01d      	beq.n	80030f4 <HAL_ADC_ConfigChannel+0x758>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4924      	ldr	r1, [pc, #144]	@ (8003150 <HAL_ADC_ConfigChannel+0x7b4>)
 80030be:	428b      	cmp	r3, r1
 80030c0:	d016      	beq.n	80030f0 <HAL_ADC_ConfigChannel+0x754>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4923      	ldr	r1, [pc, #140]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d00f      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x750>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4926      	ldr	r1, [pc, #152]	@ (800316c <HAL_ADC_ConfigChannel+0x7d0>)
 80030d2:	428b      	cmp	r3, r1
 80030d4:	d008      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x74c>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	492b      	ldr	r1, [pc, #172]	@ (8003188 <HAL_ADC_ConfigChannel+0x7ec>)
 80030dc:	428b      	cmp	r3, r1
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x748>
 80030e0:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_ADC_ConfigChannel+0x7f0>)
 80030e2:	e012      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030e4:	2300      	movs	r3, #0
 80030e6:	e010      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030e8:	4b27      	ldr	r3, [pc, #156]	@ (8003188 <HAL_ADC_ConfigChannel+0x7ec>)
 80030ea:	e00e      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <HAL_ADC_ConfigChannel+0x7bc>)
 80030ee:	e00c      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030f0:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <HAL_ADC_ConfigChannel+0x7b8>)
 80030f2:	e00a      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_ADC_ConfigChannel+0x7d4>)
 80030f6:	e008      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_ADC_ConfigChannel+0x7d8>)
 80030fa:	e006      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 80030fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003178 <HAL_ADC_ConfigChannel+0x7dc>)
 80030fe:	e004      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003100:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_ADC_ConfigChannel+0x7e0>)
 8003102:	e002      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <HAL_ADC_ConfigChannel+0x76e>
 8003108:	2300      	movs	r3, #0
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7fe fc17 	bl	8001940 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f280 80f6 	bge.w	8003308 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a05      	ldr	r2, [pc, #20]	@ (8003138 <HAL_ADC_ConfigChannel+0x79c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x794>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <HAL_ADC_ConfigChannel+0x7e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d131      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x7f8>
 8003130:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <HAL_ADC_ConfigChannel+0x7f4>)
 8003132:	e030      	b.n	8003196 <HAL_ADC_ConfigChannel+0x7fa>
 8003134:	47ff0000 	.word	0x47ff0000
 8003138:	40022000 	.word	0x40022000
 800313c:	04300002 	.word	0x04300002
 8003140:	08600004 	.word	0x08600004
 8003144:	0c900008 	.word	0x0c900008
 8003148:	10c00010 	.word	0x10c00010
 800314c:	14f00020 	.word	0x14f00020
 8003150:	2a000400 	.word	0x2a000400
 8003154:	2e300800 	.word	0x2e300800
 8003158:	32601000 	.word	0x32601000
 800315c:	43210000 	.word	0x43210000
 8003160:	4b840000 	.word	0x4b840000
 8003164:	4fb80000 	.word	0x4fb80000
 8003168:	47520000 	.word	0x47520000
 800316c:	36902000 	.word	0x36902000
 8003170:	25b00200 	.word	0x25b00200
 8003174:	21800100 	.word	0x21800100
 8003178:	1d500080 	.word	0x1d500080
 800317c:	19200040 	.word	0x19200040
 8003180:	40022100 	.word	0x40022100
 8003184:	58026000 	.word	0x58026000
 8003188:	3ac04000 	.word	0x3ac04000
 800318c:	3ef08000 	.word	0x3ef08000
 8003190:	40022300 	.word	0x40022300
 8003194:	4b61      	ldr	r3, [pc, #388]	@ (800331c <HAL_ADC_ConfigChannel+0x980>)
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fbc4 	bl	8001924 <LL_ADC_GetCommonPathInternalCh>
 800319c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5f      	ldr	r2, [pc, #380]	@ (8003320 <HAL_ADC_ConfigChannel+0x984>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x816>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003324 <HAL_ADC_ConfigChannel+0x988>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10e      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x834>
 80031b2:	485b      	ldr	r0, [pc, #364]	@ (8003320 <HAL_ADC_ConfigChannel+0x984>)
 80031b4:	f7fe fe68 	bl	8001e88 <LL_ADC_IsEnabled>
 80031b8:	4604      	mov	r4, r0
 80031ba:	485a      	ldr	r0, [pc, #360]	@ (8003324 <HAL_ADC_ConfigChannel+0x988>)
 80031bc:	f7fe fe64 	bl	8001e88 <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4323      	orrs	r3, r4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x846>
 80031d0:	4855      	ldr	r0, [pc, #340]	@ (8003328 <HAL_ADC_ConfigChannel+0x98c>)
 80031d2:	f7fe fe59 	bl	8001e88 <LL_ADC_IsEnabled>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d07d      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a50      	ldr	r2, [pc, #320]	@ (800332c <HAL_ADC_ConfigChannel+0x990>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d130      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x8b6>
 80031f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d12b      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003328 <HAL_ADC_ConfigChannel+0x98c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f040 8081 	bne.w	8003308 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a45      	ldr	r2, [pc, #276]	@ (8003320 <HAL_ADC_ConfigChannel+0x984>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_ADC_ConfigChannel+0x87e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a43      	ldr	r2, [pc, #268]	@ (8003324 <HAL_ADC_ConfigChannel+0x988>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x882>
 800321a:	4a45      	ldr	r2, [pc, #276]	@ (8003330 <HAL_ADC_ConfigChannel+0x994>)
 800321c:	e000      	b.n	8003220 <HAL_ADC_ConfigChannel+0x884>
 800321e:	4a3f      	ldr	r2, [pc, #252]	@ (800331c <HAL_ADC_ConfigChannel+0x980>)
 8003220:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003222:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7fe fb68 	bl	80018fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800322e:	4b41      	ldr	r3, [pc, #260]	@ (8003334 <HAL_ADC_ConfigChannel+0x998>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	4a40      	ldr	r2, [pc, #256]	@ (8003338 <HAL_ADC_ConfigChannel+0x99c>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	099b      	lsrs	r3, r3, #6
 800323c:	3301      	adds	r3, #1
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003242:	e002      	b.n	800324a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3b01      	subs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f9      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003250:	e05a      	b.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a39      	ldr	r2, [pc, #228]	@ (800333c <HAL_ADC_ConfigChannel+0x9a0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d11e      	bne.n	800329a <HAL_ADC_ConfigChannel+0x8fe>
 800325c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800325e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d119      	bne.n	800329a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2f      	ldr	r2, [pc, #188]	@ (8003328 <HAL_ADC_ConfigChannel+0x98c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d14b      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2a      	ldr	r2, [pc, #168]	@ (8003320 <HAL_ADC_ConfigChannel+0x984>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x8e8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a29      	ldr	r2, [pc, #164]	@ (8003324 <HAL_ADC_ConfigChannel+0x988>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d101      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x8ec>
 8003284:	4a2a      	ldr	r2, [pc, #168]	@ (8003330 <HAL_ADC_ConfigChannel+0x994>)
 8003286:	e000      	b.n	800328a <HAL_ADC_ConfigChannel+0x8ee>
 8003288:	4a24      	ldr	r2, [pc, #144]	@ (800331c <HAL_ADC_ConfigChannel+0x980>)
 800328a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800328c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f7fe fb33 	bl	80018fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	e036      	b.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a28      	ldr	r2, [pc, #160]	@ (8003340 <HAL_ADC_ConfigChannel+0x9a4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d131      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
 80032a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d12c      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <HAL_ADC_ConfigChannel+0x98c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d127      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_ADC_ConfigChannel+0x984>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x930>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a17      	ldr	r2, [pc, #92]	@ (8003324 <HAL_ADC_ConfigChannel+0x988>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x934>
 80032cc:	4a18      	ldr	r2, [pc, #96]	@ (8003330 <HAL_ADC_ConfigChannel+0x994>)
 80032ce:	e000      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x936>
 80032d0:	4a12      	ldr	r2, [pc, #72]	@ (800331c <HAL_ADC_ConfigChannel+0x980>)
 80032d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7fe fb0f 	bl	80018fe <LL_ADC_SetCommonPathInternalCh>
 80032e0:	e012      	b.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80032f4:	e008      	b.n	8003308 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003310:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003314:	4618      	mov	r0, r3
 8003316:	3794      	adds	r7, #148	@ 0x94
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}
 800331c:	58026300 	.word	0x58026300
 8003320:	40022000 	.word	0x40022000
 8003324:	40022100 	.word	0x40022100
 8003328:	58026000 	.word	0x58026000
 800332c:	c7520000 	.word	0xc7520000
 8003330:	40022300 	.word	0x40022300
 8003334:	24000018 	.word	0x24000018
 8003338:	053e2d63 	.word	0x053e2d63
 800333c:	c3210000 	.word	0xc3210000
 8003340:	cb840000 	.word	0xcb840000

08003344 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe fd99 	bl	8001e88 <LL_ADC_IsEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d16e      	bne.n	800343a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	4b38      	ldr	r3, [pc, #224]	@ (8003444 <ADC_Enable+0x100>)
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e05a      	b.n	800343c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fd68 	bl	8001e60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003390:	f7fe fa80 	bl	8001894 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2b      	ldr	r2, [pc, #172]	@ (8003448 <ADC_Enable+0x104>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d004      	beq.n	80033aa <ADC_Enable+0x66>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	@ (800344c <ADC_Enable+0x108>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <ADC_Enable+0x6a>
 80033aa:	4b29      	ldr	r3, [pc, #164]	@ (8003450 <ADC_Enable+0x10c>)
 80033ac:	e000      	b.n	80033b0 <ADC_Enable+0x6c>
 80033ae:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <ADC_Enable+0x110>)
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fceb 	bl	8001d8c <LL_ADC_GetMultimode>
 80033b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a23      	ldr	r2, [pc, #140]	@ (800344c <ADC_Enable+0x108>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d002      	beq.n	80033c8 <ADC_Enable+0x84>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	e000      	b.n	80033ca <ADC_Enable+0x86>
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <ADC_Enable+0x104>)
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02c      	beq.n	800342c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d130      	bne.n	800343a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033d8:	e028      	b.n	800342c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe fd52 	bl	8001e88 <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fd36 	bl	8001e60 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033f4:	f7fe fa4e 	bl	8001894 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d914      	bls.n	800342c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d00d      	beq.n	800342c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d1cf      	bne.n	80033da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	8000003f 	.word	0x8000003f
 8003448:	40022000 	.word	0x40022000
 800344c:	40022100 	.word	0x40022100
 8003450:	40022300 	.word	0x40022300
 8003454:	58026300 	.word	0x58026300

08003458 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d14b      	bne.n	800350a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d021      	beq.n	80034d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fb81 	bl	8001b98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d032      	beq.n	8003502 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12b      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11f      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80034ce:	e018      	b.n	8003502 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d111      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7fd fbc8 	bl	8000c98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003508:	e00e      	b.n	8003528 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fa36 	bl	8002988 <HAL_ADC_ErrorCallback>
}
 800351c:	e004      	b.n	8003528 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fa0e 	bl	8002960 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff fa08 	bl	8002988 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6c      	ldr	r2, [pc, #432]	@ (8003740 <ADC_ConfigureBoostMode+0x1c0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d004      	beq.n	800359c <ADC_ConfigureBoostMode+0x1c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6b      	ldr	r2, [pc, #428]	@ (8003744 <ADC_ConfigureBoostMode+0x1c4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d109      	bne.n	80035b0 <ADC_ConfigureBoostMode+0x30>
 800359c:	4b6a      	ldr	r3, [pc, #424]	@ (8003748 <ADC_ConfigureBoostMode+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e008      	b.n	80035c2 <ADC_ConfigureBoostMode+0x42>
 80035b0:	4b66      	ldr	r3, [pc, #408]	@ (800374c <ADC_ConfigureBoostMode+0x1cc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01c      	beq.n	8003600 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80035c6:	f003 fd4b 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 80035ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035d4:	d010      	beq.n	80035f8 <ADC_ConfigureBoostMode+0x78>
 80035d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035da:	d873      	bhi.n	80036c4 <ADC_ConfigureBoostMode+0x144>
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e0:	d002      	beq.n	80035e8 <ADC_ConfigureBoostMode+0x68>
 80035e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035e6:	d16d      	bne.n	80036c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	60fb      	str	r3, [r7, #12]
        break;
 80035f6:	e068      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	60fb      	str	r3, [r7, #12]
        break;
 80035fe:	e064      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003600:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f004 ff10 	bl	800842c <HAL_RCCEx_GetPeriphCLKFreq>
 800360c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003616:	d051      	beq.n	80036bc <ADC_ConfigureBoostMode+0x13c>
 8003618:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800361c:	d854      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 800361e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003622:	d047      	beq.n	80036b4 <ADC_ConfigureBoostMode+0x134>
 8003624:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003628:	d84e      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 800362a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800362e:	d03d      	beq.n	80036ac <ADC_ConfigureBoostMode+0x12c>
 8003630:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003634:	d848      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 8003636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800363a:	d033      	beq.n	80036a4 <ADC_ConfigureBoostMode+0x124>
 800363c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003640:	d842      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 8003642:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003646:	d029      	beq.n	800369c <ADC_ConfigureBoostMode+0x11c>
 8003648:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800364c:	d83c      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 800364e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003652:	d01a      	beq.n	800368a <ADC_ConfigureBoostMode+0x10a>
 8003654:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003658:	d836      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 800365a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800365e:	d014      	beq.n	800368a <ADC_ConfigureBoostMode+0x10a>
 8003660:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003664:	d830      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800366a:	d00e      	beq.n	800368a <ADC_ConfigureBoostMode+0x10a>
 800366c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003670:	d82a      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 8003672:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003676:	d008      	beq.n	800368a <ADC_ConfigureBoostMode+0x10a>
 8003678:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800367c:	d824      	bhi.n	80036c8 <ADC_ConfigureBoostMode+0x148>
 800367e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003682:	d002      	beq.n	800368a <ADC_ConfigureBoostMode+0x10a>
 8003684:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003688:	d11e      	bne.n	80036c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	0c9b      	lsrs	r3, r3, #18
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	60fb      	str	r3, [r7, #12]
        break;
 800369a:	e016      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
        break;
 80036a2:	e012      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	60fb      	str	r3, [r7, #12]
        break;
 80036aa:	e00e      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	60fb      	str	r3, [r7, #12]
        break;
 80036b2:	e00a      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	09db      	lsrs	r3, r3, #7
 80036b8:	60fb      	str	r3, [r7, #12]
        break;
 80036ba:	e006      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	60fb      	str	r3, [r7, #12]
        break;
 80036c2:	e002      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80036c4:	bf00      	nop
 80036c6:	e000      	b.n	80036ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80036c8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003750 <ADC_ConfigureBoostMode+0x1d0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d808      	bhi.n	80036ea <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80036e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036e8:	e025      	b.n	8003736 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a19      	ldr	r2, [pc, #100]	@ (8003754 <ADC_ConfigureBoostMode+0x1d4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d80a      	bhi.n	8003708 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003704:	609a      	str	r2, [r3, #8]
}
 8003706:	e016      	b.n	8003736 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <ADC_ConfigureBoostMode+0x1d8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d80a      	bhi.n	8003726 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	e007      	b.n	8003736 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003734:	609a      	str	r2, [r3, #8]
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40022000 	.word	0x40022000
 8003744:	40022100 	.word	0x40022100
 8003748:	40022300 	.word	0x40022300
 800374c:	58026300 	.word	0x58026300
 8003750:	005f5e10 	.word	0x005f5e10
 8003754:	00bebc20 	.word	0x00bebc20
 8003758:	017d7840 	.word	0x017d7840

0800375c <LL_ADC_IsEnabled>:
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <LL_ADC_IsEnabled+0x18>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <LL_ADC_IsEnabled+0x1a>
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_ADC_REG_IsConversionOngoing>:
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d101      	bne.n	800379a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b0a3      	sub	sp, #140	@ 0x8c
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003826:	2302      	movs	r3, #2
 8003828:	e0c1      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003836:	2300      	movs	r3, #0
 8003838:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5e      	ldr	r2, [pc, #376]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d102      	bne.n	800384a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003844:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e001      	b.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0a0      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff87 	bl	8003782 <LL_ADC_REG_IsConversionOngoing>
 8003874:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff80 	bl	8003782 <LL_ADC_REG_IsConversionOngoing>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8081 	bne.w	800398c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800388a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d17c      	bne.n	800398c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a48      	ldr	r2, [pc, #288]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a46      	ldr	r2, [pc, #280]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80038a6:	4b46      	ldr	r3, [pc, #280]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038a8:	e000      	b.n	80038ac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80038aa:	4b46      	ldr	r3, [pc, #280]	@ (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038ac:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d039      	beq.n	800392a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a3a      	ldr	r2, [pc, #232]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a39      	ldr	r2, [pc, #228]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d10e      	bne.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80038dc:	4836      	ldr	r0, [pc, #216]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038de:	f7ff ff3d 	bl	800375c <LL_ADC_IsEnabled>
 80038e2:	4604      	mov	r4, r0
 80038e4:	4835      	ldr	r0, [pc, #212]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038e6:	f7ff ff39 	bl	800375c <LL_ADC_IsEnabled>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4323      	orrs	r3, r4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e008      	b.n	800390c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80038fa:	4833      	ldr	r0, [pc, #204]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80038fc:	f7ff ff2e 	bl	800375c <LL_ADC_IsEnabled>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d047      	beq.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003910:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	4b2d      	ldr	r3, [pc, #180]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003916:	4013      	ands	r3, r2
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	6811      	ldr	r1, [r2, #0]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	6892      	ldr	r2, [r2, #8]
 8003920:	430a      	orrs	r2, r1
 8003922:	431a      	orrs	r2, r3
 8003924:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003926:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003928:	e03a      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800392a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003934:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1f      	ldr	r2, [pc, #124]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1d      	ldr	r2, [pc, #116]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10e      	bne.n	8003968 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800394a:	481b      	ldr	r0, [pc, #108]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800394c:	f7ff ff06 	bl	800375c <LL_ADC_IsEnabled>
 8003950:	4604      	mov	r4, r0
 8003952:	481a      	ldr	r0, [pc, #104]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003954:	f7ff ff02 	bl	800375c <LL_ADC_IsEnabled>
 8003958:	4603      	mov	r3, r0
 800395a:	4323      	orrs	r3, r4
 800395c:	2b00      	cmp	r3, #0
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e008      	b.n	800397a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003968:	4817      	ldr	r0, [pc, #92]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800396a:	f7ff fef7 	bl	800375c <LL_ADC_IsEnabled>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d010      	beq.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800397e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003984:	4013      	ands	r3, r2
 8003986:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003988:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800398a:	e009      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800399e:	e000      	b.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80039aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	378c      	adds	r7, #140	@ 0x8c
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40022100 	.word	0x40022100
 80039c0:	40022300 	.word	0x40022300
 80039c4:	58026300 	.word	0x58026300
 80039c8:	58026000 	.word	0x58026000
 80039cc:	fffff0e0 	.word	0xfffff0e0

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <__NVIC_SetPriorityGrouping+0x40>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039f8:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	@ (8003a10 <__NVIC_SetPriorityGrouping+0x40>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00
 8003a14:	05fa0000 	.word	0x05fa0000

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	@ (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	@ (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3c:	d301      	bcc.n	8003b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00f      	b.n	8003b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b42:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <SysTick_Config+0x40>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	f7ff ff8e 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <SysTick_Config+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <SysTick_Config+0x40>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff29 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff40 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff90 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5f 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff33 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa4 	bl	8003b2c <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003bf4:	f3bf 8f5f 	dmb	sy
}
 8003bf8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_MPU_Disable+0x28>)
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	4a06      	ldr	r2, [pc, #24]	@ (8003c18 <HAL_MPU_Disable+0x28>)
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c04:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003c06:	4b05      	ldr	r3, [pc, #20]	@ (8003c1c <HAL_MPU_Disable+0x2c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	605a      	str	r2, [r3, #4]
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000ed00 	.word	0xe000ed00
 8003c1c:	e000ed90 	.word	0xe000ed90

08003c20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003c28:	4a0b      	ldr	r2, [pc, #44]	@ (8003c58 <HAL_MPU_Enable+0x38>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <HAL_MPU_Enable+0x3c>)
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	4a09      	ldr	r2, [pc, #36]	@ (8003c5c <HAL_MPU_Enable+0x3c>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c3e:	f3bf 8f4f 	dsb	sy
}
 8003c42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c44:	f3bf 8f6f 	isb	sy
}
 8003c48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000ed90 	.word	0xe000ed90
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	785a      	ldrb	r2, [r3, #1]
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <HAL_MPU_ConfigRegion+0x7c>)
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	@ (8003cdc <HAL_MPU_ConfigRegion+0x7c>)
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	4a19      	ldr	r2, [pc, #100]	@ (8003cdc <HAL_MPU_ConfigRegion+0x7c>)
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003c7c:	4a17      	ldr	r2, [pc, #92]	@ (8003cdc <HAL_MPU_ConfigRegion+0x7c>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7b1b      	ldrb	r3, [r3, #12]
 8003c88:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7adb      	ldrb	r3, [r3, #11]
 8003c8e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7a9b      	ldrb	r3, [r3, #10]
 8003c96:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7b5b      	ldrb	r3, [r3, #13]
 8003c9e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ca0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7b9b      	ldrb	r3, [r3, #14]
 8003ca6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ca8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	7bdb      	ldrb	r3, [r3, #15]
 8003cae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	7a5b      	ldrb	r3, [r3, #9]
 8003cb6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7a1b      	ldrb	r3, [r3, #8]
 8003cbe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003cc0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003cc8:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003cca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ccc:	6113      	str	r3, [r2, #16]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000ed90 	.word	0xe000ed90

08003ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003ce8:	f7fd fdd4 	bl	8001894 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e312      	b.n	800431e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a66      	ldr	r2, [pc, #408]	@ (8003e98 <HAL_DMA_Init+0x1b8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d04a      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a65      	ldr	r2, [pc, #404]	@ (8003e9c <HAL_DMA_Init+0x1bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d045      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a63      	ldr	r2, [pc, #396]	@ (8003ea0 <HAL_DMA_Init+0x1c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d040      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a62      	ldr	r2, [pc, #392]	@ (8003ea4 <HAL_DMA_Init+0x1c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d03b      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a60      	ldr	r2, [pc, #384]	@ (8003ea8 <HAL_DMA_Init+0x1c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d036      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003eac <HAL_DMA_Init+0x1cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5d      	ldr	r2, [pc, #372]	@ (8003eb0 <HAL_DMA_Init+0x1d0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02c      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb4 <HAL_DMA_Init+0x1d4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003eb8 <HAL_DMA_Init+0x1d8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a59      	ldr	r2, [pc, #356]	@ (8003ebc <HAL_DMA_Init+0x1dc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a57      	ldr	r2, [pc, #348]	@ (8003ec0 <HAL_DMA_Init+0x1e0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a56      	ldr	r2, [pc, #344]	@ (8003ec4 <HAL_DMA_Init+0x1e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a54      	ldr	r2, [pc, #336]	@ (8003ec8 <HAL_DMA_Init+0x1e8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a53      	ldr	r2, [pc, #332]	@ (8003ecc <HAL_DMA_Init+0x1ec>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a51      	ldr	r2, [pc, #324]	@ (8003ed0 <HAL_DMA_Init+0x1f0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_DMA_Init+0xb8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a50      	ldr	r2, [pc, #320]	@ (8003ed4 <HAL_DMA_Init+0x1f4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_DMA_Init+0xbc>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_DMA_Init+0xbe>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 813c 	beq.w	800401c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a37      	ldr	r2, [pc, #220]	@ (8003e98 <HAL_DMA_Init+0x1b8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d04a      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a36      	ldr	r2, [pc, #216]	@ (8003e9c <HAL_DMA_Init+0x1bc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d045      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a34      	ldr	r2, [pc, #208]	@ (8003ea0 <HAL_DMA_Init+0x1c0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d040      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a33      	ldr	r2, [pc, #204]	@ (8003ea4 <HAL_DMA_Init+0x1c4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d03b      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a31      	ldr	r2, [pc, #196]	@ (8003ea8 <HAL_DMA_Init+0x1c8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d036      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a30      	ldr	r2, [pc, #192]	@ (8003eac <HAL_DMA_Init+0x1cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d031      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb0 <HAL_DMA_Init+0x1d0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d02c      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb4 <HAL_DMA_Init+0x1d4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d027      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb8 <HAL_DMA_Init+0x1d8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a2a      	ldr	r2, [pc, #168]	@ (8003ebc <HAL_DMA_Init+0x1dc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <HAL_DMA_Init+0x1e0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a27      	ldr	r2, [pc, #156]	@ (8003ec4 <HAL_DMA_Init+0x1e4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a25      	ldr	r2, [pc, #148]	@ (8003ec8 <HAL_DMA_Init+0x1e8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a24      	ldr	r2, [pc, #144]	@ (8003ecc <HAL_DMA_Init+0x1ec>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a22      	ldr	r2, [pc, #136]	@ (8003ed0 <HAL_DMA_Init+0x1f0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_DMA_Init+0x174>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a21      	ldr	r2, [pc, #132]	@ (8003ed4 <HAL_DMA_Init+0x1f4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d108      	bne.n	8003e66 <HAL_DMA_Init+0x186>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e007      	b.n	8003e76 <HAL_DMA_Init+0x196>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e76:	e02f      	b.n	8003ed8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e78:	f7fd fd0c 	bl	8001894 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d928      	bls.n	8003ed8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e242      	b.n	800431e <HAL_DMA_Init+0x63e>
 8003e98:	40020010 	.word	0x40020010
 8003e9c:	40020028 	.word	0x40020028
 8003ea0:	40020040 	.word	0x40020040
 8003ea4:	40020058 	.word	0x40020058
 8003ea8:	40020070 	.word	0x40020070
 8003eac:	40020088 	.word	0x40020088
 8003eb0:	400200a0 	.word	0x400200a0
 8003eb4:	400200b8 	.word	0x400200b8
 8003eb8:	40020410 	.word	0x40020410
 8003ebc:	40020428 	.word	0x40020428
 8003ec0:	40020440 	.word	0x40020440
 8003ec4:	40020458 	.word	0x40020458
 8003ec8:	40020470 	.word	0x40020470
 8003ecc:	40020488 	.word	0x40020488
 8003ed0:	400204a0 	.word	0x400204a0
 8003ed4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1c8      	bne.n	8003e78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4b83      	ldr	r3, [pc, #524]	@ (8004100 <HAL_DMA_Init+0x420>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d107      	bne.n	8003f3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	4313      	orrs	r3, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b28      	cmp	r3, #40	@ 0x28
 8003f42:	d903      	bls.n	8003f4c <HAL_DMA_Init+0x26c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f4a:	d91f      	bls.n	8003f8c <HAL_DMA_Init+0x2ac>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f52:	d903      	bls.n	8003f5c <HAL_DMA_Init+0x27c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b42      	cmp	r3, #66	@ 0x42
 8003f5a:	d917      	bls.n	8003f8c <HAL_DMA_Init+0x2ac>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b46      	cmp	r3, #70	@ 0x46
 8003f62:	d903      	bls.n	8003f6c <HAL_DMA_Init+0x28c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b48      	cmp	r3, #72	@ 0x48
 8003f6a:	d90f      	bls.n	8003f8c <HAL_DMA_Init+0x2ac>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f72:	d903      	bls.n	8003f7c <HAL_DMA_Init+0x29c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b52      	cmp	r3, #82	@ 0x52
 8003f7a:	d907      	bls.n	8003f8c <HAL_DMA_Init+0x2ac>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b73      	cmp	r3, #115	@ 0x73
 8003f82:	d905      	bls.n	8003f90 <HAL_DMA_Init+0x2b0>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b77      	cmp	r3, #119	@ 0x77
 8003f8a:	d801      	bhi.n	8003f90 <HAL_DMA_Init+0x2b0>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <HAL_DMA_Init+0x2b2>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f9c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d117      	bne.n	8003ff8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f001 fdca 	bl	8005b74 <DMA_CheckFifoParam>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2240      	movs	r2, #64	@ 0x40
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e192      	b.n	800431e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f001 fd05 	bl	8005a10 <DMA_CalcBaseAndBitshift>
 8004006:	4603      	mov	r3, r0
 8004008:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	223f      	movs	r2, #63	@ 0x3f
 8004014:	409a      	lsls	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	e0c8      	b.n	80041ae <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a38      	ldr	r2, [pc, #224]	@ (8004104 <HAL_DMA_Init+0x424>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d022      	beq.n	800406c <HAL_DMA_Init+0x38c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a37      	ldr	r2, [pc, #220]	@ (8004108 <HAL_DMA_Init+0x428>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d01d      	beq.n	800406c <HAL_DMA_Init+0x38c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a35      	ldr	r2, [pc, #212]	@ (800410c <HAL_DMA_Init+0x42c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d018      	beq.n	800406c <HAL_DMA_Init+0x38c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a34      	ldr	r2, [pc, #208]	@ (8004110 <HAL_DMA_Init+0x430>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d013      	beq.n	800406c <HAL_DMA_Init+0x38c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a32      	ldr	r2, [pc, #200]	@ (8004114 <HAL_DMA_Init+0x434>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00e      	beq.n	800406c <HAL_DMA_Init+0x38c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <HAL_DMA_Init+0x438>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d009      	beq.n	800406c <HAL_DMA_Init+0x38c>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <HAL_DMA_Init+0x43c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_DMA_Init+0x38c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2e      	ldr	r2, [pc, #184]	@ (8004120 <HAL_DMA_Init+0x440>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_DMA_Init+0x390>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_DMA_Init+0x392>
 8004070:	2300      	movs	r3, #0
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8092 	beq.w	800419c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a21      	ldr	r2, [pc, #132]	@ (8004104 <HAL_DMA_Init+0x424>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d021      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a20      	ldr	r2, [pc, #128]	@ (8004108 <HAL_DMA_Init+0x428>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01c      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1e      	ldr	r2, [pc, #120]	@ (800410c <HAL_DMA_Init+0x42c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d017      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <HAL_DMA_Init+0x430>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d012      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004114 <HAL_DMA_Init+0x434>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004118 <HAL_DMA_Init+0x438>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d008      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a18      	ldr	r2, [pc, #96]	@ (800411c <HAL_DMA_Init+0x43c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <HAL_DMA_Init+0x3e6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a17      	ldr	r2, [pc, #92]	@ (8004120 <HAL_DMA_Init+0x440>)
 80040c4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2202      	movs	r2, #2
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_DMA_Init+0x444>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b40      	cmp	r3, #64	@ 0x40
 80040ec:	d01c      	beq.n	8004128 <HAL_DMA_Init+0x448>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b80      	cmp	r3, #128	@ 0x80
 80040f4:	d102      	bne.n	80040fc <HAL_DMA_Init+0x41c>
 80040f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040fa:	e016      	b.n	800412a <HAL_DMA_Init+0x44a>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e014      	b.n	800412a <HAL_DMA_Init+0x44a>
 8004100:	fe10803f 	.word	0xfe10803f
 8004104:	58025408 	.word	0x58025408
 8004108:	5802541c 	.word	0x5802541c
 800410c:	58025430 	.word	0x58025430
 8004110:	58025444 	.word	0x58025444
 8004114:	58025458 	.word	0x58025458
 8004118:	5802546c 	.word	0x5802546c
 800411c:	58025480 	.word	0x58025480
 8004120:	58025494 	.word	0x58025494
 8004124:	fffe000f 	.word	0xfffe000f
 8004128:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d2      	ldr	r2, [r2, #12]
 800412e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004158:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b6e      	ldr	r3, [pc, #440]	@ (8004328 <HAL_DMA_Init+0x648>)
 8004170:	4413      	add	r3, r2
 8004172:	4a6e      	ldr	r2, [pc, #440]	@ (800432c <HAL_DMA_Init+0x64c>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	009a      	lsls	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 fc45 	bl	8005a10 <DMA_CalcBaseAndBitshift>
 8004186:	4603      	mov	r3, r0
 8004188:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2201      	movs	r2, #1
 8004194:	409a      	lsls	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	e008      	b.n	80041ae <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2240      	movs	r2, #64	@ 0x40
 80041a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2203      	movs	r2, #3
 80041a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0b7      	b.n	800431e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a5f      	ldr	r2, [pc, #380]	@ (8004330 <HAL_DMA_Init+0x650>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d072      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004334 <HAL_DMA_Init+0x654>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d06d      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004338 <HAL_DMA_Init+0x658>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d068      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5a      	ldr	r2, [pc, #360]	@ (800433c <HAL_DMA_Init+0x65c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d063      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a59      	ldr	r2, [pc, #356]	@ (8004340 <HAL_DMA_Init+0x660>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d05e      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a57      	ldr	r2, [pc, #348]	@ (8004344 <HAL_DMA_Init+0x664>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d059      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a56      	ldr	r2, [pc, #344]	@ (8004348 <HAL_DMA_Init+0x668>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d054      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a54      	ldr	r2, [pc, #336]	@ (800434c <HAL_DMA_Init+0x66c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d04f      	beq.n	800429e <HAL_DMA_Init+0x5be>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a53      	ldr	r2, [pc, #332]	@ (8004350 <HAL_DMA_Init+0x670>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a51      	ldr	r2, [pc, #324]	@ (8004354 <HAL_DMA_Init+0x674>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a50      	ldr	r2, [pc, #320]	@ (8004358 <HAL_DMA_Init+0x678>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_Init+0x5be>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a4e      	ldr	r2, [pc, #312]	@ (800435c <HAL_DMA_Init+0x67c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a4d      	ldr	r2, [pc, #308]	@ (8004360 <HAL_DMA_Init+0x680>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a4b      	ldr	r2, [pc, #300]	@ (8004364 <HAL_DMA_Init+0x684>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_Init+0x5be>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4a      	ldr	r2, [pc, #296]	@ (8004368 <HAL_DMA_Init+0x688>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a48      	ldr	r2, [pc, #288]	@ (800436c <HAL_DMA_Init+0x68c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_Init+0x5be>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a47      	ldr	r2, [pc, #284]	@ (8004370 <HAL_DMA_Init+0x690>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a45      	ldr	r2, [pc, #276]	@ (8004374 <HAL_DMA_Init+0x694>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a44      	ldr	r2, [pc, #272]	@ (8004378 <HAL_DMA_Init+0x698>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_Init+0x5be>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a42      	ldr	r2, [pc, #264]	@ (800437c <HAL_DMA_Init+0x69c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a41      	ldr	r2, [pc, #260]	@ (8004380 <HAL_DMA_Init+0x6a0>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3f      	ldr	r2, [pc, #252]	@ (8004384 <HAL_DMA_Init+0x6a4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_Init+0x5be>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a3e      	ldr	r2, [pc, #248]	@ (8004388 <HAL_DMA_Init+0x6a8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_Init+0x5be>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3c      	ldr	r2, [pc, #240]	@ (800438c <HAL_DMA_Init+0x6ac>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <HAL_DMA_Init+0x5c2>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_DMA_Init+0x5c4>
 80042a2:	2300      	movs	r3, #0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d032      	beq.n	800430e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f001 fcdf 	bl	8005c6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b80      	cmp	r3, #128	@ 0x80
 80042b4:	d102      	bne.n	80042bc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d010      	beq.n	80042fc <HAL_DMA_Init+0x61c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b08      	cmp	r3, #8
 80042e0:	d80c      	bhi.n	80042fc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f001 fd5c 	bl	8005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	e008      	b.n	800430e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	a7fdabf8 	.word	0xa7fdabf8
 800432c:	cccccccd 	.word	0xcccccccd
 8004330:	40020010 	.word	0x40020010
 8004334:	40020028 	.word	0x40020028
 8004338:	40020040 	.word	0x40020040
 800433c:	40020058 	.word	0x40020058
 8004340:	40020070 	.word	0x40020070
 8004344:	40020088 	.word	0x40020088
 8004348:	400200a0 	.word	0x400200a0
 800434c:	400200b8 	.word	0x400200b8
 8004350:	40020410 	.word	0x40020410
 8004354:	40020428 	.word	0x40020428
 8004358:	40020440 	.word	0x40020440
 800435c:	40020458 	.word	0x40020458
 8004360:	40020470 	.word	0x40020470
 8004364:	40020488 	.word	0x40020488
 8004368:	400204a0 	.word	0x400204a0
 800436c:	400204b8 	.word	0x400204b8
 8004370:	58025408 	.word	0x58025408
 8004374:	5802541c 	.word	0x5802541c
 8004378:	58025430 	.word	0x58025430
 800437c:	58025444 	.word	0x58025444
 8004380:	58025458 	.word	0x58025458
 8004384:	5802546c 	.word	0x5802546c
 8004388:	58025480 	.word	0x58025480
 800438c:	58025494 	.word	0x58025494

08004390 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e226      	b.n	80047fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_DMA_Start_IT+0x2a>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e21f      	b.n	80047fa <HAL_DMA_Start_IT+0x46a>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f040 820a 	bne.w	80047e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a68      	ldr	r2, [pc, #416]	@ (8004584 <HAL_DMA_Start_IT+0x1f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04a      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a66      	ldr	r2, [pc, #408]	@ (8004588 <HAL_DMA_Start_IT+0x1f8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d045      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a65      	ldr	r2, [pc, #404]	@ (800458c <HAL_DMA_Start_IT+0x1fc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d040      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a63      	ldr	r2, [pc, #396]	@ (8004590 <HAL_DMA_Start_IT+0x200>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d03b      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a62      	ldr	r2, [pc, #392]	@ (8004594 <HAL_DMA_Start_IT+0x204>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d036      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a60      	ldr	r2, [pc, #384]	@ (8004598 <HAL_DMA_Start_IT+0x208>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d031      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a5f      	ldr	r2, [pc, #380]	@ (800459c <HAL_DMA_Start_IT+0x20c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d02c      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5d      	ldr	r2, [pc, #372]	@ (80045a0 <HAL_DMA_Start_IT+0x210>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d027      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a5c      	ldr	r2, [pc, #368]	@ (80045a4 <HAL_DMA_Start_IT+0x214>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a5a      	ldr	r2, [pc, #360]	@ (80045a8 <HAL_DMA_Start_IT+0x218>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d01d      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a59      	ldr	r2, [pc, #356]	@ (80045ac <HAL_DMA_Start_IT+0x21c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a57      	ldr	r2, [pc, #348]	@ (80045b0 <HAL_DMA_Start_IT+0x220>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a56      	ldr	r2, [pc, #344]	@ (80045b4 <HAL_DMA_Start_IT+0x224>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a54      	ldr	r2, [pc, #336]	@ (80045b8 <HAL_DMA_Start_IT+0x228>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a53      	ldr	r2, [pc, #332]	@ (80045bc <HAL_DMA_Start_IT+0x22c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_DMA_Start_IT+0xee>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a51      	ldr	r2, [pc, #324]	@ (80045c0 <HAL_DMA_Start_IT+0x230>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d108      	bne.n	8004490 <HAL_DMA_Start_IT+0x100>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e007      	b.n	80044a0 <HAL_DMA_Start_IT+0x110>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f001 f906 	bl	80056b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a34      	ldr	r2, [pc, #208]	@ (8004584 <HAL_DMA_Start_IT+0x1f4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d04a      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <HAL_DMA_Start_IT+0x1f8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d045      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a31      	ldr	r2, [pc, #196]	@ (800458c <HAL_DMA_Start_IT+0x1fc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d040      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <HAL_DMA_Start_IT+0x200>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03b      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004594 <HAL_DMA_Start_IT+0x204>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d036      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004598 <HAL_DMA_Start_IT+0x208>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d031      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2b      	ldr	r2, [pc, #172]	@ (800459c <HAL_DMA_Start_IT+0x20c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02c      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2a      	ldr	r2, [pc, #168]	@ (80045a0 <HAL_DMA_Start_IT+0x210>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d027      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a28      	ldr	r2, [pc, #160]	@ (80045a4 <HAL_DMA_Start_IT+0x214>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <HAL_DMA_Start_IT+0x218>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a25      	ldr	r2, [pc, #148]	@ (80045ac <HAL_DMA_Start_IT+0x21c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a24      	ldr	r2, [pc, #144]	@ (80045b0 <HAL_DMA_Start_IT+0x220>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a22      	ldr	r2, [pc, #136]	@ (80045b4 <HAL_DMA_Start_IT+0x224>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a21      	ldr	r2, [pc, #132]	@ (80045b8 <HAL_DMA_Start_IT+0x228>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <HAL_DMA_Start_IT+0x22c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_DMA_Start_IT+0x1bc>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	@ (80045c0 <HAL_DMA_Start_IT+0x230>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_DMA_Start_IT+0x1c0>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_DMA_Start_IT+0x1c2>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d036      	beq.n	80045c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 021e 	bic.w	r2, r3, #30
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0216 	orr.w	r2, r2, #22
 8004568:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03e      	beq.n	80045f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0208 	orr.w	r2, r2, #8
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e035      	b.n	80045f0 <HAL_DMA_Start_IT+0x260>
 8004584:	40020010 	.word	0x40020010
 8004588:	40020028 	.word	0x40020028
 800458c:	40020040 	.word	0x40020040
 8004590:	40020058 	.word	0x40020058
 8004594:	40020070 	.word	0x40020070
 8004598:	40020088 	.word	0x40020088
 800459c:	400200a0 	.word	0x400200a0
 80045a0:	400200b8 	.word	0x400200b8
 80045a4:	40020410 	.word	0x40020410
 80045a8:	40020428 	.word	0x40020428
 80045ac:	40020440 	.word	0x40020440
 80045b0:	40020458 	.word	0x40020458
 80045b4:	40020470 	.word	0x40020470
 80045b8:	40020488 	.word	0x40020488
 80045bc:	400204a0 	.word	0x400204a0
 80045c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 020e 	bic.w	r2, r3, #14
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 020a 	orr.w	r2, r2, #10
 80045d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0204 	orr.w	r2, r2, #4
 80045ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a83      	ldr	r2, [pc, #524]	@ (8004804 <HAL_DMA_Start_IT+0x474>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d072      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a82      	ldr	r2, [pc, #520]	@ (8004808 <HAL_DMA_Start_IT+0x478>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d06d      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a80      	ldr	r2, [pc, #512]	@ (800480c <HAL_DMA_Start_IT+0x47c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d068      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a7f      	ldr	r2, [pc, #508]	@ (8004810 <HAL_DMA_Start_IT+0x480>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d063      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7d      	ldr	r2, [pc, #500]	@ (8004814 <HAL_DMA_Start_IT+0x484>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d05e      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a7c      	ldr	r2, [pc, #496]	@ (8004818 <HAL_DMA_Start_IT+0x488>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d059      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a7a      	ldr	r2, [pc, #488]	@ (800481c <HAL_DMA_Start_IT+0x48c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d054      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a79      	ldr	r2, [pc, #484]	@ (8004820 <HAL_DMA_Start_IT+0x490>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d04f      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a77      	ldr	r2, [pc, #476]	@ (8004824 <HAL_DMA_Start_IT+0x494>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d04a      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a76      	ldr	r2, [pc, #472]	@ (8004828 <HAL_DMA_Start_IT+0x498>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d045      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a74      	ldr	r2, [pc, #464]	@ (800482c <HAL_DMA_Start_IT+0x49c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d040      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a73      	ldr	r2, [pc, #460]	@ (8004830 <HAL_DMA_Start_IT+0x4a0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d03b      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a71      	ldr	r2, [pc, #452]	@ (8004834 <HAL_DMA_Start_IT+0x4a4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d036      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a70      	ldr	r2, [pc, #448]	@ (8004838 <HAL_DMA_Start_IT+0x4a8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d031      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6e      	ldr	r2, [pc, #440]	@ (800483c <HAL_DMA_Start_IT+0x4ac>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02c      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6d      	ldr	r2, [pc, #436]	@ (8004840 <HAL_DMA_Start_IT+0x4b0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d027      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a6b      	ldr	r2, [pc, #428]	@ (8004844 <HAL_DMA_Start_IT+0x4b4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d022      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6a      	ldr	r2, [pc, #424]	@ (8004848 <HAL_DMA_Start_IT+0x4b8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d01d      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a68      	ldr	r2, [pc, #416]	@ (800484c <HAL_DMA_Start_IT+0x4bc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d018      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a67      	ldr	r2, [pc, #412]	@ (8004850 <HAL_DMA_Start_IT+0x4c0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a65      	ldr	r2, [pc, #404]	@ (8004854 <HAL_DMA_Start_IT+0x4c4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00e      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a64      	ldr	r2, [pc, #400]	@ (8004858 <HAL_DMA_Start_IT+0x4c8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a62      	ldr	r2, [pc, #392]	@ (800485c <HAL_DMA_Start_IT+0x4cc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_DMA_Start_IT+0x350>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a61      	ldr	r2, [pc, #388]	@ (8004860 <HAL_DMA_Start_IT+0x4d0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <HAL_DMA_Start_IT+0x354>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <HAL_DMA_Start_IT+0x356>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01a      	beq.n	8004720 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800471a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a37      	ldr	r2, [pc, #220]	@ (8004804 <HAL_DMA_Start_IT+0x474>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d04a      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a36      	ldr	r2, [pc, #216]	@ (8004808 <HAL_DMA_Start_IT+0x478>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d045      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a34      	ldr	r2, [pc, #208]	@ (800480c <HAL_DMA_Start_IT+0x47c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d040      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a33      	ldr	r2, [pc, #204]	@ (8004810 <HAL_DMA_Start_IT+0x480>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d03b      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a31      	ldr	r2, [pc, #196]	@ (8004814 <HAL_DMA_Start_IT+0x484>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d036      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a30      	ldr	r2, [pc, #192]	@ (8004818 <HAL_DMA_Start_IT+0x488>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d031      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2e      	ldr	r2, [pc, #184]	@ (800481c <HAL_DMA_Start_IT+0x48c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d02c      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2d      	ldr	r2, [pc, #180]	@ (8004820 <HAL_DMA_Start_IT+0x490>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d027      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2b      	ldr	r2, [pc, #172]	@ (8004824 <HAL_DMA_Start_IT+0x494>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2a      	ldr	r2, [pc, #168]	@ (8004828 <HAL_DMA_Start_IT+0x498>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d01d      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a28      	ldr	r2, [pc, #160]	@ (800482c <HAL_DMA_Start_IT+0x49c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a27      	ldr	r2, [pc, #156]	@ (8004830 <HAL_DMA_Start_IT+0x4a0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <HAL_DMA_Start_IT+0x4a4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a24      	ldr	r2, [pc, #144]	@ (8004838 <HAL_DMA_Start_IT+0x4a8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a22      	ldr	r2, [pc, #136]	@ (800483c <HAL_DMA_Start_IT+0x4ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_DMA_Start_IT+0x430>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a21      	ldr	r2, [pc, #132]	@ (8004840 <HAL_DMA_Start_IT+0x4b0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <HAL_DMA_Start_IT+0x442>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e012      	b.n	80047f8 <HAL_DMA_Start_IT+0x468>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e009      	b.n	80047f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40020010 	.word	0x40020010
 8004808:	40020028 	.word	0x40020028
 800480c:	40020040 	.word	0x40020040
 8004810:	40020058 	.word	0x40020058
 8004814:	40020070 	.word	0x40020070
 8004818:	40020088 	.word	0x40020088
 800481c:	400200a0 	.word	0x400200a0
 8004820:	400200b8 	.word	0x400200b8
 8004824:	40020410 	.word	0x40020410
 8004828:	40020428 	.word	0x40020428
 800482c:	40020440 	.word	0x40020440
 8004830:	40020458 	.word	0x40020458
 8004834:	40020470 	.word	0x40020470
 8004838:	40020488 	.word	0x40020488
 800483c:	400204a0 	.word	0x400204a0
 8004840:	400204b8 	.word	0x400204b8
 8004844:	58025408 	.word	0x58025408
 8004848:	5802541c 	.word	0x5802541c
 800484c:	58025430 	.word	0x58025430
 8004850:	58025444 	.word	0x58025444
 8004854:	58025458 	.word	0x58025458
 8004858:	5802546c 	.word	0x5802546c
 800485c:	58025480 	.word	0x58025480
 8004860:	58025494 	.word	0x58025494

08004864 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	@ 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004870:	4b67      	ldr	r3, [pc, #412]	@ (8004a10 <HAL_DMA_IRQHandler+0x1ac>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a67      	ldr	r2, [pc, #412]	@ (8004a14 <HAL_DMA_IRQHandler+0x1b0>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	0a9b      	lsrs	r3, r3, #10
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004882:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a5f      	ldr	r2, [pc, #380]	@ (8004a18 <HAL_DMA_IRQHandler+0x1b4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d04a      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5d      	ldr	r2, [pc, #372]	@ (8004a1c <HAL_DMA_IRQHandler+0x1b8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d045      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004a20 <HAL_DMA_IRQHandler+0x1bc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d040      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004a24 <HAL_DMA_IRQHandler+0x1c0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d03b      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a59      	ldr	r2, [pc, #356]	@ (8004a28 <HAL_DMA_IRQHandler+0x1c4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d036      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a57      	ldr	r2, [pc, #348]	@ (8004a2c <HAL_DMA_IRQHandler+0x1c8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d031      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a56      	ldr	r2, [pc, #344]	@ (8004a30 <HAL_DMA_IRQHandler+0x1cc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d02c      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a54      	ldr	r2, [pc, #336]	@ (8004a34 <HAL_DMA_IRQHandler+0x1d0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d027      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a53      	ldr	r2, [pc, #332]	@ (8004a38 <HAL_DMA_IRQHandler+0x1d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a51      	ldr	r2, [pc, #324]	@ (8004a3c <HAL_DMA_IRQHandler+0x1d8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01d      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a50      	ldr	r2, [pc, #320]	@ (8004a40 <HAL_DMA_IRQHandler+0x1dc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4e      	ldr	r2, [pc, #312]	@ (8004a44 <HAL_DMA_IRQHandler+0x1e0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4d      	ldr	r2, [pc, #308]	@ (8004a48 <HAL_DMA_IRQHandler+0x1e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a4c <HAL_DMA_IRQHandler+0x1e8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a4a      	ldr	r2, [pc, #296]	@ (8004a50 <HAL_DMA_IRQHandler+0x1ec>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_DMA_IRQHandler+0xd2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a48      	ldr	r2, [pc, #288]	@ (8004a54 <HAL_DMA_IRQHandler+0x1f0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_DMA_IRQHandler+0xd6>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <HAL_DMA_IRQHandler+0xd8>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 842b 	beq.w	8005198 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2208      	movs	r2, #8
 800494c:	409a      	lsls	r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80a2 	beq.w	8004a9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a18 <HAL_DMA_IRQHandler+0x1b4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d04a      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2d      	ldr	r2, [pc, #180]	@ (8004a1c <HAL_DMA_IRQHandler+0x1b8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d045      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2b      	ldr	r2, [pc, #172]	@ (8004a20 <HAL_DMA_IRQHandler+0x1bc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d040      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2a      	ldr	r2, [pc, #168]	@ (8004a24 <HAL_DMA_IRQHandler+0x1c0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03b      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a28      	ldr	r2, [pc, #160]	@ (8004a28 <HAL_DMA_IRQHandler+0x1c4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d036      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a27      	ldr	r2, [pc, #156]	@ (8004a2c <HAL_DMA_IRQHandler+0x1c8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d031      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a25      	ldr	r2, [pc, #148]	@ (8004a30 <HAL_DMA_IRQHandler+0x1cc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02c      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a24      	ldr	r2, [pc, #144]	@ (8004a34 <HAL_DMA_IRQHandler+0x1d0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d027      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a22      	ldr	r2, [pc, #136]	@ (8004a38 <HAL_DMA_IRQHandler+0x1d4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a21      	ldr	r2, [pc, #132]	@ (8004a3c <HAL_DMA_IRQHandler+0x1d8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01d      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <HAL_DMA_IRQHandler+0x1dc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004a44 <HAL_DMA_IRQHandler+0x1e0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a48 <HAL_DMA_IRQHandler+0x1e4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1b      	ldr	r2, [pc, #108]	@ (8004a4c <HAL_DMA_IRQHandler+0x1e8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a19      	ldr	r2, [pc, #100]	@ (8004a50 <HAL_DMA_IRQHandler+0x1ec>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x194>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a18      	ldr	r2, [pc, #96]	@ (8004a54 <HAL_DMA_IRQHandler+0x1f0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d12f      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x1f4>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	e02e      	b.n	8004a6c <HAL_DMA_IRQHandler+0x208>
 8004a0e:	bf00      	nop
 8004a10:	24000018 	.word	0x24000018
 8004a14:	1b4e81b5 	.word	0x1b4e81b5
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40020058 	.word	0x40020058
 8004a28:	40020070 	.word	0x40020070
 8004a2c:	40020088 	.word	0x40020088
 8004a30:	400200a0 	.word	0x400200a0
 8004a34:	400200b8 	.word	0x400200b8
 8004a38:	40020410 	.word	0x40020410
 8004a3c:	40020428 	.word	0x40020428
 8004a40:	40020440 	.word	0x40020440
 8004a44:	40020458 	.word	0x40020458
 8004a48:	40020470 	.word	0x40020470
 8004a4c:	40020488 	.word	0x40020488
 8004a50:	400204a0 	.word	0x400204a0
 8004a54:	400204b8 	.word	0x400204b8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d015      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	2208      	movs	r2, #8
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d06e      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a69      	ldr	r2, [pc, #420]	@ (8004c5c <HAL_DMA_IRQHandler+0x3f8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d04a      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a67      	ldr	r2, [pc, #412]	@ (8004c60 <HAL_DMA_IRQHandler+0x3fc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d045      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a66      	ldr	r2, [pc, #408]	@ (8004c64 <HAL_DMA_IRQHandler+0x400>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d040      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a64      	ldr	r2, [pc, #400]	@ (8004c68 <HAL_DMA_IRQHandler+0x404>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d03b      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a63      	ldr	r2, [pc, #396]	@ (8004c6c <HAL_DMA_IRQHandler+0x408>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d036      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a61      	ldr	r2, [pc, #388]	@ (8004c70 <HAL_DMA_IRQHandler+0x40c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a60      	ldr	r2, [pc, #384]	@ (8004c74 <HAL_DMA_IRQHandler+0x410>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d02c      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a5e      	ldr	r2, [pc, #376]	@ (8004c78 <HAL_DMA_IRQHandler+0x414>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d027      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a5d      	ldr	r2, [pc, #372]	@ (8004c7c <HAL_DMA_IRQHandler+0x418>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d022      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a5b      	ldr	r2, [pc, #364]	@ (8004c80 <HAL_DMA_IRQHandler+0x41c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a5a      	ldr	r2, [pc, #360]	@ (8004c84 <HAL_DMA_IRQHandler+0x420>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d018      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a58      	ldr	r2, [pc, #352]	@ (8004c88 <HAL_DMA_IRQHandler+0x424>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a57      	ldr	r2, [pc, #348]	@ (8004c8c <HAL_DMA_IRQHandler+0x428>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00e      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a55      	ldr	r2, [pc, #340]	@ (8004c90 <HAL_DMA_IRQHandler+0x42c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d009      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a54      	ldr	r2, [pc, #336]	@ (8004c94 <HAL_DMA_IRQHandler+0x430>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d004      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x2ee>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	@ (8004c98 <HAL_DMA_IRQHandler+0x434>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10a      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x304>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	e003      	b.n	8004b70 <HAL_DMA_IRQHandler+0x30c>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00d      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	f043 0202 	orr.w	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	2204      	movs	r2, #4
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 808f 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2c      	ldr	r2, [pc, #176]	@ (8004c5c <HAL_DMA_IRQHandler+0x3f8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d04a      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c60 <HAL_DMA_IRQHandler+0x3fc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d045      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a29      	ldr	r2, [pc, #164]	@ (8004c64 <HAL_DMA_IRQHandler+0x400>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d040      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a27      	ldr	r2, [pc, #156]	@ (8004c68 <HAL_DMA_IRQHandler+0x404>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d03b      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a26      	ldr	r2, [pc, #152]	@ (8004c6c <HAL_DMA_IRQHandler+0x408>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d036      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a24      	ldr	r2, [pc, #144]	@ (8004c70 <HAL_DMA_IRQHandler+0x40c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d031      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <HAL_DMA_IRQHandler+0x410>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d02c      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a21      	ldr	r2, [pc, #132]	@ (8004c78 <HAL_DMA_IRQHandler+0x414>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d027      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a20      	ldr	r2, [pc, #128]	@ (8004c7c <HAL_DMA_IRQHandler+0x418>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1e      	ldr	r2, [pc, #120]	@ (8004c80 <HAL_DMA_IRQHandler+0x41c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004c84 <HAL_DMA_IRQHandler+0x420>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	@ (8004c88 <HAL_DMA_IRQHandler+0x424>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <HAL_DMA_IRQHandler+0x428>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	@ (8004c90 <HAL_DMA_IRQHandler+0x42c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a17      	ldr	r2, [pc, #92]	@ (8004c94 <HAL_DMA_IRQHandler+0x430>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_DMA_IRQHandler+0x3e2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a15      	ldr	r2, [pc, #84]	@ (8004c98 <HAL_DMA_IRQHandler+0x434>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d12a      	bne.n	8004c9c <HAL_DMA_IRQHandler+0x438>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e023      	b.n	8004ca4 <HAL_DMA_IRQHandler+0x440>
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbc:	f043 0204 	orr.w	r2, r3, #4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2210      	movs	r2, #16
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80a6 	beq.w	8004e26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a85      	ldr	r2, [pc, #532]	@ (8004ef4 <HAL_DMA_IRQHandler+0x690>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04a      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a83      	ldr	r2, [pc, #524]	@ (8004ef8 <HAL_DMA_IRQHandler+0x694>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d045      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a82      	ldr	r2, [pc, #520]	@ (8004efc <HAL_DMA_IRQHandler+0x698>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a80      	ldr	r2, [pc, #512]	@ (8004f00 <HAL_DMA_IRQHandler+0x69c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d03b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7f      	ldr	r2, [pc, #508]	@ (8004f04 <HAL_DMA_IRQHandler+0x6a0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d036      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a7d      	ldr	r2, [pc, #500]	@ (8004f08 <HAL_DMA_IRQHandler+0x6a4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d031      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f0c <HAL_DMA_IRQHandler+0x6a8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02c      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7a      	ldr	r2, [pc, #488]	@ (8004f10 <HAL_DMA_IRQHandler+0x6ac>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d027      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a79      	ldr	r2, [pc, #484]	@ (8004f14 <HAL_DMA_IRQHandler+0x6b0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a77      	ldr	r2, [pc, #476]	@ (8004f18 <HAL_DMA_IRQHandler+0x6b4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a76      	ldr	r2, [pc, #472]	@ (8004f1c <HAL_DMA_IRQHandler+0x6b8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a74      	ldr	r2, [pc, #464]	@ (8004f20 <HAL_DMA_IRQHandler+0x6bc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a73      	ldr	r2, [pc, #460]	@ (8004f24 <HAL_DMA_IRQHandler+0x6c0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a71      	ldr	r2, [pc, #452]	@ (8004f28 <HAL_DMA_IRQHandler+0x6c4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a70      	ldr	r2, [pc, #448]	@ (8004f2c <HAL_DMA_IRQHandler+0x6c8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x516>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a6e      	ldr	r2, [pc, #440]	@ (8004f30 <HAL_DMA_IRQHandler+0x6cc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d10a      	bne.n	8004d90 <HAL_DMA_IRQHandler+0x52c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e009      	b.n	8004da4 <HAL_DMA_IRQHandler+0x540>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03e      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	2210      	movs	r2, #16
 8004db2:	409a      	lsls	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d024      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
 8004de4:	e01f      	b.n	8004e26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01b      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4798      	blx	r3
 8004df6:	e016      	b.n	8004e26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d107      	bne.n	8004e16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2220      	movs	r2, #32
 8004e30:	409a      	lsls	r2, r3
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8110 	beq.w	800505c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef4 <HAL_DMA_IRQHandler+0x690>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d04a      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef8 <HAL_DMA_IRQHandler+0x694>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d045      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a29      	ldr	r2, [pc, #164]	@ (8004efc <HAL_DMA_IRQHandler+0x698>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d040      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a28      	ldr	r2, [pc, #160]	@ (8004f00 <HAL_DMA_IRQHandler+0x69c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d03b      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <HAL_DMA_IRQHandler+0x6a0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d036      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a25      	ldr	r2, [pc, #148]	@ (8004f08 <HAL_DMA_IRQHandler+0x6a4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d031      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a23      	ldr	r2, [pc, #140]	@ (8004f0c <HAL_DMA_IRQHandler+0x6a8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02c      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <HAL_DMA_IRQHandler+0x6ac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d027      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <HAL_DMA_IRQHandler+0x6b0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d022      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f18 <HAL_DMA_IRQHandler+0x6b4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01d      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f1c <HAL_DMA_IRQHandler+0x6b8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	@ (8004f20 <HAL_DMA_IRQHandler+0x6bc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f24 <HAL_DMA_IRQHandler+0x6c0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a19      	ldr	r2, [pc, #100]	@ (8004f28 <HAL_DMA_IRQHandler+0x6c4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	@ (8004f2c <HAL_DMA_IRQHandler+0x6c8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_DMA_IRQHandler+0x678>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <HAL_DMA_IRQHandler+0x6cc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d12b      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x6d0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e02a      	b.n	8004f48 <HAL_DMA_IRQHandler+0x6e4>
 8004ef2:	bf00      	nop
 8004ef4:	40020010 	.word	0x40020010
 8004ef8:	40020028 	.word	0x40020028
 8004efc:	40020040 	.word	0x40020040
 8004f00:	40020058 	.word	0x40020058
 8004f04:	40020070 	.word	0x40020070
 8004f08:	40020088 	.word	0x40020088
 8004f0c:	400200a0 	.word	0x400200a0
 8004f10:	400200b8 	.word	0x400200b8
 8004f14:	40020410 	.word	0x40020410
 8004f18:	40020428 	.word	0x40020428
 8004f1c:	40020440 	.word	0x40020440
 8004f20:	40020458 	.word	0x40020458
 8004f24:	40020470 	.word	0x40020470
 8004f28:	40020488 	.word	0x40020488
 8004f2c:	400204a0 	.word	0x400204a0
 8004f30:	400204b8 	.word	0x400204b8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8087 	beq.w	800505c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2220      	movs	r2, #32
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d139      	bne.n	8004fde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0216 	bic.w	r2, r2, #22
 8004f78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d103      	bne.n	8004f9a <HAL_DMA_IRQHandler+0x736>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d007      	beq.n	8004faa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0208 	bic.w	r2, r2, #8
 8004fa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	223f      	movs	r2, #63	@ 0x3f
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 834a 	beq.w	8005668 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
          }
          return;
 8004fdc:	e344      	b.n	8005668 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d018      	beq.n	800501e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d02c      	beq.n	800505c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
 800500a:	e027      	b.n	800505c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005010:	2b00      	cmp	r3, #0
 8005012:	d023      	beq.n	800505c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	4798      	blx	r3
 800501c:	e01e      	b.n	800505c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10f      	bne.n	800504c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0210 	bic.w	r2, r2, #16
 800503a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8306 	beq.w	8005672 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8088 	beq.w	8005184 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7a      	ldr	r2, [pc, #488]	@ (800526c <HAL_DMA_IRQHandler+0xa08>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d04a      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a79      	ldr	r2, [pc, #484]	@ (8005270 <HAL_DMA_IRQHandler+0xa0c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d045      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a77      	ldr	r2, [pc, #476]	@ (8005274 <HAL_DMA_IRQHandler+0xa10>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d040      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a76      	ldr	r2, [pc, #472]	@ (8005278 <HAL_DMA_IRQHandler+0xa14>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d03b      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a74      	ldr	r2, [pc, #464]	@ (800527c <HAL_DMA_IRQHandler+0xa18>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d036      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a73      	ldr	r2, [pc, #460]	@ (8005280 <HAL_DMA_IRQHandler+0xa1c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d031      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a71      	ldr	r2, [pc, #452]	@ (8005284 <HAL_DMA_IRQHandler+0xa20>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d02c      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a70      	ldr	r2, [pc, #448]	@ (8005288 <HAL_DMA_IRQHandler+0xa24>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d027      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a6e      	ldr	r2, [pc, #440]	@ (800528c <HAL_DMA_IRQHandler+0xa28>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a6d      	ldr	r2, [pc, #436]	@ (8005290 <HAL_DMA_IRQHandler+0xa2c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01d      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6b      	ldr	r2, [pc, #428]	@ (8005294 <HAL_DMA_IRQHandler+0xa30>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6a      	ldr	r2, [pc, #424]	@ (8005298 <HAL_DMA_IRQHandler+0xa34>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a68      	ldr	r2, [pc, #416]	@ (800529c <HAL_DMA_IRQHandler+0xa38>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a67      	ldr	r2, [pc, #412]	@ (80052a0 <HAL_DMA_IRQHandler+0xa3c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a65      	ldr	r2, [pc, #404]	@ (80052a4 <HAL_DMA_IRQHandler+0xa40>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_DMA_IRQHandler+0x8b8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a64      	ldr	r2, [pc, #400]	@ (80052a8 <HAL_DMA_IRQHandler+0xa44>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d108      	bne.n	800512e <HAL_DMA_IRQHandler+0x8ca>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e007      	b.n	800513e <HAL_DMA_IRQHandler+0x8da>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005146:	429a      	cmp	r2, r3
 8005148:	d307      	bcc.n	800515a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f2      	bne.n	800513e <HAL_DMA_IRQHandler+0x8da>
 8005158:	e000      	b.n	800515c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800515a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2203      	movs	r2, #3
 800516e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005172:	e003      	b.n	800517c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 8272 	beq.w	8005672 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	4798      	blx	r3
 8005196:	e26c      	b.n	8005672 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a43      	ldr	r2, [pc, #268]	@ (80052ac <HAL_DMA_IRQHandler+0xa48>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a42      	ldr	r2, [pc, #264]	@ (80052b0 <HAL_DMA_IRQHandler+0xa4c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d01d      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a40      	ldr	r2, [pc, #256]	@ (80052b4 <HAL_DMA_IRQHandler+0xa50>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3f      	ldr	r2, [pc, #252]	@ (80052b8 <HAL_DMA_IRQHandler+0xa54>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3d      	ldr	r2, [pc, #244]	@ (80052bc <HAL_DMA_IRQHandler+0xa58>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3c      	ldr	r2, [pc, #240]	@ (80052c0 <HAL_DMA_IRQHandler+0xa5c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3a      	ldr	r2, [pc, #232]	@ (80052c4 <HAL_DMA_IRQHandler+0xa60>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x984>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a39      	ldr	r2, [pc, #228]	@ (80052c8 <HAL_DMA_IRQHandler+0xa64>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d101      	bne.n	80051ec <HAL_DMA_IRQHandler+0x988>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <HAL_DMA_IRQHandler+0x98a>
 80051ec:	2300      	movs	r3, #0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 823f 	beq.w	8005672 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	2204      	movs	r2, #4
 8005206:	409a      	lsls	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80cd 	beq.w	80053ac <HAL_DMA_IRQHandler+0xb48>
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80c7 	beq.w	80053ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2204      	movs	r2, #4
 8005228:	409a      	lsls	r2, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d049      	beq.n	80052cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8210 	beq.w	800566c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005254:	e20a      	b.n	800566c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8206 	beq.w	800566c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005268:	e200      	b.n	800566c <HAL_DMA_IRQHandler+0xe08>
 800526a:	bf00      	nop
 800526c:	40020010 	.word	0x40020010
 8005270:	40020028 	.word	0x40020028
 8005274:	40020040 	.word	0x40020040
 8005278:	40020058 	.word	0x40020058
 800527c:	40020070 	.word	0x40020070
 8005280:	40020088 	.word	0x40020088
 8005284:	400200a0 	.word	0x400200a0
 8005288:	400200b8 	.word	0x400200b8
 800528c:	40020410 	.word	0x40020410
 8005290:	40020428 	.word	0x40020428
 8005294:	40020440 	.word	0x40020440
 8005298:	40020458 	.word	0x40020458
 800529c:	40020470 	.word	0x40020470
 80052a0:	40020488 	.word	0x40020488
 80052a4:	400204a0 	.word	0x400204a0
 80052a8:	400204b8 	.word	0x400204b8
 80052ac:	58025408 	.word	0x58025408
 80052b0:	5802541c 	.word	0x5802541c
 80052b4:	58025430 	.word	0x58025430
 80052b8:	58025444 	.word	0x58025444
 80052bc:	58025458 	.word	0x58025458
 80052c0:	5802546c 	.word	0x5802546c
 80052c4:	58025480 	.word	0x58025480
 80052c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d160      	bne.n	8005398 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a7f      	ldr	r2, [pc, #508]	@ (80054d8 <HAL_DMA_IRQHandler+0xc74>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d04a      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a7d      	ldr	r2, [pc, #500]	@ (80054dc <HAL_DMA_IRQHandler+0xc78>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d045      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7c      	ldr	r2, [pc, #496]	@ (80054e0 <HAL_DMA_IRQHandler+0xc7c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d040      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a7a      	ldr	r2, [pc, #488]	@ (80054e4 <HAL_DMA_IRQHandler+0xc80>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d03b      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a79      	ldr	r2, [pc, #484]	@ (80054e8 <HAL_DMA_IRQHandler+0xc84>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d036      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a77      	ldr	r2, [pc, #476]	@ (80054ec <HAL_DMA_IRQHandler+0xc88>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d031      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a76      	ldr	r2, [pc, #472]	@ (80054f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d02c      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a74      	ldr	r2, [pc, #464]	@ (80054f4 <HAL_DMA_IRQHandler+0xc90>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d027      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a73      	ldr	r2, [pc, #460]	@ (80054f8 <HAL_DMA_IRQHandler+0xc94>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a71      	ldr	r2, [pc, #452]	@ (80054fc <HAL_DMA_IRQHandler+0xc98>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01d      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a70      	ldr	r2, [pc, #448]	@ (8005500 <HAL_DMA_IRQHandler+0xc9c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d018      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a6e      	ldr	r2, [pc, #440]	@ (8005504 <HAL_DMA_IRQHandler+0xca0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a6d      	ldr	r2, [pc, #436]	@ (8005508 <HAL_DMA_IRQHandler+0xca4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a6b      	ldr	r2, [pc, #428]	@ (800550c <HAL_DMA_IRQHandler+0xca8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6a      	ldr	r2, [pc, #424]	@ (8005510 <HAL_DMA_IRQHandler+0xcac>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_DMA_IRQHandler+0xb12>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a68      	ldr	r2, [pc, #416]	@ (8005514 <HAL_DMA_IRQHandler+0xcb0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <HAL_DMA_IRQHandler+0xb24>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0208 	bic.w	r2, r2, #8
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e007      	b.n	8005398 <HAL_DMA_IRQHandler+0xb34>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0204 	bic.w	r2, r2, #4
 8005396:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8165 	beq.w	800566c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053aa:	e15f      	b.n	800566c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2202      	movs	r2, #2
 80053b6:	409a      	lsls	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 80c5 	beq.w	800554c <HAL_DMA_IRQHandler+0xce8>
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 80bf 	beq.w	800554c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2202      	movs	r2, #2
 80053d8:	409a      	lsls	r2, r3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d018      	beq.n	800541a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 813a 	beq.w	8005670 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005404:	e134      	b.n	8005670 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8130 	beq.w	8005670 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005418:	e12a      	b.n	8005670 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	f040 8089 	bne.w	8005538 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2b      	ldr	r2, [pc, #172]	@ (80054d8 <HAL_DMA_IRQHandler+0xc74>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a29      	ldr	r2, [pc, #164]	@ (80054dc <HAL_DMA_IRQHandler+0xc78>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d045      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <HAL_DMA_IRQHandler+0xc7c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d040      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a26      	ldr	r2, [pc, #152]	@ (80054e4 <HAL_DMA_IRQHandler+0xc80>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d03b      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a25      	ldr	r2, [pc, #148]	@ (80054e8 <HAL_DMA_IRQHandler+0xc84>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d036      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a23      	ldr	r2, [pc, #140]	@ (80054ec <HAL_DMA_IRQHandler+0xc88>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a22      	ldr	r2, [pc, #136]	@ (80054f0 <HAL_DMA_IRQHandler+0xc8c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d02c      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a20      	ldr	r2, [pc, #128]	@ (80054f4 <HAL_DMA_IRQHandler+0xc90>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d027      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1f      	ldr	r2, [pc, #124]	@ (80054f8 <HAL_DMA_IRQHandler+0xc94>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <HAL_DMA_IRQHandler+0xc98>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1c      	ldr	r2, [pc, #112]	@ (8005500 <HAL_DMA_IRQHandler+0xc9c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1a      	ldr	r2, [pc, #104]	@ (8005504 <HAL_DMA_IRQHandler+0xca0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a19      	ldr	r2, [pc, #100]	@ (8005508 <HAL_DMA_IRQHandler+0xca4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a17      	ldr	r2, [pc, #92]	@ (800550c <HAL_DMA_IRQHandler+0xca8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <HAL_DMA_IRQHandler+0xcac>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_IRQHandler+0xc62>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a14      	ldr	r2, [pc, #80]	@ (8005514 <HAL_DMA_IRQHandler+0xcb0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d128      	bne.n	8005518 <HAL_DMA_IRQHandler+0xcb4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0214 	bic.w	r2, r2, #20
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e027      	b.n	8005528 <HAL_DMA_IRQHandler+0xcc4>
 80054d8:	40020010 	.word	0x40020010
 80054dc:	40020028 	.word	0x40020028
 80054e0:	40020040 	.word	0x40020040
 80054e4:	40020058 	.word	0x40020058
 80054e8:	40020070 	.word	0x40020070
 80054ec:	40020088 	.word	0x40020088
 80054f0:	400200a0 	.word	0x400200a0
 80054f4:	400200b8 	.word	0x400200b8
 80054f8:	40020410 	.word	0x40020410
 80054fc:	40020428 	.word	0x40020428
 8005500:	40020440 	.word	0x40020440
 8005504:	40020458 	.word	0x40020458
 8005508:	40020470 	.word	0x40020470
 800550c:	40020488 	.word	0x40020488
 8005510:	400204a0 	.word	0x400204a0
 8005514:	400204b8 	.word	0x400204b8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 020a 	bic.w	r2, r2, #10
 8005526:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8097 	beq.w	8005670 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800554a:	e091      	b.n	8005670 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005550:	f003 031f 	and.w	r3, r3, #31
 8005554:	2208      	movs	r2, #8
 8005556:	409a      	lsls	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8088 	beq.w	8005672 <HAL_DMA_IRQHandler+0xe0e>
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8082 	beq.w	8005672 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a41      	ldr	r2, [pc, #260]	@ (8005678 <HAL_DMA_IRQHandler+0xe14>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3f      	ldr	r2, [pc, #252]	@ (800567c <HAL_DMA_IRQHandler+0xe18>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3e      	ldr	r2, [pc, #248]	@ (8005680 <HAL_DMA_IRQHandler+0xe1c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a3c      	ldr	r2, [pc, #240]	@ (8005684 <HAL_DMA_IRQHandler+0xe20>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3b      	ldr	r2, [pc, #236]	@ (8005688 <HAL_DMA_IRQHandler+0xe24>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a39      	ldr	r2, [pc, #228]	@ (800568c <HAL_DMA_IRQHandler+0xe28>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a38      	ldr	r2, [pc, #224]	@ (8005690 <HAL_DMA_IRQHandler+0xe2c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a36      	ldr	r2, [pc, #216]	@ (8005694 <HAL_DMA_IRQHandler+0xe30>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a35      	ldr	r2, [pc, #212]	@ (8005698 <HAL_DMA_IRQHandler+0xe34>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a33      	ldr	r2, [pc, #204]	@ (800569c <HAL_DMA_IRQHandler+0xe38>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a32      	ldr	r2, [pc, #200]	@ (80056a0 <HAL_DMA_IRQHandler+0xe3c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a30      	ldr	r2, [pc, #192]	@ (80056a4 <HAL_DMA_IRQHandler+0xe40>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2f      	ldr	r2, [pc, #188]	@ (80056a8 <HAL_DMA_IRQHandler+0xe44>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2d      	ldr	r2, [pc, #180]	@ (80056ac <HAL_DMA_IRQHandler+0xe48>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2c      	ldr	r2, [pc, #176]	@ (80056b0 <HAL_DMA_IRQHandler+0xe4c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_IRQHandler+0xdaa>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2a      	ldr	r2, [pc, #168]	@ (80056b4 <HAL_DMA_IRQHandler+0xe50>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d108      	bne.n	8005620 <HAL_DMA_IRQHandler+0xdbc>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 021c 	bic.w	r2, r2, #28
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e007      	b.n	8005630 <HAL_DMA_IRQHandler+0xdcc>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 020e 	bic.w	r2, r2, #14
 800562e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2201      	movs	r2, #1
 800563a:	409a      	lsls	r2, r3
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	e004      	b.n	8005672 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005668:	bf00      	nop
 800566a:	e002      	b.n	8005672 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005670:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005672:	3728      	adds	r7, #40	@ 0x28
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40020010 	.word	0x40020010
 800567c:	40020028 	.word	0x40020028
 8005680:	40020040 	.word	0x40020040
 8005684:	40020058 	.word	0x40020058
 8005688:	40020070 	.word	0x40020070
 800568c:	40020088 	.word	0x40020088
 8005690:	400200a0 	.word	0x400200a0
 8005694:	400200b8 	.word	0x400200b8
 8005698:	40020410 	.word	0x40020410
 800569c:	40020428 	.word	0x40020428
 80056a0:	40020440 	.word	0x40020440
 80056a4:	40020458 	.word	0x40020458
 80056a8:	40020470 	.word	0x40020470
 80056ac:	40020488 	.word	0x40020488
 80056b0:	400204a0 	.word	0x400204a0
 80056b4:	400204b8 	.word	0x400204b8

080056b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7f      	ldr	r2, [pc, #508]	@ (80058d4 <DMA_SetConfig+0x21c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d072      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7d      	ldr	r2, [pc, #500]	@ (80058d8 <DMA_SetConfig+0x220>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d06d      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a7c      	ldr	r2, [pc, #496]	@ (80058dc <DMA_SetConfig+0x224>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d068      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a7a      	ldr	r2, [pc, #488]	@ (80058e0 <DMA_SetConfig+0x228>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d063      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a79      	ldr	r2, [pc, #484]	@ (80058e4 <DMA_SetConfig+0x22c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d05e      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a77      	ldr	r2, [pc, #476]	@ (80058e8 <DMA_SetConfig+0x230>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d059      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a76      	ldr	r2, [pc, #472]	@ (80058ec <DMA_SetConfig+0x234>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d054      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a74      	ldr	r2, [pc, #464]	@ (80058f0 <DMA_SetConfig+0x238>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d04f      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a73      	ldr	r2, [pc, #460]	@ (80058f4 <DMA_SetConfig+0x23c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d04a      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a71      	ldr	r2, [pc, #452]	@ (80058f8 <DMA_SetConfig+0x240>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d045      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a70      	ldr	r2, [pc, #448]	@ (80058fc <DMA_SetConfig+0x244>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d040      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6e      	ldr	r2, [pc, #440]	@ (8005900 <DMA_SetConfig+0x248>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d03b      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6d      	ldr	r2, [pc, #436]	@ (8005904 <DMA_SetConfig+0x24c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d036      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a6b      	ldr	r2, [pc, #428]	@ (8005908 <DMA_SetConfig+0x250>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d031      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a6a      	ldr	r2, [pc, #424]	@ (800590c <DMA_SetConfig+0x254>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d02c      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a68      	ldr	r2, [pc, #416]	@ (8005910 <DMA_SetConfig+0x258>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d027      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a67      	ldr	r2, [pc, #412]	@ (8005914 <DMA_SetConfig+0x25c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d022      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a65      	ldr	r2, [pc, #404]	@ (8005918 <DMA_SetConfig+0x260>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01d      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a64      	ldr	r2, [pc, #400]	@ (800591c <DMA_SetConfig+0x264>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d018      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a62      	ldr	r2, [pc, #392]	@ (8005920 <DMA_SetConfig+0x268>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a61      	ldr	r2, [pc, #388]	@ (8005924 <DMA_SetConfig+0x26c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005928 <DMA_SetConfig+0x270>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5e      	ldr	r2, [pc, #376]	@ (800592c <DMA_SetConfig+0x274>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <DMA_SetConfig+0x10a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005930 <DMA_SetConfig+0x278>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d101      	bne.n	80057c6 <DMA_SetConfig+0x10e>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <DMA_SetConfig+0x110>
 80057c6:	2300      	movs	r3, #0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00d      	beq.n	80057e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a39      	ldr	r2, [pc, #228]	@ (80058d4 <DMA_SetConfig+0x21c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d04a      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a38      	ldr	r2, [pc, #224]	@ (80058d8 <DMA_SetConfig+0x220>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d045      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a36      	ldr	r2, [pc, #216]	@ (80058dc <DMA_SetConfig+0x224>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d040      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a35      	ldr	r2, [pc, #212]	@ (80058e0 <DMA_SetConfig+0x228>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d03b      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a33      	ldr	r2, [pc, #204]	@ (80058e4 <DMA_SetConfig+0x22c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d036      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a32      	ldr	r2, [pc, #200]	@ (80058e8 <DMA_SetConfig+0x230>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d031      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a30      	ldr	r2, [pc, #192]	@ (80058ec <DMA_SetConfig+0x234>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d02c      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2f      	ldr	r2, [pc, #188]	@ (80058f0 <DMA_SetConfig+0x238>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d027      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2d      	ldr	r2, [pc, #180]	@ (80058f4 <DMA_SetConfig+0x23c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d022      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2c      	ldr	r2, [pc, #176]	@ (80058f8 <DMA_SetConfig+0x240>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d01d      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2a      	ldr	r2, [pc, #168]	@ (80058fc <DMA_SetConfig+0x244>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d018      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a29      	ldr	r2, [pc, #164]	@ (8005900 <DMA_SetConfig+0x248>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a27      	ldr	r2, [pc, #156]	@ (8005904 <DMA_SetConfig+0x24c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a26      	ldr	r2, [pc, #152]	@ (8005908 <DMA_SetConfig+0x250>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a24      	ldr	r2, [pc, #144]	@ (800590c <DMA_SetConfig+0x254>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <DMA_SetConfig+0x1d0>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a23      	ldr	r2, [pc, #140]	@ (8005910 <DMA_SetConfig+0x258>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d101      	bne.n	800588c <DMA_SetConfig+0x1d4>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <DMA_SetConfig+0x1d6>
 800588c:	2300      	movs	r3, #0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d059      	beq.n	8005946 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	223f      	movs	r2, #63	@ 0x3f
 800589c:	409a      	lsls	r2, r3
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80058b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b40      	cmp	r3, #64	@ 0x40
 80058c0:	d138      	bne.n	8005934 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058d2:	e086      	b.n	80059e2 <DMA_SetConfig+0x32a>
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
 8005914:	58025408 	.word	0x58025408
 8005918:	5802541c 	.word	0x5802541c
 800591c:	58025430 	.word	0x58025430
 8005920:	58025444 	.word	0x58025444
 8005924:	58025458 	.word	0x58025458
 8005928:	5802546c 	.word	0x5802546c
 800592c:	58025480 	.word	0x58025480
 8005930:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	60da      	str	r2, [r3, #12]
}
 8005944:	e04d      	b.n	80059e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a29      	ldr	r2, [pc, #164]	@ (80059f0 <DMA_SetConfig+0x338>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <DMA_SetConfig+0x2de>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a27      	ldr	r2, [pc, #156]	@ (80059f4 <DMA_SetConfig+0x33c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <DMA_SetConfig+0x2de>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a26      	ldr	r2, [pc, #152]	@ (80059f8 <DMA_SetConfig+0x340>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <DMA_SetConfig+0x2de>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a24      	ldr	r2, [pc, #144]	@ (80059fc <DMA_SetConfig+0x344>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <DMA_SetConfig+0x2de>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a23      	ldr	r2, [pc, #140]	@ (8005a00 <DMA_SetConfig+0x348>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <DMA_SetConfig+0x2de>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a21      	ldr	r2, [pc, #132]	@ (8005a04 <DMA_SetConfig+0x34c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <DMA_SetConfig+0x2de>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a20      	ldr	r2, [pc, #128]	@ (8005a08 <DMA_SetConfig+0x350>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <DMA_SetConfig+0x2de>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1e      	ldr	r2, [pc, #120]	@ (8005a0c <DMA_SetConfig+0x354>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <DMA_SetConfig+0x2e2>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <DMA_SetConfig+0x2e4>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d020      	beq.n	80059e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2201      	movs	r2, #1
 80059aa:	409a      	lsls	r2, r3
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b40      	cmp	r3, #64	@ 0x40
 80059be:	d108      	bne.n	80059d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	60da      	str	r2, [r3, #12]
}
 80059d0:	e007      	b.n	80059e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]
}
 80059e2:	bf00      	nop
 80059e4:	371c      	adds	r7, #28
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	58025408 	.word	0x58025408
 80059f4:	5802541c 	.word	0x5802541c
 80059f8:	58025430 	.word	0x58025430
 80059fc:	58025444 	.word	0x58025444
 8005a00:	58025458 	.word	0x58025458
 8005a04:	5802546c 	.word	0x5802546c
 8005a08:	58025480 	.word	0x58025480
 8005a0c:	58025494 	.word	0x58025494

08005a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a42      	ldr	r2, [pc, #264]	@ (8005b28 <DMA_CalcBaseAndBitshift+0x118>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d04a      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a41      	ldr	r2, [pc, #260]	@ (8005b2c <DMA_CalcBaseAndBitshift+0x11c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d045      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a3f      	ldr	r2, [pc, #252]	@ (8005b30 <DMA_CalcBaseAndBitshift+0x120>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d040      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b34 <DMA_CalcBaseAndBitshift+0x124>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d03b      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	@ (8005b38 <DMA_CalcBaseAndBitshift+0x128>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d036      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3b      	ldr	r2, [pc, #236]	@ (8005b3c <DMA_CalcBaseAndBitshift+0x12c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d031      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a39      	ldr	r2, [pc, #228]	@ (8005b40 <DMA_CalcBaseAndBitshift+0x130>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02c      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a38      	ldr	r2, [pc, #224]	@ (8005b44 <DMA_CalcBaseAndBitshift+0x134>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d027      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a36      	ldr	r2, [pc, #216]	@ (8005b48 <DMA_CalcBaseAndBitshift+0x138>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d022      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a35      	ldr	r2, [pc, #212]	@ (8005b4c <DMA_CalcBaseAndBitshift+0x13c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d01d      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a33      	ldr	r2, [pc, #204]	@ (8005b50 <DMA_CalcBaseAndBitshift+0x140>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d018      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a32      	ldr	r2, [pc, #200]	@ (8005b54 <DMA_CalcBaseAndBitshift+0x144>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a30      	ldr	r2, [pc, #192]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x148>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00e      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8005b5c <DMA_CalcBaseAndBitshift+0x14c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d009      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8005b60 <DMA_CalcBaseAndBitshift+0x150>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <DMA_CalcBaseAndBitshift+0xa8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b64 <DMA_CalcBaseAndBitshift+0x154>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d101      	bne.n	8005abc <DMA_CalcBaseAndBitshift+0xac>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <DMA_CalcBaseAndBitshift+0xae>
 8005abc:	2300      	movs	r3, #0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d024      	beq.n	8005b0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	3b10      	subs	r3, #16
 8005aca:	4a27      	ldr	r2, [pc, #156]	@ (8005b68 <DMA_CalcBaseAndBitshift+0x158>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	4a24      	ldr	r2, [pc, #144]	@ (8005b6c <DMA_CalcBaseAndBitshift+0x15c>)
 8005adc:	5cd3      	ldrb	r3, [r2, r3]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d908      	bls.n	8005afc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b70 <DMA_CalcBaseAndBitshift+0x160>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	1d1a      	adds	r2, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005afa:	e00d      	b.n	8005b18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <DMA_CalcBaseAndBitshift+0x160>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b0a:	e005      	b.n	8005b18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
 8005b68:	aaaaaaab 	.word	0xaaaaaaab
 8005b6c:	0800c560 	.word	0x0800c560
 8005b70:	fffffc00 	.word	0xfffffc00

08005b74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d120      	bne.n	8005bca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d858      	bhi.n	8005c42 <DMA_CheckFifoParam+0xce>
 8005b90:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <DMA_CheckFifoParam+0x24>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005ba9 	.word	0x08005ba9
 8005b9c:	08005bbb 	.word	0x08005bbb
 8005ba0:	08005ba9 	.word	0x08005ba9
 8005ba4:	08005c43 	.word	0x08005c43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d048      	beq.n	8005c46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bb8:	e045      	b.n	8005c46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bc2:	d142      	bne.n	8005c4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bc8:	e03f      	b.n	8005c4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd2:	d123      	bne.n	8005c1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d838      	bhi.n	8005c4e <DMA_CheckFifoParam+0xda>
 8005bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005be4 <DMA_CheckFifoParam+0x70>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005bf5 	.word	0x08005bf5
 8005be8:	08005bfb 	.word	0x08005bfb
 8005bec:	08005bf5 	.word	0x08005bf5
 8005bf0:	08005c0d 	.word	0x08005c0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
        break;
 8005bf8:	e030      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d025      	beq.n	8005c52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c0a:	e022      	b.n	8005c52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c14:	d11f      	bne.n	8005c56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c1a:	e01c      	b.n	8005c56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d902      	bls.n	8005c2a <DMA_CheckFifoParam+0xb6>
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d003      	beq.n	8005c30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c28:	e018      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c2e:	e015      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00e      	beq.n	8005c5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8005c40:	e00b      	b.n	8005c5a <DMA_CheckFifoParam+0xe6>
        break;
 8005c42:	bf00      	nop
 8005c44:	e00a      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        break;
 8005c46:	bf00      	nop
 8005c48:	e008      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        break;
 8005c4a:	bf00      	nop
 8005c4c:	e006      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        break;
 8005c4e:	bf00      	nop
 8005c50:	e004      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        break;
 8005c52:	bf00      	nop
 8005c54:	e002      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
        break;
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <DMA_CheckFifoParam+0xe8>
    break;
 8005c5a:	bf00      	nop
    }
  }

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop

08005c6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a38      	ldr	r2, [pc, #224]	@ (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a36      	ldr	r2, [pc, #216]	@ (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a35      	ldr	r2, [pc, #212]	@ (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a33      	ldr	r2, [pc, #204]	@ (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a32      	ldr	r2, [pc, #200]	@ (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a30      	ldr	r2, [pc, #192]	@ (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2f      	ldr	r2, [pc, #188]	@ (8005d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01a      	beq.n	8005d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	3b08      	subs	r3, #8
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4b26      	ldr	r3, [pc, #152]	@ (8005d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a24      	ldr	r2, [pc, #144]	@ (8005d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005cf8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2201      	movs	r2, #1
 8005d02:	409a      	lsls	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005d08:	e024      	b.n	8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	3b10      	subs	r3, #16
 8005d12:	4a1e      	ldr	r2, [pc, #120]	@ (8005d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005d14:	fba2 2303 	umull	r2, r3, r2, r3
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d806      	bhi.n	8005d32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4a1b      	ldr	r2, [pc, #108]	@ (8005d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d902      	bls.n	8005d32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4b18      	ldr	r3, [pc, #96]	@ (8005d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a16      	ldr	r2, [pc, #88]	@ (8005d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	58025408 	.word	0x58025408
 8005d64:	5802541c 	.word	0x5802541c
 8005d68:	58025430 	.word	0x58025430
 8005d6c:	58025444 	.word	0x58025444
 8005d70:	58025458 	.word	0x58025458
 8005d74:	5802546c 	.word	0x5802546c
 8005d78:	58025480 	.word	0x58025480
 8005d7c:	58025494 	.word	0x58025494
 8005d80:	cccccccd 	.word	0xcccccccd
 8005d84:	16009600 	.word	0x16009600
 8005d88:	58025880 	.word	0x58025880
 8005d8c:	aaaaaaab 	.word	0xaaaaaaab
 8005d90:	400204b8 	.word	0x400204b8
 8005d94:	4002040f 	.word	0x4002040f
 8005d98:	10008200 	.word	0x10008200
 8005d9c:	40020880 	.word	0x40020880

08005da0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d04a      	beq.n	8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d847      	bhi.n	8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a25      	ldr	r2, [pc, #148]	@ (8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a24      	ldr	r2, [pc, #144]	@ (8005e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d01d      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a22      	ldr	r2, [pc, #136]	@ (8005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	@ (8005e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1b      	ldr	r2, [pc, #108]	@ (8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4b17      	ldr	r3, [pc, #92]	@ (8005e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a15      	ldr	r2, [pc, #84]	@ (8005e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e28:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e2a:	e009      	b.n	8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4b14      	ldr	r3, [pc, #80]	@ (8005e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a11      	ldr	r2, [pc, #68]	@ (8005e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e3e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	58025408 	.word	0x58025408
 8005e5c:	5802541c 	.word	0x5802541c
 8005e60:	58025430 	.word	0x58025430
 8005e64:	58025444 	.word	0x58025444
 8005e68:	58025458 	.word	0x58025458
 8005e6c:	5802546c 	.word	0x5802546c
 8005e70:	58025480 	.word	0x58025480
 8005e74:	58025494 	.word	0x58025494
 8005e78:	1600963f 	.word	0x1600963f
 8005e7c:	58025940 	.word	0x58025940
 8005e80:	1000823f 	.word	0x1000823f
 8005e84:	40020940 	.word	0x40020940

08005e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b089      	sub	sp, #36	@ 0x24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e96:	4b86      	ldr	r3, [pc, #536]	@ (80060b0 <HAL_GPIO_Init+0x228>)
 8005e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e9a:	e18c      	b.n	80061b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 817e 	beq.w	80061b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d005      	beq.n	8005ecc <HAL_GPIO_Init+0x44>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d130      	bne.n	8005f2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f02:	2201      	movs	r2, #1
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	f003 0201 	and.w	r2, r3, #1
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d017      	beq.n	8005f6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	2203      	movs	r2, #3
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d123      	bne.n	8005fbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	08da      	lsrs	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3208      	adds	r2, #8
 8005f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	220f      	movs	r2, #15
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	43db      	mvns	r3, r3
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	4013      	ands	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	08da      	lsrs	r2, r3, #3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3208      	adds	r2, #8
 8005fb8:	69b9      	ldr	r1, [r7, #24]
 8005fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	2203      	movs	r2, #3
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 0203 	and.w	r2, r3, #3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80d8 	beq.w	80061b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006000:	4b2c      	ldr	r3, [pc, #176]	@ (80060b4 <HAL_GPIO_Init+0x22c>)
 8006002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006006:	4a2b      	ldr	r2, [pc, #172]	@ (80060b4 <HAL_GPIO_Init+0x22c>)
 8006008:	f043 0302 	orr.w	r3, r3, #2
 800600c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006010:	4b28      	ldr	r3, [pc, #160]	@ (80060b4 <HAL_GPIO_Init+0x22c>)
 8006012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800601e:	4a26      	ldr	r2, [pc, #152]	@ (80060b8 <HAL_GPIO_Init+0x230>)
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	3302      	adds	r3, #2
 8006026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	220f      	movs	r2, #15
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	43db      	mvns	r3, r3
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4013      	ands	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <HAL_GPIO_Init+0x234>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d04a      	beq.n	80060e0 <HAL_GPIO_Init+0x258>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_GPIO_Init+0x238>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <HAL_GPIO_Init+0x222>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_GPIO_Init+0x23c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d025      	beq.n	80060a6 <HAL_GPIO_Init+0x21e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <HAL_GPIO_Init+0x240>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <HAL_GPIO_Init+0x21a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a19      	ldr	r2, [pc, #100]	@ (80060cc <HAL_GPIO_Init+0x244>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d019      	beq.n	800609e <HAL_GPIO_Init+0x216>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <HAL_GPIO_Init+0x248>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_GPIO_Init+0x212>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <HAL_GPIO_Init+0x24c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00d      	beq.n	8006096 <HAL_GPIO_Init+0x20e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <HAL_GPIO_Init+0x250>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <HAL_GPIO_Init+0x20a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a15      	ldr	r2, [pc, #84]	@ (80060dc <HAL_GPIO_Init+0x254>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d101      	bne.n	800608e <HAL_GPIO_Init+0x206>
 800608a:	2309      	movs	r3, #9
 800608c:	e029      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 800608e:	230a      	movs	r3, #10
 8006090:	e027      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 8006092:	2307      	movs	r3, #7
 8006094:	e025      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 8006096:	2306      	movs	r3, #6
 8006098:	e023      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 800609a:	2305      	movs	r3, #5
 800609c:	e021      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 800609e:	2304      	movs	r3, #4
 80060a0:	e01f      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 80060a2:	2303      	movs	r3, #3
 80060a4:	e01d      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 80060a6:	2302      	movs	r3, #2
 80060a8:	e01b      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e019      	b.n	80060e2 <HAL_GPIO_Init+0x25a>
 80060ae:	bf00      	nop
 80060b0:	58000080 	.word	0x58000080
 80060b4:	58024400 	.word	0x58024400
 80060b8:	58000400 	.word	0x58000400
 80060bc:	58020000 	.word	0x58020000
 80060c0:	58020400 	.word	0x58020400
 80060c4:	58020800 	.word	0x58020800
 80060c8:	58020c00 	.word	0x58020c00
 80060cc:	58021000 	.word	0x58021000
 80060d0:	58021400 	.word	0x58021400
 80060d4:	58021800 	.word	0x58021800
 80060d8:	58021c00 	.word	0x58021c00
 80060dc:	58022400 	.word	0x58022400
 80060e0:	2300      	movs	r3, #0
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	f002 0203 	and.w	r2, r2, #3
 80060e8:	0092      	lsls	r2, r2, #2
 80060ea:	4093      	lsls	r3, r2
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060f2:	4938      	ldr	r1, [pc, #224]	@ (80061d4 <HAL_GPIO_Init+0x34c>)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	3302      	adds	r3, #2
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	43db      	mvns	r3, r3
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	4013      	ands	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006154:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	43db      	mvns	r3, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4013      	ands	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f47f ae6b 	bne.w	8005e9c <HAL_GPIO_Init+0x14>
  }
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	3724      	adds	r7, #36	@ 0x24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	58000400 	.word	0x58000400

080061d8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061e0:	4b19      	ldr	r3, [pc, #100]	@ (8006248 <HAL_PWREx_ConfigSupply+0x70>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d00a      	beq.n	8006202 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061ec:	4b16      	ldr	r3, [pc, #88]	@ (8006248 <HAL_PWREx_ConfigSupply+0x70>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d001      	beq.n	80061fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e01f      	b.n	800623e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e01d      	b.n	800623e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006202:	4b11      	ldr	r3, [pc, #68]	@ (8006248 <HAL_PWREx_ConfigSupply+0x70>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f023 0207 	bic.w	r2, r3, #7
 800620a:	490f      	ldr	r1, [pc, #60]	@ (8006248 <HAL_PWREx_ConfigSupply+0x70>)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4313      	orrs	r3, r2
 8006210:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006212:	f7fb fb3f 	bl	8001894 <HAL_GetTick>
 8006216:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006218:	e009      	b.n	800622e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800621a:	f7fb fb3b 	bl	8001894 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006228:	d901      	bls.n	800622e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e007      	b.n	800623e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800622e:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <HAL_PWREx_ConfigSupply+0x70>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800623a:	d1ee      	bne.n	800621a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	58024800 	.word	0x58024800

0800624c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	@ 0x30
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e3c8      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8087 	beq.w	800637a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800626c:	4b88      	ldr	r3, [pc, #544]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006276:	4b86      	ldr	r3, [pc, #536]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	2b10      	cmp	r3, #16
 8006280:	d007      	beq.n	8006292 <HAL_RCC_OscConfig+0x46>
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	2b18      	cmp	r3, #24
 8006286:	d110      	bne.n	80062aa <HAL_RCC_OscConfig+0x5e>
 8006288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d10b      	bne.n	80062aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006292:	4b7f      	ldr	r3, [pc, #508]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d06c      	beq.n	8006378 <HAL_RCC_OscConfig+0x12c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d168      	bne.n	8006378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e3a2      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062b2:	d106      	bne.n	80062c2 <HAL_RCC_OscConfig+0x76>
 80062b4:	4b76      	ldr	r3, [pc, #472]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a75      	ldr	r2, [pc, #468]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	e02e      	b.n	8006320 <HAL_RCC_OscConfig+0xd4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10c      	bne.n	80062e4 <HAL_RCC_OscConfig+0x98>
 80062ca:	4b71      	ldr	r3, [pc, #452]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a70      	ldr	r2, [pc, #448]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b6e      	ldr	r3, [pc, #440]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a6d      	ldr	r2, [pc, #436]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e01d      	b.n	8006320 <HAL_RCC_OscConfig+0xd4>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062ec:	d10c      	bne.n	8006308 <HAL_RCC_OscConfig+0xbc>
 80062ee:	4b68      	ldr	r3, [pc, #416]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a67      	ldr	r2, [pc, #412]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	4b65      	ldr	r3, [pc, #404]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a64      	ldr	r2, [pc, #400]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e00b      	b.n	8006320 <HAL_RCC_OscConfig+0xd4>
 8006308:	4b61      	ldr	r3, [pc, #388]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a60      	ldr	r2, [pc, #384]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800630e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	4b5e      	ldr	r3, [pc, #376]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a5d      	ldr	r2, [pc, #372]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800631a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800631e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d013      	beq.n	8006350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fb fab4 	bl	8001894 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006330:	f7fb fab0 	bl	8001894 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b64      	cmp	r3, #100	@ 0x64
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e356      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006342:	4b53      	ldr	r3, [pc, #332]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0f0      	beq.n	8006330 <HAL_RCC_OscConfig+0xe4>
 800634e:	e014      	b.n	800637a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb faa0 	bl	8001894 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006358:	f7fb fa9c 	bl	8001894 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	@ 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e342      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800636a:	4b49      	ldr	r3, [pc, #292]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0x10c>
 8006376:	e000      	b.n	800637a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 808c 	beq.w	80064a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006388:	4b41      	ldr	r3, [pc, #260]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006390:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006392:	4b3f      	ldr	r3, [pc, #252]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006396:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_RCC_OscConfig+0x162>
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	2b18      	cmp	r3, #24
 80063a2:	d137      	bne.n	8006414 <HAL_RCC_OscConfig+0x1c8>
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d132      	bne.n	8006414 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ae:	4b38      	ldr	r3, [pc, #224]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_RCC_OscConfig+0x17a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e314      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063c6:	4b32      	ldr	r3, [pc, #200]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f023 0219 	bic.w	r2, r3, #25
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	492f      	ldr	r1, [pc, #188]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fb fa5c 	bl	8001894 <HAL_GetTick>
 80063dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e0:	f7fb fa58 	bl	8001894 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e2fe      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063f2:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fe:	4b24      	ldr	r3, [pc, #144]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	4920      	ldr	r1, [pc, #128]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800640e:	4313      	orrs	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006412:	e045      	b.n	80064a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d026      	beq.n	800646a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800641c:	4b1c      	ldr	r3, [pc, #112]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f023 0219 	bic.w	r2, r3, #25
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4919      	ldr	r1, [pc, #100]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642e:	f7fb fa31 	bl	8001894 <HAL_GetTick>
 8006432:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006436:	f7fb fa2d 	bl	8001894 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e2d3      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006448:	4b11      	ldr	r3, [pc, #68]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006454:	4b0e      	ldr	r3, [pc, #56]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	061b      	lsls	r3, r3, #24
 8006462:	490b      	ldr	r1, [pc, #44]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006464:	4313      	orrs	r3, r2
 8006466:	604b      	str	r3, [r1, #4]
 8006468:	e01a      	b.n	80064a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800646a:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a08      	ldr	r2, [pc, #32]	@ (8006490 <HAL_RCC_OscConfig+0x244>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006476:	f7fb fa0d 	bl	8001894 <HAL_GetTick>
 800647a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800647c:	e00a      	b.n	8006494 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647e:	f7fb fa09 	bl	8001894 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d903      	bls.n	8006494 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e2af      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
 8006490:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006494:	4b96      	ldr	r3, [pc, #600]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1ee      	bne.n	800647e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d06a      	beq.n	8006582 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ac:	4b90      	ldr	r3, [pc, #576]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064b6:	4b8e      	ldr	r3, [pc, #568]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b08      	cmp	r3, #8
 80064c0:	d007      	beq.n	80064d2 <HAL_RCC_OscConfig+0x286>
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b18      	cmp	r3, #24
 80064c6:	d11b      	bne.n	8006500 <HAL_RCC_OscConfig+0x2b4>
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d116      	bne.n	8006500 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064d2:	4b87      	ldr	r3, [pc, #540]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_RCC_OscConfig+0x29e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	2b80      	cmp	r3, #128	@ 0x80
 80064e4:	d001      	beq.n	80064ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e282      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064ea:	4b81      	ldr	r3, [pc, #516]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	061b      	lsls	r3, r3, #24
 80064f8:	497d      	ldr	r1, [pc, #500]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064fe:	e040      	b.n	8006582 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d023      	beq.n	8006550 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006508:	4b79      	ldr	r3, [pc, #484]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a78      	ldr	r2, [pc, #480]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800650e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006514:	f7fb f9be 	bl	8001894 <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800651c:	f7fb f9ba 	bl	8001894 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e260      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800652e:	4b70      	ldr	r3, [pc, #448]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800653a:	4b6d      	ldr	r3, [pc, #436]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	061b      	lsls	r3, r3, #24
 8006548:	4969      	ldr	r1, [pc, #420]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800654a:	4313      	orrs	r3, r2
 800654c:	60cb      	str	r3, [r1, #12]
 800654e:	e018      	b.n	8006582 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006550:	4b67      	ldr	r3, [pc, #412]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a66      	ldr	r2, [pc, #408]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800655a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fb f99a 	bl	8001894 <HAL_GetTick>
 8006560:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006564:	f7fb f996 	bl	8001894 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e23c      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006576:	4b5e      	ldr	r3, [pc, #376]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f0      	bne.n	8006564 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d036      	beq.n	80065fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d019      	beq.n	80065ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006596:	4b56      	ldr	r3, [pc, #344]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659a:	4a55      	ldr	r2, [pc, #340]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a2:	f7fb f977 	bl	8001894 <HAL_GetTick>
 80065a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065aa:	f7fb f973 	bl	8001894 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e219      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065bc:	4b4c      	ldr	r3, [pc, #304]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80065be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x35e>
 80065c8:	e018      	b.n	80065fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ca:	4b49      	ldr	r3, [pc, #292]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80065cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ce:	4a48      	ldr	r2, [pc, #288]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80065d0:	f023 0301 	bic.w	r3, r3, #1
 80065d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d6:	f7fb f95d 	bl	8001894 <HAL_GetTick>
 80065da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065dc:	e008      	b.n	80065f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065de:	f7fb f959 	bl	8001894 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e1ff      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065f0:	4b3f      	ldr	r3, [pc, #252]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80065f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f0      	bne.n	80065de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d036      	beq.n	8006676 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d019      	beq.n	8006644 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006610:	4b37      	ldr	r3, [pc, #220]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a36      	ldr	r2, [pc, #216]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006616:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800661a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800661c:	f7fb f93a 	bl	8001894 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006624:	f7fb f936 	bl	8001894 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e1dc      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006636:	4b2e      	ldr	r3, [pc, #184]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x3d8>
 8006642:	e018      	b.n	8006676 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006644:	4b2a      	ldr	r3, [pc, #168]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a29      	ldr	r2, [pc, #164]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800664a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800664e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006650:	f7fb f920 	bl	8001894 <HAL_GetTick>
 8006654:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006658:	f7fb f91c 	bl	8001894 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e1c2      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800666a:	4b21      	ldr	r3, [pc, #132]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8086 	beq.w	8006790 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006684:	4b1b      	ldr	r3, [pc, #108]	@ (80066f4 <HAL_RCC_OscConfig+0x4a8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1a      	ldr	r2, [pc, #104]	@ (80066f4 <HAL_RCC_OscConfig+0x4a8>)
 800668a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800668e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006690:	f7fb f900 	bl	8001894 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006698:	f7fb f8fc 	bl	8001894 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	@ 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1a2      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066aa:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <HAL_RCC_OscConfig+0x4a8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d106      	bne.n	80066cc <HAL_RCC_OscConfig+0x480>
 80066be:	4b0c      	ldr	r3, [pc, #48]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c2:	4a0b      	ldr	r2, [pc, #44]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ca:	e032      	b.n	8006732 <HAL_RCC_OscConfig+0x4e6>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d111      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4ac>
 80066d4:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80066d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d8:	4a05      	ldr	r2, [pc, #20]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	6713      	str	r3, [r2, #112]	@ 0x70
 80066e0:	4b03      	ldr	r3, [pc, #12]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80066e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e4:	4a02      	ldr	r2, [pc, #8]	@ (80066f0 <HAL_RCC_OscConfig+0x4a4>)
 80066e6:	f023 0304 	bic.w	r3, r3, #4
 80066ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ec:	e021      	b.n	8006732 <HAL_RCC_OscConfig+0x4e6>
 80066ee:	bf00      	nop
 80066f0:	58024400 	.word	0x58024400
 80066f4:	58024800 	.word	0x58024800
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b05      	cmp	r3, #5
 80066fe:	d10c      	bne.n	800671a <HAL_RCC_OscConfig+0x4ce>
 8006700:	4b83      	ldr	r3, [pc, #524]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006704:	4a82      	ldr	r2, [pc, #520]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006706:	f043 0304 	orr.w	r3, r3, #4
 800670a:	6713      	str	r3, [r2, #112]	@ 0x70
 800670c:	4b80      	ldr	r3, [pc, #512]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800670e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006710:	4a7f      	ldr	r2, [pc, #508]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	6713      	str	r3, [r2, #112]	@ 0x70
 8006718:	e00b      	b.n	8006732 <HAL_RCC_OscConfig+0x4e6>
 800671a:	4b7d      	ldr	r3, [pc, #500]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671e:	4a7c      	ldr	r2, [pc, #496]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	6713      	str	r3, [r2, #112]	@ 0x70
 8006726:	4b7a      	ldr	r3, [pc, #488]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	4a79      	ldr	r2, [pc, #484]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800672c:	f023 0304 	bic.w	r3, r3, #4
 8006730:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d015      	beq.n	8006766 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673a:	f7fb f8ab 	bl	8001894 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006740:	e00a      	b.n	8006758 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006742:	f7fb f8a7 	bl	8001894 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006750:	4293      	cmp	r3, r2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e14b      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006758:	4b6d      	ldr	r3, [pc, #436]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800675a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0ee      	beq.n	8006742 <HAL_RCC_OscConfig+0x4f6>
 8006764:	e014      	b.n	8006790 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006766:	f7fb f895 	bl	8001894 <HAL_GetTick>
 800676a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800676c:	e00a      	b.n	8006784 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676e:	f7fb f891 	bl	8001894 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800677c:	4293      	cmp	r3, r2
 800677e:	d901      	bls.n	8006784 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e135      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006784:	4b62      	ldr	r3, [pc, #392]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1ee      	bne.n	800676e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 812a 	beq.w	80069ee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800679a:	4b5d      	ldr	r3, [pc, #372]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067a2:	2b18      	cmp	r3, #24
 80067a4:	f000 80ba 	beq.w	800691c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	f040 8095 	bne.w	80068dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b2:	4b57      	ldr	r3, [pc, #348]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a56      	ldr	r2, [pc, #344]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80067b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067be:	f7fb f869 	bl	8001894 <HAL_GetTick>
 80067c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c6:	f7fb f865 	bl	8001894 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e10b      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067d8:	4b4d      	ldr	r3, [pc, #308]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f0      	bne.n	80067c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80067e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006914 <HAL_RCC_OscConfig+0x6c8>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80067f4:	0112      	lsls	r2, r2, #4
 80067f6:	430a      	orrs	r2, r1
 80067f8:	4945      	ldr	r1, [pc, #276]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006802:	3b01      	subs	r3, #1
 8006804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680c:	3b01      	subs	r3, #1
 800680e:	025b      	lsls	r3, r3, #9
 8006810:	b29b      	uxth	r3, r3
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006818:	3b01      	subs	r3, #1
 800681a:	041b      	lsls	r3, r3, #16
 800681c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	3b01      	subs	r3, #1
 8006828:	061b      	lsls	r3, r3, #24
 800682a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800682e:	4938      	ldr	r1, [pc, #224]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006830:	4313      	orrs	r3, r2
 8006832:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006834:	4b36      	ldr	r3, [pc, #216]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006838:	4a35      	ldr	r2, [pc, #212]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006840:	4b33      	ldr	r3, [pc, #204]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006844:	4b34      	ldr	r3, [pc, #208]	@ (8006918 <HAL_RCC_OscConfig+0x6cc>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800684c:	00d2      	lsls	r2, r2, #3
 800684e:	4930      	ldr	r1, [pc, #192]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006850:	4313      	orrs	r3, r2
 8006852:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006854:	4b2e      	ldr	r3, [pc, #184]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	f023 020c 	bic.w	r2, r3, #12
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006860:	492b      	ldr	r1, [pc, #172]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006862:	4313      	orrs	r3, r2
 8006864:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006866:	4b2a      	ldr	r3, [pc, #168]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686a:	f023 0202 	bic.w	r2, r3, #2
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006872:	4927      	ldr	r1, [pc, #156]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006874:	4313      	orrs	r3, r2
 8006876:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006878:	4b25      	ldr	r3, [pc, #148]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4a24      	ldr	r2, [pc, #144]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800687e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006884:	4b22      	ldr	r3, [pc, #136]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006888:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800688a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800688e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006890:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800689a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800689c:	4b1c      	ldr	r3, [pc, #112]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a8:	4b19      	ldr	r3, [pc, #100]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a18      	ldr	r2, [pc, #96]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80068ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b4:	f7fa ffee 	bl	8001894 <HAL_GetTick>
 80068b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068bc:	f7fa ffea 	bl	8001894 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e090      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068ce:	4b10      	ldr	r3, [pc, #64]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x670>
 80068da:	e088      	b.n	80069ee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 80068e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e8:	f7fa ffd4 	bl	8001894 <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f0:	f7fa ffd0 	bl	8001894 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e076      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006902:	4b03      	ldr	r3, [pc, #12]	@ (8006910 <HAL_RCC_OscConfig+0x6c4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0x6a4>
 800690e:	e06e      	b.n	80069ee <HAL_RCC_OscConfig+0x7a2>
 8006910:	58024400 	.word	0x58024400
 8006914:	fffffc0c 	.word	0xfffffc0c
 8006918:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800691c:	4b36      	ldr	r3, [pc, #216]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 800691e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006920:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006922:	4b35      	ldr	r3, [pc, #212]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	2b01      	cmp	r3, #1
 800692e:	d031      	beq.n	8006994 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f003 0203 	and.w	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800693a:	429a      	cmp	r2, r3
 800693c:	d12a      	bne.n	8006994 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694a:	429a      	cmp	r2, r3
 800694c:	d122      	bne.n	8006994 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006958:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d11a      	bne.n	8006994 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	0a5b      	lsrs	r3, r3, #9
 8006962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800696c:	429a      	cmp	r2, r3
 800696e:	d111      	bne.n	8006994 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800697e:	429a      	cmp	r2, r3
 8006980:	d108      	bne.n	8006994 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	0e1b      	lsrs	r3, r3, #24
 8006986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800698e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e02b      	b.n	80069f0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006998:	4b17      	ldr	r3, [pc, #92]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 800699a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699c:	08db      	lsrs	r3, r3, #3
 800699e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d01f      	beq.n	80069ee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80069ae:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b2:	4a11      	ldr	r2, [pc, #68]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80069ba:	f7fa ff6b 	bl	8001894 <HAL_GetTick>
 80069be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069c0:	bf00      	nop
 80069c2:	f7fa ff67 	bl	8001894 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d0f9      	beq.n	80069c2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069ce:	4b0a      	ldr	r3, [pc, #40]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 80069d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069d2:	4b0a      	ldr	r3, [pc, #40]	@ (80069fc <HAL_RCC_OscConfig+0x7b0>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069da:	00d2      	lsls	r2, r2, #3
 80069dc:	4906      	ldr	r1, [pc, #24]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80069e2:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	4a04      	ldr	r2, [pc, #16]	@ (80069f8 <HAL_RCC_OscConfig+0x7ac>)
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3730      	adds	r7, #48	@ 0x30
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	58024400 	.word	0x58024400
 80069fc:	ffff0007 	.word	0xffff0007

08006a00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e19c      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a14:	4b8a      	ldr	r3, [pc, #552]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d910      	bls.n	8006a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a22:	4b87      	ldr	r3, [pc, #540]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f023 020f 	bic.w	r2, r3, #15
 8006a2a:	4985      	ldr	r1, [pc, #532]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a32:	4b83      	ldr	r3, [pc, #524]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e184      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	4b7b      	ldr	r3, [pc, #492]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d908      	bls.n	8006a72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a60:	4b78      	ldr	r3, [pc, #480]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	4975      	ldr	r1, [pc, #468]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d010      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695a      	ldr	r2, [r3, #20]
 8006a82:	4b70      	ldr	r3, [pc, #448]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d908      	bls.n	8006aa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	496a      	ldr	r1, [pc, #424]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	4b64      	ldr	r3, [pc, #400]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d908      	bls.n	8006ace <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006abc:	4b61      	ldr	r3, [pc, #388]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	495e      	ldr	r1, [pc, #376]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d010      	beq.n	8006afc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69da      	ldr	r2, [r3, #28]
 8006ade:	4b59      	ldr	r3, [pc, #356]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d908      	bls.n	8006afc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006aea:	4b56      	ldr	r3, [pc, #344]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	4953      	ldr	r1, [pc, #332]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d010      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d908      	bls.n	8006b2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b18:	4b4a      	ldr	r3, [pc, #296]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f023 020f 	bic.w	r2, r3, #15
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4947      	ldr	r1, [pc, #284]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d055      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b36:	4b43      	ldr	r3, [pc, #268]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	4940      	ldr	r1, [pc, #256]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b50:	4b3c      	ldr	r3, [pc, #240]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d121      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0f6      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d107      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b68:	4b36      	ldr	r3, [pc, #216]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d115      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0ea      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d107      	bne.n	8006b90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b80:	4b30      	ldr	r3, [pc, #192]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0de      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b90:	4b2c      	ldr	r3, [pc, #176]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e0d6      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ba0:	4b28      	ldr	r3, [pc, #160]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f023 0207 	bic.w	r2, r3, #7
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	4925      	ldr	r1, [pc, #148]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb2:	f7fa fe6f 	bl	8001894 <HAL_GetTick>
 8006bb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bba:	f7fa fe6b 	bl	8001894 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e0be      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d1eb      	bne.n	8006bba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d010      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d208      	bcs.n	8006c10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bfe:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	f023 020f 	bic.w	r2, r3, #15
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	490e      	ldr	r1, [pc, #56]	@ (8006c44 <HAL_RCC_ClockConfig+0x244>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d214      	bcs.n	8006c48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1e:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f023 020f 	bic.w	r2, r3, #15
 8006c26:	4906      	ldr	r1, [pc, #24]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2e:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <HAL_RCC_ClockConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d005      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e086      	b.n	8006d4e <HAL_RCC_ClockConfig+0x34e>
 8006c40:	52002000 	.word	0x52002000
 8006c44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	4b3f      	ldr	r3, [pc, #252]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d208      	bcs.n	8006c76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c64:	4b3c      	ldr	r3, [pc, #240]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	4939      	ldr	r1, [pc, #228]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	4b34      	ldr	r3, [pc, #208]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d208      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c92:	4b31      	ldr	r3, [pc, #196]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	492e      	ldr	r1, [pc, #184]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d010      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	4b28      	ldr	r3, [pc, #160]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d208      	bcs.n	8006cd2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cc0:	4b25      	ldr	r3, [pc, #148]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	4922      	ldr	r1, [pc, #136]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69da      	ldr	r2, [r3, #28]
 8006ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d208      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cee:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	4917      	ldr	r1, [pc, #92]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d00:	f000 f834 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8006d04:	4602      	mov	r2, r0
 8006d06:	4b14      	ldr	r3, [pc, #80]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	4912      	ldr	r1, [pc, #72]	@ (8006d5c <HAL_RCC_ClockConfig+0x35c>)
 8006d12:	5ccb      	ldrb	r3, [r1, r3]
 8006d14:	f003 031f 	and.w	r3, r3, #31
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d58 <HAL_RCC_ClockConfig+0x358>)
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	4a0d      	ldr	r2, [pc, #52]	@ (8006d5c <HAL_RCC_ClockConfig+0x35c>)
 8006d28:	5cd3      	ldrb	r3, [r2, r3]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
 8006d34:	4a0a      	ldr	r2, [pc, #40]	@ (8006d60 <HAL_RCC_ClockConfig+0x360>)
 8006d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d38:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <HAL_RCC_ClockConfig+0x364>)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d68 <HAL_RCC_ClockConfig+0x368>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fa fd5c 	bl	8001800 <HAL_InitTick>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	0800c550 	.word	0x0800c550
 8006d60:	2400001c 	.word	0x2400001c
 8006d64:	24000018 	.word	0x24000018
 8006d68:	24000020 	.word	0x24000020

08006d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b089      	sub	sp, #36	@ 0x24
 8006d70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d72:	4bb3      	ldr	r3, [pc, #716]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d7a:	2b18      	cmp	r3, #24
 8006d7c:	f200 8155 	bhi.w	800702a <HAL_RCC_GetSysClockFreq+0x2be>
 8006d80:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006ded 	.word	0x08006ded
 8006d8c:	0800702b 	.word	0x0800702b
 8006d90:	0800702b 	.word	0x0800702b
 8006d94:	0800702b 	.word	0x0800702b
 8006d98:	0800702b 	.word	0x0800702b
 8006d9c:	0800702b 	.word	0x0800702b
 8006da0:	0800702b 	.word	0x0800702b
 8006da4:	0800702b 	.word	0x0800702b
 8006da8:	08006e13 	.word	0x08006e13
 8006dac:	0800702b 	.word	0x0800702b
 8006db0:	0800702b 	.word	0x0800702b
 8006db4:	0800702b 	.word	0x0800702b
 8006db8:	0800702b 	.word	0x0800702b
 8006dbc:	0800702b 	.word	0x0800702b
 8006dc0:	0800702b 	.word	0x0800702b
 8006dc4:	0800702b 	.word	0x0800702b
 8006dc8:	08006e19 	.word	0x08006e19
 8006dcc:	0800702b 	.word	0x0800702b
 8006dd0:	0800702b 	.word	0x0800702b
 8006dd4:	0800702b 	.word	0x0800702b
 8006dd8:	0800702b 	.word	0x0800702b
 8006ddc:	0800702b 	.word	0x0800702b
 8006de0:	0800702b 	.word	0x0800702b
 8006de4:	0800702b 	.word	0x0800702b
 8006de8:	08006e1f 	.word	0x08006e1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dec:	4b94      	ldr	r3, [pc, #592]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d009      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006df8:	4b91      	ldr	r3, [pc, #580]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	4a90      	ldr	r2, [pc, #576]	@ (8007044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e0a:	e111      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e0c:	4b8d      	ldr	r3, [pc, #564]	@ (8007044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e0e:	61bb      	str	r3, [r7, #24]
      break;
 8006e10:	e10e      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e12:	4b8d      	ldr	r3, [pc, #564]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e14:	61bb      	str	r3, [r7, #24]
      break;
 8006e16:	e10b      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e18:	4b8c      	ldr	r3, [pc, #560]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e1a:	61bb      	str	r3, [r7, #24]
      break;
 8006e1c:	e108      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e1e:	4b88      	ldr	r3, [pc, #544]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e28:	4b85      	ldr	r3, [pc, #532]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2c:	091b      	lsrs	r3, r3, #4
 8006e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e34:	4b82      	ldr	r3, [pc, #520]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e3e:	4b80      	ldr	r3, [pc, #512]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80e1 	beq.w	8007024 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	f000 8083 	beq.w	8006f70 <HAL_RCC_GetSysClockFreq+0x204>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	f200 80a1 	bhi.w	8006fb4 <HAL_RCC_GetSysClockFreq+0x248>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x114>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d056      	beq.n	8006f2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e7e:	e099      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e80:	4b6f      	ldr	r3, [pc, #444]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02d      	beq.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	08db      	lsrs	r3, r3, #3
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	4a6b      	ldr	r2, [pc, #428]	@ (8007044 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	ee07 3a90 	vmov	s15, r3
 8006eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b62      	ldr	r3, [pc, #392]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ee6:	e087      	b.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007054 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b51      	ldr	r3, [pc, #324]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f2a:	e065      	b.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b40      	ldr	r3, [pc, #256]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f6e:	e043      	b.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800705c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b2f      	ldr	r3, [pc, #188]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fb2:	e021      	b.n	8006ff8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007050 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ff6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ff8:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffc:	0a5b      	lsrs	r3, r3, #9
 8006ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007002:	3301      	adds	r3, #1
 8007004:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007010:	edd7 6a07 	vldr	s13, [r7, #28]
 8007014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701c:	ee17 3a90 	vmov	r3, s15
 8007020:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007022:	e005      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	61bb      	str	r3, [r7, #24]
      break;
 8007028:	e002      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800702a:	4b07      	ldr	r3, [pc, #28]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800702c:	61bb      	str	r3, [r7, #24]
      break;
 800702e:	bf00      	nop
  }

  return sysclockfreq;
 8007030:	69bb      	ldr	r3, [r7, #24]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3724      	adds	r7, #36	@ 0x24
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	58024400 	.word	0x58024400
 8007044:	03d09000 	.word	0x03d09000
 8007048:	003d0900 	.word	0x003d0900
 800704c:	007a1200 	.word	0x007a1200
 8007050:	46000000 	.word	0x46000000
 8007054:	4c742400 	.word	0x4c742400
 8007058:	4a742400 	.word	0x4a742400
 800705c:	4af42400 	.word	0x4af42400

08007060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007066:	f7ff fe81 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 800706a:	4602      	mov	r2, r0
 800706c:	4b10      	ldr	r3, [pc, #64]	@ (80070b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	490f      	ldr	r1, [pc, #60]	@ (80070b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007078:	5ccb      	ldrb	r3, [r1, r3]
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	fa22 f303 	lsr.w	r3, r2, r3
 8007082:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007084:	4b0a      	ldr	r3, [pc, #40]	@ (80070b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	4a09      	ldr	r2, [pc, #36]	@ (80070b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800708e:	5cd3      	ldrb	r3, [r2, r3]
 8007090:	f003 031f 	and.w	r3, r3, #31
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	fa22 f303 	lsr.w	r3, r2, r3
 800709a:	4a07      	ldr	r2, [pc, #28]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800709c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800709e:	4a07      	ldr	r2, [pc, #28]	@ (80070bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070a4:	4b04      	ldr	r3, [pc, #16]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80070a6:	681b      	ldr	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	58024400 	.word	0x58024400
 80070b4:	0800c550 	.word	0x0800c550
 80070b8:	2400001c 	.word	0x2400001c
 80070bc:	24000018 	.word	0x24000018

080070c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80070c4:	f7ff ffcc 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	4904      	ldr	r1, [pc, #16]	@ (80070e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070d6:	5ccb      	ldrb	r3, [r1, r3]
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	58024400 	.word	0x58024400
 80070e8:	0800c550 	.word	0x0800c550

080070ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070f0:	b0c6      	sub	sp, #280	@ 0x118
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070f8:	2300      	movs	r3, #0
 80070fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070fe:	2300      	movs	r3, #0
 8007100:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007110:	2500      	movs	r5, #0
 8007112:	ea54 0305 	orrs.w	r3, r4, r5
 8007116:	d049      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800711e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007122:	d02f      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007124:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007128:	d828      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800712a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800712e:	d01a      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007134:	d822      	bhi.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800713a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800713e:	d007      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007140:	e01c      	b.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007142:	4bab      	ldr	r3, [pc, #684]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007146:	4aaa      	ldr	r2, [pc, #680]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800714e:	e01a      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	3308      	adds	r3, #8
 8007156:	2102      	movs	r1, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f002 fa49 	bl	80095f0 <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007164:	e00f      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800716a:	3328      	adds	r3, #40	@ 0x28
 800716c:	2102      	movs	r1, #2
 800716e:	4618      	mov	r0, r3
 8007170:	f002 faf0 	bl	8009754 <RCCEx_PLL3_Config>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800717a:	e004      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007182:	e000      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800718e:	4b98      	ldr	r3, [pc, #608]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007192:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800719c:	4a94      	ldr	r2, [pc, #592]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800719e:	430b      	orrs	r3, r1
 80071a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80071b8:	f04f 0900 	mov.w	r9, #0
 80071bc:	ea58 0309 	orrs.w	r3, r8, r9
 80071c0:	d047      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d82a      	bhi.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80071cc:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071e9 	.word	0x080071e9
 80071d8:	080071f7 	.word	0x080071f7
 80071dc:	0800720d 	.word	0x0800720d
 80071e0:	0800722b 	.word	0x0800722b
 80071e4:	0800722b 	.word	0x0800722b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b81      	ldr	r3, [pc, #516]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ec:	4a80      	ldr	r2, [pc, #512]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071f4:	e01a      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fa:	3308      	adds	r3, #8
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f002 f9f6 	bl	80095f0 <RCCEx_PLL2_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800720a:	e00f      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	3328      	adds	r3, #40	@ 0x28
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f002 fa9d 	bl	8009754 <RCCEx_PLL3_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007220:	e004      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007228:	e000      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800722a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800722c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007234:	4b6e      	ldr	r3, [pc, #440]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007238:	f023 0107 	bic.w	r1, r3, #7
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007242:	4a6b      	ldr	r2, [pc, #428]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007244:	430b      	orrs	r3, r1
 8007246:	6513      	str	r3, [r2, #80]	@ 0x50
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800724e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800725e:	f04f 0b00 	mov.w	fp, #0
 8007262:	ea5a 030b 	orrs.w	r3, sl, fp
 8007266:	d05b      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007270:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007274:	d03b      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007276:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800727a:	d834      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800727c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007280:	d037      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007282:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007286:	d82e      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007288:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800728c:	d033      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800728e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007292:	d828      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007294:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007298:	d01a      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800729a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800729e:	d822      	bhi.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80072a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80072a8:	d007      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80072aa:	e01c      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ac:	4b50      	ldr	r3, [pc, #320]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	4a4f      	ldr	r2, [pc, #316]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072b8:	e01e      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	3308      	adds	r3, #8
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f002 f994 	bl	80095f0 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072ce:	e013      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d4:	3328      	adds	r3, #40	@ 0x28
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f002 fa3b 	bl	8009754 <RCCEx_PLL3_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e4:	e008      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072ec:	e004      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072ee:	bf00      	nop
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80072f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007300:	4b3b      	ldr	r3, [pc, #236]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007304:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007310:	4a37      	ldr	r2, [pc, #220]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007312:	430b      	orrs	r3, r1
 8007314:	6593      	str	r3, [r2, #88]	@ 0x58
 8007316:	e003      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800731c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800732c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007330:	2300      	movs	r3, #0
 8007332:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007336:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800733a:	460b      	mov	r3, r1
 800733c:	4313      	orrs	r3, r2
 800733e:	d05d      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007344:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007348:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800734c:	d03b      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800734e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007352:	d834      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007358:	d037      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800735a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800735e:	d82e      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007360:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007364:	d033      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007366:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800736a:	d828      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800736c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007370:	d01a      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007372:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007376:	d822      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800737c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007380:	d007      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007382:	e01c      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007384:	4b1a      	ldr	r3, [pc, #104]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	4a19      	ldr	r2, [pc, #100]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800738a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800738e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007390:	e01e      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007396:	3308      	adds	r3, #8
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f002 f928 	bl	80095f0 <RCCEx_PLL2_Config>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073a6:	e013      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	3328      	adds	r3, #40	@ 0x28
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f002 f9cf 	bl	8009754 <RCCEx_PLL3_Config>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073bc:	e008      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073c4:	e004      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80073c6:	bf00      	nop
 80073c8:	e002      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80073ca:	bf00      	nop
 80073cc:	e000      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80073ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10d      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073d8:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073e8:	4a01      	ldr	r2, [pc, #4]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80073ea:	430b      	orrs	r3, r1
 80073ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80073ee:	e005      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80073f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007408:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800740c:	2300      	movs	r3, #0
 800740e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007412:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007416:	460b      	mov	r3, r1
 8007418:	4313      	orrs	r3, r2
 800741a:	d03a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007422:	2b30      	cmp	r3, #48	@ 0x30
 8007424:	d01f      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007426:	2b30      	cmp	r3, #48	@ 0x30
 8007428:	d819      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800742a:	2b20      	cmp	r3, #32
 800742c:	d00c      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d815      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007432:	2b00      	cmp	r3, #0
 8007434:	d019      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007436:	2b10      	cmp	r3, #16
 8007438:	d111      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743a:	4baa      	ldr	r3, [pc, #680]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	4aa9      	ldr	r2, [pc, #676]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007446:	e011      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744c:	3308      	adds	r3, #8
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f002 f8cd 	bl	80095f0 <RCCEx_PLL2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800745c:	e006      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007464:	e002      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007466:	bf00      	nop
 8007468:	e000      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800746a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007474:	4b9b      	ldr	r3, [pc, #620]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007478:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007482:	4a98      	ldr	r2, [pc, #608]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007484:	430b      	orrs	r3, r1
 8007486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007488:	e003      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800748e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800749e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80074ac:	460b      	mov	r3, r1
 80074ae:	4313      	orrs	r3, r2
 80074b0:	d051      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074bc:	d035      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80074be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074c2:	d82e      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80074c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074c8:	d031      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80074ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ce:	d828      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80074d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d4:	d01a      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80074d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074da:	d822      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80074e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e4:	d007      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80074e6:	e01c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4b7e      	ldr	r3, [pc, #504]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	4a7d      	ldr	r2, [pc, #500]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80074f4:	e01c      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	3308      	adds	r3, #8
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 f876 	bl	80095f0 <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800750a:	e011      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800750c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007510:	3328      	adds	r3, #40	@ 0x28
 8007512:	2100      	movs	r1, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f002 f91d 	bl	8009754 <RCCEx_PLL3_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007520:	e006      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800752e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007538:	4b6a      	ldr	r3, [pc, #424]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800753a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	4a67      	ldr	r2, [pc, #412]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007548:	430b      	orrs	r3, r1
 800754a:	6513      	str	r3, [r2, #80]	@ 0x50
 800754c:	e003      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007552:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007566:	2300      	movs	r3, #0
 8007568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800756c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007570:	460b      	mov	r3, r1
 8007572:	4313      	orrs	r3, r2
 8007574:	d053      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800757c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007580:	d033      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007582:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007586:	d82c      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800758c:	d02f      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x502>
 800758e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007592:	d826      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007598:	d02b      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800759a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800759e:	d820      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80075a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075a4:	d012      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80075a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075aa:	d81a      	bhi.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d022      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80075b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075b4:	d115      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ba:	3308      	adds	r3, #8
 80075bc:	2101      	movs	r1, #1
 80075be:	4618      	mov	r0, r3
 80075c0:	f002 f816 	bl	80095f0 <RCCEx_PLL2_Config>
 80075c4:	4603      	mov	r3, r0
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075ca:	e015      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d0:	3328      	adds	r3, #40	@ 0x28
 80075d2:	2101      	movs	r1, #1
 80075d4:	4618      	mov	r0, r3
 80075d6:	f002 f8bd 	bl	8009754 <RCCEx_PLL3_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075e0:	e00a      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075e8:	e006      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075ea:	bf00      	nop
 80075ec:	e004      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075ee:	bf00      	nop
 80075f0:	e002      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075f2:	bf00      	nop
 80075f4:	e000      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80075f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007600:	4b38      	ldr	r3, [pc, #224]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007604:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760e:	4a35      	ldr	r2, [pc, #212]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007610:	430b      	orrs	r3, r1
 8007612:	6513      	str	r3, [r2, #80]	@ 0x50
 8007614:	e003      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800761a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800762a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800762e:	2300      	movs	r3, #0
 8007630:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007634:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007638:	460b      	mov	r3, r1
 800763a:	4313      	orrs	r3, r2
 800763c:	d058      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800764a:	d033      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800764c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007650:	d82c      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007656:	d02f      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800765c:	d826      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800765e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007662:	d02b      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007668:	d820      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800766a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800766e:	d012      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007674:	d81a      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d022      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800767a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800767e:	d115      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007684:	3308      	adds	r3, #8
 8007686:	2101      	movs	r1, #1
 8007688:	4618      	mov	r0, r3
 800768a:	f001 ffb1 	bl	80095f0 <RCCEx_PLL2_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007694:	e015      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769a:	3328      	adds	r3, #40	@ 0x28
 800769c:	2101      	movs	r1, #1
 800769e:	4618      	mov	r0, r3
 80076a0:	f002 f858 	bl	8009754 <RCCEx_PLL3_Config>
 80076a4:	4603      	mov	r3, r0
 80076a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076aa:	e00a      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076b2:	e006      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076b4:	bf00      	nop
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10e      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076ca:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076da:	4a02      	ldr	r2, [pc, #8]	@ (80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6593      	str	r3, [r2, #88]	@ 0x58
 80076e0:	e006      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80076fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007700:	2300      	movs	r3, #0
 8007702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007706:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800770a:	460b      	mov	r3, r1
 800770c:	4313      	orrs	r3, r2
 800770e:	d037      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800771a:	d00e      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800771c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007720:	d816      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d018      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800772a:	d111      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772c:	4bc4      	ldr	r3, [pc, #784]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800772e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007730:	4ac3      	ldr	r2, [pc, #780]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007738:	e00f      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800773e:	3308      	adds	r3, #8
 8007740:	2101      	movs	r1, #1
 8007742:	4618      	mov	r0, r3
 8007744:	f001 ff54 	bl	80095f0 <RCCEx_PLL2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800774e:	e004      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007756:	e000      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800775a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007762:	4bb7      	ldr	r3, [pc, #732]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007766:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007770:	4ab3      	ldr	r2, [pc, #716]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007772:	430b      	orrs	r3, r1
 8007774:	6513      	str	r3, [r2, #80]	@ 0x50
 8007776:	e003      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800777c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800778c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007790:	2300      	movs	r3, #0
 8007792:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007796:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800779a:	460b      	mov	r3, r1
 800779c:	4313      	orrs	r3, r2
 800779e:	d039      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d81c      	bhi.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80077aa:	a201      	add	r2, pc, #4	@ (adr r2, 80077b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80077ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b0:	080077ed 	.word	0x080077ed
 80077b4:	080077c1 	.word	0x080077c1
 80077b8:	080077cf 	.word	0x080077cf
 80077bc:	080077ed 	.word	0x080077ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077c0:	4b9f      	ldr	r3, [pc, #636]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c4:	4a9e      	ldr	r2, [pc, #632]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077cc:	e00f      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077d2:	3308      	adds	r3, #8
 80077d4:	2102      	movs	r1, #2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 ff0a 	bl	80095f0 <RCCEx_PLL2_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077e2:	e004      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077ea:	e000      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80077ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077f6:	4b92      	ldr	r3, [pc, #584]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077fa:	f023 0103 	bic.w	r1, r3, #3
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007804:	4a8e      	ldr	r2, [pc, #568]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007806:	430b      	orrs	r3, r1
 8007808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007820:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800782a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	f000 8099 	beq.w	8007968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007836:	4b83      	ldr	r3, [pc, #524]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a82      	ldr	r2, [pc, #520]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800783c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007842:	f7fa f827 	bl	8001894 <HAL_GetTick>
 8007846:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800784a:	e00b      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800784c:	f7fa f822 	bl	8001894 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b64      	cmp	r3, #100	@ 0x64
 800785a:	d903      	bls.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007862:	e005      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007864:	4b77      	ldr	r3, [pc, #476]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0ed      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007874:	2b00      	cmp	r3, #0
 8007876:	d173      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007878:	4b71      	ldr	r3, [pc, #452]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800787a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007884:	4053      	eors	r3, r2
 8007886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800788a:	2b00      	cmp	r3, #0
 800788c:	d015      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800788e:	4b6c      	ldr	r3, [pc, #432]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007896:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800789a:	4b69      	ldr	r3, [pc, #420]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800789c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789e:	4a68      	ldr	r2, [pc, #416]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078a6:	4b66      	ldr	r3, [pc, #408]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078aa:	4a65      	ldr	r2, [pc, #404]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078b2:	4a63      	ldr	r2, [pc, #396]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c6:	d118      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078c8:	f7f9 ffe4 	bl	8001894 <HAL_GetTick>
 80078cc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078d0:	e00d      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d2:	f7f9 ffdf 	bl	8001894 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80078dc:	1ad2      	subs	r2, r2, r3
 80078de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d903      	bls.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80078ec:	e005      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ee:	4b54      	ldr	r3, [pc, #336]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0eb      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80078fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d129      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800790a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800790e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007912:	d10e      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007914:	4b4a      	ldr	r3, [pc, #296]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007924:	091a      	lsrs	r2, r3, #4
 8007926:	4b48      	ldr	r3, [pc, #288]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007928:	4013      	ands	r3, r2
 800792a:	4a45      	ldr	r2, [pc, #276]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800792c:	430b      	orrs	r3, r1
 800792e:	6113      	str	r3, [r2, #16]
 8007930:	e005      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007932:	4b43      	ldr	r3, [pc, #268]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	4a42      	ldr	r2, [pc, #264]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800793c:	6113      	str	r3, [r2, #16]
 800793e:	4b40      	ldr	r3, [pc, #256]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007940:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800794a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800794e:	4a3c      	ldr	r2, [pc, #240]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007950:	430b      	orrs	r3, r1
 8007952:	6713      	str	r3, [r2, #112]	@ 0x70
 8007954:	e008      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800795a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800795e:	e003      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f002 0301 	and.w	r3, r2, #1
 8007974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007978:	2300      	movs	r3, #0
 800797a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800797e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007982:	460b      	mov	r3, r1
 8007984:	4313      	orrs	r3, r2
 8007986:	f000 808f 	beq.w	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007990:	2b28      	cmp	r3, #40	@ 0x28
 8007992:	d871      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007994:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	08007a81 	.word	0x08007a81
 80079a0:	08007a79 	.word	0x08007a79
 80079a4:	08007a79 	.word	0x08007a79
 80079a8:	08007a79 	.word	0x08007a79
 80079ac:	08007a79 	.word	0x08007a79
 80079b0:	08007a79 	.word	0x08007a79
 80079b4:	08007a79 	.word	0x08007a79
 80079b8:	08007a79 	.word	0x08007a79
 80079bc:	08007a4d 	.word	0x08007a4d
 80079c0:	08007a79 	.word	0x08007a79
 80079c4:	08007a79 	.word	0x08007a79
 80079c8:	08007a79 	.word	0x08007a79
 80079cc:	08007a79 	.word	0x08007a79
 80079d0:	08007a79 	.word	0x08007a79
 80079d4:	08007a79 	.word	0x08007a79
 80079d8:	08007a79 	.word	0x08007a79
 80079dc:	08007a63 	.word	0x08007a63
 80079e0:	08007a79 	.word	0x08007a79
 80079e4:	08007a79 	.word	0x08007a79
 80079e8:	08007a79 	.word	0x08007a79
 80079ec:	08007a79 	.word	0x08007a79
 80079f0:	08007a79 	.word	0x08007a79
 80079f4:	08007a79 	.word	0x08007a79
 80079f8:	08007a79 	.word	0x08007a79
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007a79 	.word	0x08007a79
 8007a04:	08007a79 	.word	0x08007a79
 8007a08:	08007a79 	.word	0x08007a79
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007a79 	.word	0x08007a79
 8007a18:	08007a79 	.word	0x08007a79
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	08007a79 	.word	0x08007a79
 8007a30:	08007a79 	.word	0x08007a79
 8007a34:	08007a79 	.word	0x08007a79
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a81 	.word	0x08007a81
 8007a40:	58024400 	.word	0x58024400
 8007a44:	58024800 	.word	0x58024800
 8007a48:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	3308      	adds	r3, #8
 8007a52:	2101      	movs	r1, #1
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fdcb 	bl	80095f0 <RCCEx_PLL2_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a60:	e00f      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a66:	3328      	adds	r3, #40	@ 0x28
 8007a68:	2101      	movs	r1, #1
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 fe72 	bl	8009754 <RCCEx_PLL3_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a76:	e004      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a7e:	e000      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a8a:	4bbf      	ldr	r3, [pc, #764]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a98:	4abb      	ldr	r2, [pc, #748]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a9e:	e003      	b.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f002 0302 	and.w	r3, r2, #2
 8007ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007abe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	d041      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d824      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b25 	.word	0x08007b25
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007b07 	.word	0x08007b07
 8007ae4:	08007b25 	.word	0x08007b25
 8007ae8:	08007b25 	.word	0x08007b25
 8007aec:	08007b25 	.word	0x08007b25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af4:	3308      	adds	r3, #8
 8007af6:	2101      	movs	r1, #1
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 fd79 	bl	80095f0 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b04:	e00f      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0a:	3328      	adds	r3, #40	@ 0x28
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 fe20 	bl	8009754 <RCCEx_PLL3_Config>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b1a:	e004      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b22:	e000      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b2e:	4b96      	ldr	r3, [pc, #600]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b32:	f023 0107 	bic.w	r1, r3, #7
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b3c:	4a92      	ldr	r2, [pc, #584]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f002 0304 	and.w	r3, r2, #4
 8007b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b62:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b66:	460b      	mov	r3, r1
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	d044      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d825      	bhi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007b78:	a201      	add	r2, pc, #4	@ (adr r2, 8007b80 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007bcd 	.word	0x08007bcd
 8007b84:	08007b99 	.word	0x08007b99
 8007b88:	08007baf 	.word	0x08007baf
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
 8007b94:	08007bcd 	.word	0x08007bcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f001 fd25 	bl	80095f0 <RCCEx_PLL2_Config>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bac:	e00f      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb2:	3328      	adds	r3, #40	@ 0x28
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 fdcc 	bl	8009754 <RCCEx_PLL3_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bc2:	e004      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bca:	e000      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10b      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bda:	f023 0107 	bic.w	r1, r3, #7
 8007bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be6:	4a68      	ldr	r2, [pc, #416]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007be8:	430b      	orrs	r3, r1
 8007bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bec:	e003      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f002 0320 	and.w	r3, r2, #32
 8007c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c06:	2300      	movs	r3, #0
 8007c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d055      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c22:	d033      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c28:	d82c      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c2e:	d02f      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c34:	d826      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c3a:	d02b      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007c3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c40:	d820      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c46:	d012      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c4c:	d81a      	bhi.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d022      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c56:	d115      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fcc5 	bl	80095f0 <RCCEx_PLL2_Config>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c6c:	e015      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c72:	3328      	adds	r3, #40	@ 0x28
 8007c74:	2102      	movs	r1, #2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 fd6c 	bl	8009754 <RCCEx_PLL3_Config>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c82:	e00a      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c8a:	e006      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c8c:	bf00      	nop
 8007c8e:	e004      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c90:	bf00      	nop
 8007c92:	e002      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c94:	bf00      	nop
 8007c96:	e000      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10b      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ca2:	4b39      	ldr	r3, [pc, #228]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cb2:	4a35      	ldr	r2, [pc, #212]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cb8:	e003      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007cce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cd8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d058      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cee:	d033      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007cf0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cf4:	d82c      	bhi.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cfa:	d02f      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d00:	d826      	bhi.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d06:	d02b      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007d08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d0c:	d820      	bhi.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d12:	d012      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d18:	d81a      	bhi.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d022      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d22:	d115      	bne.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d28:	3308      	adds	r3, #8
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fc5f 	bl	80095f0 <RCCEx_PLL2_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d38:	e015      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3e:	3328      	adds	r3, #40	@ 0x28
 8007d40:	2102      	movs	r1, #2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 fd06 	bl	8009754 <RCCEx_PLL3_Config>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d4e:	e00a      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d56:	e006      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d58:	bf00      	nop
 8007d5a:	e004      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d5c:	bf00      	nop
 8007d5e:	e002      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d60:	bf00      	nop
 8007d62:	e000      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10e      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d6e:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d7e:	4a02      	ldr	r2, [pc, #8]	@ (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007d80:	430b      	orrs	r3, r1
 8007d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d84:	e006      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007d86:	bf00      	nop
 8007d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007da4:	2300      	movs	r3, #0
 8007da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007daa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007dae:	460b      	mov	r3, r1
 8007db0:	4313      	orrs	r3, r2
 8007db2:	d055      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dbc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007dc0:	d033      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007dc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007dc6:	d82c      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dcc:	d02f      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dd2:	d826      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007dd4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007dd8:	d02b      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007dda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007dde:	d820      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007de0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007de4:	d012      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007de6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dea:	d81a      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d022      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007df4:	d115      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 fbf6 	bl	80095f0 <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e0a:	e015      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e10:	3328      	adds	r3, #40	@ 0x28
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 fc9d 	bl	8009754 <RCCEx_PLL3_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e20:	e00a      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e28:	e006      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007e2a:	bf00      	nop
 8007e2c:	e004      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007e2e:	bf00      	nop
 8007e30:	e002      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007e32:	bf00      	nop
 8007e34:	e000      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e40:	4ba0      	ldr	r3, [pc, #640]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e50:	4a9c      	ldr	r2, [pc, #624]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e56:	e003      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f002 0308 	and.w	r3, r2, #8
 8007e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e76:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	d01e      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e8c:	d10c      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e92:	3328      	adds	r3, #40	@ 0x28
 8007e94:	2102      	movs	r1, #2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 fc5c 	bl	8009754 <RCCEx_PLL3_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007ea8:	4b86      	ldr	r3, [pc, #536]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eb8:	4a82      	ldr	r2, [pc, #520]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f002 0310 	and.w	r3, r2, #16
 8007eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ed4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4313      	orrs	r3, r2
 8007edc:	d01e      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eea:	d10c      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef0:	3328      	adds	r3, #40	@ 0x28
 8007ef2:	2102      	movs	r1, #2
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 fc2d 	bl	8009754 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f06:	4b6f      	ldr	r3, [pc, #444]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f16:	4a6b      	ldr	r2, [pc, #428]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f2e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007f32:	460b      	mov	r3, r1
 8007f34:	4313      	orrs	r3, r2
 8007f36:	d03e      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f44:	d022      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f4a:	d81b      	bhi.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f54:	d00b      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007f56:	e015      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fb45 	bl	80095f0 <RCCEx_PLL2_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f6c:	e00f      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f72:	3328      	adds	r3, #40	@ 0x28
 8007f74:	2102      	movs	r1, #2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 fbec 	bl	8009754 <RCCEx_PLL3_Config>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f82:	e004      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f8a:	e000      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10b      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f96:	4b4b      	ldr	r3, [pc, #300]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fa6:	4a47      	ldr	r2, [pc, #284]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fac:	e003      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007fc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	d03b      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fde:	d01f      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007fe0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fe4:	d818      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fea:	d003      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ff0:	d007      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007ff2:	e011      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff4:	4b33      	ldr	r3, [pc, #204]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4a32      	ldr	r2, [pc, #200]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008000:	e00f      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008006:	3328      	adds	r3, #40	@ 0x28
 8008008:	2101      	movs	r1, #1
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fba2 	bl	8009754 <RCCEx_PLL3_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008016:	e004      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800801e:	e000      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10b      	bne.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800802a:	4b26      	ldr	r3, [pc, #152]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800803a:	4a22      	ldr	r2, [pc, #136]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800803c:	430b      	orrs	r3, r1
 800803e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008040:	e003      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008056:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008058:	2300      	movs	r3, #0
 800805a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800805c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d034      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008074:	d007      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008076:	e011      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008078:	4b12      	ldr	r3, [pc, #72]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	4a11      	ldr	r2, [pc, #68]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800807e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008084:	e00e      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	3308      	adds	r3, #8
 800808c:	2102      	movs	r1, #2
 800808e:	4618      	mov	r0, r3
 8008090:	f001 faae 	bl	80095f0 <RCCEx_PLL2_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800809a:	e003      	b.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10d      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080ac:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ba:	4a02      	ldr	r2, [pc, #8]	@ (80080c4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80080bc:	430b      	orrs	r3, r1
 80080be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080c0:	e006      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80080c2:	bf00      	nop
 80080c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80080dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80080de:	2300      	movs	r3, #0
 80080e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80080e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80080e6:	460b      	mov	r3, r1
 80080e8:	4313      	orrs	r3, r2
 80080ea:	d00c      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	3328      	adds	r3, #40	@ 0x28
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fb2d 	bl	8009754 <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008112:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008114:	2300      	movs	r3, #0
 8008116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008118:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800811c:	460b      	mov	r3, r1
 800811e:	4313      	orrs	r3, r2
 8008120:	d036      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800812c:	d018      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800812e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008132:	d811      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008138:	d014      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800813a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800813e:	d80b      	bhi.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d011      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008148:	d106      	bne.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800814a:	4bb7      	ldr	r3, [pc, #732]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	4ab6      	ldr	r2, [pc, #728]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008156:	e008      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800815e:	e004      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008160:	bf00      	nop
 8008162:	e002      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008164:	bf00      	nop
 8008166:	e000      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800816a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10a      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008172:	4bad      	ldr	r3, [pc, #692]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008176:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800817a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800817e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008180:	4aa9      	ldr	r2, [pc, #676]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008182:	430b      	orrs	r3, r1
 8008184:	6553      	str	r3, [r2, #84]	@ 0x54
 8008186:	e003      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800818c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800819c:	653b      	str	r3, [r7, #80]	@ 0x50
 800819e:	2300      	movs	r3, #0
 80081a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80081a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80081a6:	460b      	mov	r3, r1
 80081a8:	4313      	orrs	r3, r2
 80081aa:	d009      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081ac:	4b9e      	ldr	r3, [pc, #632]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ba:	4a9b      	ldr	r2, [pc, #620]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081bc:	430b      	orrs	r3, r1
 80081be:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80081c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80081cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ce:	2300      	movs	r3, #0
 80081d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80081d6:	460b      	mov	r3, r1
 80081d8:	4313      	orrs	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081dc:	4b92      	ldr	r3, [pc, #584]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081ea:	4a8f      	ldr	r2, [pc, #572]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80081ec:	430b      	orrs	r3, r1
 80081ee:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80081fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80081fe:	2300      	movs	r3, #0
 8008200:	647b      	str	r3, [r7, #68]	@ 0x44
 8008202:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008206:	460b      	mov	r3, r1
 8008208:	4313      	orrs	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800820c:	4b86      	ldr	r3, [pc, #536]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	4a85      	ldr	r2, [pc, #532]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008216:	6113      	str	r3, [r2, #16]
 8008218:	4b83      	ldr	r3, [pc, #524]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800821a:	6919      	ldr	r1, [r3, #16]
 800821c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008220:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008224:	4a80      	ldr	r2, [pc, #512]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008226:	430b      	orrs	r3, r1
 8008228:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800822a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008238:	2300      	movs	r3, #0
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800823c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008240:	460b      	mov	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008246:	4b78      	ldr	r3, [pc, #480]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800824e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008254:	4a74      	ldr	r2, [pc, #464]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008256:	430b      	orrs	r3, r1
 8008258:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008266:	633b      	str	r3, [r7, #48]	@ 0x30
 8008268:	2300      	movs	r3, #0
 800826a:	637b      	str	r3, [r7, #52]	@ 0x34
 800826c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008270:	460b      	mov	r3, r1
 8008272:	4313      	orrs	r3, r2
 8008274:	d00a      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008276:	4b6c      	ldr	r3, [pc, #432]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800827e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008286:	4a68      	ldr	r2, [pc, #416]	@ (8008428 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008288:	430b      	orrs	r3, r1
 800828a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	2100      	movs	r1, #0
 8008296:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800829e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80082a2:	460b      	mov	r3, r1
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d011      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ac:	3308      	adds	r3, #8
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 f99d 	bl	80095f0 <RCCEx_PLL2_Config>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	2100      	movs	r1, #0
 80082d6:	6239      	str	r1, [r7, #32]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80082de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80082e2:	460b      	mov	r3, r1
 80082e4:	4313      	orrs	r3, r2
 80082e6:	d011      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ec:	3308      	adds	r3, #8
 80082ee:	2101      	movs	r1, #1
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f97d 	bl	80095f0 <RCCEx_PLL2_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80082fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008308:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	2100      	movs	r1, #0
 8008316:	61b9      	str	r1, [r7, #24]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008322:	460b      	mov	r3, r1
 8008324:	4313      	orrs	r3, r2
 8008326:	d011      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832c:	3308      	adds	r3, #8
 800832e:	2102      	movs	r1, #2
 8008330:	4618      	mov	r0, r3
 8008332:	f001 f95d 	bl	80095f0 <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800833c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008344:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008348:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800834c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	2100      	movs	r1, #0
 8008356:	6139      	str	r1, [r7, #16]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008362:	460b      	mov	r3, r1
 8008364:	4313      	orrs	r3, r2
 8008366:	d011      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800836c:	3328      	adds	r3, #40	@ 0x28
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f001 f9ef 	bl	8009754 <RCCEx_PLL3_Config>
 8008376:	4603      	mov	r3, r0
 8008378:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800837c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800838c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	2100      	movs	r1, #0
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80083a2:	460b      	mov	r3, r1
 80083a4:	4313      	orrs	r3, r2
 80083a6:	d011      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ac:	3328      	adds	r3, #40	@ 0x28
 80083ae:	2101      	movs	r1, #1
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f9cf 	bl	8009754 <RCCEx_PLL3_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	2100      	movs	r1, #0
 80083d6:	6039      	str	r1, [r7, #0]
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d011      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ec:	3328      	adds	r3, #40	@ 0x28
 80083ee:	2102      	movs	r1, #2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f001 f9af 	bl	8009754 <RCCEx_PLL3_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80083fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800840c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	e000      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
}
 800841a:	4618      	mov	r0, r3
 800841c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008420:	46bd      	mov	sp, r7
 8008422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008426:	bf00      	nop
 8008428:	58024400 	.word	0x58024400

0800842c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b090      	sub	sp, #64	@ 0x40
 8008430:	af00      	add	r7, sp, #0
 8008432:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800843e:	430b      	orrs	r3, r1
 8008440:	f040 8094 	bne.w	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008444:	4b9b      	ldr	r3, [pc, #620]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2b04      	cmp	r3, #4
 8008452:	f200 8087 	bhi.w	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008456:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845c:	08008471 	.word	0x08008471
 8008460:	08008499 	.word	0x08008499
 8008464:	080084c1 	.word	0x080084c1
 8008468:	0800855d 	.word	0x0800855d
 800846c:	080084e9 	.word	0x080084e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008470:	4b90      	ldr	r3, [pc, #576]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800847c:	d108      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800847e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008482:	4618      	mov	r0, r3
 8008484:	f000 ff62 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800848c:	f000 bc93 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008494:	f000 bc8f 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008498:	4b86      	ldr	r3, [pc, #536]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084a4:	d108      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a6:	f107 0318 	add.w	r3, r7, #24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fca6 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b4:	f000 bc7f 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084bc:	f000 bc7b 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084c0:	4b7c      	ldr	r3, [pc, #496]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084cc:	d108      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ce:	f107 030c 	add.w	r3, r7, #12
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fde6 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084dc:	f000 bc6b 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084e0:	2300      	movs	r3, #0
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e4:	f000 bc67 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084e8:	4b72      	ldr	r3, [pc, #456]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084f2:	4b70      	ldr	r3, [pc, #448]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d10c      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80084fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008504:	4b6b      	ldr	r3, [pc, #428]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	4a6a      	ldr	r2, [pc, #424]	@ (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008510:	fa22 f303 	lsr.w	r3, r2, r3
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008516:	e01f      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008518:	4b66      	ldr	r3, [pc, #408]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008524:	d106      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800852c:	d102      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800852e:	4b63      	ldr	r3, [pc, #396]	@ (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008532:	e011      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008534:	4b5f      	ldr	r3, [pc, #380]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008540:	d106      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800854a:	4b5d      	ldr	r3, [pc, #372]	@ (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800854e:	e003      	b.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008554:	f000 bc2f 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008558:	f000 bc2d 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800855c:	4b59      	ldr	r3, [pc, #356]	@ (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800855e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008560:	f000 bc29 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008568:	f000 bc25 	b.w	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800856c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008570:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008574:	430b      	orrs	r3, r1
 8008576:	f040 80a7 	bne.w	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800857a:	4b4e      	ldr	r3, [pc, #312]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800857c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800857e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008582:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800858a:	d054      	beq.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008592:	f200 808b 	bhi.w	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800859c:	f000 8083 	beq.w	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80085a6:	f200 8081 	bhi.w	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085b0:	d02f      	beq.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085b8:	d878      	bhi.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085c6:	d012      	beq.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80085c8:	e070      	b.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085ca:	4b3a      	ldr	r3, [pc, #232]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085d6:	d107      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 feb5 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e6:	e3e6      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ec:	e3e3      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ee:	4b31      	ldr	r3, [pc, #196]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fa:	d107      	bne.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fc:	f107 0318 	add.w	r3, r7, #24
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fbfb 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860a:	e3d4      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008610:	e3d1      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008612:	4b28      	ldr	r3, [pc, #160]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800861a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800861e:	d107      	bne.n	8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fd3d 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800862e:	e3c2      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008634:	e3bf      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008636:	4b1f      	ldr	r3, [pc, #124]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800863e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008640:	4b1c      	ldr	r3, [pc, #112]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b04      	cmp	r3, #4
 800864a:	d10c      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800864c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008652:	4b18      	ldr	r3, [pc, #96]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	08db      	lsrs	r3, r3, #3
 8008658:	f003 0303 	and.w	r3, r3, #3
 800865c:	4a16      	ldr	r2, [pc, #88]	@ (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800865e:	fa22 f303 	lsr.w	r3, r2, r3
 8008662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008664:	e01e      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008666:	4b13      	ldr	r3, [pc, #76]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800866e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008672:	d106      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800867a:	d102      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800867c:	4b0f      	ldr	r3, [pc, #60]	@ (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008680:	e010      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008682:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800868a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800868e:	d106      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008696:	d102      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008698:	4b09      	ldr	r3, [pc, #36]	@ (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800869c:	e002      	b.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086a2:	e388      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086a4:	e387      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086a6:	4b07      	ldr	r3, [pc, #28]	@ (80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086aa:	e384      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b0:	e381      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
 80086b8:	03d09000 	.word	0x03d09000
 80086bc:	003d0900 	.word	0x003d0900
 80086c0:	007a1200 	.word	0x007a1200
 80086c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80086c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086cc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80086d0:	430b      	orrs	r3, r1
 80086d2:	f040 809c 	bne.w	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80086d6:	4b9e      	ldr	r3, [pc, #632]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086da:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80086de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086e6:	d054      	beq.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086ee:	f200 808b 	bhi.w	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086f8:	f000 8083 	beq.w	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008702:	f200 8081 	bhi.w	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800870c:	d02f      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008714:	d878      	bhi.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008722:	d012      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008724:	e070      	b.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008726:	4b8a      	ldr	r3, [pc, #552]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800872e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008732:	d107      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fe07 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008742:	e338      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008748:	e335      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800874a:	4b81      	ldr	r3, [pc, #516]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008756:	d107      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008758:	f107 0318 	add.w	r3, r7, #24
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fb4d 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008766:	e326      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876c:	e323      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800876e:	4b78      	ldr	r3, [pc, #480]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800877a:	d107      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fc8f 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800878a:	e314      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008790:	e311      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008792:	4b6f      	ldr	r3, [pc, #444]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008796:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800879a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800879c:	4b6c      	ldr	r3, [pc, #432]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d10c      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80087a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d109      	bne.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087ae:	4b68      	ldr	r3, [pc, #416]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	4a66      	ldr	r2, [pc, #408]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80087ba:	fa22 f303 	lsr.w	r3, r2, r3
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087c0:	e01e      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087c2:	4b63      	ldr	r3, [pc, #396]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ce:	d106      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80087d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087d6:	d102      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087dc:	e010      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087de:	4b5c      	ldr	r3, [pc, #368]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ea:	d106      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80087ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f2:	d102      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087f4:	4b59      	ldr	r3, [pc, #356]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087fe:	e2da      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008800:	e2d9      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008802:	4b57      	ldr	r3, [pc, #348]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e2d6      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	e2d3      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800880e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008812:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008816:	430b      	orrs	r3, r1
 8008818:	f040 80a7 	bne.w	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800881c:	4b4c      	ldr	r3, [pc, #304]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800881e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008820:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008824:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800882c:	d055      	beq.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008834:	f200 8096 	bhi.w	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800883e:	f000 8084 	beq.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008848:	f200 808c 	bhi.w	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800884c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008852:	d030      	beq.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800885a:	f200 8083 	bhi.w	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886a:	d012      	beq.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800886c:	e07a      	b.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800886e:	4b38      	ldr	r3, [pc, #224]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800887a:	d107      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800887c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fd63 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800888a:	e294      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008890:	e291      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008892:	4b2f      	ldr	r3, [pc, #188]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800889a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800889e:	d107      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088a0:	f107 0318 	add.w	r3, r7, #24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 faa9 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ae:	e282      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b4:	e27f      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088b6:	4b26      	ldr	r3, [pc, #152]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c2:	d107      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088c4:	f107 030c 	add.w	r3, r7, #12
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fbeb 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d2:	e270      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d8:	e26d      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088da:	4b1d      	ldr	r3, [pc, #116]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d10c      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80088f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d109      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088f6:	4b16      	ldr	r3, [pc, #88]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	08db      	lsrs	r3, r3, #3
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	4a14      	ldr	r2, [pc, #80]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008902:	fa22 f303 	lsr.w	r3, r2, r3
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008908:	e01e      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800890a:	4b11      	ldr	r3, [pc, #68]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008916:	d106      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800891e:	d102      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008920:	4b0d      	ldr	r3, [pc, #52]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008924:	e010      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008926:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800892e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008932:	d106      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800893a:	d102      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800893c:	4b07      	ldr	r3, [pc, #28]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800893e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008940:	e002      	b.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008946:	e236      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008948:	e235      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800894a:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800894c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800894e:	e232      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008950:	58024400 	.word	0x58024400
 8008954:	03d09000 	.word	0x03d09000
 8008958:	003d0900 	.word	0x003d0900
 800895c:	007a1200 	.word	0x007a1200
 8008960:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e225      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800896a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008972:	430b      	orrs	r3, r1
 8008974:	f040 8085 	bne.w	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008978:	4b9c      	ldr	r3, [pc, #624]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800897a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800897c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008980:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008988:	d06b      	beq.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800898a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008990:	d874      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008998:	d056      	beq.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800899a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089a0:	d86c      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80089a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089a8:	d03b      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80089b0:	d864      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089b8:	d021      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c0:	d85c      	bhi.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80089c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80089d0:	e054      	b.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80089d2:	f7fe fb75 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 80089d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089d8:	e1ed      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089da:	4b84      	ldr	r3, [pc, #528]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e6:	d107      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e8:	f107 0318 	add.w	r3, r7, #24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fa05 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089f6:	e1de      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089fc:	e1db      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089fe:	4b7b      	ldr	r3, [pc, #492]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0c:	f107 030c 	add.w	r3, r7, #12
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fb47 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a1a:	e1cc      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a20:	e1c9      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a22:	4b72      	ldr	r3, [pc, #456]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d109      	bne.n	8008a42 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	08db      	lsrs	r3, r3, #3
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	4a6d      	ldr	r2, [pc, #436]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a40:	e1b9      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a46:	e1b6      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a48:	4b68      	ldr	r3, [pc, #416]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a54:	d102      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008a56:	4b67      	ldr	r3, [pc, #412]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5a:	e1ac      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a60:	e1a9      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a62:	4b62      	ldr	r3, [pc, #392]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a6e:	d102      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008a70:	4b61      	ldr	r3, [pc, #388]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a74:	e19f      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7a:	e19c      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a80:	e199      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a86:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	d173      	bne.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008a8e:	4b57      	ldr	r3, [pc, #348]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9e:	d02f      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa6:	d863      	bhi.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab4:	d012      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008ab6:	e05b      	b.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ac4:	d107      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ac6:	f107 0318 	add.w	r3, r7, #24
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f996 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad4:	e16f      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	e16c      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008adc:	4b43      	ldr	r3, [pc, #268]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ae4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ae8:	d107      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aea:	f107 030c 	add.w	r3, r7, #12
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fad8 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008af8:	e15d      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008afe:	e15a      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b00:	4b3a      	ldr	r3, [pc, #232]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b0a:	4b38      	ldr	r3, [pc, #224]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d10c      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b1c:	4b33      	ldr	r3, [pc, #204]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	08db      	lsrs	r3, r3, #3
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	4a32      	ldr	r2, [pc, #200]	@ (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b2e:	e01e      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b30:	4b2e      	ldr	r3, [pc, #184]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b3c:	d106      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b44:	d102      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b46:	4b2b      	ldr	r3, [pc, #172]	@ (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b4a:	e010      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b4c:	4b27      	ldr	r3, [pc, #156]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b58:	d106      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b60:	d102      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b62:	4b25      	ldr	r3, [pc, #148]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b66:	e002      	b.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b6c:	e123      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b6e:	e122      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b74:	e11f      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b7a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	d13c      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b82:	4b1a      	ldr	r3, [pc, #104]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b8a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b98:	d012      	beq.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008b9a:	e023      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b9c:	4b13      	ldr	r3, [pc, #76]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ba8:	d107      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fbcc 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb8:	e0fd      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bbe:	e0fa      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bcc:	d107      	bne.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bce:	f107 0318 	add.w	r3, r7, #24
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f912 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bdc:	e0eb      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be2:	e0e8      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be8:	e0e5      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	03d09000 	.word	0x03d09000
 8008bf4:	003d0900 	.word	0x003d0900
 8008bf8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c00:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008c04:	430b      	orrs	r3, r1
 8008c06:	f040 8085 	bne.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008c12:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c1a:	d06b      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c22:	d874      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2a:	d056      	beq.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c32:	d86c      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c3a:	d03b      	beq.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c42:	d864      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c4a:	d021      	beq.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c52:	d85c      	bhi.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c60:	d004      	beq.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008c62:	e054      	b.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c64:	f000 f8b4 	bl	8008dd0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c68:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c6a:	e0a4      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c6c:	4b54      	ldr	r3, [pc, #336]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c78:	d107      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c7a:	f107 0318 	add.w	r3, r7, #24
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 f8bc 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c88:	e095      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c8e:	e092      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c90:	4b4b      	ldr	r3, [pc, #300]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c9c:	d107      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f9fe 	bl	80090a4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cac:	e083      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb2:	e080      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cb4:	4b42      	ldr	r3, [pc, #264]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a3e      	ldr	r2, [pc, #248]	@ (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd2:	e070      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cd8:	e06d      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008cda:	4b39      	ldr	r3, [pc, #228]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce6:	d102      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008ce8:	4b37      	ldr	r3, [pc, #220]	@ (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cec:	e063      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf2:	e060      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cf4:	4b32      	ldr	r3, [pc, #200]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d00:	d102      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008d02:	4b32      	ldr	r3, [pc, #200]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d06:	e056      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e053      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d12:	e050      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d18:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	d148      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008d20:	4b27      	ldr	r3, [pc, #156]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d30:	d02a      	beq.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d38:	d838      	bhi.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d004      	beq.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d46:	d00d      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008d48:	e030      	b.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d56:	d102      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008d58:	4b1c      	ldr	r3, [pc, #112]	@ (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d5c:	e02b      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d62:	e028      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d64:	4b16      	ldr	r3, [pc, #88]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d70:	d107      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fae8 	bl	800934c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d80:	e019      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d86:	e016      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d88:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d94:	d107      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d96:	f107 0318 	add.w	r3, r7, #24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f82e 	bl	8008dfc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da4:	e007      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008daa:	e004      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008db0:	e001      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3740      	adds	r7, #64	@ 0x40
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	03d09000 	.word	0x03d09000
 8008dc8:	003d0900 	.word	0x003d0900
 8008dcc:	007a1200 	.word	0x007a1200

08008dd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008dd4:	f7fe f944 	bl	8007060 <HAL_RCC_GetHCLKFreq>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b06      	ldr	r3, [pc, #24]	@ (8008df4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	4904      	ldr	r1, [pc, #16]	@ (8008df8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008de6:	5ccb      	ldrb	r3, [r1, r3]
 8008de8:	f003 031f 	and.w	r3, r3, #31
 8008dec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	58024400 	.word	0x58024400
 8008df8:	0800c550 	.word	0x0800c550

08008dfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b089      	sub	sp, #36	@ 0x24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e04:	4ba1      	ldr	r3, [pc, #644]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	0b1b      	lsrs	r3, r3, #12
 8008e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1e:	091b      	lsrs	r3, r3, #4
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008e26:	4b99      	ldr	r3, [pc, #612]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e2a:	08db      	lsrs	r3, r3, #3
 8008e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8111 	beq.w	800906c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f000 8083 	beq.w	8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	f200 80a1 	bhi.w	8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d056      	beq.n	8008f14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e66:	e099      	b.n	8008f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e68:	4b88      	ldr	r3, [pc, #544]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d02d      	beq.n	8008ed0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e74:	4b85      	ldr	r3, [pc, #532]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	08db      	lsrs	r3, r3, #3
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	4a84      	ldr	r2, [pc, #528]	@ (8009090 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e80:	fa22 f303 	lsr.w	r3, r2, r3
 8008e84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	ee07 3a90 	vmov	s15, r3
 8008e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea6:	ee07 3a90 	vmov	s15, r3
 8008eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ece:	e087      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	ee07 3a90 	vmov	s15, r3
 8008ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009098 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f12:	e065      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f26:	4b59      	ldr	r3, [pc, #356]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f56:	e043      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	ee07 3a90 	vmov	s15, r3
 8008f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6a:	4b48      	ldr	r3, [pc, #288]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f72:	ee07 3a90 	vmov	s15, r3
 8008f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f9a:	e021      	b.n	8008fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800909c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fae:	4b37      	ldr	r3, [pc, #220]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009094 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe4:	0a5b      	lsrs	r3, r3, #9
 8008fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009006:	ee17 2a90 	vmov	r2, s15
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800900e:	4b1f      	ldr	r3, [pc, #124]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009012:	0c1b      	lsrs	r3, r3, #16
 8009014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009028:	edd7 6a07 	vldr	s13, [r7, #28]
 800902c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009034:	ee17 2a90 	vmov	r2, s15
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800903c:	4b13      	ldr	r3, [pc, #76]	@ (800908c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009040:	0e1b      	lsrs	r3, r3, #24
 8009042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009056:	edd7 6a07 	vldr	s13, [r7, #28]
 800905a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800905e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009062:	ee17 2a90 	vmov	r2, s15
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800906a:	e008      	b.n	800907e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	609a      	str	r2, [r3, #8]
}
 800907e:	bf00      	nop
 8009080:	3724      	adds	r7, #36	@ 0x24
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	58024400 	.word	0x58024400
 8009090:	03d09000 	.word	0x03d09000
 8009094:	46000000 	.word	0x46000000
 8009098:	4c742400 	.word	0x4c742400
 800909c:	4a742400 	.word	0x4a742400
 80090a0:	4af42400 	.word	0x4af42400

080090a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b089      	sub	sp, #36	@ 0x24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090ac:	4ba1      	ldr	r3, [pc, #644]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80090b6:	4b9f      	ldr	r3, [pc, #636]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ba:	0d1b      	lsrs	r3, r3, #20
 80090bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090c2:	4b9c      	ldr	r3, [pc, #624]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	0a1b      	lsrs	r3, r3, #8
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80090ce:	4b99      	ldr	r3, [pc, #612]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d2:	08db      	lsrs	r3, r3, #3
 80090d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	fb02 f303 	mul.w	r3, r2, r3
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 8111 	beq.w	8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	f000 8083 	beq.w	8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	f200 80a1 	bhi.w	8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b01      	cmp	r3, #1
 800910c:	d056      	beq.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800910e:	e099      	b.n	8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009110:	4b88      	ldr	r3, [pc, #544]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d02d      	beq.n	8009178 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800911c:	4b85      	ldr	r3, [pc, #532]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	4a84      	ldr	r2, [pc, #528]	@ (8009338 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	ee07 3a90 	vmov	s15, r3
 8009134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b7b      	ldr	r3, [pc, #492]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a03 	vldr	s12, [r7, #12]
 800915a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009176:	e087      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009340 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b6a      	ldr	r3, [pc, #424]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800918c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a03 	vldr	s12, [r7, #12]
 800919e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ba:	e065      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b59      	ldr	r3, [pc, #356]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091fe:	e043      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009348 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800920e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009212:	4b48      	ldr	r3, [pc, #288]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009222:	ed97 6a03 	vldr	s12, [r7, #12]
 8009226:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800922a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800922e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800923a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009242:	e021      	b.n	8009288 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009344 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009256:	4b37      	ldr	r3, [pc, #220]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800925a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009266:	ed97 6a03 	vldr	s12, [r7, #12]
 800926a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800933c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800926e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800927a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009286:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009288:	4b2a      	ldr	r3, [pc, #168]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928c:	0a5b      	lsrs	r3, r3, #9
 800928e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800929e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ae:	ee17 2a90 	vmov	r2, s15
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80092b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ba:	0c1b      	lsrs	r3, r3, #16
 80092bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092c0:	ee07 3a90 	vmov	s15, r3
 80092c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092dc:	ee17 2a90 	vmov	r2, s15
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80092e4:	4b13      	ldr	r3, [pc, #76]	@ (8009334 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e8:	0e1b      	lsrs	r3, r3, #24
 80092ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800930a:	ee17 2a90 	vmov	r2, s15
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009312:	e008      	b.n	8009326 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	609a      	str	r2, [r3, #8]
}
 8009326:	bf00      	nop
 8009328:	3724      	adds	r7, #36	@ 0x24
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	58024400 	.word	0x58024400
 8009338:	03d09000 	.word	0x03d09000
 800933c:	46000000 	.word	0x46000000
 8009340:	4c742400 	.word	0x4c742400
 8009344:	4a742400 	.word	0x4a742400
 8009348:	4af42400 	.word	0x4af42400

0800934c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800934c:	b480      	push	{r7}
 800934e:	b089      	sub	sp, #36	@ 0x24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009354:	4ba0      	ldr	r3, [pc, #640]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800935e:	4b9e      	ldr	r3, [pc, #632]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009362:	091b      	lsrs	r3, r3, #4
 8009364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009368:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800936a:	4b9b      	ldr	r3, [pc, #620]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009374:	4b98      	ldr	r3, [pc, #608]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009378:	08db      	lsrs	r3, r3, #3
 800937a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8111 	beq.w	80095ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	2b02      	cmp	r3, #2
 800939c:	f000 8083 	beq.w	80094a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	f200 80a1 	bhi.w	80094ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d056      	beq.n	8009462 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80093b4:	e099      	b.n	80094ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b6:	4b88      	ldr	r3, [pc, #544]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d02d      	beq.n	800941e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093c2:	4b85      	ldr	r3, [pc, #532]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	08db      	lsrs	r3, r3, #3
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	4a83      	ldr	r2, [pc, #524]	@ (80095dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80093ce:	fa22 f303 	lsr.w	r3, r2, r3
 80093d2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	ee07 3a90 	vmov	s15, r3
 80093e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ec:	4b7a      	ldr	r3, [pc, #488]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f4:	ee07 3a90 	vmov	s15, r3
 80093f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009400:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009418:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800941c:	e087      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	ee07 3a90 	vmov	s15, r3
 8009424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009428:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800942c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009430:	4b69      	ldr	r3, [pc, #420]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	ee07 3a90 	vmov	s15, r3
 800943c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009440:	ed97 6a03 	vldr	s12, [r7, #12]
 8009444:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009450:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009460:	e065      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80095e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009474:	4b58      	ldr	r3, [pc, #352]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009484:	ed97 6a03 	vldr	s12, [r7, #12]
 8009488:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800948c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094a4:	e043      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	ee07 3a90 	vmov	s15, r3
 80094ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80095ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80094b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b8:	4b47      	ldr	r3, [pc, #284]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c0:	ee07 3a90 	vmov	s15, r3
 80094c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80094cc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094e8:	e021      	b.n	800952e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	ee07 3a90 	vmov	s15, r3
 80094f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80095e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fc:	4b36      	ldr	r3, [pc, #216]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009504:	ee07 3a90 	vmov	s15, r3
 8009508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009510:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80095e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009528:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800952c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800952e:	4b2a      	ldr	r3, [pc, #168]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009532:	0a5b      	lsrs	r3, r3, #9
 8009534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009540:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009548:	edd7 6a07 	vldr	s13, [r7, #28]
 800954c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009554:	ee17 2a90 	vmov	r2, s15
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800955c:	4b1e      	ldr	r3, [pc, #120]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800955e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009560:	0c1b      	lsrs	r3, r3, #16
 8009562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009576:	edd7 6a07 	vldr	s13, [r7, #28]
 800957a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800957e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009582:	ee17 2a90 	vmov	r2, s15
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800958a:	4b13      	ldr	r3, [pc, #76]	@ (80095d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800958e:	0e1b      	lsrs	r3, r3, #24
 8009590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800959c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095b0:	ee17 2a90 	vmov	r2, s15
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80095b8:	e008      	b.n	80095cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
}
 80095cc:	bf00      	nop
 80095ce:	3724      	adds	r7, #36	@ 0x24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	58024400 	.word	0x58024400
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	46000000 	.word	0x46000000
 80095e4:	4c742400 	.word	0x4c742400
 80095e8:	4a742400 	.word	0x4a742400
 80095ec:	4af42400 	.word	0x4af42400

080095f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095fe:	4b53      	ldr	r3, [pc, #332]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009602:	f003 0303 	and.w	r3, r3, #3
 8009606:	2b03      	cmp	r3, #3
 8009608:	d101      	bne.n	800960e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e099      	b.n	8009742 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800960e:	4b4f      	ldr	r3, [pc, #316]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a4e      	ldr	r2, [pc, #312]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009614:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800961a:	f7f8 f93b 	bl	8001894 <HAL_GetTick>
 800961e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009620:	e008      	b.n	8009634 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009622:	f7f8 f937 	bl	8001894 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e086      	b.n	8009742 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009634:	4b45      	ldr	r3, [pc, #276]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f0      	bne.n	8009622 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009640:	4b42      	ldr	r3, [pc, #264]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009644:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	493f      	ldr	r1, [pc, #252]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009650:	4313      	orrs	r3, r2
 8009652:	628b      	str	r3, [r1, #40]	@ 0x28
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	3b01      	subs	r3, #1
 800965a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	3b01      	subs	r3, #1
 8009664:	025b      	lsls	r3, r3, #9
 8009666:	b29b      	uxth	r3, r3
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	3b01      	subs	r3, #1
 8009670:	041b      	lsls	r3, r3, #16
 8009672:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009676:	431a      	orrs	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	3b01      	subs	r3, #1
 800967e:	061b      	lsls	r3, r3, #24
 8009680:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009684:	4931      	ldr	r1, [pc, #196]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009686:	4313      	orrs	r3, r2
 8009688:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800968a:	4b30      	ldr	r3, [pc, #192]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 800968c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	492d      	ldr	r1, [pc, #180]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009698:	4313      	orrs	r3, r2
 800969a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800969c:	4b2b      	ldr	r3, [pc, #172]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	f023 0220 	bic.w	r2, r3, #32
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	4928      	ldr	r1, [pc, #160]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096ae:	4b27      	ldr	r3, [pc, #156]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b2:	4a26      	ldr	r2, [pc, #152]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096b4:	f023 0310 	bic.w	r3, r3, #16
 80096b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096ba:	4b24      	ldr	r3, [pc, #144]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096be:	4b24      	ldr	r3, [pc, #144]	@ (8009750 <RCCEx_PLL2_Config+0x160>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	69d2      	ldr	r2, [r2, #28]
 80096c6:	00d2      	lsls	r2, r2, #3
 80096c8:	4920      	ldr	r1, [pc, #128]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096ca:	4313      	orrs	r3, r2
 80096cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096ce:	4b1f      	ldr	r3, [pc, #124]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	4a1e      	ldr	r2, [pc, #120]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096d4:	f043 0310 	orr.w	r3, r3, #16
 80096d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096e0:	4b1a      	ldr	r3, [pc, #104]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	4a19      	ldr	r2, [pc, #100]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096ec:	e00f      	b.n	800970e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d106      	bne.n	8009702 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096f4:	4b15      	ldr	r3, [pc, #84]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f8:	4a14      	ldr	r2, [pc, #80]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 80096fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009700:	e005      	b.n	800970e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009702:	4b12      	ldr	r3, [pc, #72]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009706:	4a11      	ldr	r2, [pc, #68]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009708:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800970c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800970e:	4b0f      	ldr	r3, [pc, #60]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a0e      	ldr	r2, [pc, #56]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009714:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800971a:	f7f8 f8bb 	bl	8001894 <HAL_GetTick>
 800971e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009720:	e008      	b.n	8009734 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009722:	f7f8 f8b7 	bl	8001894 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	2b02      	cmp	r3, #2
 800972e:	d901      	bls.n	8009734 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e006      	b.n	8009742 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009734:	4b05      	ldr	r3, [pc, #20]	@ (800974c <RCCEx_PLL2_Config+0x15c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0f0      	beq.n	8009722 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	58024400 	.word	0x58024400
 8009750:	ffff0007 	.word	0xffff0007

08009754 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009762:	4b53      	ldr	r3, [pc, #332]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009766:	f003 0303 	and.w	r3, r3, #3
 800976a:	2b03      	cmp	r3, #3
 800976c:	d101      	bne.n	8009772 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e099      	b.n	80098a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009772:	4b4f      	ldr	r3, [pc, #316]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a4e      	ldr	r2, [pc, #312]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009778:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800977c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800977e:	f7f8 f889 	bl	8001894 <HAL_GetTick>
 8009782:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009784:	e008      	b.n	8009798 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009786:	f7f8 f885 	bl	8001894 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e086      	b.n	80098a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009798:	4b45      	ldr	r3, [pc, #276]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1f0      	bne.n	8009786 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80097a4:	4b42      	ldr	r3, [pc, #264]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	051b      	lsls	r3, r3, #20
 80097b2:	493f      	ldr	r1, [pc, #252]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	3b01      	subs	r3, #1
 80097be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	025b      	lsls	r3, r3, #9
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	431a      	orrs	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	041b      	lsls	r3, r3, #16
 80097d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097da:	431a      	orrs	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	061b      	lsls	r3, r3, #24
 80097e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097e8:	4931      	ldr	r1, [pc, #196]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097ee:	4b30      	ldr	r3, [pc, #192]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	492d      	ldr	r1, [pc, #180]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009800:	4b2b      	ldr	r3, [pc, #172]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009804:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	4928      	ldr	r1, [pc, #160]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800980e:	4313      	orrs	r3, r2
 8009810:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009812:	4b27      	ldr	r3, [pc, #156]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	4a26      	ldr	r2, [pc, #152]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800981c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800981e:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009822:	4b24      	ldr	r3, [pc, #144]	@ (80098b4 <RCCEx_PLL3_Config+0x160>)
 8009824:	4013      	ands	r3, r2
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	69d2      	ldr	r2, [r2, #28]
 800982a:	00d2      	lsls	r2, r2, #3
 800982c:	4920      	ldr	r1, [pc, #128]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800982e:	4313      	orrs	r3, r2
 8009830:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009832:	4b1f      	ldr	r3, [pc, #124]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009836:	4a1e      	ldr	r2, [pc, #120]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800983c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009844:	4b1a      	ldr	r3, [pc, #104]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	4a19      	ldr	r2, [pc, #100]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800984a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800984e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009850:	e00f      	b.n	8009872 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d106      	bne.n	8009866 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009858:	4b15      	ldr	r3, [pc, #84]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800985a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985c:	4a14      	ldr	r2, [pc, #80]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800985e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009864:	e005      	b.n	8009872 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009866:	4b12      	ldr	r3, [pc, #72]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	4a11      	ldr	r2, [pc, #68]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800986c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009870:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009872:	4b0f      	ldr	r3, [pc, #60]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a0e      	ldr	r2, [pc, #56]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 8009878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800987c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800987e:	f7f8 f809 	bl	8001894 <HAL_GetTick>
 8009882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009884:	e008      	b.n	8009898 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009886:	f7f8 f805 	bl	8001894 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	2b02      	cmp	r3, #2
 8009892:	d901      	bls.n	8009898 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009898:	4b05      	ldr	r3, [pc, #20]	@ (80098b0 <RCCEx_PLL3_Config+0x15c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0f0      	beq.n	8009886 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	58024400 	.word	0x58024400
 80098b4:	ffff0007 	.word	0xffff0007

080098b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e049      	b.n	800995e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7f7 fd62 	bl	80013a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2202      	movs	r2, #2
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f000 fc58 	bl	800a1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b01      	cmp	r3, #1
 800997a:	d001      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e05e      	b.n	8009a3e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a2b      	ldr	r2, [pc, #172]	@ (8009a4c <HAL_TIM_Base_Start_IT+0xe4>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d02c      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099aa:	d027      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a27      	ldr	r2, [pc, #156]	@ (8009a50 <HAL_TIM_Base_Start_IT+0xe8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d022      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a26      	ldr	r2, [pc, #152]	@ (8009a54 <HAL_TIM_Base_Start_IT+0xec>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d01d      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a24      	ldr	r2, [pc, #144]	@ (8009a58 <HAL_TIM_Base_Start_IT+0xf0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d018      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a23      	ldr	r2, [pc, #140]	@ (8009a5c <HAL_TIM_Base_Start_IT+0xf4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d013      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a21      	ldr	r2, [pc, #132]	@ (8009a60 <HAL_TIM_Base_Start_IT+0xf8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d00e      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a20      	ldr	r2, [pc, #128]	@ (8009a64 <HAL_TIM_Base_Start_IT+0xfc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d009      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009a68 <HAL_TIM_Base_Start_IT+0x100>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d004      	beq.n	80099fc <HAL_TIM_Base_Start_IT+0x94>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a1d      	ldr	r2, [pc, #116]	@ (8009a6c <HAL_TIM_Base_Start_IT+0x104>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d115      	bne.n	8009a28 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	4b1b      	ldr	r3, [pc, #108]	@ (8009a70 <HAL_TIM_Base_Start_IT+0x108>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b06      	cmp	r3, #6
 8009a0c:	d015      	beq.n	8009a3a <HAL_TIM_Base_Start_IT+0xd2>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a14:	d011      	beq.n	8009a3a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0201 	orr.w	r2, r2, #1
 8009a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a26:	e008      	b.n	8009a3a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e000      	b.n	8009a3c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40000c00 	.word	0x40000c00
 8009a5c:	40010400 	.word	0x40010400
 8009a60:	40001800 	.word	0x40001800
 8009a64:	40014000 	.word	0x40014000
 8009a68:	4000e000 	.word	0x4000e000
 8009a6c:	4000e400 	.word	0x4000e400
 8009a70:	00010007 	.word	0x00010007

08009a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e049      	b.n	8009b1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f841 	bl	8009b22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	f000 fb7a 	bl	800a1ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b083      	sub	sp, #12
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d020      	beq.n	8009b9a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d01b      	beq.n	8009b9a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f06f 0202 	mvn.w	r2, #2
 8009b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 faf5 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009b86:	e005      	b.n	8009b94 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fae7 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 faf8 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d020      	beq.n	8009be6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d01b      	beq.n	8009be6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f06f 0204 	mvn.w	r2, #4
 8009bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 facf 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009bd2:	e005      	b.n	8009be0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fac1 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fad2 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f003 0308 	and.w	r3, r3, #8
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d020      	beq.n	8009c32 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d01b      	beq.n	8009c32 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f06f 0208 	mvn.w	r2, #8
 8009c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2204      	movs	r2, #4
 8009c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 faa9 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009c1e:	e005      	b.n	8009c2c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa9b 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 faac 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d020      	beq.n	8009c7e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f003 0310 	and.w	r3, r3, #16
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01b      	beq.n	8009c7e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f06f 0210 	mvn.w	r2, #16
 8009c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2208      	movs	r2, #8
 8009c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fa83 	bl	800a170 <HAL_TIM_IC_CaptureCallback>
 8009c6a:	e005      	b.n	8009c78 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fa75 	bl	800a15c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa86 	bl	800a184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00c      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f06f 0201 	mvn.w	r2, #1
 8009c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7f6 ffcd 	bl	8000c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00c      	beq.n	8009cd0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 ffc0 	bl	800ac50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00c      	beq.n	8009cf4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d007      	beq.n	8009cf4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 ffb8 	bl	800ac64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00c      	beq.n	8009d18 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d007      	beq.n	8009d18 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa40 	bl	800a198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00c      	beq.n	8009d3c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f003 0320 	and.w	r3, r3, #32
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d007      	beq.n	8009d3c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f06f 0220 	mvn.w	r2, #32
 8009d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 ff80 	bl	800ac3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d101      	bne.n	8009d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d5e:	2302      	movs	r3, #2
 8009d60:	e0ff      	b.n	8009f62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b14      	cmp	r3, #20
 8009d6e:	f200 80f0 	bhi.w	8009f52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d72:	a201      	add	r2, pc, #4	@ (adr r2, 8009d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009dcd 	.word	0x08009dcd
 8009d7c:	08009f53 	.word	0x08009f53
 8009d80:	08009f53 	.word	0x08009f53
 8009d84:	08009f53 	.word	0x08009f53
 8009d88:	08009e0d 	.word	0x08009e0d
 8009d8c:	08009f53 	.word	0x08009f53
 8009d90:	08009f53 	.word	0x08009f53
 8009d94:	08009f53 	.word	0x08009f53
 8009d98:	08009e4f 	.word	0x08009e4f
 8009d9c:	08009f53 	.word	0x08009f53
 8009da0:	08009f53 	.word	0x08009f53
 8009da4:	08009f53 	.word	0x08009f53
 8009da8:	08009e8f 	.word	0x08009e8f
 8009dac:	08009f53 	.word	0x08009f53
 8009db0:	08009f53 	.word	0x08009f53
 8009db4:	08009f53 	.word	0x08009f53
 8009db8:	08009ed1 	.word	0x08009ed1
 8009dbc:	08009f53 	.word	0x08009f53
 8009dc0:	08009f53 	.word	0x08009f53
 8009dc4:	08009f53 	.word	0x08009f53
 8009dc8:	08009f11 	.word	0x08009f11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fa96 	bl	800a304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699a      	ldr	r2, [r3, #24]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f042 0208 	orr.w	r2, r2, #8
 8009de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	699a      	ldr	r2, [r3, #24]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0204 	bic.w	r2, r2, #4
 8009df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6999      	ldr	r1, [r3, #24]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	619a      	str	r2, [r3, #24]
      break;
 8009e0a:	e0a5      	b.n	8009f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68b9      	ldr	r1, [r7, #8]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fb06 	bl	800a424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699a      	ldr	r2, [r3, #24]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	699a      	ldr	r2, [r3, #24]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6999      	ldr	r1, [r3, #24]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	021a      	lsls	r2, r3, #8
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	619a      	str	r2, [r3, #24]
      break;
 8009e4c:	e084      	b.n	8009f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68b9      	ldr	r1, [r7, #8]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fb6f 	bl	800a538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f042 0208 	orr.w	r2, r2, #8
 8009e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69da      	ldr	r2, [r3, #28]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0204 	bic.w	r2, r2, #4
 8009e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	69d9      	ldr	r1, [r3, #28]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	691a      	ldr	r2, [r3, #16]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	61da      	str	r2, [r3, #28]
      break;
 8009e8c:	e064      	b.n	8009f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68b9      	ldr	r1, [r7, #8]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fbd7 	bl	800a648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69da      	ldr	r2, [r3, #28]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	69da      	ldr	r2, [r3, #28]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	69d9      	ldr	r1, [r3, #28]
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	021a      	lsls	r2, r3, #8
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	61da      	str	r2, [r3, #28]
      break;
 8009ece:	e043      	b.n	8009f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 fc20 	bl	800a71c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f042 0208 	orr.w	r2, r2, #8
 8009eea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f022 0204 	bic.w	r2, r2, #4
 8009efa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	691a      	ldr	r2, [r3, #16]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009f0e:	e023      	b.n	8009f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	68b9      	ldr	r1, [r7, #8]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fc64 	bl	800a7e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	021a      	lsls	r2, r3, #8
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009f50:	e002      	b.n	8009f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	75fb      	strb	r3, [r7, #23]
      break;
 8009f56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop

08009f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d101      	bne.n	8009f88 <HAL_TIM_ConfigClockSource+0x1c>
 8009f84:	2302      	movs	r3, #2
 8009f86:	e0dc      	b.n	800a142 <HAL_TIM_ConfigClockSource+0x1d6>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800a14c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a64      	ldr	r2, [pc, #400]	@ (800a150 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	f000 80a9 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fc4:	4a62      	ldr	r2, [pc, #392]	@ (800a150 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	f200 80ae 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fcc:	4a61      	ldr	r2, [pc, #388]	@ (800a154 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	f000 80a1 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fd4:	4a5f      	ldr	r2, [pc, #380]	@ (800a154 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	f200 80a6 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fdc:	4a5e      	ldr	r2, [pc, #376]	@ (800a158 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	f000 8099 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe4:	4a5c      	ldr	r2, [pc, #368]	@ (800a158 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	f200 809e 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ff0:	f000 8091 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009ff8:	f200 8096 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a000:	f000 8089 	beq.w	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a008:	f200 808e 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a00c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a010:	d03e      	beq.n	800a090 <HAL_TIM_ConfigClockSource+0x124>
 800a012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a016:	f200 8087 	bhi.w	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a01e:	f000 8086 	beq.w	800a12e <HAL_TIM_ConfigClockSource+0x1c2>
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a026:	d87f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a028:	2b70      	cmp	r3, #112	@ 0x70
 800a02a:	d01a      	beq.n	800a062 <HAL_TIM_ConfigClockSource+0xf6>
 800a02c:	2b70      	cmp	r3, #112	@ 0x70
 800a02e:	d87b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a030:	2b60      	cmp	r3, #96	@ 0x60
 800a032:	d050      	beq.n	800a0d6 <HAL_TIM_ConfigClockSource+0x16a>
 800a034:	2b60      	cmp	r3, #96	@ 0x60
 800a036:	d877      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a038:	2b50      	cmp	r3, #80	@ 0x50
 800a03a:	d03c      	beq.n	800a0b6 <HAL_TIM_ConfigClockSource+0x14a>
 800a03c:	2b50      	cmp	r3, #80	@ 0x50
 800a03e:	d873      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a040:	2b40      	cmp	r3, #64	@ 0x40
 800a042:	d058      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0x18a>
 800a044:	2b40      	cmp	r3, #64	@ 0x40
 800a046:	d86f      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a048:	2b30      	cmp	r3, #48	@ 0x30
 800a04a:	d064      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a04c:	2b30      	cmp	r3, #48	@ 0x30
 800a04e:	d86b      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a050:	2b20      	cmp	r3, #32
 800a052:	d060      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a054:	2b20      	cmp	r3, #32
 800a056:	d867      	bhi.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05c      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d05a      	beq.n	800a116 <HAL_TIM_ConfigClockSource+0x1aa>
 800a060:	e062      	b.n	800a128 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a072:	f000 fc9b 	bl	800a9ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	609a      	str	r2, [r3, #8]
      break;
 800a08e:	e04f      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0a0:	f000 fc84 	bl	800a9ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0b2:	609a      	str	r2, [r3, #8]
      break;
 800a0b4:	e03c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f000 fbf4 	bl	800a8b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2150      	movs	r1, #80	@ 0x50
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fc4e 	bl	800a970 <TIM_ITRx_SetConfig>
      break;
 800a0d4:	e02c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	f000 fc13 	bl	800a90e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2160      	movs	r1, #96	@ 0x60
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 fc3e 	bl	800a970 <TIM_ITRx_SetConfig>
      break;
 800a0f4:	e01c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a102:	461a      	mov	r2, r3
 800a104:	f000 fbd4 	bl	800a8b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2140      	movs	r1, #64	@ 0x40
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fc2e 	bl	800a970 <TIM_ITRx_SetConfig>
      break;
 800a114:	e00c      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4619      	mov	r1, r3
 800a120:	4610      	mov	r0, r2
 800a122:	f000 fc25 	bl	800a970 <TIM_ITRx_SetConfig>
      break;
 800a126:	e003      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
      break;
 800a12c:	e000      	b.n	800a130 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	ffceff88 	.word	0xffceff88
 800a150:	00100040 	.word	0x00100040
 800a154:	00100030 	.word	0x00100030
 800a158:	00100020 	.word	0x00100020

0800a15c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a47      	ldr	r2, [pc, #284]	@ (800a2dc <TIM_Base_SetConfig+0x130>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ca:	d00f      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a44      	ldr	r2, [pc, #272]	@ (800a2e0 <TIM_Base_SetConfig+0x134>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d00b      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a43      	ldr	r2, [pc, #268]	@ (800a2e4 <TIM_Base_SetConfig+0x138>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d007      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a42      	ldr	r2, [pc, #264]	@ (800a2e8 <TIM_Base_SetConfig+0x13c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d003      	beq.n	800a1ec <TIM_Base_SetConfig+0x40>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a41      	ldr	r2, [pc, #260]	@ (800a2ec <TIM_Base_SetConfig+0x140>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d108      	bne.n	800a1fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a36      	ldr	r2, [pc, #216]	@ (800a2dc <TIM_Base_SetConfig+0x130>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d027      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a20c:	d023      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a33      	ldr	r2, [pc, #204]	@ (800a2e0 <TIM_Base_SetConfig+0x134>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d01f      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a32      	ldr	r2, [pc, #200]	@ (800a2e4 <TIM_Base_SetConfig+0x138>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d01b      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a31      	ldr	r2, [pc, #196]	@ (800a2e8 <TIM_Base_SetConfig+0x13c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d017      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a30      	ldr	r2, [pc, #192]	@ (800a2ec <TIM_Base_SetConfig+0x140>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d013      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a2f      	ldr	r2, [pc, #188]	@ (800a2f0 <TIM_Base_SetConfig+0x144>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00f      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a2e      	ldr	r2, [pc, #184]	@ (800a2f4 <TIM_Base_SetConfig+0x148>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00b      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a2d      	ldr	r2, [pc, #180]	@ (800a2f8 <TIM_Base_SetConfig+0x14c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d007      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a2c      	ldr	r2, [pc, #176]	@ (800a2fc <TIM_Base_SetConfig+0x150>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d003      	beq.n	800a256 <TIM_Base_SetConfig+0xaa>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4a2b      	ldr	r2, [pc, #172]	@ (800a300 <TIM_Base_SetConfig+0x154>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d108      	bne.n	800a268 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a25c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4a14      	ldr	r2, [pc, #80]	@ (800a2dc <TIM_Base_SetConfig+0x130>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00f      	beq.n	800a2ae <TIM_Base_SetConfig+0x102>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a16      	ldr	r2, [pc, #88]	@ (800a2ec <TIM_Base_SetConfig+0x140>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d00b      	beq.n	800a2ae <TIM_Base_SetConfig+0x102>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a15      	ldr	r2, [pc, #84]	@ (800a2f0 <TIM_Base_SetConfig+0x144>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d007      	beq.n	800a2ae <TIM_Base_SetConfig+0x102>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a14      	ldr	r2, [pc, #80]	@ (800a2f4 <TIM_Base_SetConfig+0x148>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d003      	beq.n	800a2ae <TIM_Base_SetConfig+0x102>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a13      	ldr	r2, [pc, #76]	@ (800a2f8 <TIM_Base_SetConfig+0x14c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d103      	bne.n	800a2b6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	691a      	ldr	r2, [r3, #16]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f043 0204 	orr.w	r2, r3, #4
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	601a      	str	r2, [r3, #0]
}
 800a2ce:	bf00      	nop
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40000400 	.word	0x40000400
 800a2e4:	40000800 	.word	0x40000800
 800a2e8:	40000c00 	.word	0x40000c00
 800a2ec:	40010400 	.word	0x40010400
 800a2f0:	40014000 	.word	0x40014000
 800a2f4:	40014400 	.word	0x40014400
 800a2f8:	40014800 	.word	0x40014800
 800a2fc:	4000e000 	.word	0x4000e000
 800a300:	4000e400 	.word	0x4000e400

0800a304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	f023 0201 	bic.w	r2, r3, #1
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4b37      	ldr	r3, [pc, #220]	@ (800a40c <TIM_OC1_SetConfig+0x108>)
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f023 0302 	bic.w	r3, r3, #2
 800a34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	4313      	orrs	r3, r2
 800a356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a2d      	ldr	r2, [pc, #180]	@ (800a410 <TIM_OC1_SetConfig+0x10c>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d00f      	beq.n	800a380 <TIM_OC1_SetConfig+0x7c>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a2c      	ldr	r2, [pc, #176]	@ (800a414 <TIM_OC1_SetConfig+0x110>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d00b      	beq.n	800a380 <TIM_OC1_SetConfig+0x7c>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a2b      	ldr	r2, [pc, #172]	@ (800a418 <TIM_OC1_SetConfig+0x114>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d007      	beq.n	800a380 <TIM_OC1_SetConfig+0x7c>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a2a      	ldr	r2, [pc, #168]	@ (800a41c <TIM_OC1_SetConfig+0x118>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d003      	beq.n	800a380 <TIM_OC1_SetConfig+0x7c>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a29      	ldr	r2, [pc, #164]	@ (800a420 <TIM_OC1_SetConfig+0x11c>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d10c      	bne.n	800a39a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	f023 0308 	bic.w	r3, r3, #8
 800a386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4313      	orrs	r3, r2
 800a390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f023 0304 	bic.w	r3, r3, #4
 800a398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a1c      	ldr	r2, [pc, #112]	@ (800a410 <TIM_OC1_SetConfig+0x10c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00f      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xbe>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a1b      	ldr	r2, [pc, #108]	@ (800a414 <TIM_OC1_SetConfig+0x110>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00b      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xbe>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a1a      	ldr	r2, [pc, #104]	@ (800a418 <TIM_OC1_SetConfig+0x114>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d007      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xbe>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a19      	ldr	r2, [pc, #100]	@ (800a41c <TIM_OC1_SetConfig+0x118>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d003      	beq.n	800a3c2 <TIM_OC1_SetConfig+0xbe>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a18      	ldr	r2, [pc, #96]	@ (800a420 <TIM_OC1_SetConfig+0x11c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d111      	bne.n	800a3e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	621a      	str	r2, [r3, #32]
}
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	fffeff8f 	.word	0xfffeff8f
 800a410:	40010000 	.word	0x40010000
 800a414:	40010400 	.word	0x40010400
 800a418:	40014000 	.word	0x40014000
 800a41c:	40014400 	.word	0x40014400
 800a420:	40014800 	.word	0x40014800

0800a424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a424:	b480      	push	{r7}
 800a426:	b087      	sub	sp, #28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	f023 0210 	bic.w	r2, r3, #16
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	4b34      	ldr	r3, [pc, #208]	@ (800a520 <TIM_OC2_SetConfig+0xfc>)
 800a450:	4013      	ands	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	4313      	orrs	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f023 0320 	bic.w	r3, r3, #32
 800a46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a29      	ldr	r2, [pc, #164]	@ (800a524 <TIM_OC2_SetConfig+0x100>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d003      	beq.n	800a48c <TIM_OC2_SetConfig+0x68>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a28      	ldr	r2, [pc, #160]	@ (800a528 <TIM_OC2_SetConfig+0x104>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d10d      	bne.n	800a4a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	011b      	lsls	r3, r3, #4
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a524 <TIM_OC2_SetConfig+0x100>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00f      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xac>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a1d      	ldr	r2, [pc, #116]	@ (800a528 <TIM_OC2_SetConfig+0x104>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00b      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xac>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a52c <TIM_OC2_SetConfig+0x108>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d007      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xac>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a530 <TIM_OC2_SetConfig+0x10c>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_OC2_SetConfig+0xac>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a1a      	ldr	r2, [pc, #104]	@ (800a534 <TIM_OC2_SetConfig+0x110>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d113      	bne.n	800a4f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	621a      	str	r2, [r3, #32]
}
 800a512:	bf00      	nop
 800a514:	371c      	adds	r7, #28
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	feff8fff 	.word	0xfeff8fff
 800a524:	40010000 	.word	0x40010000
 800a528:	40010400 	.word	0x40010400
 800a52c:	40014000 	.word	0x40014000
 800a530:	40014400 	.word	0x40014400
 800a534:	40014800 	.word	0x40014800

0800a538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4b33      	ldr	r3, [pc, #204]	@ (800a630 <TIM_OC3_SetConfig+0xf8>)
 800a564:	4013      	ands	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0303 	bic.w	r3, r3, #3
 800a56e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4313      	orrs	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	021b      	lsls	r3, r3, #8
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a28      	ldr	r2, [pc, #160]	@ (800a634 <TIM_OC3_SetConfig+0xfc>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d003      	beq.n	800a59e <TIM_OC3_SetConfig+0x66>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a27      	ldr	r2, [pc, #156]	@ (800a638 <TIM_OC3_SetConfig+0x100>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d10d      	bne.n	800a5ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a5a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a5b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a634 <TIM_OC3_SetConfig+0xfc>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00f      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xaa>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a638 <TIM_OC3_SetConfig+0x100>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d00b      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xaa>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a63c <TIM_OC3_SetConfig+0x104>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d007      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xaa>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a1a      	ldr	r2, [pc, #104]	@ (800a640 <TIM_OC3_SetConfig+0x108>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d003      	beq.n	800a5e2 <TIM_OC3_SetConfig+0xaa>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a19      	ldr	r2, [pc, #100]	@ (800a644 <TIM_OC3_SetConfig+0x10c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d113      	bne.n	800a60a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	011b      	lsls	r3, r3, #4
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4313      	orrs	r3, r2
 800a608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	621a      	str	r2, [r3, #32]
}
 800a624:	bf00      	nop
 800a626:	371c      	adds	r7, #28
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr
 800a630:	fffeff8f 	.word	0xfffeff8f
 800a634:	40010000 	.word	0x40010000
 800a638:	40010400 	.word	0x40010400
 800a63c:	40014000 	.word	0x40014000
 800a640:	40014400 	.word	0x40014400
 800a644:	40014800 	.word	0x40014800

0800a648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	4b24      	ldr	r3, [pc, #144]	@ (800a704 <TIM_OC4_SetConfig+0xbc>)
 800a674:	4013      	ands	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	021b      	lsls	r3, r3, #8
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	031b      	lsls	r3, r3, #12
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a19      	ldr	r2, [pc, #100]	@ (800a708 <TIM_OC4_SetConfig+0xc0>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d00f      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x80>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a18      	ldr	r2, [pc, #96]	@ (800a70c <TIM_OC4_SetConfig+0xc4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d00b      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x80>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a17      	ldr	r2, [pc, #92]	@ (800a710 <TIM_OC4_SetConfig+0xc8>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d007      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x80>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a16      	ldr	r2, [pc, #88]	@ (800a714 <TIM_OC4_SetConfig+0xcc>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d003      	beq.n	800a6c8 <TIM_OC4_SetConfig+0x80>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a15      	ldr	r2, [pc, #84]	@ (800a718 <TIM_OC4_SetConfig+0xd0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d109      	bne.n	800a6dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	019b      	lsls	r3, r3, #6
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	621a      	str	r2, [r3, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	feff8fff 	.word	0xfeff8fff
 800a708:	40010000 	.word	0x40010000
 800a70c:	40010400 	.word	0x40010400
 800a710:	40014000 	.word	0x40014000
 800a714:	40014400 	.word	0x40014400
 800a718:	40014800 	.word	0x40014800

0800a71c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	4b21      	ldr	r3, [pc, #132]	@ (800a7cc <TIM_OC5_SetConfig+0xb0>)
 800a748:	4013      	ands	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	4313      	orrs	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a75c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	041b      	lsls	r3, r3, #16
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a18      	ldr	r2, [pc, #96]	@ (800a7d0 <TIM_OC5_SetConfig+0xb4>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d00f      	beq.n	800a792 <TIM_OC5_SetConfig+0x76>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a17      	ldr	r2, [pc, #92]	@ (800a7d4 <TIM_OC5_SetConfig+0xb8>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d00b      	beq.n	800a792 <TIM_OC5_SetConfig+0x76>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a16      	ldr	r2, [pc, #88]	@ (800a7d8 <TIM_OC5_SetConfig+0xbc>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d007      	beq.n	800a792 <TIM_OC5_SetConfig+0x76>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a15      	ldr	r2, [pc, #84]	@ (800a7dc <TIM_OC5_SetConfig+0xc0>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d003      	beq.n	800a792 <TIM_OC5_SetConfig+0x76>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a14      	ldr	r2, [pc, #80]	@ (800a7e0 <TIM_OC5_SetConfig+0xc4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d109      	bne.n	800a7a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	621a      	str	r2, [r3, #32]
}
 800a7c0:	bf00      	nop
 800a7c2:	371c      	adds	r7, #28
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	fffeff8f 	.word	0xfffeff8f
 800a7d0:	40010000 	.word	0x40010000
 800a7d4:	40010400 	.word	0x40010400
 800a7d8:	40014000 	.word	0x40014000
 800a7dc:	40014400 	.word	0x40014400
 800a7e0:	40014800 	.word	0x40014800

0800a7e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a1b      	ldr	r3, [r3, #32]
 800a7f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4b22      	ldr	r3, [pc, #136]	@ (800a898 <TIM_OC6_SetConfig+0xb4>)
 800a810:	4013      	ands	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	051b      	lsls	r3, r3, #20
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4313      	orrs	r3, r2
 800a832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a19      	ldr	r2, [pc, #100]	@ (800a89c <TIM_OC6_SetConfig+0xb8>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00f      	beq.n	800a85c <TIM_OC6_SetConfig+0x78>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a18      	ldr	r2, [pc, #96]	@ (800a8a0 <TIM_OC6_SetConfig+0xbc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00b      	beq.n	800a85c <TIM_OC6_SetConfig+0x78>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4a17      	ldr	r2, [pc, #92]	@ (800a8a4 <TIM_OC6_SetConfig+0xc0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d007      	beq.n	800a85c <TIM_OC6_SetConfig+0x78>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a16      	ldr	r2, [pc, #88]	@ (800a8a8 <TIM_OC6_SetConfig+0xc4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d003      	beq.n	800a85c <TIM_OC6_SetConfig+0x78>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a15      	ldr	r2, [pc, #84]	@ (800a8ac <TIM_OC6_SetConfig+0xc8>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d109      	bne.n	800a870 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	029b      	lsls	r3, r3, #10
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	621a      	str	r2, [r3, #32]
}
 800a88a:	bf00      	nop
 800a88c:	371c      	adds	r7, #28
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	feff8fff 	.word	0xfeff8fff
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40010400 	.word	0x40010400
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40014400 	.word	0x40014400
 800a8ac:	40014800 	.word	0x40014800

0800a8b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	f023 0201 	bic.w	r2, r3, #1
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f023 030a 	bic.w	r3, r3, #10
 800a8ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	621a      	str	r2, [r3, #32]
}
 800a902:	bf00      	nop
 800a904:	371c      	adds	r7, #28
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a90e:	b480      	push	{r7}
 800a910:	b087      	sub	sp, #28
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	f023 0210 	bic.w	r2, r3, #16
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	031b      	lsls	r3, r3, #12
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	4313      	orrs	r3, r2
 800a942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a94a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	4313      	orrs	r3, r2
 800a954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	621a      	str	r2, [r3, #32]
}
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
	...

0800a970 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	4b09      	ldr	r3, [pc, #36]	@ (800a9a8 <TIM_ITRx_SetConfig+0x38>)
 800a984:	4013      	ands	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	f043 0307 	orr.w	r3, r3, #7
 800a992:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	609a      	str	r2, [r3, #8]
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	ffcfff8f 	.word	0xffcfff8f

0800a9ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	021a      	lsls	r2, r3, #8
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	431a      	orrs	r2, r3
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	609a      	str	r2, [r3, #8]
}
 800a9e0:	bf00      	nop
 800a9e2:	371c      	adds	r7, #28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e077      	b.n	800aaf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a35      	ldr	r2, [pc, #212]	@ (800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d004      	beq.n	800aa38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a34      	ldr	r2, [pc, #208]	@ (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d108      	bne.n	800aa4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aa3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a25      	ldr	r2, [pc, #148]	@ (800ab00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d02c      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa76:	d027      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a22      	ldr	r2, [pc, #136]	@ (800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d022      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a21      	ldr	r2, [pc, #132]	@ (800ab0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d01d      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a1f      	ldr	r2, [pc, #124]	@ (800ab10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d018      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	@ (800ab04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d013      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a1b      	ldr	r2, [pc, #108]	@ (800ab14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00e      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a1a      	ldr	r2, [pc, #104]	@ (800ab18 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d009      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a18      	ldr	r2, [pc, #96]	@ (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d004      	beq.n	800aac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a17      	ldr	r2, [pc, #92]	@ (800ab20 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d10c      	bne.n	800aae2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	40010000 	.word	0x40010000
 800ab04:	40010400 	.word	0x40010400
 800ab08:	40000400 	.word	0x40000400
 800ab0c:	40000800 	.word	0x40000800
 800ab10:	40000c00 	.word	0x40000c00
 800ab14:	40001800 	.word	0x40001800
 800ab18:	40014000 	.word	0x40014000
 800ab1c:	4000e000 	.word	0x4000e000
 800ab20:	4000e400 	.word	0x4000e400

0800ab24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e073      	b.n	800ac28 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	041b      	lsls	r3, r3, #16
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a19      	ldr	r2, [pc, #100]	@ (800ac34 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d004      	beq.n	800abdc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a18      	ldr	r2, [pc, #96]	@ (800ac38 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d11c      	bne.n	800ac16 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe6:	051b      	lsls	r3, r3, #20
 800abe8:	4313      	orrs	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40010400 	.word	0x40010400

0800ac3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <RMSExp>:
 * Output and update for atomic system:
 *    '<Root>/RMS Exp'
 *    '<Root>/RMS Exp1'
 */
static void RMSExp(double rtu_u, double *rty_y, DW_RMSExp *localDW)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  if (!localDW->rmsSquared_not_empty) {
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	7a1b      	ldrb	r3, [r3, #8]
 800ac8a:	f083 0301 	eor.w	r3, r3, #1
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d009      	beq.n	800aca8 <RMSExp+0x30>
    localDW->rmsSquared = rtu_u * rtu_u;
 800ac94:	ed97 7b02 	vldr	d7, [r7, #8]
 800ac98:	ee27 7b07 	vmul.f64	d7, d7, d7
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	ed83 7b00 	vstr	d7, [r3]
    localDW->rmsSquared_not_empty = true;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2201      	movs	r2, #1
 800aca6:	721a      	strb	r2, [r3, #8]
  }

  localDW->rmsSquared = rtu_u * rtu_u * 0.01 + 0.99 * localDW->rmsSquared;
 800aca8:	ed97 7b02 	vldr	d7, [r7, #8]
 800acac:	ee27 7b07 	vmul.f64	d7, d7, d7
 800acb0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 800ad00 <RMSExp+0x88>
 800acb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	ed93 7b00 	vldr	d7, [r3]
 800acbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 800ad08 <RMSExp+0x90>
 800acc2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800acc6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	ed83 7b00 	vstr	d7, [r3]
  *rty_y = localDW->rmsSquared;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	e9c1 2300 	strd	r2, r3, [r1]
  *rty_y = sqrt(*rty_y);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	ed93 7b00 	vldr	d7, [r3]
 800ace2:	eeb0 0b47 	vmov.f64	d0, d7
 800ace6:	f000 fcdf 	bl	800b6a8 <sqrt>
 800acea:	eeb0 7b40 	vmov.f64	d7, d0
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	ed83 7b00 	vstr	d7, [r3]
}
 800acf4:	bf00      	nop
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	f3af 8000 	nop.w
 800ad00:	47ae147b 	.word	0x47ae147b
 800ad04:	3f847ae1 	.word	0x3f847ae1
 800ad08:	7ae147ae 	.word	0x7ae147ae
 800ad0c:	3fefae14 	.word	0x3fefae14

0800ad10 <Subsystempi2delay>:
 *    '<S166>/Subsystem - pi//2 delay'
 *    '<S172>/Subsystem - pi//2 delay'
 */
static void Subsystempi2delay(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_j)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08a      	sub	sp, #40	@ 0x28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6139      	str	r1, [r7, #16]
 800ad18:	ed87 0b02 	vstr	d0, [r7, #8]
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	4603      	mov	r3, r0
 800ad22:	75fb      	strb	r3, [r7, #23]
  /* Outputs for Enabled SubSystem: '<S166>/Subsystem - pi//2 delay' incorporates:
   *  EnablePort: '<S170>/Enable'
   */
  if (rtu_Enable > 0) {
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d033      	beq.n	800ad92 <Subsystempi2delay+0x82>
    double tmp_0;

    /* Fcn: '<S170>/Fcn' incorporates:
     *  Fcn: '<S170>/Fcn1'
     */
    tmp = cos(rtu_wt);
 800ad2a:	ed97 0b02 	vldr	d0, [r7, #8]
 800ad2e:	f000 fcdb 	bl	800b6e8 <cos>
 800ad32:	ed87 0b08 	vstr	d0, [r7, #32]
    tmp_0 = sin(rtu_wt);
 800ad36:	ed97 0b02 	vldr	d0, [r7, #8]
 800ad3a:	f000 fd21 	bl	800b780 <sin>
 800ad3e:	ed87 0b06 	vstr	d0, [r7, #24]
    *rty_dq = rtu_alpha_beta[0] * tmp_0 - rtu_alpha_beta[1] * tmp;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	ed93 6b00 	vldr	d6, [r3]
 800ad48:	ed97 7b06 	vldr	d7, [r7, #24]
 800ad4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3308      	adds	r3, #8
 800ad54:	ed93 5b00 	vldr	d5, [r3]
 800ad58:	ed97 7b08 	vldr	d7, [r7, #32]
 800ad5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad60:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	ed83 7b00 	vstr	d7, [r3]

    /* Fcn: '<S170>/Fcn1' */
    *rty_dq_j = rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	ed93 6b00 	vldr	d6, [r3]
 800ad70:	ed97 7b08 	vldr	d7, [r7, #32]
 800ad74:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	ed93 5b00 	vldr	d5, [r3]
 800ad80:	ed97 7b06 	vldr	d7, [r7, #24]
 800ad84:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad88:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	ed83 7b00 	vstr	d7, [r3]
  }

  /* End of Outputs for SubSystem: '<S166>/Subsystem - pi//2 delay' */
}
 800ad92:	bf00      	nop
 800ad94:	3728      	adds	r7, #40	@ 0x28
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <Subsystem1>:
 *    '<S166>/Subsystem1'
 *    '<S172>/Subsystem1'
 */
static void Subsystem1(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_e)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b08a      	sub	sp, #40	@ 0x28
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6139      	str	r1, [r7, #16]
 800ada2:	ed87 0b02 	vstr	d0, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
 800adaa:	4603      	mov	r3, r0
 800adac:	75fb      	strb	r3, [r7, #23]
  /* Outputs for Enabled SubSystem: '<S166>/Subsystem1' incorporates:
   *  EnablePort: '<S171>/Enable'
   */
  if (rtu_Enable > 0) {
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d035      	beq.n	800ae20 <Subsystem1+0x86>
    double tmp_0;

    /* Fcn: '<S171>/Fcn' incorporates:
     *  Fcn: '<S171>/Fcn1'
     */
    tmp = sin(rtu_wt);
 800adb4:	ed97 0b02 	vldr	d0, [r7, #8]
 800adb8:	f000 fce2 	bl	800b780 <sin>
 800adbc:	ed87 0b08 	vstr	d0, [r7, #32]
    tmp_0 = cos(rtu_wt);
 800adc0:	ed97 0b02 	vldr	d0, [r7, #8]
 800adc4:	f000 fc90 	bl	800b6e8 <cos>
 800adc8:	ed87 0b06 	vstr	d0, [r7, #24]
    *rty_dq = rtu_alpha_beta[0] * tmp_0 + rtu_alpha_beta[1] * tmp;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	ed93 6b00 	vldr	d6, [r3]
 800add2:	ed97 7b06 	vldr	d7, [r7, #24]
 800add6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	3308      	adds	r3, #8
 800adde:	ed93 5b00 	vldr	d5, [r3]
 800ade2:	ed97 7b08 	vldr	d7, [r7, #32]
 800ade6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800adea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	ed83 7b00 	vstr	d7, [r3]

    /* Fcn: '<S171>/Fcn1' */
    *rty_dq_e = -rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	ed93 7b00 	vldr	d7, [r3]
 800adfa:	eeb1 6b47 	vneg.f64	d6, d7
 800adfe:	ed97 7b08 	vldr	d7, [r7, #32]
 800ae02:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	3308      	adds	r3, #8
 800ae0a:	ed93 5b00 	vldr	d5, [r3]
 800ae0e:	ed97 7b06 	vldr	d7, [r7, #24]
 800ae12:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ae16:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	ed83 7b00 	vstr	d7, [r3]
  }

  /* End of Outputs for SubSystem: '<S166>/Subsystem1' */
}
 800ae20:	bf00      	nop
 800ae22:	3728      	adds	r7, #40	@ 0x28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <rt_modd>:

double rt_modd(double u0, double u1)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	@ 0x28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ae32:	ed87 1b00 	vstr	d1, [r7]
  double y;
  y = u0;
 800ae36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (u1 == 0.0) {
 800ae3e:	ed97 7b00 	vldr	d7, [r7]
 800ae42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae4a:	d10c      	bne.n	800ae66 <rt_modd+0x3e>
    if (u0 == 0.0) {
 800ae4c:	ed97 7b02 	vldr	d7, [r7, #8]
 800ae50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae58:	f040 808e 	bne.w	800af78 <rt_modd+0x150>
      y = u1;
 800ae5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae60:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800ae64:	e088      	b.n	800af78 <rt_modd+0x150>
    }
  } else if (u0 == 0.0) {
 800ae66:	ed97 7b02 	vldr	d7, [r7, #8]
 800ae6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae72:	d108      	bne.n	800ae86 <rt_modd+0x5e>
    y = 0.0 / u1;
 800ae74:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 800af90 <rt_modd+0x168>
 800ae78:	ed97 6b00 	vldr	d6, [r7]
 800ae7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ae80:	ed87 7b08 	vstr	d7, [r7, #32]
 800ae84:	e078      	b.n	800af78 <rt_modd+0x150>
  } else {
    bool yEq;
    y = fmod(u0, u1);
 800ae86:	ed97 1b00 	vldr	d1, [r7]
 800ae8a:	ed97 0b02 	vldr	d0, [r7, #8]
 800ae8e:	f000 fbe7 	bl	800b660 <fmod>
 800ae92:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 800ae96:	ed97 7b08 	vldr	d7, [r7, #32]
 800ae9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea2:	bf0c      	ite	eq
 800aea4:	2301      	moveq	r3, #1
 800aea6:	2300      	movne	r3, #0
 800aea8:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > floor(u1))) {
 800aeaa:	7ffb      	ldrb	r3, [r7, #31]
 800aeac:	f083 0301 	eor.w	r3, r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d036      	beq.n	800af24 <rt_modd+0xfc>
 800aeb6:	ed97 0b00 	vldr	d0, [r7]
 800aeba:	f000 fcb1 	bl	800b820 <floor>
 800aebe:	eeb0 6b40 	vmov.f64	d6, d0
 800aec2:	ed97 7b00 	vldr	d7, [r7]
 800aec6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aece:	dd29      	ble.n	800af24 <rt_modd+0xfc>
      double q;
      q = fabs(u0 / u1);
 800aed0:	ed97 5b02 	vldr	d5, [r7, #8]
 800aed4:	ed97 6b00 	vldr	d6, [r7]
 800aed8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800aedc:	eeb0 7bc7 	vabs.f64	d7, d7
 800aee0:	ed87 7b04 	vstr	d7, [r7, #16]
      yEq = (fabs(q - floor(q + 0.5)) <= DBL_EPSILON * q);
 800aee4:	ed97 7b04 	vldr	d7, [r7, #16]
 800aee8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800aeec:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aef0:	eeb0 0b47 	vmov.f64	d0, d7
 800aef4:	f000 fc94 	bl	800b820 <floor>
 800aef8:	eeb0 6b40 	vmov.f64	d6, d0
 800aefc:	ed97 7b04 	vldr	d7, [r7, #16]
 800af00:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af04:	eeb0 6bc7 	vabs.f64	d6, d7
 800af08:	ed97 7b04 	vldr	d7, [r7, #16]
 800af0c:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 800af98 <rt_modd+0x170>
 800af10:	ee27 7b05 	vmul.f64	d7, d7, d5
 800af14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1c:	bf94      	ite	ls
 800af1e:	2301      	movls	r3, #1
 800af20:	2300      	movhi	r3, #0
 800af22:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 800af24:	7ffb      	ldrb	r3, [r7, #31]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d006      	beq.n	800af38 <rt_modd+0x110>
      y = 0.0;
 800af2a:	f04f 0200 	mov.w	r2, #0
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800af36:	e01f      	b.n	800af78 <rt_modd+0x150>
    } else if ((u0 < 0.0) != (u1 < 0.0)) {
 800af38:	ed97 7b02 	vldr	d7, [r7, #8]
 800af3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800af40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af44:	bf4c      	ite	mi
 800af46:	2301      	movmi	r3, #1
 800af48:	2300      	movpl	r3, #0
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	ed97 7b00 	vldr	d7, [r7]
 800af50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af58:	bf4c      	ite	mi
 800af5a:	2301      	movmi	r3, #1
 800af5c:	2300      	movpl	r3, #0
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	4053      	eors	r3, r2
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <rt_modd+0x150>
      y += u1;
 800af68:	ed97 6b08 	vldr	d6, [r7, #32]
 800af6c:	ed97 7b00 	vldr	d7, [r7]
 800af70:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af74:	ed87 7b08 	vstr	d7, [r7, #32]
    }
  }

  return y;
 800af78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af7c:	ec43 2b17 	vmov	d7, r2, r3
}
 800af80:	eeb0 0b47 	vmov.f64	d0, d7
 800af84:	3728      	adds	r7, #40	@ 0x28
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	f3af 8000 	nop.w
	...
 800af9c:	3cb00000 	.word	0x3cb00000

0800afa0 <TPGCI_STM32_4_step>:

/* Model step function */
void TPGCI_STM32_4_step(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b0a2      	sub	sp, #136	@ 0x88
 800afa4:	af00      	add	r7, sp, #0
  double rtb_Integrator_l;
  double rtb_Mod1;
  double rtb_Saturation;
  double rtb_Sum8;
  int32_t i;
  for (i = 0; i < 3; i++) {
 800afa6:	2300      	movs	r3, #0
 800afa8:	677b      	str	r3, [r7, #116]	@ 0x74
 800afaa:	e064      	b.n	800b076 <TPGCI_STM32_4_step+0xd6>
    /* Gain: '<S173>/Gain3' */
    rtb_Mod1 = rtConstP.pooled5[i + 3];
 800afac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afae:	3303      	adds	r3, #3
 800afb0:	4abd      	ldr	r2, [pc, #756]	@ (800b2a8 <TPGCI_STM32_4_step+0x308>)
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	4413      	add	r3, r2
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    rtb_Sum8 = rtConstP.pooled5[i];
 800afbe:	4aba      	ldr	r2, [pc, #744]	@ (800b2a8 <TPGCI_STM32_4_step+0x308>)
 800afc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afc2:	00db      	lsls	r3, r3, #3
 800afc4:	4413      	add	r3, r2
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    rtb_Saturation = rtConstP.pooled5[i + 6];
 800afce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afd0:	3306      	adds	r3, #6
 800afd2:	4ab5      	ldr	r2, [pc, #724]	@ (800b2a8 <TPGCI_STM32_4_step+0x308>)
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	4413      	add	r3, r2
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
     *  Gain: '<S173>/Gain3'
     *  Inport: '<Root>/Ia_g'
     *  Inport: '<Root>/Ib_g'
     *  Inport: '<Root>/Ic_g'
     */
    rtb_Gain1[i] = ((rtb_Mod1 * Ib_g + rtb_Sum8 * Ia_g) + rtb_Saturation * Ic_g)
 800afe0:	4bb2      	ldr	r3, [pc, #712]	@ (800b2ac <TPGCI_STM32_4_step+0x30c>)
 800afe2:	ed93 6b00 	vldr	d6, [r3]
 800afe6:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800afea:	ee26 6b07 	vmul.f64	d6, d6, d7
 800afee:	4bb0      	ldr	r3, [pc, #704]	@ (800b2b0 <TPGCI_STM32_4_step+0x310>)
 800aff0:	ed93 5b00 	vldr	d5, [r3]
 800aff4:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800aff8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800affc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b000:	4bac      	ldr	r3, [pc, #688]	@ (800b2b4 <TPGCI_STM32_4_step+0x314>)
 800b002:	ed93 5b00 	vldr	d5, [r3]
 800b006:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 800b00a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b00e:	ee36 7b07 	vadd.f64	d7, d6, d7
      * 0.66666666666666663;
 800b012:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 800b290 <TPGCI_STM32_4_step+0x2f0>
 800b016:	ee27 7b06 	vmul.f64	d7, d7, d6
    rtb_Gain1[i] = ((rtb_Mod1 * Ib_g + rtb_Sum8 * Ia_g) + rtb_Saturation * Ic_g)
 800b01a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	3388      	adds	r3, #136	@ 0x88
 800b020:	443b      	add	r3, r7
 800b022:	3b70      	subs	r3, #112	@ 0x70
 800b024:	ed83 7b00 	vstr	d7, [r3]
     *  Gain: '<S167>/Gain3'
     *  Inport: '<Root>/Va_g'
     *  Inport: '<Root>/Vb_g'
     *  Inport: '<Root>/Vc_g'
     */
    rtb_Gain1_p[i] = ((rtb_Mod1 * Vb_g + rtb_Sum8 * Va_g) + rtb_Saturation *
 800b028:	4ba3      	ldr	r3, [pc, #652]	@ (800b2b8 <TPGCI_STM32_4_step+0x318>)
 800b02a:	ed93 6b00 	vldr	d6, [r3]
 800b02e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800b032:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b036:	4ba1      	ldr	r3, [pc, #644]	@ (800b2bc <TPGCI_STM32_4_step+0x31c>)
 800b038:	ed93 5b00 	vldr	d5, [r3]
 800b03c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b040:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b044:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b048:	4b9d      	ldr	r3, [pc, #628]	@ (800b2c0 <TPGCI_STM32_4_step+0x320>)
 800b04a:	ed93 5b00 	vldr	d5, [r3]
 800b04e:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 800b052:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b056:	ee36 7b07 	vadd.f64	d7, d6, d7
                      Vc_g) * 0.66666666666666663;
 800b05a:	ed9f 6b8d 	vldr	d6, [pc, #564]	@ 800b290 <TPGCI_STM32_4_step+0x2f0>
 800b05e:	ee27 7b06 	vmul.f64	d7, d7, d6
    rtb_Gain1_p[i] = ((rtb_Mod1 * Vb_g + rtb_Sum8 * Va_g) + rtb_Saturation *
 800b062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	3388      	adds	r3, #136	@ 0x88
 800b068:	443b      	add	r3, r7
 800b06a:	3b88      	subs	r3, #136	@ 0x88
 800b06c:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 3; i++) {
 800b070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b072:	3301      	adds	r3, #1
 800b074:	677b      	str	r3, [r7, #116]	@ 0x74
 800b076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b078:	2b02      	cmp	r3, #2
 800b07a:	dd97      	ble.n	800afac <TPGCI_STM32_4_step+0xc>

  /* Math: '<Root>/Mod1' incorporates:
   *  Constant: '<Root>/Constant3'
   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'
   */
  rtb_Mod1 = rt_modd(rtDW.DiscreteTimeIntegrator_DSTATE, 6.2831853071795862);
 800b07c:	4b91      	ldr	r3, [pc, #580]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b07e:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800b082:	ed9f 1b85 	vldr	d1, [pc, #532]	@ 800b298 <TPGCI_STM32_4_step+0x2f8>
 800b086:	eeb0 0b47 	vmov.f64	d0, d7
 800b08a:	f7ff fecd 	bl	800ae28 <rt_modd>
 800b08e:	ed87 0b1a 	vstr	d0, [r7, #104]	@ 0x68

  /* Outputs for Enabled SubSystem: '<S172>/Subsystem1' */
  Subsystem1(0, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_n, &rtDW.Fcn1_h);
 800b092:	f107 0118 	add.w	r1, r7, #24
 800b096:	4b8c      	ldr	r3, [pc, #560]	@ (800b2c8 <TPGCI_STM32_4_step+0x328>)
 800b098:	4a8c      	ldr	r2, [pc, #560]	@ (800b2cc <TPGCI_STM32_4_step+0x32c>)
 800b09a:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f7ff fe7b 	bl	800ad9a <Subsystem1>

  /* End of Outputs for SubSystem: '<S172>/Subsystem1' */

  /* Outputs for Enabled SubSystem: '<S172>/Subsystem - pi//2 delay' */
  Subsystempi2delay(rtConstB.Compare_b, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_k1,
 800b0a4:	4b8a      	ldr	r3, [pc, #552]	@ (800b2d0 <TPGCI_STM32_4_step+0x330>)
 800b0a6:	7858      	ldrb	r0, [r3, #1]
 800b0a8:	f107 0118 	add.w	r1, r7, #24
 800b0ac:	4b89      	ldr	r3, [pc, #548]	@ (800b2d4 <TPGCI_STM32_4_step+0x334>)
 800b0ae:	4a8a      	ldr	r2, [pc, #552]	@ (800b2d8 <TPGCI_STM32_4_step+0x338>)
 800b0b0:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800b0b4:	f7ff fe2c 	bl	800ad10 <Subsystempi2delay>

  /* MATLAB Function: '<Root>/RMS Exp1' incorporates:
   *  Outport: '<Root>/Id'
   *  Switch: '<S172>/Switch'
   */
  RMSExp(rtDW.Fcn_k1, (double *)&Id, &rtDW.sf_RMSExp1);
 800b0b8:	4b82      	ldr	r3, [pc, #520]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b0ba:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800b0be:	4981      	ldr	r1, [pc, #516]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b0c0:	4886      	ldr	r0, [pc, #536]	@ (800b2dc <TPGCI_STM32_4_step+0x33c>)
 800b0c2:	eeb0 0b47 	vmov.f64	d0, d7
 800b0c6:	f7ff fdd7 	bl	800ac78 <RMSExp>
  /* Product: '<Root>/Product3' incorporates:
   *  Inport: '<Root>/Iabc_gain'
   *  Inport: '<Root>/Id_ref'
   *  Product: '<Root>/Product4'
   */
  rtb_Integrator_l = Id_ref * Iabc_gain;
 800b0ca:	4b85      	ldr	r3, [pc, #532]	@ (800b2e0 <TPGCI_STM32_4_step+0x340>)
 800b0cc:	ed93 6b00 	vldr	d6, [r3]
 800b0d0:	4b84      	ldr	r3, [pc, #528]	@ (800b2e4 <TPGCI_STM32_4_step+0x344>)
 800b0d2:	ed93 7b00 	vldr	d7, [r3]
 800b0d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b0da:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60

  /* Sum: '<Root>/Sum8' incorporates:
   *  Outport: '<Root>/Id'
   *  Product: '<Root>/Product3'
   */
  rtb_Sum8 = rtb_Integrator_l - Id;
 800b0de:	4b7f      	ldr	r3, [pc, #508]	@ (800b2dc <TPGCI_STM32_4_step+0x33c>)
 800b0e0:	ed93 7b00 	vldr	d7, [r3]
 800b0e4:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800b0e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b0ec:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

  /* Sum: '<S108>/Sum' incorporates:
   *  DiscreteIntegrator: '<S99>/Integrator'
   */
  rtb_Saturation = rtb_Sum8 + rtDW.Integrator_DSTATE;
 800b0f0:	4b74      	ldr	r3, [pc, #464]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b0f2:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800b0f6:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800b0fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b0fe:	ed87 7b1e 	vstr	d7, [r7, #120]	@ 0x78

  /* Saturate: '<S106>/Saturation' */
  if (rtb_Saturation > 10.0) {
 800b102:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 800b106:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b10a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b112:	dd05      	ble.n	800b120 <TPGCI_STM32_4_step+0x180>
    rtb_Saturation = 10.0;
 800b114:	f04f 0200 	mov.w	r2, #0
 800b118:	4b73      	ldr	r3, [pc, #460]	@ (800b2e8 <TPGCI_STM32_4_step+0x348>)
 800b11a:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
 800b11e:	e00d      	b.n	800b13c <TPGCI_STM32_4_step+0x19c>
  } else if (rtb_Saturation < -10.0) {
 800b120:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 800b124:	eeba 6b04 	vmov.f64	d6, #164	@ 0xc1200000 -10.0
 800b128:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b130:	d504      	bpl.n	800b13c <TPGCI_STM32_4_step+0x19c>
    rtb_Saturation = -10.0;
 800b132:	f04f 0200 	mov.w	r2, #0
 800b136:	4b6d      	ldr	r3, [pc, #436]	@ (800b2ec <TPGCI_STM32_4_step+0x34c>)
 800b138:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  }

  /* End of Saturate: '<S106>/Saturation' */

  /* Outputs for Enabled SubSystem: '<S166>/Subsystem1' */
  Subsystem1(0, &rtb_Gain1_p[0], rtb_Mod1, &rtDW.Fcn_a, &rtDW.Fcn1_ic);
 800b13c:	4639      	mov	r1, r7
 800b13e:	4b6c      	ldr	r3, [pc, #432]	@ (800b2f0 <TPGCI_STM32_4_step+0x350>)
 800b140:	4a6c      	ldr	r2, [pc, #432]	@ (800b2f4 <TPGCI_STM32_4_step+0x354>)
 800b142:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800b146:	2000      	movs	r0, #0
 800b148:	f7ff fe27 	bl	800ad9a <Subsystem1>

  /* End of Outputs for SubSystem: '<S166>/Subsystem1' */

  /* Outputs for Enabled SubSystem: '<S166>/Subsystem - pi//2 delay' */
  Subsystempi2delay(rtConstB.Compare_i, &rtb_Gain1_p[0], rtb_Mod1, &rtDW.Fcn_nk,
 800b14c:	4b60      	ldr	r3, [pc, #384]	@ (800b2d0 <TPGCI_STM32_4_step+0x330>)
 800b14e:	7818      	ldrb	r0, [r3, #0]
 800b150:	4639      	mov	r1, r7
 800b152:	4b69      	ldr	r3, [pc, #420]	@ (800b2f8 <TPGCI_STM32_4_step+0x358>)
 800b154:	4a69      	ldr	r2, [pc, #420]	@ (800b2fc <TPGCI_STM32_4_step+0x35c>)
 800b156:	ed97 0b1a 	vldr	d0, [r7, #104]	@ 0x68
 800b15a:	f7ff fdd9 	bl	800ad10 <Subsystempi2delay>

  /* MATLAB Function: '<Root>/RMS Exp' incorporates:
   *  Outport: '<Root>/Vd_g'
   *  Switch: '<S166>/Switch'
   */
  RMSExp(rtDW.Fcn_nk, (double *)&Vd_g, &rtDW.sf_RMSExp);
 800b15e:	4b59      	ldr	r3, [pc, #356]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b160:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 800b164:	4966      	ldr	r1, [pc, #408]	@ (800b300 <TPGCI_STM32_4_step+0x360>)
 800b166:	4867      	ldr	r0, [pc, #412]	@ (800b304 <TPGCI_STM32_4_step+0x364>)
 800b168:	eeb0 0b47 	vmov.f64	d0, d7
 800b16c:	f7ff fd84 	bl	800ac78 <RMSExp>

  /* Sum: '<Root>/Sum10' incorporates:
   *  Outport: '<Root>/Vd_g'
   *  Sum: '<Root>/Sum9'
   */
  rtb_Filter = rtb_Saturation + Vd_g;
 800b170:	4b64      	ldr	r3, [pc, #400]	@ (800b304 <TPGCI_STM32_4_step+0x364>)
 800b172:	ed93 7b00 	vldr	d7, [r3]
 800b176:	ed97 6b1e 	vldr	d6, [r7, #120]	@ 0x78
 800b17a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b17e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
   *  Inport: '<Root>/VDC'
   *  Inport: '<Root>/Vdc_gain'
   *  Product: '<Root>/Product8'
   *  Product: '<S3>/Divide2'
   */
  rtb_Add2 = 1.0 / Vdc_gain * VDC;
 800b182:	4b61      	ldr	r3, [pc, #388]	@ (800b308 <TPGCI_STM32_4_step+0x368>)
 800b184:	ed93 7b00 	vldr	d7, [r3]
 800b188:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800b18c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800b190:	4b5e      	ldr	r3, [pc, #376]	@ (800b30c <TPGCI_STM32_4_step+0x36c>)
 800b192:	ed93 7b00 	vldr	d7, [r3]
 800b196:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b19a:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
   *  Product: '<Root>/Product'
   *  Product: '<Root>/Product5'
   *  Product: '<Root>/Product6'
   *  Product: '<S1>/Divide2'
   */
  rtb_Divide = rtb_Filter * 2.0 * (1.0 / Vabc_gain) / rtb_Add2;
 800b19e:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800b1a2:	ee37 6b07 	vadd.f64	d6, d7, d7
 800b1a6:	4b5a      	ldr	r3, [pc, #360]	@ (800b310 <TPGCI_STM32_4_step+0x370>)
 800b1a8:	ed93 5b00 	vldr	d5, [r3]
 800b1ac:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 800b1b0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800b1b4:	ee26 5b07 	vmul.f64	d5, d6, d7
 800b1b8:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800b1bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b1c0:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  /* Sum: '<Root>/Sum11' incorporates:
   *  Switch: '<S172>/Switch'
   */
  rtb_Integrator_l -= rtDW.Fcn1_j;
 800b1c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b1c6:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800b1ca:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800b1ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b1d2:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
   *  Product: '<S2>/Divide2'
   *  Sum: '<Root>/Sum13'
   *  Sum: '<S158>/Sum'
   *  Switch: '<S166>/Switch'
   */
  rtb_Divide1 = ((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) + rtDW.Fcn1_l) *
 800b1d6:	4b3b      	ldr	r3, [pc, #236]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b1d8:	ed93 6b1c 	vldr	d6, [r3, #112]	@ 0x70
 800b1dc:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800b1e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b1e4:	4b37      	ldr	r3, [pc, #220]	@ (800b2c4 <TPGCI_STM32_4_step+0x324>)
 800b1e6:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 800b1ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b1ee:	ee37 6b07 	vadd.f64	d6, d7, d7
    2.0 * (1.0 / Vabc_gain) / rtb_Add2;
 800b1f2:	4b47      	ldr	r3, [pc, #284]	@ (800b310 <TPGCI_STM32_4_step+0x370>)
 800b1f4:	ed93 5b00 	vldr	d5, [r3]
 800b1f8:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 800b1fc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800b200:	ee26 5b07 	vmul.f64	d5, d6, d7
  rtb_Divide1 = ((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) + rtDW.Fcn1_l) *
 800b204:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800b208:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b20c:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80

  /* Sum: '<S13>/Add2' incorporates:
   *  Gain: '<S13>/Gain1'
   *  Inport: '<Root>/phase delay'
   */
  rtb_Add2 = 0.017453292519943295 * phasedelay + rtb_Mod1;
 800b210:	4b40      	ldr	r3, [pc, #256]	@ (800b314 <TPGCI_STM32_4_step+0x374>)
 800b212:	ed93 7b00 	vldr	d7, [r3]
 800b216:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800b2a0 <TPGCI_STM32_4_step+0x300>
 800b21a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b21e:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 800b222:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b226:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
   *  EnablePort: '<S182>/Enable'
   */
  /* Fcn: '<S182>/Fcn' incorporates:
   *  Fcn: '<S182>/Fcn1'
   */
  rtb_Divide_idx_0_tmp = cos(rtb_Add2);
 800b22a:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800b22e:	f000 fa5b 	bl	800b6e8 <cos>
 800b232:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
  rtb_Divide_idx_0_tmp_0 = sin(rtb_Add2);
 800b236:	ed97 0b12 	vldr	d0, [r7, #72]	@ 0x48
 800b23a:	f000 faa1 	bl	800b780 <sin>
 800b23e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

  /* Switch: '<S179>/Switch' incorporates:
   *  Fcn: '<S182>/Fcn'
   *  Fcn: '<S182>/Fcn1'
   */
  rtb_Add2 = rtb_Divide * rtb_Divide_idx_0_tmp_0 + rtb_Divide1 *
 800b242:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 800b246:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b24a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b24e:	ed97 5b20 	vldr	d5, [r7, #128]	@ 0x80
 800b252:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b256:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b25a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b25e:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
    rtb_Divide_idx_0_tmp;
  rtb_Divide = -rtb_Divide * rtb_Divide_idx_0_tmp + rtb_Divide1 *
 800b262:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b266:	eeb1 6b47 	vneg.f64	d6, d7
 800b26a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b26e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b272:	ed97 5b20 	vldr	d5, [r7, #128]	@ 0x80
 800b276:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b27a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b27e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b282:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    rtb_Divide_idx_0_tmp_0;

  /* End of Outputs for SubSystem: '<S179>/Subsystem - pi//2 delay' */
  for (i = 0; i < 3; i++) {
 800b286:	2300      	movs	r3, #0
 800b288:	677b      	str	r3, [r7, #116]	@ 0x74
 800b28a:	e09e      	b.n	800b3ca <TPGCI_STM32_4_step+0x42a>
 800b28c:	f3af 8000 	nop.w
 800b290:	55555555 	.word	0x55555555
 800b294:	3fe55555 	.word	0x3fe55555
 800b298:	54442d18 	.word	0x54442d18
 800b29c:	401921fb 	.word	0x401921fb
 800b2a0:	a2529d39 	.word	0xa2529d39
 800b2a4:	3f91df46 	.word	0x3f91df46
 800b2a8:	0800c570 	.word	0x0800c570
 800b2ac:	240004e8 	.word	0x240004e8
 800b2b0:	240004d8 	.word	0x240004d8
 800b2b4:	240004f0 	.word	0x240004f0
 800b2b8:	24000548 	.word	0x24000548
 800b2bc:	24000538 	.word	0x24000538
 800b2c0:	24000550 	.word	0x24000550
 800b2c4:	24000590 	.word	0x24000590
 800b2c8:	240005b8 	.word	0x240005b8
 800b2cc:	240005b0 	.word	0x240005b0
 800b2d0:	0800c568 	.word	0x0800c568
 800b2d4:	240005c8 	.word	0x240005c8
 800b2d8:	240005c0 	.word	0x240005c0
 800b2dc:	240004f8 	.word	0x240004f8
 800b2e0:	24000500 	.word	0x24000500
 800b2e4:	240004e0 	.word	0x240004e0
 800b2e8:	40240000 	.word	0x40240000
 800b2ec:	c0240000 	.word	0xc0240000
 800b2f0:	240005d8 	.word	0x240005d8
 800b2f4:	240005d0 	.word	0x240005d0
 800b2f8:	240005e8 	.word	0x240005e8
 800b2fc:	240005e0 	.word	0x240005e0
 800b300:	240005a0 	.word	0x240005a0
 800b304:	24000558 	.word	0x24000558
 800b308:	24000560 	.word	0x24000560
 800b30c:	24000530 	.word	0x24000530
 800b310:	24000540 	.word	0x24000540
 800b314:	24000588 	.word	0x24000588
    /* Gain: '<S178>/Gain3' incorporates:
     *  Switch: '<S179>/Switch'
     */
    rtb_Divide1 = rtConstP.Gain3_Gain[i + 3] * rtb_Divide +
 800b318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b31a:	3303      	adds	r3, #3
 800b31c:	4aa4      	ldr	r2, [pc, #656]	@ (800b5b0 <TPGCI_STM32_4_step+0x610>)
 800b31e:	3309      	adds	r3, #9
 800b320:	00db      	lsls	r3, r3, #3
 800b322:	4413      	add	r3, r2
 800b324:	ed93 6b00 	vldr	d6, [r3]
 800b328:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b32c:	ee26 6b07 	vmul.f64	d6, d6, d7
      rtConstP.Gain3_Gain[i] * rtb_Add2;
 800b330:	4a9f      	ldr	r2, [pc, #636]	@ (800b5b0 <TPGCI_STM32_4_step+0x610>)
 800b332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b334:	3309      	adds	r3, #9
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	4413      	add	r3, r2
 800b33a:	ed93 5b00 	vldr	d5, [r3]
 800b33e:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800b342:	ee25 7b07 	vmul.f64	d7, d5, d7
    rtb_Divide1 = rtConstP.Gain3_Gain[i + 3] * rtb_Divide +
 800b346:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b34a:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80

    /* Saturate: '<Root>/Saturation' incorporates:
     *  Gain: '<S178>/Gain3'
     */
    if (rtb_Divide1 > 0.95) {
 800b34e:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b352:	ed9f 6b87 	vldr	d6, [pc, #540]	@ 800b570 <TPGCI_STM32_4_step+0x5d0>
 800b356:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35e:	dd05      	ble.n	800b36c <TPGCI_STM32_4_step+0x3cc>
      rtb_Divide1 = 0.95;
 800b360:	a383      	add	r3, pc, #524	@ (adr r3, 800b570 <TPGCI_STM32_4_step+0x5d0>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 800b36a:	e00d      	b.n	800b388 <TPGCI_STM32_4_step+0x3e8>
    } else if (rtb_Divide1 < -0.95) {
 800b36c:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b370:	ed9f 6b81 	vldr	d6, [pc, #516]	@ 800b578 <TPGCI_STM32_4_step+0x5d8>
 800b374:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37c:	d504      	bpl.n	800b388 <TPGCI_STM32_4_step+0x3e8>
      rtb_Divide1 = -0.95;
 800b37e:	a37e      	add	r3, pc, #504	@ (adr r3, 800b578 <TPGCI_STM32_4_step+0x5d8>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    }

    /* End of Saturate: '<Root>/Saturation' */

    /* Outport: '<Root>/m_abc' */
    m_abc[i] = rtb_Divide1;
 800b388:	4a8a      	ldr	r2, [pc, #552]	@ (800b5b4 <TPGCI_STM32_4_step+0x614>)
 800b38a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b38c:	00db      	lsls	r3, r3, #3
 800b38e:	18d1      	adds	r1, r2, r3
 800b390:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b394:	e9c1 2300 	strd	r2, r3, [r1]
     *  Constant: '<Root>/Constant2'
     *  Gain: '<Root>/Gain'
     *  Inport: '<Root>/CCR_max'
     *  Sum: '<Root>/Add1'
     */
    rtb_Gain1[i] = (rtb_Divide1 + 1.0) * 0.5 * CCR_max;
 800b398:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b39c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b3a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b3a4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800b3a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b3ac:	4b82      	ldr	r3, [pc, #520]	@ (800b5b8 <TPGCI_STM32_4_step+0x618>)
 800b3ae:	ed93 7b00 	vldr	d7, [r3]
 800b3b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3b8:	00db      	lsls	r3, r3, #3
 800b3ba:	3388      	adds	r3, #136	@ 0x88
 800b3bc:	443b      	add	r3, r7
 800b3be:	3b70      	subs	r3, #112	@ 0x70
 800b3c0:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 3; i++) {
 800b3c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	677b      	str	r3, [r7, #116]	@ 0x74
 800b3ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	dda3      	ble.n	800b318 <TPGCI_STM32_4_step+0x378>
  }

  /* Outport: '<Root>/PWMch1' */
  PWMch1 = rtb_Gain1[0];
 800b3d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3d4:	4979      	ldr	r1, [pc, #484]	@ (800b5bc <TPGCI_STM32_4_step+0x61c>)
 800b3d6:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/PWMch2' */
  PWMch2 = rtb_Gain1[1];
 800b3da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b3de:	4978      	ldr	r1, [pc, #480]	@ (800b5c0 <TPGCI_STM32_4_step+0x620>)
 800b3e0:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/PWMch3' */
  PWMch3 = rtb_Gain1[2];
 800b3e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b3e8:	4976      	ldr	r1, [pc, #472]	@ (800b5c4 <TPGCI_STM32_4_step+0x624>)
 800b3ea:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Vq_g' incorporates:
   *  Switch: '<S166>/Switch'
   */
  Vq_g = rtDW.Fcn1_l;
 800b3ee:	4b76      	ldr	r3, [pc, #472]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b3f0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800b3f4:	4975      	ldr	r1, [pc, #468]	@ (800b5cc <TPGCI_STM32_4_step+0x62c>)
 800b3f6:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Iq' incorporates:
   *  Switch: '<S172>/Switch'
   */
  Iq = rtDW.Fcn1_j;
 800b3fa:	4b73      	ldr	r3, [pc, #460]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b3fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b400:	4973      	ldr	r1, [pc, #460]	@ (800b5d0 <TPGCI_STM32_4_step+0x630>)
 800b402:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Vdc_cal' */
  rtY.Vdc_cal = rtb_Filter;
 800b406:	4973      	ldr	r1, [pc, #460]	@ (800b5d4 <TPGCI_STM32_4_step+0x634>)
 800b408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b40c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  /* Gain: '<S52>/Filter Coefficient' incorporates:
   *  DiscreteIntegrator: '<S44>/Filter'
   *  Gain: '<S42>/Derivative Gain'
   *  Sum: '<S44>/SumD'
   */
  rtb_Divide = (0.0 - rtDW.Filter_DSTATE) * 100.0;
 800b410:	4b6d      	ldr	r3, [pc, #436]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b412:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800b416:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800b580 <TPGCI_STM32_4_step+0x5e0>
 800b41a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b41e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800b588 <TPGCI_STM32_4_step+0x5e8>
 800b422:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b426:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
   *  DiscreteIntegrator: '<S49>/Integrator'
   *  Gain: '<S54>/Proportional Gain'
   *  Sum: '<S58>/Sum'
   *  Switch: '<S166>/Switch'
   */
  rtb_Divide1 = ((10.0 * rtDW.Fcn1_l + rtDW.Integrator_DSTATE_f) + rtb_Divide) +
 800b42a:	4b67      	ldr	r3, [pc, #412]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b42c:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 800b430:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b434:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b438:	4b63      	ldr	r3, [pc, #396]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b43a:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800b43e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b442:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b446:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b44a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 800b590 <TPGCI_STM32_4_step+0x5f0>
 800b44e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b452:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    314.15926535897933;

  /* Outport: '<Root>/Freq' incorporates:
   *  Gain: '<Root>/Gain12'
   */
  Freq = 0.15915 * rtb_Divide1;
 800b456:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b45a:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800b598 <TPGCI_STM32_4_step+0x5f8>
 800b45e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b462:	4b5d      	ldr	r3, [pc, #372]	@ (800b5d8 <TPGCI_STM32_4_step+0x638>)
 800b464:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/pi_out' */
  rtY.pi_out = rtb_Saturation;
 800b468:	495a      	ldr	r1, [pc, #360]	@ (800b5d4 <TPGCI_STM32_4_step+0x634>)
 800b46a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800b46e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Theta_g' */
  Theta_g = rtb_Mod1;
 800b472:	495a      	ldr	r1, [pc, #360]	@ (800b5dc <TPGCI_STM32_4_step+0x63c>)
 800b474:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b478:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
  rtDW.DiscreteTimeIntegrator_DSTATE += 0.0001 * rtb_Divide1;
 800b47c:	4b52      	ldr	r3, [pc, #328]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b47e:	ed93 6b18 	vldr	d6, [r3, #96]	@ 0x60
 800b482:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b486:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 800b5a0 <TPGCI_STM32_4_step+0x600>
 800b48a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b48e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b492:	4b4d      	ldr	r3, [pc, #308]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b494:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60

  /* Update for DiscreteIntegrator: '<S99>/Integrator' incorporates:
   *  Gain: '<S96>/Integral Gain'
   */
  rtDW.Integrator_DSTATE += 100.0 * rtb_Sum8 * 0.0001;
 800b498:	4b4b      	ldr	r3, [pc, #300]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b49a:	ed93 6b1a 	vldr	d6, [r3, #104]	@ 0x68
 800b49e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b4a2:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 800b588 <TPGCI_STM32_4_step+0x5e8>
 800b4a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b4aa:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 800b5a0 <TPGCI_STM32_4_step+0x600>
 800b4ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b4b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4b6:	4b44      	ldr	r3, [pc, #272]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b4b8:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
  if (rtDW.Integrator_DSTATE > 10.0) {
 800b4bc:	4b42      	ldr	r3, [pc, #264]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b4be:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800b4c2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b4c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	dd06      	ble.n	800b4de <TPGCI_STM32_4_step+0x53e>
    rtDW.Integrator_DSTATE = 10.0;
 800b4d0:	493d      	ldr	r1, [pc, #244]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b4d2:	f04f 0200 	mov.w	r2, #0
 800b4d6:	4b42      	ldr	r3, [pc, #264]	@ (800b5e0 <TPGCI_STM32_4_step+0x640>)
 800b4d8:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
 800b4dc:	e00f      	b.n	800b4fe <TPGCI_STM32_4_step+0x55e>
  } else if (rtDW.Integrator_DSTATE < -10.0) {
 800b4de:	4b3a      	ldr	r3, [pc, #232]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b4e0:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800b4e4:	eeba 6b04 	vmov.f64	d6, #164	@ 0xc1200000 -10.0
 800b4e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f0:	d505      	bpl.n	800b4fe <TPGCI_STM32_4_step+0x55e>
    rtDW.Integrator_DSTATE = -10.0;
 800b4f2:	4935      	ldr	r1, [pc, #212]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b4f4:	f04f 0200 	mov.w	r2, #0
 800b4f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b5e4 <TPGCI_STM32_4_step+0x644>)
 800b4fa:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
  /* End of Update for DiscreteIntegrator: '<S99>/Integrator' */

  /* Update for DiscreteIntegrator: '<S149>/Integrator' incorporates:
   *  Gain: '<S146>/Integral Gain'
   */
  rtDW.Integrator_DSTATE_e += 100.0 * rtb_Integrator_l * 0.0001;
 800b4fe:	4b32      	ldr	r3, [pc, #200]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b500:	ed93 6b1c 	vldr	d6, [r3, #112]	@ 0x70
 800b504:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800b508:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 800b588 <TPGCI_STM32_4_step+0x5e8>
 800b50c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b510:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 800b5a0 <TPGCI_STM32_4_step+0x600>
 800b514:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b518:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b51c:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b51e:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70

  /* Update for DiscreteIntegrator: '<S49>/Integrator' incorporates:
   *  Gain: '<S46>/Integral Gain'
   *  Switch: '<S166>/Switch'
   */
  rtDW.Integrator_DSTATE_f += 10000.0 * rtDW.Fcn1_l * 0.0001;
 800b522:	4b29      	ldr	r3, [pc, #164]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b524:	ed93 6b1e 	vldr	d6, [r3, #120]	@ 0x78
 800b528:	4b27      	ldr	r3, [pc, #156]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b52a:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 800b52e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 800b5a8 <TPGCI_STM32_4_step+0x608>
 800b532:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b536:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 800b5a0 <TPGCI_STM32_4_step+0x600>
 800b53a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b53e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b542:	4b21      	ldr	r3, [pc, #132]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b544:	ed83 7b1e 	vstr	d7, [r3, #120]	@ 0x78

  /* Update for DiscreteIntegrator: '<S44>/Filter' */
  rtDW.Filter_DSTATE += 0.0001 * rtb_Divide;
 800b548:	4b1f      	ldr	r3, [pc, #124]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b54a:	ed93 6b20 	vldr	d6, [r3, #128]	@ 0x80
 800b54e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b552:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 800b5a0 <TPGCI_STM32_4_step+0x600>
 800b556:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b55a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b55e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c8 <TPGCI_STM32_4_step+0x628>)
 800b560:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
}
 800b564:	bf00      	nop
 800b566:	3788      	adds	r7, #136	@ 0x88
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	f3af 8000 	nop.w
 800b570:	66666666 	.word	0x66666666
 800b574:	3fee6666 	.word	0x3fee6666
 800b578:	66666666 	.word	0x66666666
 800b57c:	bfee6666 	.word	0xbfee6666
	...
 800b58c:	40590000 	.word	0x40590000
 800b590:	59d5433b 	.word	0x59d5433b
 800b594:	4073a28c 	.word	0x4073a28c
 800b598:	f6944674 	.word	0xf6944674
 800b59c:	3fc45f06 	.word	0x3fc45f06
 800b5a0:	eb1c432d 	.word	0xeb1c432d
 800b5a4:	3f1a36e2 	.word	0x3f1a36e2
 800b5a8:	00000000 	.word	0x00000000
 800b5ac:	40c38800 	.word	0x40c38800
 800b5b0:	0800c570 	.word	0x0800c570
 800b5b4:	24000570 	.word	0x24000570
 800b5b8:	240004c8 	.word	0x240004c8
 800b5bc:	24000510 	.word	0x24000510
 800b5c0:	24000518 	.word	0x24000518
 800b5c4:	24000520 	.word	0x24000520
 800b5c8:	24000590 	.word	0x24000590
 800b5cc:	24000568 	.word	0x24000568
 800b5d0:	24000508 	.word	0x24000508
 800b5d4:	24000618 	.word	0x24000618
 800b5d8:	240004d0 	.word	0x240004d0
 800b5dc:	24000528 	.word	0x24000528
 800b5e0:	40240000 	.word	0x40240000
 800b5e4:	c0240000 	.word	0xc0240000

0800b5e8 <TPGCI_STM32_4_initialize>:

/* Model initialize function */
void TPGCI_STM32_4_initialize(void)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800b5ec:	bf00      	nop
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <memset>:
 800b5f6:	4402      	add	r2, r0
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d100      	bne.n	800b600 <memset+0xa>
 800b5fe:	4770      	bx	lr
 800b600:	f803 1b01 	strb.w	r1, [r3], #1
 800b604:	e7f9      	b.n	800b5fa <memset+0x4>
	...

0800b608 <__errno>:
 800b608:	4b01      	ldr	r3, [pc, #4]	@ (800b610 <__errno+0x8>)
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	24000028 	.word	0x24000028

0800b614 <__libc_init_array>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4d0d      	ldr	r5, [pc, #52]	@ (800b64c <__libc_init_array+0x38>)
 800b618:	4c0d      	ldr	r4, [pc, #52]	@ (800b650 <__libc_init_array+0x3c>)
 800b61a:	1b64      	subs	r4, r4, r5
 800b61c:	10a4      	asrs	r4, r4, #2
 800b61e:	2600      	movs	r6, #0
 800b620:	42a6      	cmp	r6, r4
 800b622:	d109      	bne.n	800b638 <__libc_init_array+0x24>
 800b624:	4d0b      	ldr	r5, [pc, #44]	@ (800b654 <__libc_init_array+0x40>)
 800b626:	4c0c      	ldr	r4, [pc, #48]	@ (800b658 <__libc_init_array+0x44>)
 800b628:	f000 ff84 	bl	800c534 <_init>
 800b62c:	1b64      	subs	r4, r4, r5
 800b62e:	10a4      	asrs	r4, r4, #2
 800b630:	2600      	movs	r6, #0
 800b632:	42a6      	cmp	r6, r4
 800b634:	d105      	bne.n	800b642 <__libc_init_array+0x2e>
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	f855 3b04 	ldr.w	r3, [r5], #4
 800b63c:	4798      	blx	r3
 800b63e:	3601      	adds	r6, #1
 800b640:	e7ee      	b.n	800b620 <__libc_init_array+0xc>
 800b642:	f855 3b04 	ldr.w	r3, [r5], #4
 800b646:	4798      	blx	r3
 800b648:	3601      	adds	r6, #1
 800b64a:	e7f2      	b.n	800b632 <__libc_init_array+0x1e>
 800b64c:	0800c7e8 	.word	0x0800c7e8
 800b650:	0800c7e8 	.word	0x0800c7e8
 800b654:	0800c7e8 	.word	0x0800c7e8
 800b658:	0800c7ec 	.word	0x0800c7ec
 800b65c:	00000000 	.word	0x00000000

0800b660 <fmod>:
 800b660:	b508      	push	{r3, lr}
 800b662:	ed2d 8b04 	vpush	{d8-d9}
 800b666:	eeb0 9b40 	vmov.f64	d9, d0
 800b66a:	eeb0 8b41 	vmov.f64	d8, d1
 800b66e:	f000 fa0f 	bl	800ba90 <__ieee754_fmod>
 800b672:	eeb4 9b48 	vcmp.f64	d9, d8
 800b676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b67a:	d60c      	bvs.n	800b696 <fmod+0x36>
 800b67c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800b6a0 <fmod+0x40>
 800b680:	eeb4 8b49 	vcmp.f64	d8, d9
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	d105      	bne.n	800b696 <fmod+0x36>
 800b68a:	f7ff ffbd 	bl	800b608 <__errno>
 800b68e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800b692:	2321      	movs	r3, #33	@ 0x21
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	ecbd 8b04 	vpop	{d8-d9}
 800b69a:	bd08      	pop	{r3, pc}
 800b69c:	f3af 8000 	nop.w
	...

0800b6a8 <sqrt>:
 800b6a8:	b508      	push	{r3, lr}
 800b6aa:	ed2d 8b04 	vpush	{d8-d9}
 800b6ae:	eeb0 8b40 	vmov.f64	d8, d0
 800b6b2:	f000 f8b1 	bl	800b818 <__ieee754_sqrt>
 800b6b6:	eeb4 8b48 	vcmp.f64	d8, d8
 800b6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6be:	d60c      	bvs.n	800b6da <sqrt+0x32>
 800b6c0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800b6e0 <sqrt+0x38>
 800b6c4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800b6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6cc:	d505      	bpl.n	800b6da <sqrt+0x32>
 800b6ce:	f7ff ff9b 	bl	800b608 <__errno>
 800b6d2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800b6d6:	2321      	movs	r3, #33	@ 0x21
 800b6d8:	6003      	str	r3, [r0, #0]
 800b6da:	ecbd 8b04 	vpop	{d8-d9}
 800b6de:	bd08      	pop	{r3, pc}
	...

0800b6e8 <cos>:
 800b6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ea:	eeb0 7b40 	vmov.f64	d7, d0
 800b6ee:	ee17 3a90 	vmov	r3, s15
 800b6f2:	4a21      	ldr	r2, [pc, #132]	@ (800b778 <cos+0x90>)
 800b6f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d806      	bhi.n	800b70a <cos+0x22>
 800b6fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800b770 <cos+0x88>
 800b700:	b005      	add	sp, #20
 800b702:	f85d eb04 	ldr.w	lr, [sp], #4
 800b706:	f000 b903 	b.w	800b910 <__kernel_cos>
 800b70a:	4a1c      	ldr	r2, [pc, #112]	@ (800b77c <cos+0x94>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d904      	bls.n	800b71a <cos+0x32>
 800b710:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b714:	b005      	add	sp, #20
 800b716:	f85d fb04 	ldr.w	pc, [sp], #4
 800b71a:	4668      	mov	r0, sp
 800b71c:	f000 fac4 	bl	800bca8 <__ieee754_rem_pio2>
 800b720:	f000 0003 	and.w	r0, r0, #3
 800b724:	2801      	cmp	r0, #1
 800b726:	d009      	beq.n	800b73c <cos+0x54>
 800b728:	2802      	cmp	r0, #2
 800b72a:	d010      	beq.n	800b74e <cos+0x66>
 800b72c:	b9b0      	cbnz	r0, 800b75c <cos+0x74>
 800b72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b732:	ed9d 0b00 	vldr	d0, [sp]
 800b736:	f000 f8eb 	bl	800b910 <__kernel_cos>
 800b73a:	e7eb      	b.n	800b714 <cos+0x2c>
 800b73c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b740:	ed9d 0b00 	vldr	d0, [sp]
 800b744:	f000 f94c 	bl	800b9e0 <__kernel_sin>
 800b748:	eeb1 0b40 	vneg.f64	d0, d0
 800b74c:	e7e2      	b.n	800b714 <cos+0x2c>
 800b74e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b752:	ed9d 0b00 	vldr	d0, [sp]
 800b756:	f000 f8db 	bl	800b910 <__kernel_cos>
 800b75a:	e7f5      	b.n	800b748 <cos+0x60>
 800b75c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b760:	ed9d 0b00 	vldr	d0, [sp]
 800b764:	2001      	movs	r0, #1
 800b766:	f000 f93b 	bl	800b9e0 <__kernel_sin>
 800b76a:	e7d3      	b.n	800b714 <cos+0x2c>
 800b76c:	f3af 8000 	nop.w
	...
 800b778:	3fe921fb 	.word	0x3fe921fb
 800b77c:	7fefffff 	.word	0x7fefffff

0800b780 <sin>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	eeb0 7b40 	vmov.f64	d7, d0
 800b786:	ee17 3a90 	vmov	r3, s15
 800b78a:	4a21      	ldr	r2, [pc, #132]	@ (800b810 <sin+0x90>)
 800b78c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b790:	4293      	cmp	r3, r2
 800b792:	d807      	bhi.n	800b7a4 <sin+0x24>
 800b794:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800b808 <sin+0x88>
 800b798:	2000      	movs	r0, #0
 800b79a:	b005      	add	sp, #20
 800b79c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a0:	f000 b91e 	b.w	800b9e0 <__kernel_sin>
 800b7a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b814 <sin+0x94>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d904      	bls.n	800b7b4 <sin+0x34>
 800b7aa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b7ae:	b005      	add	sp, #20
 800b7b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7b4:	4668      	mov	r0, sp
 800b7b6:	f000 fa77 	bl	800bca8 <__ieee754_rem_pio2>
 800b7ba:	f000 0003 	and.w	r0, r0, #3
 800b7be:	2801      	cmp	r0, #1
 800b7c0:	d00a      	beq.n	800b7d8 <sin+0x58>
 800b7c2:	2802      	cmp	r0, #2
 800b7c4:	d00f      	beq.n	800b7e6 <sin+0x66>
 800b7c6:	b9c0      	cbnz	r0, 800b7fa <sin+0x7a>
 800b7c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7cc:	ed9d 0b00 	vldr	d0, [sp]
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	f000 f905 	bl	800b9e0 <__kernel_sin>
 800b7d6:	e7ea      	b.n	800b7ae <sin+0x2e>
 800b7d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7dc:	ed9d 0b00 	vldr	d0, [sp]
 800b7e0:	f000 f896 	bl	800b910 <__kernel_cos>
 800b7e4:	e7e3      	b.n	800b7ae <sin+0x2e>
 800b7e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7ea:	ed9d 0b00 	vldr	d0, [sp]
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	f000 f8f6 	bl	800b9e0 <__kernel_sin>
 800b7f4:	eeb1 0b40 	vneg.f64	d0, d0
 800b7f8:	e7d9      	b.n	800b7ae <sin+0x2e>
 800b7fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b7fe:	ed9d 0b00 	vldr	d0, [sp]
 800b802:	f000 f885 	bl	800b910 <__kernel_cos>
 800b806:	e7f5      	b.n	800b7f4 <sin+0x74>
	...
 800b810:	3fe921fb 	.word	0x3fe921fb
 800b814:	7fefffff 	.word	0x7fefffff

0800b818 <__ieee754_sqrt>:
 800b818:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800b81c:	4770      	bx	lr
	...

0800b820 <floor>:
 800b820:	ee10 3a90 	vmov	r3, s1
 800b824:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800b828:	ee10 2a10 	vmov	r2, s0
 800b82c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800b830:	2913      	cmp	r1, #19
 800b832:	b530      	push	{r4, r5, lr}
 800b834:	4615      	mov	r5, r2
 800b836:	dc33      	bgt.n	800b8a0 <floor+0x80>
 800b838:	2900      	cmp	r1, #0
 800b83a:	da18      	bge.n	800b86e <floor+0x4e>
 800b83c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800b900 <floor+0xe0>
 800b840:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84c:	dd0a      	ble.n	800b864 <floor+0x44>
 800b84e:	2b00      	cmp	r3, #0
 800b850:	da50      	bge.n	800b8f4 <floor+0xd4>
 800b852:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b856:	4313      	orrs	r3, r2
 800b858:	2200      	movs	r2, #0
 800b85a:	4293      	cmp	r3, r2
 800b85c:	4b2a      	ldr	r3, [pc, #168]	@ (800b908 <floor+0xe8>)
 800b85e:	bf08      	it	eq
 800b860:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	ec41 0b10 	vmov	d0, r0, r1
 800b86c:	e01f      	b.n	800b8ae <floor+0x8e>
 800b86e:	4827      	ldr	r0, [pc, #156]	@ (800b90c <floor+0xec>)
 800b870:	4108      	asrs	r0, r1
 800b872:	ea03 0400 	and.w	r4, r3, r0
 800b876:	4314      	orrs	r4, r2
 800b878:	d019      	beq.n	800b8ae <floor+0x8e>
 800b87a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b900 <floor+0xe0>
 800b87e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b882:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b88a:	ddeb      	ble.n	800b864 <floor+0x44>
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	bfbe      	ittt	lt
 800b890:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800b894:	410a      	asrlt	r2, r1
 800b896:	189b      	addlt	r3, r3, r2
 800b898:	ea23 0300 	bic.w	r3, r3, r0
 800b89c:	2200      	movs	r2, #0
 800b89e:	e7e1      	b.n	800b864 <floor+0x44>
 800b8a0:	2933      	cmp	r1, #51	@ 0x33
 800b8a2:	dd05      	ble.n	800b8b0 <floor+0x90>
 800b8a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b8a8:	d101      	bne.n	800b8ae <floor+0x8e>
 800b8aa:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b8ae:	bd30      	pop	{r4, r5, pc}
 800b8b0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	40e0      	lsrs	r0, r4
 800b8ba:	4210      	tst	r0, r2
 800b8bc:	d0f7      	beq.n	800b8ae <floor+0x8e>
 800b8be:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b900 <floor+0xe0>
 800b8c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b8c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ce:	ddc9      	ble.n	800b864 <floor+0x44>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	da02      	bge.n	800b8da <floor+0xba>
 800b8d4:	2914      	cmp	r1, #20
 800b8d6:	d103      	bne.n	800b8e0 <floor+0xc0>
 800b8d8:	3301      	adds	r3, #1
 800b8da:	ea22 0200 	bic.w	r2, r2, r0
 800b8de:	e7c1      	b.n	800b864 <floor+0x44>
 800b8e0:	2401      	movs	r4, #1
 800b8e2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800b8e6:	fa04 f101 	lsl.w	r1, r4, r1
 800b8ea:	440a      	add	r2, r1
 800b8ec:	42aa      	cmp	r2, r5
 800b8ee:	bf38      	it	cc
 800b8f0:	191b      	addcc	r3, r3, r4
 800b8f2:	e7f2      	b.n	800b8da <floor+0xba>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	e7b4      	b.n	800b864 <floor+0x44>
 800b8fa:	bf00      	nop
 800b8fc:	f3af 8000 	nop.w
 800b900:	8800759c 	.word	0x8800759c
 800b904:	7e37e43c 	.word	0x7e37e43c
 800b908:	bff00000 	.word	0xbff00000
 800b90c:	000fffff 	.word	0x000fffff

0800b910 <__kernel_cos>:
 800b910:	eeb0 5b40 	vmov.f64	d5, d0
 800b914:	ee15 1a90 	vmov	r1, s11
 800b918:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800b91c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800b920:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800b924:	d204      	bcs.n	800b930 <__kernel_cos+0x20>
 800b926:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800b92a:	ee17 3a90 	vmov	r3, s15
 800b92e:	b343      	cbz	r3, 800b982 <__kernel_cos+0x72>
 800b930:	ee25 6b05 	vmul.f64	d6, d5, d5
 800b934:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800b938:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800b9a8 <__kernel_cos+0x98>
 800b93c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800b9b0 <__kernel_cos+0xa0>
 800b940:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b944:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b9b8 <__kernel_cos+0xa8>
 800b948:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b94c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800b9c0 <__kernel_cos+0xb0>
 800b950:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b954:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b9c8 <__kernel_cos+0xb8>
 800b958:	4b1f      	ldr	r3, [pc, #124]	@ (800b9d8 <__kernel_cos+0xc8>)
 800b95a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b95e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800b9d0 <__kernel_cos+0xc0>
 800b962:	4299      	cmp	r1, r3
 800b964:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b968:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800b96c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800b970:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b974:	eea6 1b04 	vfma.f64	d1, d6, d4
 800b978:	d804      	bhi.n	800b984 <__kernel_cos+0x74>
 800b97a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b97e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b982:	4770      	bx	lr
 800b984:	4b15      	ldr	r3, [pc, #84]	@ (800b9dc <__kernel_cos+0xcc>)
 800b986:	4299      	cmp	r1, r3
 800b988:	d809      	bhi.n	800b99e <__kernel_cos+0x8e>
 800b98a:	2200      	movs	r2, #0
 800b98c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800b990:	ec43 2b16 	vmov	d6, r2, r3
 800b994:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b998:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b99c:	e7ed      	b.n	800b97a <__kernel_cos+0x6a>
 800b99e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800b9a2:	e7f7      	b.n	800b994 <__kernel_cos+0x84>
 800b9a4:	f3af 8000 	nop.w
 800b9a8:	be8838d4 	.word	0xbe8838d4
 800b9ac:	bda8fae9 	.word	0xbda8fae9
 800b9b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b9b4:	3e21ee9e 	.word	0x3e21ee9e
 800b9b8:	809c52ad 	.word	0x809c52ad
 800b9bc:	be927e4f 	.word	0xbe927e4f
 800b9c0:	19cb1590 	.word	0x19cb1590
 800b9c4:	3efa01a0 	.word	0x3efa01a0
 800b9c8:	16c15177 	.word	0x16c15177
 800b9cc:	bf56c16c 	.word	0xbf56c16c
 800b9d0:	5555554c 	.word	0x5555554c
 800b9d4:	3fa55555 	.word	0x3fa55555
 800b9d8:	3fd33332 	.word	0x3fd33332
 800b9dc:	3fe90000 	.word	0x3fe90000

0800b9e0 <__kernel_sin>:
 800b9e0:	ee10 3a90 	vmov	r3, s1
 800b9e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9e8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b9ec:	d204      	bcs.n	800b9f8 <__kernel_sin+0x18>
 800b9ee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b9f2:	ee17 3a90 	vmov	r3, s15
 800b9f6:	b35b      	cbz	r3, 800ba50 <__kernel_sin+0x70>
 800b9f8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b9fc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ba00:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800ba58 <__kernel_sin+0x78>
 800ba04:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800ba60 <__kernel_sin+0x80>
 800ba08:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ba0c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800ba68 <__kernel_sin+0x88>
 800ba10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ba14:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800ba70 <__kernel_sin+0x90>
 800ba18:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ba1c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800ba78 <__kernel_sin+0x98>
 800ba20:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ba24:	b930      	cbnz	r0, 800ba34 <__kernel_sin+0x54>
 800ba26:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800ba80 <__kernel_sin+0xa0>
 800ba2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ba2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ba32:	4770      	bx	lr
 800ba34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ba38:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800ba3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ba40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ba44:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800ba88 <__kernel_sin+0xa8>
 800ba48:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ba4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	f3af 8000 	nop.w
 800ba58:	5acfd57c 	.word	0x5acfd57c
 800ba5c:	3de5d93a 	.word	0x3de5d93a
 800ba60:	8a2b9ceb 	.word	0x8a2b9ceb
 800ba64:	be5ae5e6 	.word	0xbe5ae5e6
 800ba68:	57b1fe7d 	.word	0x57b1fe7d
 800ba6c:	3ec71de3 	.word	0x3ec71de3
 800ba70:	19c161d5 	.word	0x19c161d5
 800ba74:	bf2a01a0 	.word	0xbf2a01a0
 800ba78:	1110f8a6 	.word	0x1110f8a6
 800ba7c:	3f811111 	.word	0x3f811111
 800ba80:	55555549 	.word	0x55555549
 800ba84:	bfc55555 	.word	0xbfc55555
 800ba88:	55555549 	.word	0x55555549
 800ba8c:	3fc55555 	.word	0x3fc55555

0800ba90 <__ieee754_fmod>:
 800ba90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba94:	ed8d 1b00 	vstr	d1, [sp]
 800ba98:	e9dd 6500 	ldrd	r6, r5, [sp]
 800ba9c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800baa0:	ea56 0307 	orrs.w	r3, r6, r7
 800baa4:	46b6      	mov	lr, r6
 800baa6:	d00d      	beq.n	800bac4 <__ieee754_fmod+0x34>
 800baa8:	ee10 ca90 	vmov	ip, s1
 800baac:	4b78      	ldr	r3, [pc, #480]	@ (800bc90 <__ieee754_fmod+0x200>)
 800baae:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800bab2:	4598      	cmp	r8, r3
 800bab4:	d806      	bhi.n	800bac4 <__ieee754_fmod+0x34>
 800bab6:	4273      	negs	r3, r6
 800bab8:	4a76      	ldr	r2, [pc, #472]	@ (800bc94 <__ieee754_fmod+0x204>)
 800baba:	4333      	orrs	r3, r6
 800babc:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d908      	bls.n	800bad6 <__ieee754_fmod+0x46>
 800bac4:	ed9d 7b00 	vldr	d7, [sp]
 800bac8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bacc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800bad0:	b003      	add	sp, #12
 800bad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bad6:	ee10 9a10 	vmov	r9, s0
 800bada:	45b8      	cmp	r8, r7
 800badc:	4649      	mov	r1, r9
 800bade:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800bae2:	dc09      	bgt.n	800baf8 <__ieee754_fmod+0x68>
 800bae4:	dbf4      	blt.n	800bad0 <__ieee754_fmod+0x40>
 800bae6:	454e      	cmp	r6, r9
 800bae8:	d8f2      	bhi.n	800bad0 <__ieee754_fmod+0x40>
 800baea:	d105      	bne.n	800baf8 <__ieee754_fmod+0x68>
 800baec:	4b6a      	ldr	r3, [pc, #424]	@ (800bc98 <__ieee754_fmod+0x208>)
 800baee:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800baf2:	ed93 0b00 	vldr	d0, [r3]
 800baf6:	e7eb      	b.n	800bad0 <__ieee754_fmod+0x40>
 800baf8:	4a66      	ldr	r2, [pc, #408]	@ (800bc94 <__ieee754_fmod+0x204>)
 800bafa:	ea1c 0f02 	tst.w	ip, r2
 800bafe:	d14a      	bne.n	800bb96 <__ieee754_fmod+0x106>
 800bb00:	f1b8 0f00 	cmp.w	r8, #0
 800bb04:	d13f      	bne.n	800bb86 <__ieee754_fmod+0xf6>
 800bb06:	4865      	ldr	r0, [pc, #404]	@ (800bc9c <__ieee754_fmod+0x20c>)
 800bb08:	464b      	mov	r3, r9
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	dc38      	bgt.n	800bb80 <__ieee754_fmod+0xf0>
 800bb0e:	4215      	tst	r5, r2
 800bb10:	d150      	bne.n	800bbb4 <__ieee754_fmod+0x124>
 800bb12:	2f00      	cmp	r7, #0
 800bb14:	d147      	bne.n	800bba6 <__ieee754_fmod+0x116>
 800bb16:	4a61      	ldr	r2, [pc, #388]	@ (800bc9c <__ieee754_fmod+0x20c>)
 800bb18:	4633      	mov	r3, r6
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	dc40      	bgt.n	800bba0 <__ieee754_fmod+0x110>
 800bb1e:	4b60      	ldr	r3, [pc, #384]	@ (800bca0 <__ieee754_fmod+0x210>)
 800bb20:	4298      	cmp	r0, r3
 800bb22:	db4b      	blt.n	800bbbc <__ieee754_fmod+0x12c>
 800bb24:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800bb28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb2c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800bca0 <__ieee754_fmod+0x210>
 800bb30:	4562      	cmp	r2, ip
 800bb32:	db58      	blt.n	800bbe6 <__ieee754_fmod+0x156>
 800bb34:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bb38:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800bb3c:	1a80      	subs	r0, r0, r2
 800bb3e:	1b5e      	subs	r6, r3, r5
 800bb40:	eba1 070e 	sub.w	r7, r1, lr
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d164      	bne.n	800bc12 <__ieee754_fmod+0x182>
 800bb48:	4571      	cmp	r1, lr
 800bb4a:	bf38      	it	cc
 800bb4c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800bb50:	2e00      	cmp	r6, #0
 800bb52:	bfa4      	itt	ge
 800bb54:	4639      	movge	r1, r7
 800bb56:	4633      	movge	r3, r6
 800bb58:	ea53 0001 	orrs.w	r0, r3, r1
 800bb5c:	d0c6      	beq.n	800baec <__ieee754_fmod+0x5c>
 800bb5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb62:	db6b      	blt.n	800bc3c <__ieee754_fmod+0x1ac>
 800bb64:	484e      	ldr	r0, [pc, #312]	@ (800bca0 <__ieee754_fmod+0x210>)
 800bb66:	4282      	cmp	r2, r0
 800bb68:	db6e      	blt.n	800bc48 <__ieee754_fmod+0x1b8>
 800bb6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bb6e:	4323      	orrs	r3, r4
 800bb70:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800bb74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb78:	460c      	mov	r4, r1
 800bb7a:	ec45 4b10 	vmov	d0, r4, r5
 800bb7e:	e7a7      	b.n	800bad0 <__ieee754_fmod+0x40>
 800bb80:	3801      	subs	r0, #1
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	e7c1      	b.n	800bb0a <__ieee754_fmod+0x7a>
 800bb86:	4846      	ldr	r0, [pc, #280]	@ (800bca0 <__ieee754_fmod+0x210>)
 800bb88:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	ddbe      	ble.n	800bb0e <__ieee754_fmod+0x7e>
 800bb90:	3801      	subs	r0, #1
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	e7fa      	b.n	800bb8c <__ieee754_fmod+0xfc>
 800bb96:	ea4f 5028 	mov.w	r0, r8, asr #20
 800bb9a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800bb9e:	e7b6      	b.n	800bb0e <__ieee754_fmod+0x7e>
 800bba0:	3a01      	subs	r2, #1
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	e7b9      	b.n	800bb1a <__ieee754_fmod+0x8a>
 800bba6:	4a3e      	ldr	r2, [pc, #248]	@ (800bca0 <__ieee754_fmod+0x210>)
 800bba8:	02fb      	lsls	r3, r7, #11
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	ddb7      	ble.n	800bb1e <__ieee754_fmod+0x8e>
 800bbae:	3a01      	subs	r2, #1
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	e7fa      	b.n	800bbaa <__ieee754_fmod+0x11a>
 800bbb4:	153a      	asrs	r2, r7, #20
 800bbb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bbba:	e7b0      	b.n	800bb1e <__ieee754_fmod+0x8e>
 800bbbc:	eba3 0c00 	sub.w	ip, r3, r0
 800bbc0:	f1bc 0f1f 	cmp.w	ip, #31
 800bbc4:	dc09      	bgt.n	800bbda <__ieee754_fmod+0x14a>
 800bbc6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800bbca:	fa08 f10c 	lsl.w	r1, r8, ip
 800bbce:	fa29 f303 	lsr.w	r3, r9, r3
 800bbd2:	430b      	orrs	r3, r1
 800bbd4:	fa09 f10c 	lsl.w	r1, r9, ip
 800bbd8:	e7a8      	b.n	800bb2c <__ieee754_fmod+0x9c>
 800bbda:	4b32      	ldr	r3, [pc, #200]	@ (800bca4 <__ieee754_fmod+0x214>)
 800bbdc:	1a1b      	subs	r3, r3, r0
 800bbde:	fa09 f303 	lsl.w	r3, r9, r3
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	e7a2      	b.n	800bb2c <__ieee754_fmod+0x9c>
 800bbe6:	ebac 0c02 	sub.w	ip, ip, r2
 800bbea:	f1bc 0f1f 	cmp.w	ip, #31
 800bbee:	dc09      	bgt.n	800bc04 <__ieee754_fmod+0x174>
 800bbf0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800bbf4:	fa07 f70c 	lsl.w	r7, r7, ip
 800bbf8:	fa26 f505 	lsr.w	r5, r6, r5
 800bbfc:	433d      	orrs	r5, r7
 800bbfe:	fa06 fe0c 	lsl.w	lr, r6, ip
 800bc02:	e79b      	b.n	800bb3c <__ieee754_fmod+0xac>
 800bc04:	4d27      	ldr	r5, [pc, #156]	@ (800bca4 <__ieee754_fmod+0x214>)
 800bc06:	1aad      	subs	r5, r5, r2
 800bc08:	fa06 f505 	lsl.w	r5, r6, r5
 800bc0c:	f04f 0e00 	mov.w	lr, #0
 800bc10:	e794      	b.n	800bb3c <__ieee754_fmod+0xac>
 800bc12:	4571      	cmp	r1, lr
 800bc14:	bf38      	it	cc
 800bc16:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	da05      	bge.n	800bc2a <__ieee754_fmod+0x19a>
 800bc1e:	0fce      	lsrs	r6, r1, #31
 800bc20:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800bc24:	0049      	lsls	r1, r1, #1
 800bc26:	3801      	subs	r0, #1
 800bc28:	e789      	b.n	800bb3e <__ieee754_fmod+0xae>
 800bc2a:	ea56 0307 	orrs.w	r3, r6, r7
 800bc2e:	f43f af5d 	beq.w	800baec <__ieee754_fmod+0x5c>
 800bc32:	0ffb      	lsrs	r3, r7, #31
 800bc34:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800bc38:	0079      	lsls	r1, r7, #1
 800bc3a:	e7f4      	b.n	800bc26 <__ieee754_fmod+0x196>
 800bc3c:	0fc8      	lsrs	r0, r1, #31
 800bc3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bc42:	0049      	lsls	r1, r1, #1
 800bc44:	3a01      	subs	r2, #1
 800bc46:	e78a      	b.n	800bb5e <__ieee754_fmod+0xce>
 800bc48:	1a80      	subs	r0, r0, r2
 800bc4a:	2814      	cmp	r0, #20
 800bc4c:	dc0c      	bgt.n	800bc68 <__ieee754_fmod+0x1d8>
 800bc4e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bc52:	fa03 f202 	lsl.w	r2, r3, r2
 800bc56:	40c1      	lsrs	r1, r0
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	4103      	asrs	r3, r0
 800bc5c:	ea43 0104 	orr.w	r1, r3, r4
 800bc60:	4610      	mov	r0, r2
 800bc62:	ec41 0b10 	vmov	d0, r0, r1
 800bc66:	e733      	b.n	800bad0 <__ieee754_fmod+0x40>
 800bc68:	281f      	cmp	r0, #31
 800bc6a:	dc07      	bgt.n	800bc7c <__ieee754_fmod+0x1ec>
 800bc6c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bc70:	40c1      	lsrs	r1, r0
 800bc72:	fa03 f202 	lsl.w	r2, r3, r2
 800bc76:	430a      	orrs	r2, r1
 800bc78:	4623      	mov	r3, r4
 800bc7a:	e7ef      	b.n	800bc5c <__ieee754_fmod+0x1cc>
 800bc7c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800bc80:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800bc84:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800bc88:	32e2      	adds	r2, #226	@ 0xe2
 800bc8a:	fa43 f202 	asr.w	r2, r3, r2
 800bc8e:	e7f3      	b.n	800bc78 <__ieee754_fmod+0x1e8>
 800bc90:	7fefffff 	.word	0x7fefffff
 800bc94:	7ff00000 	.word	0x7ff00000
 800bc98:	0800c600 	.word	0x0800c600
 800bc9c:	fffffbed 	.word	0xfffffbed
 800bca0:	fffffc02 	.word	0xfffffc02
 800bca4:	fffffbe2 	.word	0xfffffbe2

0800bca8 <__ieee754_rem_pio2>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	eeb0 7b40 	vmov.f64	d7, d0
 800bcae:	ee17 5a90 	vmov	r5, s15
 800bcb2:	4b99      	ldr	r3, [pc, #612]	@ (800bf18 <__ieee754_rem_pio2+0x270>)
 800bcb4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bcb8:	429e      	cmp	r6, r3
 800bcba:	b088      	sub	sp, #32
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	d807      	bhi.n	800bcd0 <__ieee754_rem_pio2+0x28>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	ed84 0b00 	vstr	d0, [r4]
 800bcc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bccc:	2000      	movs	r0, #0
 800bcce:	e01b      	b.n	800bd08 <__ieee754_rem_pio2+0x60>
 800bcd0:	4b92      	ldr	r3, [pc, #584]	@ (800bf1c <__ieee754_rem_pio2+0x274>)
 800bcd2:	429e      	cmp	r6, r3
 800bcd4:	d83b      	bhi.n	800bd4e <__ieee754_rem_pio2+0xa6>
 800bcd6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800bcda:	2d00      	cmp	r5, #0
 800bcdc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800bed8 <__ieee754_rem_pio2+0x230>
 800bce0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800bce4:	dd19      	ble.n	800bd1a <__ieee754_rem_pio2+0x72>
 800bce6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bcea:	429e      	cmp	r6, r3
 800bcec:	d00e      	beq.n	800bd0c <__ieee754_rem_pio2+0x64>
 800bcee:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800bee0 <__ieee754_rem_pio2+0x238>
 800bcf2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800bcf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bcfa:	ed84 6b00 	vstr	d6, [r4]
 800bcfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bd02:	ed84 7b02 	vstr	d7, [r4, #8]
 800bd06:	2001      	movs	r0, #1
 800bd08:	b008      	add	sp, #32
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800bee8 <__ieee754_rem_pio2+0x240>
 800bd10:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800bef0 <__ieee754_rem_pio2+0x248>
 800bd14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd18:	e7eb      	b.n	800bcf2 <__ieee754_rem_pio2+0x4a>
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800bd20:	d00e      	beq.n	800bd40 <__ieee754_rem_pio2+0x98>
 800bd22:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800bee0 <__ieee754_rem_pio2+0x238>
 800bd26:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bd2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd2e:	ed84 6b00 	vstr	d6, [r4]
 800bd32:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3a:	ed84 7b02 	vstr	d7, [r4, #8]
 800bd3e:	e7e3      	b.n	800bd08 <__ieee754_rem_pio2+0x60>
 800bd40:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800bee8 <__ieee754_rem_pio2+0x240>
 800bd44:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800bef0 <__ieee754_rem_pio2+0x248>
 800bd48:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bd4c:	e7eb      	b.n	800bd26 <__ieee754_rem_pio2+0x7e>
 800bd4e:	4b74      	ldr	r3, [pc, #464]	@ (800bf20 <__ieee754_rem_pio2+0x278>)
 800bd50:	429e      	cmp	r6, r3
 800bd52:	d870      	bhi.n	800be36 <__ieee754_rem_pio2+0x18e>
 800bd54:	f000 f8ec 	bl	800bf30 <fabs>
 800bd58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800bd5c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bef8 <__ieee754_rem_pio2+0x250>
 800bd60:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bd64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bd68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bd6c:	ee17 0a90 	vmov	r0, s15
 800bd70:	eeb1 4b45 	vneg.f64	d4, d5
 800bd74:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800bed8 <__ieee754_rem_pio2+0x230>
 800bd78:	eea5 0b47 	vfms.f64	d0, d5, d7
 800bd7c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800bee0 <__ieee754_rem_pio2+0x238>
 800bd80:	281f      	cmp	r0, #31
 800bd82:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bd86:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bd8a:	dc05      	bgt.n	800bd98 <__ieee754_rem_pio2+0xf0>
 800bd8c:	4b65      	ldr	r3, [pc, #404]	@ (800bf24 <__ieee754_rem_pio2+0x27c>)
 800bd8e:	1e42      	subs	r2, r0, #1
 800bd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd94:	42b3      	cmp	r3, r6
 800bd96:	d109      	bne.n	800bdac <__ieee754_rem_pio2+0x104>
 800bd98:	ee16 3a90 	vmov	r3, s13
 800bd9c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bda0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800bda4:	2b10      	cmp	r3, #16
 800bda6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800bdaa:	dc02      	bgt.n	800bdb2 <__ieee754_rem_pio2+0x10a>
 800bdac:	ed84 6b00 	vstr	d6, [r4]
 800bdb0:	e01a      	b.n	800bde8 <__ieee754_rem_pio2+0x140>
 800bdb2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800bee8 <__ieee754_rem_pio2+0x240>
 800bdb6:	eeb0 6b40 	vmov.f64	d6, d0
 800bdba:	eea4 6b03 	vfma.f64	d6, d4, d3
 800bdbe:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bdc2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bdc6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800bef0 <__ieee754_rem_pio2+0x248>
 800bdca:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800bdce:	ee36 3b47 	vsub.f64	d3, d6, d7
 800bdd2:	ee13 3a90 	vmov	r3, s7
 800bdd6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	2b31      	cmp	r3, #49	@ 0x31
 800bdde:	dc17      	bgt.n	800be10 <__ieee754_rem_pio2+0x168>
 800bde0:	eeb0 0b46 	vmov.f64	d0, d6
 800bde4:	ed84 3b00 	vstr	d3, [r4]
 800bde8:	ed94 6b00 	vldr	d6, [r4]
 800bdec:	2d00      	cmp	r5, #0
 800bdee:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bdf2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bdf6:	ed84 0b02 	vstr	d0, [r4, #8]
 800bdfa:	da85      	bge.n	800bd08 <__ieee754_rem_pio2+0x60>
 800bdfc:	eeb1 6b46 	vneg.f64	d6, d6
 800be00:	eeb1 0b40 	vneg.f64	d0, d0
 800be04:	ed84 6b00 	vstr	d6, [r4]
 800be08:	ed84 0b02 	vstr	d0, [r4, #8]
 800be0c:	4240      	negs	r0, r0
 800be0e:	e77b      	b.n	800bd08 <__ieee754_rem_pio2+0x60>
 800be10:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800bf00 <__ieee754_rem_pio2+0x258>
 800be14:	eeb0 0b46 	vmov.f64	d0, d6
 800be18:	eea4 0b07 	vfma.f64	d0, d4, d7
 800be1c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800be20:	eea4 6b07 	vfma.f64	d6, d4, d7
 800be24:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800bf08 <__ieee754_rem_pio2+0x260>
 800be28:	eeb0 7b46 	vmov.f64	d7, d6
 800be2c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800be30:	ee30 6b47 	vsub.f64	d6, d0, d7
 800be34:	e7ba      	b.n	800bdac <__ieee754_rem_pio2+0x104>
 800be36:	4b3c      	ldr	r3, [pc, #240]	@ (800bf28 <__ieee754_rem_pio2+0x280>)
 800be38:	429e      	cmp	r6, r3
 800be3a:	d906      	bls.n	800be4a <__ieee754_rem_pio2+0x1a2>
 800be3c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800be40:	ed80 7b02 	vstr	d7, [r0, #8]
 800be44:	ed80 7b00 	vstr	d7, [r0]
 800be48:	e740      	b.n	800bccc <__ieee754_rem_pio2+0x24>
 800be4a:	ee10 3a10 	vmov	r3, s0
 800be4e:	1532      	asrs	r2, r6, #20
 800be50:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800be54:	4618      	mov	r0, r3
 800be56:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800be5a:	ec41 0b17 	vmov	d7, r0, r1
 800be5e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800be62:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800bf10 <__ieee754_rem_pio2+0x268>
 800be66:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800be6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800be6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800be72:	ee27 7b05 	vmul.f64	d7, d7, d5
 800be76:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800be7a:	a808      	add	r0, sp, #32
 800be7c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800be80:	ee37 7b46 	vsub.f64	d7, d7, d6
 800be84:	ed8d 6b04 	vstr	d6, [sp, #16]
 800be88:	ee27 7b05 	vmul.f64	d7, d7, d5
 800be8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be90:	2103      	movs	r1, #3
 800be92:	ed30 7b02 	vldmdb	r0!, {d7}
 800be96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be9e:	460b      	mov	r3, r1
 800bea0:	f101 31ff 	add.w	r1, r1, #4294967295
 800bea4:	d0f5      	beq.n	800be92 <__ieee754_rem_pio2+0x1ea>
 800bea6:	4921      	ldr	r1, [pc, #132]	@ (800bf2c <__ieee754_rem_pio2+0x284>)
 800bea8:	9101      	str	r1, [sp, #4]
 800beaa:	2102      	movs	r1, #2
 800beac:	9100      	str	r1, [sp, #0]
 800beae:	a802      	add	r0, sp, #8
 800beb0:	4621      	mov	r1, r4
 800beb2:	f000 f845 	bl	800bf40 <__kernel_rem_pio2>
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	f6bf af26 	bge.w	800bd08 <__ieee754_rem_pio2+0x60>
 800bebc:	ed94 7b00 	vldr	d7, [r4]
 800bec0:	eeb1 7b47 	vneg.f64	d7, d7
 800bec4:	ed84 7b00 	vstr	d7, [r4]
 800bec8:	ed94 7b02 	vldr	d7, [r4, #8]
 800becc:	eeb1 7b47 	vneg.f64	d7, d7
 800bed0:	ed84 7b02 	vstr	d7, [r4, #8]
 800bed4:	e79a      	b.n	800be0c <__ieee754_rem_pio2+0x164>
 800bed6:	bf00      	nop
 800bed8:	54400000 	.word	0x54400000
 800bedc:	3ff921fb 	.word	0x3ff921fb
 800bee0:	1a626331 	.word	0x1a626331
 800bee4:	3dd0b461 	.word	0x3dd0b461
 800bee8:	1a600000 	.word	0x1a600000
 800beec:	3dd0b461 	.word	0x3dd0b461
 800bef0:	2e037073 	.word	0x2e037073
 800bef4:	3ba3198a 	.word	0x3ba3198a
 800bef8:	6dc9c883 	.word	0x6dc9c883
 800befc:	3fe45f30 	.word	0x3fe45f30
 800bf00:	2e000000 	.word	0x2e000000
 800bf04:	3ba3198a 	.word	0x3ba3198a
 800bf08:	252049c1 	.word	0x252049c1
 800bf0c:	397b839a 	.word	0x397b839a
 800bf10:	00000000 	.word	0x00000000
 800bf14:	41700000 	.word	0x41700000
 800bf18:	3fe921fb 	.word	0x3fe921fb
 800bf1c:	4002d97b 	.word	0x4002d97b
 800bf20:	413921fb 	.word	0x413921fb
 800bf24:	0800c610 	.word	0x0800c610
 800bf28:	7fefffff 	.word	0x7fefffff
 800bf2c:	0800c690 	.word	0x0800c690

0800bf30 <fabs>:
 800bf30:	ec51 0b10 	vmov	r0, r1, d0
 800bf34:	4602      	mov	r2, r0
 800bf36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bf3a:	ec43 2b10 	vmov	d0, r2, r3
 800bf3e:	4770      	bx	lr

0800bf40 <__kernel_rem_pio2>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	ed2d 8b06 	vpush	{d8-d10}
 800bf48:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800bf4c:	469b      	mov	fp, r3
 800bf4e:	9001      	str	r0, [sp, #4]
 800bf50:	4bbb      	ldr	r3, [pc, #748]	@ (800c240 <__kernel_rem_pio2+0x300>)
 800bf52:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800bf54:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800bf58:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800bf5c:	f112 0f14 	cmn.w	r2, #20
 800bf60:	bfa8      	it	ge
 800bf62:	1ed3      	subge	r3, r2, #3
 800bf64:	f10b 3aff 	add.w	sl, fp, #4294967295
 800bf68:	bfb8      	it	lt
 800bf6a:	2300      	movlt	r3, #0
 800bf6c:	f06f 0517 	mvn.w	r5, #23
 800bf70:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800c228 <__kernel_rem_pio2+0x2e8>
 800bf74:	bfa4      	itt	ge
 800bf76:	2018      	movge	r0, #24
 800bf78:	fb93 f3f0 	sdivge	r3, r3, r0
 800bf7c:	fb03 5505 	mla	r5, r3, r5, r5
 800bf80:	eba3 040a 	sub.w	r4, r3, sl
 800bf84:	4415      	add	r5, r2
 800bf86:	460f      	mov	r7, r1
 800bf88:	eb09 060a 	add.w	r6, r9, sl
 800bf8c:	a81a      	add	r0, sp, #104	@ 0x68
 800bf8e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800bf92:	2200      	movs	r2, #0
 800bf94:	42b2      	cmp	r2, r6
 800bf96:	dd0e      	ble.n	800bfb6 <__kernel_rem_pio2+0x76>
 800bf98:	aa1a      	add	r2, sp, #104	@ 0x68
 800bf9a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800bf9e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800bfa2:	2600      	movs	r6, #0
 800bfa4:	454e      	cmp	r6, r9
 800bfa6:	dc25      	bgt.n	800bff4 <__kernel_rem_pio2+0xb4>
 800bfa8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800c228 <__kernel_rem_pio2+0x2e8>
 800bfac:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bfb0:	4614      	mov	r4, r2
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	e015      	b.n	800bfe2 <__kernel_rem_pio2+0xa2>
 800bfb6:	42d4      	cmn	r4, r2
 800bfb8:	d409      	bmi.n	800bfce <__kernel_rem_pio2+0x8e>
 800bfba:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800bfbe:	ee07 1a90 	vmov	s15, r1
 800bfc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bfc6:	eca0 7b02 	vstmia	r0!, {d7}
 800bfca:	3201      	adds	r2, #1
 800bfcc:	e7e2      	b.n	800bf94 <__kernel_rem_pio2+0x54>
 800bfce:	eeb0 7b46 	vmov.f64	d7, d6
 800bfd2:	e7f8      	b.n	800bfc6 <__kernel_rem_pio2+0x86>
 800bfd4:	ecbc 5b02 	vldmia	ip!, {d5}
 800bfd8:	ed94 6b00 	vldr	d6, [r4]
 800bfdc:	3001      	adds	r0, #1
 800bfde:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bfe2:	4550      	cmp	r0, sl
 800bfe4:	f1a4 0408 	sub.w	r4, r4, #8
 800bfe8:	ddf4      	ble.n	800bfd4 <__kernel_rem_pio2+0x94>
 800bfea:	ecae 7b02 	vstmia	lr!, {d7}
 800bfee:	3601      	adds	r6, #1
 800bff0:	3208      	adds	r2, #8
 800bff2:	e7d7      	b.n	800bfa4 <__kernel_rem_pio2+0x64>
 800bff4:	aa06      	add	r2, sp, #24
 800bff6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800c230 <__kernel_rem_pio2+0x2f0>
 800bffa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800c238 <__kernel_rem_pio2+0x2f8>
 800bffe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c002:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800c006:	9203      	str	r2, [sp, #12]
 800c008:	9302      	str	r3, [sp, #8]
 800c00a:	464c      	mov	r4, r9
 800c00c:	00e3      	lsls	r3, r4, #3
 800c00e:	9304      	str	r3, [sp, #16]
 800c010:	ab92      	add	r3, sp, #584	@ 0x248
 800c012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c016:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800c01a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800c01c:	ab06      	add	r3, sp, #24
 800c01e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c022:	461e      	mov	r6, r3
 800c024:	4620      	mov	r0, r4
 800c026:	2800      	cmp	r0, #0
 800c028:	f1a2 0208 	sub.w	r2, r2, #8
 800c02c:	dc4a      	bgt.n	800c0c4 <__kernel_rem_pio2+0x184>
 800c02e:	4628      	mov	r0, r5
 800c030:	9305      	str	r3, [sp, #20]
 800c032:	f000 fa01 	bl	800c438 <scalbn>
 800c036:	eeb0 8b40 	vmov.f64	d8, d0
 800c03a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800c03e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c042:	f7ff fbed 	bl	800b820 <floor>
 800c046:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800c04a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c04e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c052:	2d00      	cmp	r5, #0
 800c054:	ee17 8a90 	vmov	r8, s15
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c05e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c062:	dd41      	ble.n	800c0e8 <__kernel_rem_pio2+0x1a8>
 800c064:	1e60      	subs	r0, r4, #1
 800c066:	aa06      	add	r2, sp, #24
 800c068:	f1c5 0c18 	rsb	ip, r5, #24
 800c06c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800c070:	fa46 f20c 	asr.w	r2, r6, ip
 800c074:	4490      	add	r8, r2
 800c076:	fa02 f20c 	lsl.w	r2, r2, ip
 800c07a:	1ab6      	subs	r6, r6, r2
 800c07c:	aa06      	add	r2, sp, #24
 800c07e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800c082:	f1c5 0217 	rsb	r2, r5, #23
 800c086:	4116      	asrs	r6, r2
 800c088:	2e00      	cmp	r6, #0
 800c08a:	dd3c      	ble.n	800c106 <__kernel_rem_pio2+0x1c6>
 800c08c:	f04f 0c00 	mov.w	ip, #0
 800c090:	f108 0801 	add.w	r8, r8, #1
 800c094:	4660      	mov	r0, ip
 800c096:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800c09a:	4564      	cmp	r4, ip
 800c09c:	dc66      	bgt.n	800c16c <__kernel_rem_pio2+0x22c>
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	dd03      	ble.n	800c0aa <__kernel_rem_pio2+0x16a>
 800c0a2:	2d01      	cmp	r5, #1
 800c0a4:	d072      	beq.n	800c18c <__kernel_rem_pio2+0x24c>
 800c0a6:	2d02      	cmp	r5, #2
 800c0a8:	d07a      	beq.n	800c1a0 <__kernel_rem_pio2+0x260>
 800c0aa:	2e02      	cmp	r6, #2
 800c0ac:	d12b      	bne.n	800c106 <__kernel_rem_pio2+0x1c6>
 800c0ae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c0b2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c0b6:	b330      	cbz	r0, 800c106 <__kernel_rem_pio2+0x1c6>
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f000 f9bd 	bl	800c438 <scalbn>
 800c0be:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c0c2:	e020      	b.n	800c106 <__kernel_rem_pio2+0x1c6>
 800c0c4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c0c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c0cc:	3801      	subs	r0, #1
 800c0ce:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c0d2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c0d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c0da:	eca6 0a01 	vstmia	r6!, {s0}
 800c0de:	ed92 0b00 	vldr	d0, [r2]
 800c0e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c0e6:	e79e      	b.n	800c026 <__kernel_rem_pio2+0xe6>
 800c0e8:	d105      	bne.n	800c0f6 <__kernel_rem_pio2+0x1b6>
 800c0ea:	1e62      	subs	r2, r4, #1
 800c0ec:	a906      	add	r1, sp, #24
 800c0ee:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800c0f2:	15f6      	asrs	r6, r6, #23
 800c0f4:	e7c8      	b.n	800c088 <__kernel_rem_pio2+0x148>
 800c0f6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c0fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c102:	da31      	bge.n	800c168 <__kernel_rem_pio2+0x228>
 800c104:	2600      	movs	r6, #0
 800c106:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c10e:	f040 809b 	bne.w	800c248 <__kernel_rem_pio2+0x308>
 800c112:	1e62      	subs	r2, r4, #1
 800c114:	2000      	movs	r0, #0
 800c116:	454a      	cmp	r2, r9
 800c118:	da49      	bge.n	800c1ae <__kernel_rem_pio2+0x26e>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d062      	beq.n	800c1e4 <__kernel_rem_pio2+0x2a4>
 800c11e:	3c01      	subs	r4, #1
 800c120:	ab06      	add	r3, sp, #24
 800c122:	3d18      	subs	r5, #24
 800c124:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0f8      	beq.n	800c11e <__kernel_rem_pio2+0x1de>
 800c12c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c130:	4628      	mov	r0, r5
 800c132:	f000 f981 	bl	800c438 <scalbn>
 800c136:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800c230 <__kernel_rem_pio2+0x2f0>
 800c13a:	1c62      	adds	r2, r4, #1
 800c13c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c13e:	00d3      	lsls	r3, r2, #3
 800c140:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c144:	4622      	mov	r2, r4
 800c146:	2a00      	cmp	r2, #0
 800c148:	f280 80a8 	bge.w	800c29c <__kernel_rem_pio2+0x35c>
 800c14c:	4622      	mov	r2, r4
 800c14e:	2a00      	cmp	r2, #0
 800c150:	f2c0 80c6 	blt.w	800c2e0 <__kernel_rem_pio2+0x3a0>
 800c154:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c156:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c15a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800c228 <__kernel_rem_pio2+0x2e8>
 800c15e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800c244 <__kernel_rem_pio2+0x304>
 800c162:	2000      	movs	r0, #0
 800c164:	1aa1      	subs	r1, r4, r2
 800c166:	e0b0      	b.n	800c2ca <__kernel_rem_pio2+0x38a>
 800c168:	2602      	movs	r6, #2
 800c16a:	e78f      	b.n	800c08c <__kernel_rem_pio2+0x14c>
 800c16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c170:	b948      	cbnz	r0, 800c186 <__kernel_rem_pio2+0x246>
 800c172:	b122      	cbz	r2, 800c17e <__kernel_rem_pio2+0x23e>
 800c174:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800c178:	f843 2c04 	str.w	r2, [r3, #-4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f10c 0c01 	add.w	ip, ip, #1
 800c182:	4610      	mov	r0, r2
 800c184:	e789      	b.n	800c09a <__kernel_rem_pio2+0x15a>
 800c186:	ebae 0202 	sub.w	r2, lr, r2
 800c18a:	e7f5      	b.n	800c178 <__kernel_rem_pio2+0x238>
 800c18c:	1e62      	subs	r2, r4, #1
 800c18e:	ab06      	add	r3, sp, #24
 800c190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c194:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c198:	a906      	add	r1, sp, #24
 800c19a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c19e:	e784      	b.n	800c0aa <__kernel_rem_pio2+0x16a>
 800c1a0:	1e62      	subs	r2, r4, #1
 800c1a2:	ab06      	add	r3, sp, #24
 800c1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c1ac:	e7f4      	b.n	800c198 <__kernel_rem_pio2+0x258>
 800c1ae:	ab06      	add	r3, sp, #24
 800c1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b4:	3a01      	subs	r2, #1
 800c1b6:	4318      	orrs	r0, r3
 800c1b8:	e7ad      	b.n	800c116 <__kernel_rem_pio2+0x1d6>
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d0fa      	beq.n	800c1ba <__kernel_rem_pio2+0x27a>
 800c1c4:	9a04      	ldr	r2, [sp, #16]
 800c1c6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800c1ca:	446a      	add	r2, sp
 800c1cc:	eb04 000b 	add.w	r0, r4, fp
 800c1d0:	a91a      	add	r1, sp, #104	@ 0x68
 800c1d2:	1c66      	adds	r6, r4, #1
 800c1d4:	3a98      	subs	r2, #152	@ 0x98
 800c1d6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800c1da:	4423      	add	r3, r4
 800c1dc:	42b3      	cmp	r3, r6
 800c1de:	da04      	bge.n	800c1ea <__kernel_rem_pio2+0x2aa>
 800c1e0:	461c      	mov	r4, r3
 800c1e2:	e713      	b.n	800c00c <__kernel_rem_pio2+0xcc>
 800c1e4:	9a03      	ldr	r2, [sp, #12]
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e7e8      	b.n	800c1bc <__kernel_rem_pio2+0x27c>
 800c1ea:	9902      	ldr	r1, [sp, #8]
 800c1ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c1f0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800c1f4:	9104      	str	r1, [sp, #16]
 800c1f6:	ee07 1a90 	vmov	s15, r1
 800c1fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1fe:	2400      	movs	r4, #0
 800c200:	eca0 7b02 	vstmia	r0!, {d7}
 800c204:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800c228 <__kernel_rem_pio2+0x2e8>
 800c208:	4686      	mov	lr, r0
 800c20a:	4554      	cmp	r4, sl
 800c20c:	dd03      	ble.n	800c216 <__kernel_rem_pio2+0x2d6>
 800c20e:	eca2 7b02 	vstmia	r2!, {d7}
 800c212:	3601      	adds	r6, #1
 800c214:	e7e2      	b.n	800c1dc <__kernel_rem_pio2+0x29c>
 800c216:	ecbc 5b02 	vldmia	ip!, {d5}
 800c21a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800c21e:	3401      	adds	r4, #1
 800c220:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c224:	e7f1      	b.n	800c20a <__kernel_rem_pio2+0x2ca>
 800c226:	bf00      	nop
	...
 800c234:	3e700000 	.word	0x3e700000
 800c238:	00000000 	.word	0x00000000
 800c23c:	41700000 	.word	0x41700000
 800c240:	0800c7d8 	.word	0x0800c7d8
 800c244:	0800c798 	.word	0x0800c798
 800c248:	4268      	negs	r0, r5
 800c24a:	eeb0 0b48 	vmov.f64	d0, d8
 800c24e:	f000 f8f3 	bl	800c438 <scalbn>
 800c252:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800c420 <__kernel_rem_pio2+0x4e0>
 800c256:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25e:	db17      	blt.n	800c290 <__kernel_rem_pio2+0x350>
 800c260:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800c428 <__kernel_rem_pio2+0x4e8>
 800c264:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c268:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c26c:	aa06      	add	r2, sp, #24
 800c26e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c272:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c276:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c27a:	3518      	adds	r5, #24
 800c27c:	ee10 3a10 	vmov	r3, s0
 800c280:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c284:	ee17 3a10 	vmov	r3, s14
 800c288:	3401      	adds	r4, #1
 800c28a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c28e:	e74d      	b.n	800c12c <__kernel_rem_pio2+0x1ec>
 800c290:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c294:	aa06      	add	r2, sp, #24
 800c296:	ee10 3a10 	vmov	r3, s0
 800c29a:	e7f6      	b.n	800c28a <__kernel_rem_pio2+0x34a>
 800c29c:	a806      	add	r0, sp, #24
 800c29e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c2a2:	9001      	str	r0, [sp, #4]
 800c2a4:	ee07 0a90 	vmov	s15, r0
 800c2a8:	3a01      	subs	r2, #1
 800c2aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c2ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c2b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c2b6:	ed21 7b02 	vstmdb	r1!, {d7}
 800c2ba:	e744      	b.n	800c146 <__kernel_rem_pio2+0x206>
 800c2bc:	ecbc 5b02 	vldmia	ip!, {d5}
 800c2c0:	ecb5 6b02 	vldmia	r5!, {d6}
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c2ca:	4548      	cmp	r0, r9
 800c2cc:	dc01      	bgt.n	800c2d2 <__kernel_rem_pio2+0x392>
 800c2ce:	4281      	cmp	r1, r0
 800c2d0:	daf4      	bge.n	800c2bc <__kernel_rem_pio2+0x37c>
 800c2d2:	a842      	add	r0, sp, #264	@ 0x108
 800c2d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c2d8:	ed81 7b00 	vstr	d7, [r1]
 800c2dc:	3a01      	subs	r2, #1
 800c2de:	e736      	b.n	800c14e <__kernel_rem_pio2+0x20e>
 800c2e0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c2e2:	2a02      	cmp	r2, #2
 800c2e4:	dc0a      	bgt.n	800c2fc <__kernel_rem_pio2+0x3bc>
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	dc2d      	bgt.n	800c346 <__kernel_rem_pio2+0x406>
 800c2ea:	d046      	beq.n	800c37a <__kernel_rem_pio2+0x43a>
 800c2ec:	f008 0007 	and.w	r0, r8, #7
 800c2f0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800c2f4:	ecbd 8b06 	vpop	{d8-d10}
 800c2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c2fe:	2a03      	cmp	r2, #3
 800c300:	d1f4      	bne.n	800c2ec <__kernel_rem_pio2+0x3ac>
 800c302:	a942      	add	r1, sp, #264	@ 0x108
 800c304:	f1a3 0208 	sub.w	r2, r3, #8
 800c308:	440a      	add	r2, r1
 800c30a:	4611      	mov	r1, r2
 800c30c:	4620      	mov	r0, r4
 800c30e:	2800      	cmp	r0, #0
 800c310:	f1a1 0108 	sub.w	r1, r1, #8
 800c314:	dc52      	bgt.n	800c3bc <__kernel_rem_pio2+0x47c>
 800c316:	4621      	mov	r1, r4
 800c318:	2901      	cmp	r1, #1
 800c31a:	f1a2 0208 	sub.w	r2, r2, #8
 800c31e:	dc5d      	bgt.n	800c3dc <__kernel_rem_pio2+0x49c>
 800c320:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800c430 <__kernel_rem_pio2+0x4f0>
 800c324:	aa42      	add	r2, sp, #264	@ 0x108
 800c326:	4413      	add	r3, r2
 800c328:	2c01      	cmp	r4, #1
 800c32a:	dc67      	bgt.n	800c3fc <__kernel_rem_pio2+0x4bc>
 800c32c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800c330:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800c334:	2e00      	cmp	r6, #0
 800c336:	d167      	bne.n	800c408 <__kernel_rem_pio2+0x4c8>
 800c338:	ed87 5b00 	vstr	d5, [r7]
 800c33c:	ed87 6b02 	vstr	d6, [r7, #8]
 800c340:	ed87 7b04 	vstr	d7, [r7, #16]
 800c344:	e7d2      	b.n	800c2ec <__kernel_rem_pio2+0x3ac>
 800c346:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800c430 <__kernel_rem_pio2+0x4f0>
 800c34a:	aa42      	add	r2, sp, #264	@ 0x108
 800c34c:	4413      	add	r3, r2
 800c34e:	4622      	mov	r2, r4
 800c350:	2a00      	cmp	r2, #0
 800c352:	da24      	bge.n	800c39e <__kernel_rem_pio2+0x45e>
 800c354:	b34e      	cbz	r6, 800c3aa <__kernel_rem_pio2+0x46a>
 800c356:	eeb1 7b46 	vneg.f64	d7, d6
 800c35a:	ed87 7b00 	vstr	d7, [r7]
 800c35e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800c362:	aa44      	add	r2, sp, #272	@ 0x110
 800c364:	2301      	movs	r3, #1
 800c366:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c36a:	429c      	cmp	r4, r3
 800c36c:	da20      	bge.n	800c3b0 <__kernel_rem_pio2+0x470>
 800c36e:	b10e      	cbz	r6, 800c374 <__kernel_rem_pio2+0x434>
 800c370:	eeb1 7b47 	vneg.f64	d7, d7
 800c374:	ed87 7b02 	vstr	d7, [r7, #8]
 800c378:	e7b8      	b.n	800c2ec <__kernel_rem_pio2+0x3ac>
 800c37a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800c430 <__kernel_rem_pio2+0x4f0>
 800c37e:	aa42      	add	r2, sp, #264	@ 0x108
 800c380:	4413      	add	r3, r2
 800c382:	2c00      	cmp	r4, #0
 800c384:	da05      	bge.n	800c392 <__kernel_rem_pio2+0x452>
 800c386:	b10e      	cbz	r6, 800c38c <__kernel_rem_pio2+0x44c>
 800c388:	eeb1 7b47 	vneg.f64	d7, d7
 800c38c:	ed87 7b00 	vstr	d7, [r7]
 800c390:	e7ac      	b.n	800c2ec <__kernel_rem_pio2+0x3ac>
 800c392:	ed33 6b02 	vldmdb	r3!, {d6}
 800c396:	3c01      	subs	r4, #1
 800c398:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c39c:	e7f1      	b.n	800c382 <__kernel_rem_pio2+0x442>
 800c39e:	ed33 7b02 	vldmdb	r3!, {d7}
 800c3a2:	3a01      	subs	r2, #1
 800c3a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c3a8:	e7d2      	b.n	800c350 <__kernel_rem_pio2+0x410>
 800c3aa:	eeb0 7b46 	vmov.f64	d7, d6
 800c3ae:	e7d4      	b.n	800c35a <__kernel_rem_pio2+0x41a>
 800c3b0:	ecb2 6b02 	vldmia	r2!, {d6}
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c3ba:	e7d6      	b.n	800c36a <__kernel_rem_pio2+0x42a>
 800c3bc:	ed91 7b00 	vldr	d7, [r1]
 800c3c0:	ed91 5b02 	vldr	d5, [r1, #8]
 800c3c4:	3801      	subs	r0, #1
 800c3c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c3ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c3ce:	ed81 6b00 	vstr	d6, [r1]
 800c3d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c3d6:	ed81 7b02 	vstr	d7, [r1, #8]
 800c3da:	e798      	b.n	800c30e <__kernel_rem_pio2+0x3ce>
 800c3dc:	ed92 7b00 	vldr	d7, [r2]
 800c3e0:	ed92 5b02 	vldr	d5, [r2, #8]
 800c3e4:	3901      	subs	r1, #1
 800c3e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c3ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c3ee:	ed82 6b00 	vstr	d6, [r2]
 800c3f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c3f6:	ed82 7b02 	vstr	d7, [r2, #8]
 800c3fa:	e78d      	b.n	800c318 <__kernel_rem_pio2+0x3d8>
 800c3fc:	ed33 6b02 	vldmdb	r3!, {d6}
 800c400:	3c01      	subs	r4, #1
 800c402:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c406:	e78f      	b.n	800c328 <__kernel_rem_pio2+0x3e8>
 800c408:	eeb1 5b45 	vneg.f64	d5, d5
 800c40c:	eeb1 6b46 	vneg.f64	d6, d6
 800c410:	ed87 5b00 	vstr	d5, [r7]
 800c414:	eeb1 7b47 	vneg.f64	d7, d7
 800c418:	ed87 6b02 	vstr	d6, [r7, #8]
 800c41c:	e790      	b.n	800c340 <__kernel_rem_pio2+0x400>
 800c41e:	bf00      	nop
 800c420:	00000000 	.word	0x00000000
 800c424:	41700000 	.word	0x41700000
 800c428:	00000000 	.word	0x00000000
 800c42c:	3e700000 	.word	0x3e700000
	...

0800c438 <scalbn>:
 800c438:	ee10 1a90 	vmov	r1, s1
 800c43c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c440:	b98b      	cbnz	r3, 800c466 <scalbn+0x2e>
 800c442:	ee10 3a10 	vmov	r3, s0
 800c446:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c44a:	4319      	orrs	r1, r3
 800c44c:	d00a      	beq.n	800c464 <scalbn+0x2c>
 800c44e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c500 <scalbn+0xc8>
 800c452:	4b37      	ldr	r3, [pc, #220]	@ (800c530 <scalbn+0xf8>)
 800c454:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c458:	4298      	cmp	r0, r3
 800c45a:	da0b      	bge.n	800c474 <scalbn+0x3c>
 800c45c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c508 <scalbn+0xd0>
 800c460:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c464:	4770      	bx	lr
 800c466:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d107      	bne.n	800c47e <scalbn+0x46>
 800c46e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c472:	4770      	bx	lr
 800c474:	ee10 1a90 	vmov	r1, s1
 800c478:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c47c:	3b36      	subs	r3, #54	@ 0x36
 800c47e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c482:	4290      	cmp	r0, r2
 800c484:	dd0d      	ble.n	800c4a2 <scalbn+0x6a>
 800c486:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c510 <scalbn+0xd8>
 800c48a:	ee10 3a90 	vmov	r3, s1
 800c48e:	eeb0 6b47 	vmov.f64	d6, d7
 800c492:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800c518 <scalbn+0xe0>
 800c496:	2b00      	cmp	r3, #0
 800c498:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c49c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c4a0:	4770      	bx	lr
 800c4a2:	4418      	add	r0, r3
 800c4a4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800c4a8:	4298      	cmp	r0, r3
 800c4aa:	dcec      	bgt.n	800c486 <scalbn+0x4e>
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	dd0a      	ble.n	800c4c6 <scalbn+0x8e>
 800c4b0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c4b4:	ec53 2b10 	vmov	r2, r3, d0
 800c4b8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c4bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c4c0:	ec43 2b10 	vmov	d0, r2, r3
 800c4c4:	4770      	bx	lr
 800c4c6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800c4ca:	da09      	bge.n	800c4e0 <scalbn+0xa8>
 800c4cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800c508 <scalbn+0xd0>
 800c4d0:	ee10 3a90 	vmov	r3, s1
 800c4d4:	eeb0 6b47 	vmov.f64	d6, d7
 800c4d8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800c520 <scalbn+0xe8>
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	e7db      	b.n	800c498 <scalbn+0x60>
 800c4e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c4e4:	ec53 2b10 	vmov	r2, r3, d0
 800c4e8:	3036      	adds	r0, #54	@ 0x36
 800c4ea:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c4ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c4f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c528 <scalbn+0xf0>
 800c4f6:	ec43 2b10 	vmov	d0, r2, r3
 800c4fa:	e7b1      	b.n	800c460 <scalbn+0x28>
 800c4fc:	f3af 8000 	nop.w
 800c500:	00000000 	.word	0x00000000
 800c504:	43500000 	.word	0x43500000
 800c508:	c2f8f359 	.word	0xc2f8f359
 800c50c:	01a56e1f 	.word	0x01a56e1f
 800c510:	8800759c 	.word	0x8800759c
 800c514:	7e37e43c 	.word	0x7e37e43c
 800c518:	8800759c 	.word	0x8800759c
 800c51c:	fe37e43c 	.word	0xfe37e43c
 800c520:	c2f8f359 	.word	0xc2f8f359
 800c524:	81a56e1f 	.word	0x81a56e1f
 800c528:	00000000 	.word	0x00000000
 800c52c:	3c900000 	.word	0x3c900000
 800c530:	ffff3cb0 	.word	0xffff3cb0

0800c534 <_init>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr

0800c540 <_fini>:
 800c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c542:	bf00      	nop
 800c544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c546:	bc08      	pop	{r3}
 800c548:	469e      	mov	lr, r3
 800c54a:	4770      	bx	lr
