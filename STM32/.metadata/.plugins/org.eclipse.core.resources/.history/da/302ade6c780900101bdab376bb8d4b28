/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "butterworth_filter.h"
#include "TPGCI_STM32.h"               /* Model header file */
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* USER CODE BEGIN PV */

//********************************** Main inputs ******************************//
float VDC_i=400;
float CCR_max_i = 1375;
float Id_ref_i = -5;
float Iq_ref_i = 0;
float r_ph_shift=0;
float y_ph_shift=0;
float b_ph_shift=0;
float phasedelay_i = 16;
// ******************** Analog to Digital conversion variables **************************//
float VOLTAGE_R_PHASE 	= 0.0;		//ADC1 Channel 2 pin PF11
float VOLTAGE_Y_PHASE 	= 0.0;		//ADC1 Channel 3 pin PA6
float VOLTAGE_B_PHASE 	= 0.0;		//ADC1 Channel 6 pin PF12
float VOLTAGE_R_OFFSET  = 2.00;
float VOLTAGE_Y_OFFSET  = 2.00;
float VOLTAGE_B_OFFSET  = 2.00;
float VOLTAGE_R_GAIN 	= 376.7;
float VOLTAGE_Y_GAIN 	= 373.381;
float VOLTAGE_B_GAIN 	= 400.136;
float CURRENT_R_PHASE 	= 0.0;		//ADC1 Channel 2 pin PF11
float CURRENT_Y_PHASE 	= 0.0;		//ADC1 Channel 3 pin PA6
float CURRENT_B_PHASE 	= 0.0;		//ADC1 Channel 6 pin PF12
float CURRENT_R_OFFSET  = 2.0;
float CURRENT_Y_OFFSET  = 2.0;
float CURRENT_B_OFFSET  = 2.0;
float CURRENT_R_GAIN	= 8.87221255199;
float CURRENT_Y_GAIN 	= 8.87221255199;
float CURRENT_B_GAIN 	= 8.87221255199;
float DC_Voltage = 0.0f;
float DC_Current = 0.0f;
float DC_Voltage_Gain = 0.0f;
float DC_Current_Gain = 0.0f;
const float VREF 		= 3.3; 			   // Reference voltage (assume 3.3V)
const uint32_t ADC_16bRESOLUTION = 65535;  // 16-bit resolution (0-65535)
const uint32_t ADC_12bRESOLUTION = 4096;   // 16-bit resolution (0-4096)
uint16_t VoltageadcBuffer[3];     //voltage buffer for DMA
uint16_t CurrentadcBuffer[3];     //current buffer for DMA
uint16_t DCSenseBuffer[2];
// ******************** Checking variables **************************//
float Tim1_check=0.0f;
float Tim2_check=0.0f;
float Tim8_check=0.0f;
float ADC1_Check=0.0f;
float ADC2_Check=0.0f;
float ADC3_Check=0.0f;
// ***************Buffers to hold previous input/output values *****************//
float VoltageR_Input[3] = {0.0f, 0.0f, 0.0f};
float VoltageR_Output[3] = {0.0f, 0.0f, 0.0f};
float VoltageY_Input[3] = {0.0f, 0.0f, 0.0f};
float VoltageY_Output[3] = {0.0f, 0.0f, 0.0f};
float VoltageB_Input[3] = {0.0f, 0.0f, 0.0f};
float VoltageB_Output[3] = {0.0f, 0.0f, 0.0f};
float CurrentR_Input[3] = {0.0f, 0.0f, 0.0f};
float CurrentR_Output[3] = {0.0f, 0.0f, 0.0f};
float CurrentY_Input[3] = {0.0f, 0.0f, 0.0f};
float CurrentY_Output[3] = {0.0f, 0.0f, 0.0f};
float CurrentB_Input[3] = {0.0f, 0.0f, 0.0f};
float CurrentB_Output[3] = {0.0f, 0.0f, 0.0f};

//lookup tables for 20 khz
uint16_t PhaseA_Table[]= {
		700, 709, 718, 727, 736, 745, 754, 763, 772, 781,
		790, 799, 808, 817, 825, 834, 843, 852, 860, 869,
		878, 886, 895, 903, 912, 920, 928, 937, 945, 953,
		961, 969, 977, 985, 993, 1000, 1008, 1016, 1023, 1031,
		1038, 1045, 1052, 1060, 1067, 1073, 1080, 1087, 1094, 1100,
		1107, 1113, 1119, 1125, 1131, 1137, 1143, 1149, 1154, 1160,
		1165, 1170, 1176, 1181, 1185, 1190, 1195, 1199, 1204, 1208,
		1212, 1216, 1220, 1224, 1228, 1231, 1235, 1238, 1241, 1244,
		1247, 1250, 1252, 1255, 1257, 1259, 1261, 1263, 1265, 1266,
		1268, 1269, 1270, 1272, 1272, 1273, 1274, 1274, 1275, 1275,
		1275, 1275, 1275, 1274, 1274, 1273, 1272, 1272, 1270, 1269,
		1268, 1266, 1265, 1263, 1261, 1259, 1257, 1255, 1252, 1250,
		1247, 1244, 1241, 1238, 1235, 1231, 1228, 1224, 1220, 1216,
		1212, 1208, 1204, 1199, 1195, 1190, 1185, 1181, 1176, 1170,
		1165, 1160, 1154, 1149, 1143, 1137, 1131, 1125, 1119, 1113,
		1107, 1100, 1094, 1087, 1080, 1073, 1067, 1060, 1052, 1045,
		1038, 1031, 1023, 1016, 1008, 1000, 993, 985, 977, 969,
		961, 953, 945, 937, 928, 920, 912, 903, 895, 886,
		878, 869, 860, 852, 843, 834, 825, 817, 808, 799,
		790, 781, 772, 763, 754, 745, 736, 727, 718, 709,
		700, 691, 682, 673, 664, 655, 646, 637, 628, 619,
		610, 601, 592, 583, 575, 566, 557, 548, 540, 531,
		522, 514, 505, 497, 488, 480, 472, 463, 455, 447,
		439, 431, 423, 415, 407, 400, 392, 384, 377, 369,
		362, 355, 348, 340, 333, 327, 320, 313, 306, 300,
		293, 287, 281, 275, 269, 263, 257, 251, 246, 240,
		235, 230, 224, 219, 215, 210, 205, 201, 196, 192,
		188, 184, 180, 176, 172, 169, 165, 162, 159, 156,
		153, 150, 148, 145, 143, 141, 139, 137, 135, 134,
		132, 131, 130, 128, 128, 127, 126, 126, 125, 125,
		125, 125, 125, 126, 126, 127, 128, 128, 130, 131,
		132, 134, 135, 137, 139, 141, 143, 145, 148, 150,
		153, 156, 159, 162, 165, 169, 172, 176, 180, 184,
		188, 192, 196, 201, 205, 210, 215, 219, 224, 230,
		235, 240, 246, 251, 257, 263, 269, 275, 281, 287,
		293, 300, 306, 313, 320, 327, 333, 340, 348, 355,
		362, 369, 377, 384, 392, 400, 407, 415, 423, 431,
		439, 447, 455, 463, 472, 480, 488, 497, 505, 514,
		522, 531, 540, 548, 557, 566, 575, 583, 592, 601,
		610, 619, 628, 637, 646, 655, 664, 673, 682, 691};

uint16_t PhaseB_Table[]= {
		202, 198, 193, 189, 185, 181, 177, 173, 170, 166,
		163, 160, 157, 154, 151, 149, 146, 144, 142, 140,
		138, 136, 134, 133, 131, 130, 129, 128, 127, 126,
		126, 125, 125, 125, 125, 125, 125, 126, 127, 127,
		128, 129, 130, 132, 133, 135, 136, 138, 140, 142,
		145, 147, 150, 152, 155, 158, 161, 164, 168, 171,
		175, 178, 182, 186, 190, 195, 199, 204, 208, 213,
		218, 223, 228, 233, 238, 244, 249, 255, 261, 267,
		273, 279, 285, 291, 298, 304, 311, 317, 324, 331,
		338, 345, 352, 360, 367, 374, 382, 389, 397, 405,
		412, 420, 428, 436, 444, 452, 461, 469, 477, 486,
		494, 502, 511, 519, 528, 537, 545, 554, 563, 572,
		580, 589, 598, 607, 616, 625, 634, 643, 652, 661,
		670, 679, 688, 697, 706, 715, 724, 733, 742, 751,
		760, 769, 778, 787, 796, 805, 814, 822, 831, 840,
		849, 858, 866, 875, 883, 892, 900, 909, 917, 926,
		934, 942, 950, 958, 966, 974, 982, 990, 998, 1006,
		1013, 1021, 1028, 1036, 1043, 1050, 1057, 1064, 1071, 1078,
		1085, 1091, 1098, 1104, 1111, 1117, 1123, 1129, 1135, 1141,
		1147, 1152, 1158, 1163, 1169, 1174, 1179, 1184, 1189, 1193,
		1198, 1202, 1207, 1211, 1215, 1219, 1223, 1227, 1230, 1234,
		1237, 1240, 1243, 1246, 1249, 1251, 1254, 1256, 1258, 1260,
		1262, 1264, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274,
		1274, 1275, 1275, 1275, 1275, 1275, 1275, 1274, 1273, 1273,
		1272, 1271, 1270, 1268, 1267, 1265, 1264, 1262, 1260, 1258,
		1255, 1253, 1250, 1248, 1245, 1242, 1239, 1236, 1232, 1229,
		1225, 1222, 1218, 1214, 1210, 1205, 1201, 1196, 1192, 1187,
		1182, 1177, 1172, 1167, 1162, 1156, 1151, 1145, 1139, 1133,
		1127, 1121, 1115, 1109, 1102, 1096, 1089, 1083, 1076, 1069,
		1062, 1055, 1048, 1040, 1033, 1026, 1018, 1011, 1003, 995,
		988, 980, 972, 964, 956, 948, 939, 931, 923, 914,
		906, 898, 889, 881, 872, 863, 855, 846, 837, 828,
		820, 811, 802, 793, 784, 775, 766, 757, 748, 739,
		730, 721, 712, 703, 694, 685, 676, 667, 658, 649,
		640, 631, 622, 613, 604, 595, 586, 578, 569, 560,
		551, 542, 534, 525, 517, 508, 500, 491, 483, 474,
		466, 458, 450, 442, 434, 426, 418, 410, 402, 394,
		387, 379, 372, 364, 357, 350, 343, 336, 329, 322,
		315, 309, 302, 296, 289, 283, 277, 271, 265, 259,
		253, 248, 242, 237, 231, 226, 221, 216, 211, 207};
//
uint16_t PhaseC_Table[]= {
		1198, 1193, 1189, 1184, 1179, 1174, 1169, 1163, 1158, 1152,
		1147, 1141, 1135, 1129, 1123, 1117, 1111, 1104, 1098, 1091,
		1085, 1078, 1071, 1064, 1057, 1050, 1043, 1036, 1028, 1021,
		1013, 1006, 998, 990, 982, 974, 966, 958, 950, 942,
		934, 926, 917, 909, 900, 892, 883, 875, 866, 858,
		849, 840, 831, 822, 814, 805, 796, 787, 778, 769,
		760, 751, 742, 733, 724, 715, 706, 697, 688, 679,
		670, 661, 652, 643, 634, 625, 616, 607, 598, 589,
		580, 572, 563, 554, 545, 537, 528, 519, 511, 502,
		494, 486, 477, 469, 461, 452, 444, 436, 428, 420,
		412, 405, 397, 389, 382, 374, 367, 360, 352, 345,
		338, 331, 324, 317, 311, 304, 298, 291, 285, 279,
		273, 267, 261, 255, 249, 244, 238, 233, 228, 223,
		218, 213, 208, 204, 199, 195, 190, 186, 182, 178,
		175, 171, 168, 164, 161, 158, 155, 152, 150, 147,
		145, 142, 140, 138, 136, 135, 133, 132, 130, 129,
		128, 127, 127, 126, 125, 125, 125, 125, 125, 125,
		126, 126, 127, 128, 129, 130, 131, 133, 134, 136,
		138, 140, 142, 144, 146, 149, 151, 154, 157, 160,
		163, 166, 170, 173, 177, 181, 185, 189, 193, 198,
		202, 207, 211, 216, 221, 226, 231, 237, 242, 248,
		253, 259, 265, 271, 277, 283, 289, 296, 302, 309,
		315, 322, 329, 336, 343, 350, 357, 364, 372, 379,
		387, 394, 402, 410, 418, 426, 434, 442, 450, 458,
		466, 474, 483, 491, 500, 508, 517, 525, 534, 542,
		551, 560, 569, 578, 586, 595, 604, 613, 622, 631,
		640, 649, 658, 667, 676, 685, 694, 703, 712, 721,
		730, 739, 748, 757, 766, 775, 784, 793, 802, 811,
		820, 828, 837, 846, 855, 863, 872, 881, 889, 898,
		906, 914, 923, 931, 939, 948, 956, 964, 972, 980,
		988, 995, 1003, 1011, 1018, 1026, 1033, 1040, 1048, 1055,
		1062, 1069, 1076, 1083, 1089, 1096, 1102, 1109, 1115, 1121,
		1127, 1133, 1139, 1145, 1151, 1156, 1162, 1167, 1172, 1177,
		1182, 1187, 1192, 1196, 1201, 1205, 1210, 1214, 1218, 1222,
		1225, 1229, 1232, 1236, 1239, 1242, 1245, 1248, 1250, 1253,
		1255, 1258, 1260, 1262, 1264, 1265, 1267, 1268, 1270, 1271,
		1272, 1273, 1273, 1274, 1275, 1275, 1275, 1275, 1275, 1275,
		1274, 1274, 1273, 1272, 1271, 1270, 1269, 1267, 1266, 1264,
		1262, 1260, 1258, 1256, 1254, 1251, 1249, 1246, 1243, 1240,
		1237, 1234, 1230, 1227, 1223, 1219, 1215, 1211, 1207, 1202
};
__IO uint16_t PwmIndex = 0;
int32_t SPWM_TABLE_SIZE = 400 ;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MPU_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM8_Init(void);
static void MX_ADC2_Init(void);
static void MX_ADC3_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM8_Init();
  MX_ADC2_Init();
  MX_ADC3_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  // Timers starting with interrupts //
  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim8);

  // Start the ADC in DMA mode, with 3 channels
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)VoltageadcBuffer, 3);
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)CurrentadcBuffer, 3);
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)DCSenseBuffer, 2);
  // Timer 1 PWM pulses starting //
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);

  TPGCI_STM32_initialize();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 68;
  RCC_OscInitStruct.PLL.PLLP = 1;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 24;
  PeriphClkInitStruct.PLL2.PLL2P = 8;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 3;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc1.Init.OversamplingMode = DISABLE;
  hadc1.Init.Oversampling.Ratio = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = ENABLE;
  hadc2.Init.NbrOfConversion = 3;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc2.Init.OversamplingMode = DISABLE;
  hadc2.Init.Oversampling.Ratio = 1;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSignedSaturation = DISABLE;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
  sConfig.Rank = ADC_REGULAR_RANK_3;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 2;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
  hadc3.Init.OversamplingMode = DISABLE;
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_4;
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC3_SAMPLETIME_47CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 9;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1375;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 255;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 9;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1100;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
  htim8.Init.Prescaler = 9;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 40000;
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

    if (htim->Instance == TIM1) {
    	CCR1 = PhaseA_Table[PwmIndex];
    	CCR2 = PhaseB_Table[PwmIndex];
    	CCR3 = PhaseC_Table[PwmIndex];
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, CCR1);
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, CCR2);
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, CCR3);
    	// Increment and wrap around the index
    	PwmIndex = (PwmIndex + 1) % SPWM_TABLE_SIZE;
//    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMch1);
//    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMch2);
//    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWMch3);
    	Tim1_check++;
    }
    if (htim->Instance == TIM2) {
    	Va_g=VOLTAGE_R_PHASE;
    	Vb_g=VOLTAGE_Y_PHASE;
        Vc_g=VOLTAGE_B_PHASE;
        Ia_g=0; //CURRENT_R_PHASE
        Ib_g=0; //CURRENT_Y_PHASE
        Ic_g=0; //CURRENT_B_PHASE
    	TPGCI_STM32_step();
    	Tim2_check++;
    }
    if (htim->Instance == TIM8) {
        VDC=VDC_i;
        CCR_max = CCR_max_i;
        Id_ref = Id_ref_i;
        Iq_ref = Iq_ref_i;
        phasedelay = phasedelay_i;
    	Tim8_check++;
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
    if (hadc->Instance == ADC1)
    {
        // Convert the raw ADC values to voltages (0 to 3.3V scale)
    	float rawR = (((((float)VoltageadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_R_OFFSET)*VOLTAGE_R_GAIN)-4;
    	float rawY = (((((float)VoltageadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_Y_OFFSET)*VOLTAGE_Y_GAIN)-4;
    	float rawB = (((((float)VoltageadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_B_OFFSET)*VOLTAGE_B_GAIN)-4;
        // Apply the filter to each phase voltage
        VOLTAGE_R_PHASE = applyLowPassFilter(rawR, VoltageR_Input, VoltageR_Output);
        VOLTAGE_Y_PHASE = applyLowPassFilter(rawY, VoltageY_Input, VoltageY_Output);
        VOLTAGE_B_PHASE = applyLowPassFilter(rawB, VoltageB_Input, VoltageB_Output);
    	ADC1_Check++;
    }
    if (hadc->Instance == ADC2)
    {
//    	float rawIR = ((((float)CurrentadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-CURRENT_R_OFFSET)*CURRENT_R_GAIN;
//    	float rawIY = ((((float)CurrentadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-CURRENT_Y_OFFSET)*CURRENT_Y_GAIN;
//    	float rawIB = ((((float)CurrentadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-CURRENT_B_OFFSET)*CURRENT_B_GAIN;
    	float rawIR = (((float)CurrentadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-CURRENT_R_OFFSET;
    	float rawIY = (((float)CurrentadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-CURRENT_Y_OFFSET;
    	float rawIB = (((float)CurrentadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-CURRENT_B_OFFSET;
    	CURRENT_R_PHASE = applyLowPassFilter(rawIR, CurrentR_Input, CurrentR_Output);
    	CURRENT_Y_PHASE = applyLowPassFilter(rawIY, CurrentY_Input, CurrentY_Output);
    	CURRENT_B_PHASE = applyLowPassFilter(rawIB, CurrentB_Input, CurrentB_Output);
    	ADC2_Check++;
    }
    if (hadc->Instance == ADC3)
    {
    	DC_Voltage = (((float)DCSenseBuffer[0] * VREF) / ADC_16bRESOLUTION);
    	DC_Current = (((float)DCSenseBuffer[1] * VREF) / ADC_16bRESOLUTION);
    	ADC3_Check++;
    }

}
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
