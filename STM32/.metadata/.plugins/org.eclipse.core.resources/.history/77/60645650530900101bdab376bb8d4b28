/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * File: TPGCI_STM32.c
 *
 * Code generated for Simulink model 'TPGCI_STM32'.
 *
 * Model version                  : 1.2
 * Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023
 * C/C++ source code generated on : Tue Mar 25 11:02:42 2025
 *
 * Target selection: ert.tlc
 * Embedded hardware selection: ARM Compatible->ARM Cortex-M
 * Code generation objectives:
 *    1. Execution efficiency
 *    2. RAM efficiency
 * Validation result: Not run
 */

#include "TPGCI_STM32.h"
#include <stdint.h>
#include <math.h>
#include <float.h>
#include <stdbool.h>

/* Block signals and states (default storage) */
DW rtDW;

/* External inputs (root inport signals with default storage) */
ExtU rtU;

/* External outputs (root outports fed by signals with default storage) */
ExtY rtY;
extern double rt_modd(double u0, double u1);
static void Subsystempi2delay(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_j);
static void Subsystem1(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_e);

/*
 * Output and update for enable system:
 *    '<S157>/Subsystem - pi//2 delay'
 *    '<S163>/Subsystem - pi//2 delay'
 */
static void Subsystempi2delay(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_j)
{
  /* Outputs for Enabled SubSystem: '<S157>/Subsystem - pi//2 delay' incorporates:
   *  EnablePort: '<S161>/Enable'
   */
  if (rtu_Enable > 0) {
    double tmp;
    double tmp_0;

    /* Fcn: '<S161>/Fcn' incorporates:
     *  Fcn: '<S161>/Fcn1'
     */
    tmp = cos(rtu_wt);
    tmp_0 = sin(rtu_wt);
    *rty_dq = rtu_alpha_beta[0] * tmp_0 - rtu_alpha_beta[1] * tmp;

    /* Fcn: '<S161>/Fcn1' */
    *rty_dq_j = rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;
  }

  /* End of Outputs for SubSystem: '<S157>/Subsystem - pi//2 delay' */
}

/*
 * Output and update for enable system:
 *    '<S157>/Subsystem1'
 *    '<S163>/Subsystem1'
 */
static void Subsystem1(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_e)
{
  /* Outputs for Enabled SubSystem: '<S157>/Subsystem1' incorporates:
   *  EnablePort: '<S162>/Enable'
   */
  if (rtu_Enable > 0) {
    double tmp;
    double tmp_0;

    /* Fcn: '<S162>/Fcn' incorporates:
     *  Fcn: '<S162>/Fcn1'
     */
    tmp = sin(rtu_wt);
    tmp_0 = cos(rtu_wt);
    *rty_dq = rtu_alpha_beta[0] * tmp_0 + rtu_alpha_beta[1] * tmp;

    /* Fcn: '<S162>/Fcn1' */
    *rty_dq_e = -rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;
  }

  /* End of Outputs for SubSystem: '<S157>/Subsystem1' */
}

double rt_modd(double u0, double u1)
{
  double y;
  y = u0;
  if (u1 == 0.0) {
    if (u0 == 0.0) {
      y = u1;
    }
  } else if (u0 == 0.0) {
    y = 0.0 / u1;
  } else {
    bool yEq;
    y = fmod(u0, u1);
    yEq = (y == 0.0);
    if ((!yEq) && (u1 > floor(u1))) {
      double q;
      q = fabs(u0 / u1);
      yEq = (fabs(q - floor(q + 0.5)) <= DBL_EPSILON * q);
    }

    if (yEq) {
      y = 0.0;
    } else if ((u0 < 0.0) != (u1 < 0.0)) {
      y += u1;
    }
  }

  return y;
}

/* Model step function */
void TPGCI_STM32_step(void)
{
  double rtb_Gain1[3];
  double rtb_Gain1_p[3];
  double rtb_Divide;
  double rtb_Divide1;
  double rtb_Divide_idx_0;
  double rtb_Divide_idx_0_tmp;
  double rtb_Divide_idx_0_tmp_0;
  double rtb_Filter;
  double rtb_Integrator_l;
  double rtb_Mod1;
  double rtb_Saturation;
  double rtb_Sum8;
  int32_t i;
  for (i = 0; i < 3; i++) {
    /* Gain: '<S164>/Gain3' */
    rtb_Mod1 = rtConstP.pooled4[i + 3];
    rtb_Sum8 = rtConstP.pooled4[i];
    rtb_Saturation = rtConstP.pooled4[i + 6];

    /* Gain: '<S164>/Gain1' incorporates:
     *  Gain: '<S164>/Gain3'
     *  Inport: '<Root>/Ia_g'
     *  Inport: '<Root>/Ib_g'
     *  Inport: '<Root>/Ic_g'
     */
    rtb_Gain1[i] = ((rtb_Mod1 * rtU.Ib_g + rtb_Sum8 * rtU.Ia_g) + rtb_Saturation
                    * rtU.Ic_g) * 0.66666666666666663;

    /* Gain: '<S158>/Gain1' incorporates:
     *  Gain: '<S158>/Gain3'
     *  Inport: '<Root>/Va_g'
     *  Inport: '<Root>/Vb_g'
     *  Inport: '<Root>/Vc_g'
     */
    rtb_Gain1_p[i] = ((rtb_Mod1 * rtU.Vb_g + rtb_Sum8 * rtU.Va_g) +
                      rtb_Saturation * rtU.Vc_g) * 0.66666666666666663;
  }

  /* Outport: '<Root>/Iq' */
  rtY.Iq = rtb_Gain1[2];

  /* Math: '<Root>/Mod1' incorporates:
   *  Constant: '<Root>/Constant3'
   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'
   */
  rtb_Mod1 = rt_modd(rtDW.DiscreteTimeIntegrator_DSTATE, 6.2831853071795862);

  /* Outputs for Enabled SubSystem: '<S157>/Subsystem1' */
  Subsystem1(0, &rtb_Gain1_p[0], rtb_Mod1, &rtDW.Fcn_a, &rtDW.Fcn1_ic);

  /* End of Outputs for SubSystem: '<S157>/Subsystem1' */

  /* Outputs for Enabled SubSystem: '<S157>/Subsystem - pi//2 delay' */
  Subsystempi2delay(rtConstB.Compare_i, &rtb_Gain1_p[0], rtb_Mod1, &rtDW.Fcn_nk,
                    &rtDW.Fcn1_l);

  /* End of Outputs for SubSystem: '<S157>/Subsystem - pi//2 delay' */

  /* Outputs for Enabled SubSystem: '<S163>/Subsystem1' */
  Subsystem1(0, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_n, &rtDW.Fcn1_h);

  /* End of Outputs for SubSystem: '<S163>/Subsystem1' */

  /* Outputs for Enabled SubSystem: '<S163>/Subsystem - pi//2 delay' */
  Subsystempi2delay(rtConstB.Compare_b, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_k1,
                    &rtDW.Fcn1_j);

  /* End of Outputs for SubSystem: '<S163>/Subsystem - pi//2 delay' */

  /* Sum: '<Root>/Sum8' incorporates:
   *  Inport: '<Root>/Id_ref'
   *  Switch: '<S163>/Switch'
   */
  rtb_Sum8 = (0.0 - rtU.Id_ref) - rtDW.Fcn_k1;

  /* Sum: '<S99>/Sum' incorporates:
   *  DiscreteIntegrator: '<S90>/Integrator'
   */
  rtb_Saturation = rtb_Sum8 + rtDW.Integrator_DSTATE;

  /* Saturate: '<S97>/Saturation' */
  if (rtb_Saturation > 10.0) {
    rtb_Saturation = 10.0;
  } else if (rtb_Saturation < -10.0) {
    rtb_Saturation = -10.0;
  }

  /* End of Saturate: '<S97>/Saturation' */

  /* Sum: '<Root>/Sum10' incorporates:
   *  Gain: '<Root>/Gain4'
   *  Sum: '<Root>/Sum9'
   *  Switch: '<S157>/Switch'
   *  Switch: '<S163>/Switch'
   */
  rtb_Filter = (0.15707963267948966 * rtDW.Fcn1_j + rtb_Saturation) +
    rtDW.Fcn_nk;

  /* Product: '<Root>/Divide' incorporates:
   *  Constant: '<Root>/Constant'
   *  Inport: '<Root>/VDC'
   *  Product: '<Root>/Product'
   */
  rtb_Divide = rtb_Filter * 2.0 / rtU.VDC;

  /* Sum: '<Root>/Sum11' incorporates:
   *  Inport: '<Root>/Id_ref'
   *  Switch: '<S163>/Switch'
   */
  rtb_Integrator_l = rtU.Id_ref - rtDW.Fcn1_j;

  /* Product: '<Root>/Divide1' incorporates:
   *  Constant: '<Root>/Constant9'
   *  DiscreteIntegrator: '<S140>/Integrator'
   *  Gain: '<Root>/Gain5'
   *  Inport: '<Root>/VDC'
   *  Product: '<Root>/Product1'
   *  Sum: '<Root>/Sum12'
   *  Sum: '<Root>/Sum13'
   *  Sum: '<S149>/Sum'
   *  Switch: '<S157>/Switch'
   *  Switch: '<S163>/Switch'
   */
  rtb_Divide1 = (((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) -
                  0.15707963267948966 * rtDW.Fcn_k1) + rtDW.Fcn1_l) * 2.0 /
    rtU.VDC;

  /* Outputs for Enabled SubSystem: '<S170>/Subsystem - pi//2 delay' incorporates:
   *  EnablePort: '<S173>/Enable'
   */
  /* Fcn: '<S173>/Fcn' incorporates:
   *  Fcn: '<S173>/Fcn1'
   */
  rtb_Divide_idx_0_tmp = cos(rtb_Mod1);
  rtb_Divide_idx_0_tmp_0 = sin(rtb_Mod1);

  /* Switch: '<S170>/Switch' incorporates:
   *  Fcn: '<S173>/Fcn'
   *  Fcn: '<S173>/Fcn1'
   */
  rtb_Divide_idx_0 = rtb_Divide * rtb_Divide_idx_0_tmp_0 + rtb_Divide1 *
    rtb_Divide_idx_0_tmp;
  rtb_Divide = -rtb_Divide * rtb_Divide_idx_0_tmp + rtb_Divide1 *
    rtb_Divide_idx_0_tmp_0;

  /* End of Outputs for SubSystem: '<S170>/Subsystem - pi//2 delay' */

  /* SignalConversion generated from: '<S169>/Gain3' */
  rtb_Divide1 = rtb_Gain1_p[2];
  for (i = 0; i < 3; i++) {
    /* Gain: '<S169>/Gain3' incorporates:
     *  Switch: '<S170>/Switch'
     */
    rtb_Divide_idx_0_tmp = (rtConstP.Gain3_Gain[i + 3] * rtb_Divide +
      rtConstP.Gain3_Gain[i] * rtb_Divide_idx_0) + rtConstP.Gain3_Gain[i + 6] *
      rtb_Divide1;

    /* Saturate: '<Root>/Saturation' incorporates:
     *  Gain: '<S169>/Gain3'
     */
    if (rtb_Divide_idx_0_tmp > 0.95) {
      rtb_Divide_idx_0_tmp = 0.95;
    } else if (rtb_Divide_idx_0_tmp < -0.95) {
      rtb_Divide_idx_0_tmp = -0.95;
    }

    /* End of Saturate: '<Root>/Saturation' */

    /* Outport: '<Root>/m_abc' */
    rtY.m_abc[i] = rtb_Divide_idx_0_tmp;

    /* Product: '<Root>/Product2' incorporates:
     *  Constant: '<Root>/Constant2'
     *  Gain: '<Root>/Gain'
     *  Inport: '<Root>/CCR_max'
     *  Sum: '<Root>/Add1'
     */
    rtb_Gain1[i] = (rtb_Divide_idx_0_tmp + 1.0) * 0.5 * rtU.CCR_max;
  }

  /* Outport: '<Root>/PWMch1' */
  rtY.PWMch1 = rtb_Gain1[0];

  /* Outport: '<Root>/PWMch2' */
  rtY.PWMch2 = rtb_Gain1[1];

  /* Outport: '<Root>/PWMch3' */
  rtY.PWMch3 = rtb_Gain1[2];

  /* Outport: '<Root>/Id' incorporates:
   *  Switch: '<S163>/Switch'
   */
  rtY.Id = rtDW.Fcn_k1;

  /* Outport: '<Root>/Vdc_cal' */
  rtY.Vdc_cal = rtb_Filter;

  /* Outport: '<Root>/pi_out' */
  rtY.pi_out = rtb_Saturation;

  /* Gain: '<S43>/Filter Coefficient' incorporates:
   *  DiscreteIntegrator: '<S35>/Filter'
   *  Gain: '<S33>/Derivative Gain'
   *  Sum: '<S35>/SumD'
   */
  rtb_Filter = (0.0 - rtDW.Filter_DSTATE) * 100.0;

  /* Sum: '<Root>/Add' incorporates:
   *  Constant: '<Root>/w_ff'
   *  DiscreteIntegrator: '<S40>/Integrator'
   *  Gain: '<S45>/Proportional Gain'
   *  Sum: '<S49>/Sum'
   *  Switch: '<S157>/Switch'
   */
  rtb_Divide = ((10.0 * rtDW.Fcn1_l + rtDW.Integrator_DSTATE_f) + rtb_Filter) +
    314.15926535897933;

  /* Outport: '<Root>/Freq' incorporates:
   *  Gain: '<Root>/Gain12'
   */
  rtY.Freq = 0.15915 * rtb_Divide;

  /* Outport: '<Root>/Theta_g' */
  rtY.Theta_g = rtb_Mod1;

  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
  rtDW.DiscreteTimeIntegrator_DSTATE += 4.0E-5 * rtb_Divide;

  /* Update for DiscreteIntegrator: '<S90>/Integrator' incorporates:
   *  Gain: '<S87>/Integral Gain'
   */
  rtDW.Integrator_DSTATE += 100.0 * rtb_Sum8 * 4.0E-5;
  if (rtDW.Integrator_DSTATE > 10.0) {
    rtDW.Integrator_DSTATE = 10.0;
  } else if (rtDW.Integrator_DSTATE < -10.0) {
    rtDW.Integrator_DSTATE = -10.0;
  }

  /* End of Update for DiscreteIntegrator: '<S90>/Integrator' */

  /* Update for DiscreteIntegrator: '<S140>/Integrator' incorporates:
   *  Gain: '<S137>/Integral Gain'
   */
  rtDW.Integrator_DSTATE_e += 100.0 * rtb_Integrator_l * 4.0E-5;

  /* Update for DiscreteIntegrator: '<S40>/Integrator' incorporates:
   *  Gain: '<S37>/Integral Gain'
   *  Switch: '<S157>/Switch'
   */
  rtDW.Integrator_DSTATE_f += 10000.0 * rtDW.Fcn1_l * 4.0E-5;

  /* Update for DiscreteIntegrator: '<S35>/Filter' */
  rtDW.Filter_DSTATE += 4.0E-5 * rtb_Filter;
}

/* Model initialize function */
void TPGCI_STM32_initialize(void)
{
  /* (no initialization code required) */
}

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
