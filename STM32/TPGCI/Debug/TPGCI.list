
TPGCI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c55c  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800c830  0800c830  0000d830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cac8  0800cac8  0000dac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800cacc  0800cacc  0000dacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000b0  24000000  0800cad0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000720  240000b0  0800cb80  0000e0b0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240007d0  0800cb80  0000e7d0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015736  00000000  00000000  0000e0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000292f  00000000  00000000  00023814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012f8  00000000  00000000  00026148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e9c  00000000  00000000  00027440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003473e  00000000  00000000  000282dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000182db  00000000  00000000  0005ca1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d38b  00000000  00000000  00074cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d2080  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000054e4  00000000  00000000  001d20c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  001d75a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000b0 	.word	0x240000b0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c814 	.word	0x0800c814

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000b4 	.word	0x240000b4
 800030c:	0800c814 	.word	0x0800c814

08000310 <applyLowPassFilter>:
#include "butterworth_filter.h"

float applyLowPassFilter(float input, float* inputBuffer, float* outputBuffer) {
 8000310:	b480      	push	{r7}
 8000312:	b087      	sub	sp, #28
 8000314:	af00      	add	r7, sp, #0
 8000316:	ed87 0a03 	vstr	s0, [r7, #12]
 800031a:	60b8      	str	r0, [r7, #8]
 800031c:	6079      	str	r1, [r7, #4]
    // Shift previous inputs and outputs
    inputBuffer[2] = inputBuffer[1];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3308      	adds	r3, #8
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	601a      	str	r2, [r3, #0]
    inputBuffer[1] = inputBuffer[0];
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	3304      	adds	r3, #4
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	601a      	str	r2, [r3, #0]
    inputBuffer[0] = input;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

    outputBuffer[2] = outputBuffer[1];
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3308      	adds	r3, #8
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	6852      	ldr	r2, [r2, #4]
 8000340:	601a      	str	r2, [r3, #0]
    outputBuffer[1] = outputBuffer[0];
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3304      	adds	r3, #4
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	601a      	str	r2, [r3, #0]

    // Calculate the filtered output
    float output = B0 * inputBuffer[0] + B1 * inputBuffer[1] + B2 * inputBuffer[2]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	edd3 7a00 	vldr	s15, [r3]
 8000352:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80003c8 <applyLowPassFilter+0xb8>
 8000356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3304      	adds	r3, #4
 800035e:	edd3 7a00 	vldr	s15, [r3]
 8000362:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80003cc <applyLowPassFilter+0xbc>
 8000366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800036a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3308      	adds	r3, #8
 8000372:	edd3 7a00 	vldr	s15, [r3]
 8000376:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80003c8 <applyLowPassFilter+0xb8>
 800037a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800037e:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - A1 * outputBuffer[1] - A2 * outputBuffer[2];
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3304      	adds	r3, #4
 8000386:	edd3 7a00 	vldr	s15, [r3]
 800038a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80003d0 <applyLowPassFilter+0xc0>
 800038e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3308      	adds	r3, #8
 800039a:	edd3 7a00 	vldr	s15, [r3]
 800039e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80003d4 <applyLowPassFilter+0xc4>
 80003a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float output = B0 * inputBuffer[0] + B1 * inputBuffer[1] + B2 * inputBuffer[2]
 80003a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003aa:	edc7 7a05 	vstr	s15, [r7, #20]

    outputBuffer[0] = output;  // Store current output for next iteration
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	601a      	str	r2, [r3, #0]

    return output;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	ee07 3a90 	vmov	s15, r3
}
 80003ba:	eeb0 0a67 	vmov.f32	s0, s15
 80003be:	371c      	adds	r7, #28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	3a77a513 	.word	0x3a77a513
 80003cc:	3af7a513 	.word	0x3af7a513
 80003d0:	3ff4a234 	.word	0x3ff4a234
 80003d4:	3f6a3c21 	.word	0x3f6a3c21

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003dc:	f000 ff1e 	bl	800121c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f001 fb18 	bl	8001a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f858 	bl	8000498 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003e8:	f000 f8c4 	bl	8000574 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 fc3a 	bl	8000c64 <MX_GPIO_Init>
  MX_DMA_Init();
 80003f0:	f000 fbf8 	bl	8000be4 <MX_DMA_Init>
  MX_TIM1_Init();
 80003f4:	f000 fa90 	bl	8000918 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003f8:	f000 fb52 	bl	8000aa0 <MX_TIM2_Init>
  MX_TIM8_Init();
 80003fc:	f000 fb9e 	bl	8000b3c <MX_TIM8_Init>
  MX_ADC2_Init();
 8000400:	f000 f984 	bl	800070c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000404:	f000 fa0a 	bl	800081c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000408:	f000 f8e4 	bl	80005d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Timers starting with interrupts //
  HAL_TIM_Base_Start_IT(&htim1);
 800040c:	4819      	ldr	r0, [pc, #100]	@ (8000474 <main+0x9c>)
 800040e:	f009 f95b 	bl	80096c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000412:	4819      	ldr	r0, [pc, #100]	@ (8000478 <main+0xa0>)
 8000414:	f009 f958 	bl	80096c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000418:	4818      	ldr	r0, [pc, #96]	@ (800047c <main+0xa4>)
 800041a:	f009 f955 	bl	80096c8 <HAL_TIM_Base_Start_IT>

  // Start the ADC in DMA mode, with 3 channels
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)VoltageadcBuffer, 3);
 800041e:	2203      	movs	r2, #3
 8000420:	4917      	ldr	r1, [pc, #92]	@ (8000480 <main+0xa8>)
 8000422:	4818      	ldr	r0, [pc, #96]	@ (8000484 <main+0xac>)
 8000424:	f002 f8ac 	bl	8002580 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)CurrentadcBuffer, 3);
 8000428:	2203      	movs	r2, #3
 800042a:	4917      	ldr	r1, [pc, #92]	@ (8000488 <main+0xb0>)
 800042c:	4817      	ldr	r0, [pc, #92]	@ (800048c <main+0xb4>)
 800042e:	f002 f8a7 	bl	8002580 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)DCSenseBuffer, 2);
 8000432:	2202      	movs	r2, #2
 8000434:	4916      	ldr	r1, [pc, #88]	@ (8000490 <main+0xb8>)
 8000436:	4817      	ldr	r0, [pc, #92]	@ (8000494 <main+0xbc>)
 8000438:	f002 f8a2 	bl	8002580 <HAL_ADC_Start_DMA>
  // Timer 1 PWM pulses starting //
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800043c:	2100      	movs	r1, #0
 800043e:	480d      	ldr	r0, [pc, #52]	@ (8000474 <main+0x9c>)
 8000440:	f009 fa2a 	bl	8009898 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000444:	2100      	movs	r1, #0
 8000446:	480b      	ldr	r0, [pc, #44]	@ (8000474 <main+0x9c>)
 8000448:	f00a fac4 	bl	800a9d4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800044c:	2104      	movs	r1, #4
 800044e:	4809      	ldr	r0, [pc, #36]	@ (8000474 <main+0x9c>)
 8000450:	f009 fa22 	bl	8009898 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000454:	2104      	movs	r1, #4
 8000456:	4807      	ldr	r0, [pc, #28]	@ (8000474 <main+0x9c>)
 8000458:	f00a fabc 	bl	800a9d4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800045c:	2108      	movs	r1, #8
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <main+0x9c>)
 8000460:	f009 fa1a 	bl	8009898 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000464:	2108      	movs	r1, #8
 8000466:	4803      	ldr	r0, [pc, #12]	@ (8000474 <main+0x9c>)
 8000468:	f00a fab4 	bl	800a9d4 <HAL_TIMEx_PWMN_Start>

  TPGCI_STM32_initialize();
 800046c:	f00b fa2e 	bl	800b8cc <TPGCI_STM32_initialize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <main+0x98>
 8000474:	24000384 	.word	0x24000384
 8000478:	240003d0 	.word	0x240003d0
 800047c:	2400041c 	.word	0x2400041c
 8000480:	2400048c 	.word	0x2400048c
 8000484:	240000cc 	.word	0x240000cc
 8000488:	24000494 	.word	0x24000494
 800048c:	2400013c 	.word	0x2400013c
 8000490:	2400049c 	.word	0x2400049c
 8000494:	240001ac 	.word	0x240001ac

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b09c      	sub	sp, #112	@ 0x70
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a2:	224c      	movs	r2, #76	@ 0x4c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f00b fa17 	bl	800b8da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f00b fa11 	bl	800b8da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004b8:	2002      	movs	r0, #2
 80004ba:	f005 fd3d 	bl	8005f38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004be:	2300      	movs	r3, #0
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000570 <SystemClock_Config+0xd8>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000570 <SystemClock_Config+0xd8>)
 80004c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b28      	ldr	r3, [pc, #160]	@ (8000570 <SystemClock_Config+0xd8>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004da:	bf00      	nop
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <SystemClock_Config+0xd8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004e8:	d1f8      	bne.n	80004dc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ea:	2301      	movs	r3, #1
 80004ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	2302      	movs	r3, #2
 80004f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f8:	2302      	movs	r3, #2
 80004fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000500:	2344      	movs	r3, #68	@ 0x44
 8000502:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000510:	230c      	movs	r3, #12
 8000512:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000518:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800051c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000522:	4618      	mov	r0, r3
 8000524:	f005 fd42 	bl	8005fac <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800052e:	f000 fea1 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	233f      	movs	r3, #63	@ 0x3f
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2303      	movs	r3, #3
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800053e:	2308      	movs	r3, #8
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000546:	2340      	movs	r3, #64	@ 0x40
 8000548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800054a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000550:	2340      	movs	r3, #64	@ 0x40
 8000552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2103      	movs	r1, #3
 8000558:	4618      	mov	r0, r3
 800055a:	f006 f901 	bl	8006760 <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000564:	f000 fe86 	bl	8001274 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3770      	adds	r7, #112	@ 0x70
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58024800 	.word	0x58024800

08000574 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0ae      	sub	sp, #184	@ 0xb8
 8000578:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	22b8      	movs	r2, #184	@ 0xb8
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f00b f9aa 	bl	800b8da <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000586:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000596:	2318      	movs	r3, #24
 8000598:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800059a:	2308      	movs	r3, #8
 800059c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800059e:	2302      	movs	r3, #2
 80005a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80005a6:	23c0      	movs	r3, #192	@ 0xc0
 80005a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 fc46 	bl	8006e4c <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80005c6:	f000 fe55 	bl	8001274 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	37b8      	adds	r7, #184	@ 0xb8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2224      	movs	r2, #36	@ 0x24
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f00b f974 	bl	800b8da <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b41      	ldr	r3, [pc, #260]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80005f4:	4a41      	ldr	r2, [pc, #260]	@ (80006fc <MX_ADC1_Init+0x128>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80005fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000600:	4b3d      	ldr	r3, [pc, #244]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000606:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000608:	2201      	movs	r2, #1
 800060a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800060e:	2204      	movs	r2, #4
 8000610:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000614:	2200      	movs	r2, #0
 8000616:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800061a:	2201      	movs	r2, #1
 800061c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000620:	2203      	movs	r2, #3
 8000622:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800062e:	2200      	movs	r2, #0
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800063a:	2203      	movs	r2, #3
 800063c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063e:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000646:	2200      	movs	r2, #0
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000652:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000654:	2201      	movs	r2, #1
 8000656:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4827      	ldr	r0, [pc, #156]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800065a:	f001 fd89 	bl	8002170 <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000664:	f000 fe06 	bl	8001274 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000674:	f002 ff7a 	bl	800356c <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800067e:	f000 fdf9 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_ADC1_Init+0x12c>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 800068a:	2304      	movs	r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000692:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4814      	ldr	r0, [pc, #80]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80006a8:	f002 f85a 	bl	8002760 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006b2:	f000 fddf 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_ADC1_Init+0x130>)
 80006b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ba:	230c      	movs	r3, #12
 80006bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	480d      	ldr	r0, [pc, #52]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80006c4:	f002 f84c 	bl	8002760 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006ce:	f000 fdd1 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_ADC1_Init+0x134>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006d6:	2312      	movs	r3, #18
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80006e0:	f002 f83e 	bl	8002760 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006ea:	f000 fdc3 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3730      	adds	r7, #48	@ 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	240000cc 	.word	0x240000cc
 80006fc:	40022000 	.word	0x40022000
 8000700:	08600004 	.word	0x08600004
 8000704:	0c900008 	.word	0x0c900008
 8000708:	19200040 	.word	0x19200040

0800070c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2224      	movs	r2, #36	@ 0x24
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00b f8de 	bl	800b8da <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800071e:	4b3a      	ldr	r3, [pc, #232]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000720:	4a3a      	ldr	r2, [pc, #232]	@ (800080c <MX_ADC2_Init+0x100>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000724:	4b38      	ldr	r3, [pc, #224]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000726:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800072a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800072c:	4b36      	ldr	r3, [pc, #216]	@ (8000808 <MX_ADC2_Init+0xfc>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000732:	4b35      	ldr	r3, [pc, #212]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000734:	2201      	movs	r2, #1
 8000736:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b33      	ldr	r3, [pc, #204]	@ (8000808 <MX_ADC2_Init+0xfc>)
 800073a:	2204      	movs	r2, #4
 800073c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000744:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000746:	2201      	movs	r2, #1
 8000748:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 800074a:	4b2f      	ldr	r3, [pc, #188]	@ (8000808 <MX_ADC2_Init+0xfc>)
 800074c:	2203      	movs	r2, #3
 800074e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <MX_ADC2_Init+0xfc>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000760:	2200      	movs	r2, #0
 8000762:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000764:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000766:	2203      	movs	r2, #3
 8000768:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <MX_ADC2_Init+0xfc>)
 800076c:	2200      	movs	r2, #0
 800076e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000772:	2200      	movs	r2, #0
 8000774:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000776:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800077e:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000780:	2201      	movs	r2, #1
 8000782:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000784:	4820      	ldr	r0, [pc, #128]	@ (8000808 <MX_ADC2_Init+0xfc>)
 8000786:	f001 fcf3 	bl	8002170 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000790:	f000 fd70 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_ADC2_Init+0x104>)
 8000796:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2306      	movs	r3, #6
 800079a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 800079c:	2304      	movs	r3, #4
 800079e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a6:	2304      	movs	r3, #4
 80007a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4813      	ldr	r0, [pc, #76]	@ (8000808 <MX_ADC2_Init+0xfc>)
 80007ba:	f001 ffd1 	bl	8002760 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 80007c4:	f000 fd56 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_ADC2_Init+0x108>)
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007cc:	230c      	movs	r3, #12
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_ADC2_Init+0xfc>)
 80007d6:	f001 ffc3 	bl	8002760 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC2_Init+0xd8>
  {
    Error_Handler();
 80007e0:	f000 fd48 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_ADC2_Init+0x10c>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007e8:	2312      	movs	r3, #18
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_ADC2_Init+0xfc>)
 80007f2:	f001 ffb5 	bl	8002760 <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 80007fc:	f000 fd3a 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	@ 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2400013c 	.word	0x2400013c
 800080c:	40022100 	.word	0x40022100
 8000810:	08600004 	.word	0x08600004
 8000814:	19200040 	.word	0x19200040
 8000818:	4b840000 	.word	0x4b840000

0800081c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2224      	movs	r2, #36	@ 0x24
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f00b f856 	bl	800b8da <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800082e:	4b37      	ldr	r3, [pc, #220]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000830:	4a37      	ldr	r2, [pc, #220]	@ (8000910 <MX_ADC3_Init+0xf4>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000834:	4b35      	ldr	r3, [pc, #212]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000836:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 800083a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b33      	ldr	r3, [pc, #204]	@ (800090c <MX_ADC3_Init+0xf0>)
 800083e:	2208      	movs	r2, #8
 8000840:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000842:	4b32      	ldr	r3, [pc, #200]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000848:	4b30      	ldr	r3, [pc, #192]	@ (800090c <MX_ADC3_Init+0xf0>)
 800084a:	2201      	movs	r2, #1
 800084c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	4b2f      	ldr	r3, [pc, #188]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000850:	2204      	movs	r2, #4
 8000852:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000854:	4b2d      	ldr	r3, [pc, #180]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000856:	2200      	movs	r2, #0
 8000858:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085a:	4b2c      	ldr	r3, [pc, #176]	@ (800090c <MX_ADC3_Init+0xf0>)
 800085c:	2201      	movs	r2, #1
 800085e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000860:	4b2a      	ldr	r3, [pc, #168]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000862:	2202      	movs	r2, #2
 8000864:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000866:	4b29      	ldr	r3, [pc, #164]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_ADC3_Init+0xf0>)
 800087c:	2201      	movs	r2, #1
 800087e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000882:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000884:	2200      	movs	r2, #0
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000888:	4b20      	ldr	r3, [pc, #128]	@ (800090c <MX_ADC3_Init+0xf0>)
 800088a:	2203      	movs	r2, #3
 800088c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000890:	2200      	movs	r2, #0
 8000892:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000894:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_ADC3_Init+0xf0>)
 8000896:	2200      	movs	r2, #0
 8000898:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_ADC3_Init+0xf0>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_4;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_ADC3_Init+0xf0>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008a8:	4818      	ldr	r0, [pc, #96]	@ (800090c <MX_ADC3_Init+0xf0>)
 80008aa:	f001 fc61 	bl	8002170 <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80008b4:	f000 fcde 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_ADC3_Init+0xf8>)
 80008ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008bc:	2306      	movs	r3, #6
 80008be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_47CYCLES_5;
 80008c0:	2304      	movs	r3, #4
 80008c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008c4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ca:	2304      	movs	r3, #4
 80008cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4619      	mov	r1, r3
 80008da:	480c      	ldr	r0, [pc, #48]	@ (800090c <MX_ADC3_Init+0xf0>)
 80008dc:	f001 ff40 	bl	8002760 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008e6:	f000 fcc5 	bl	8001274 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ea:	230c      	movs	r3, #12
 80008ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	@ (800090c <MX_ADC3_Init+0xf0>)
 80008f4:	f001 ff34 	bl	8002760 <HAL_ADC_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 80008fe:	f000 fcb9 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	@ 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	240001ac 	.word	0x240001ac
 8000910:	58026000 	.word	0x58026000
 8000914:	04300002 	.word	0x04300002

08000918 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	@ 0x70
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000938:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
 8000948:	615a      	str	r2, [r3, #20]
 800094a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2234      	movs	r2, #52	@ 0x34
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f00a ffc1 	bl	800b8da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b4f      	ldr	r3, [pc, #316]	@ (8000a98 <MX_TIM1_Init+0x180>)
 800095a:	4a50      	ldr	r2, [pc, #320]	@ (8000a9c <MX_TIM1_Init+0x184>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800095e:	4b4e      	ldr	r3, [pc, #312]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000960:	2209      	movs	r2, #9
 8000962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b4c      	ldr	r3, [pc, #304]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1375;
 800096a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a98 <MX_TIM1_Init+0x180>)
 800096c:	f240 525f 	movw	r2, #1375	@ 0x55f
 8000970:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000978:	4b47      	ldr	r3, [pc, #284]	@ (8000a98 <MX_TIM1_Init+0x180>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000984:	4844      	ldr	r0, [pc, #272]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000986:	f008 fe47 	bl	8009618 <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000990:	f000 fc70 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000998:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800099e:	4619      	mov	r1, r3
 80009a0:	483d      	ldr	r0, [pc, #244]	@ (8000a98 <MX_TIM1_Init+0x180>)
 80009a2:	f009 fab1 	bl	8009f08 <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009ac:	f000 fc62 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009b0:	4839      	ldr	r0, [pc, #228]	@ (8000a98 <MX_TIM1_Init+0x180>)
 80009b2:	f008 ff0f 	bl	80097d4 <HAL_TIM_PWM_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009bc:	f000 fc5a 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009d0:	4619      	mov	r1, r3
 80009d2:	4831      	ldr	r0, [pc, #196]	@ (8000a98 <MX_TIM1_Init+0x180>)
 80009d4:	f00a f8ce 	bl	800ab74 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009de:	f000 fc49 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e2:	2360      	movs	r3, #96	@ 0x60
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4824      	ldr	r0, [pc, #144]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000a08:	f009 f96a 	bl	8009ce0 <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a12:	f000 fc2f 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	481e      	ldr	r0, [pc, #120]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000a20:	f009 f95e 	bl	8009ce0 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a2a:	f000 fc23 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a32:	2208      	movs	r2, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000a38:	f009 f952 	bl	8009ce0 <HAL_TIM_PWM_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a42:	f000 fc17 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000a52:	23ff      	movs	r3, #255	@ 0xff
 8000a54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000a7c:	f00a f916 	bl	800acac <HAL_TIMEx_ConfigBreakDeadTime>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000a86:	f000 fbf5 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a8a:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <MX_TIM1_Init+0x180>)
 8000a8c:	f000 fe26 	bl	80016dc <HAL_TIM_MspPostInit>

}
 8000a90:	bf00      	nop
 8000a92:	3770      	adds	r7, #112	@ 0x70
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	24000384 	.word	0x24000384
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ac4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000ac8:	2209      	movs	r2, #9
 8000aca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1100;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000ad4:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae6:	4814      	ldr	r0, [pc, #80]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000ae8:	f008 fd96 	bl	8009618 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000af2:	f000 fbbf 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000b04:	f009 fa00 	bl	8009f08 <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0e:	f000 fbb1 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <MX_TIM2_Init+0x98>)
 8000b20:	f00a f828 	bl	800ab74 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b2a:	f000 fba3 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240003d0 	.word	0x240003d0

08000b3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b5c:	4a20      	ldr	r2, [pc, #128]	@ (8000be0 <MX_TIM8_Init+0xa4>)
 8000b5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9;
 8000b60:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b62:	2209      	movs	r2, #9
 8000b64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 40000;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b6e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000b72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b86:	4815      	ldr	r0, [pc, #84]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000b88:	f008 fd46 	bl	8009618 <HAL_TIM_Base_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000b92:	f000 fb6f 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000ba4:	f009 f9b0 	bl	8009f08 <HAL_TIM_ConfigClockSource>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000bae:	f000 fb61 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <MX_TIM8_Init+0xa0>)
 8000bc4:	f009 ffd6 	bl	800ab74 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000bce:	f000 fb51 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2400041c 	.word	0x2400041c
 8000be0:	40010400 	.word	0x40010400

08000be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bea:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_DMA_Init+0x7c>)
 8000bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c60 <MX_DMA_Init+0x7c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <MX_DMA_Init+0x7c>)
 8000bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <MX_DMA_Init+0x7c>)
 8000c0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c0e:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <MX_DMA_Init+0x7c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_DMA_Init+0x7c>)
 8000c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	200b      	movs	r0, #11
 8000c2c:	f002 fe5b 	bl	80038e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c30:	200b      	movs	r0, #11
 8000c32:	f002 fe72 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200c      	movs	r0, #12
 8000c3c:	f002 fe53 	bl	80038e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f002 fe6a 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	203a      	movs	r0, #58	@ 0x3a
 8000c4c:	f002 fe4b 	bl	80038e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c50:	203a      	movs	r0, #58	@ 0x3a
 8000c52:	f002 fe62 	bl	800391a <HAL_NVIC_EnableIRQ>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c70:	4a2e      	ldr	r2, [pc, #184]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000c72:	f043 0320 	orr.w	r3, r3, #32
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c88:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	4a27      	ldr	r2, [pc, #156]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	4a18      	ldr	r2, [pc, #96]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <MX_GPIO_Init+0xc8>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1e:	bf00      	nop
 8000d20:	371c      	adds	r7, #28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	58024400 	.word	0x58024400

08000d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM1) {
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a51      	ldr	r2, [pc, #324]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d127      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x62>
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMch1);
 8000d42:	4b51      	ldr	r3, [pc, #324]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d44:	ed93 7b00 	vldr	d7, [r3]
 8000d48:	4b50      	ldr	r3, [pc, #320]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d50:	ee17 2a90 	vmov	r2, s15
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMch2);
 8000d56:	4b4e      	ldr	r3, [pc, #312]	@ (8000e90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d58:	ed93 7b00 	vldr	d7, [r3]
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d64:	ee17 2a90 	vmov	r2, s15
 8000d68:	639a      	str	r2, [r3, #56]	@ 0x38
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWMch3);
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d6c:	ed93 7b00 	vldr	d7, [r3]
 8000d70:	4b46      	ldr	r3, [pc, #280]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d78:	ee17 2a90 	vmov	r2, s15
 8000d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    	Tim1_check++;
 8000d7e:	4b46      	ldr	r3, [pc, #280]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d8c:	4b42      	ldr	r3, [pc, #264]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000d8e:	edc3 7a00 	vstr	s15, [r3]
    }
    if (htim->Instance == TIM2) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d9a:	d138      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0xde>
    	Va_g=VOLTAGE_R_PHASE;
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000da8:	ed83 7b00 	vstr	d7, [r3]
    	Vb_g=VOLTAGE_Y_PHASE;
 8000dac:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000dae:	edd3 7a00 	vldr	s15, [r3]
 8000db2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000db8:	ed83 7b00 	vstr	d7, [r3]
        Vc_g=VOLTAGE_B_PHASE;
 8000dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dc8:	ed83 7b00 	vstr	d7, [r3]
        Ia_g=0; //CURRENT_R_PHASE
 8000dcc:	4939      	ldr	r1, [pc, #228]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	e9c1 2300 	strd	r2, r3, [r1]
        Ib_g=0; //CURRENT_Y_PHASE
 8000dda:	4937      	ldr	r1, [pc, #220]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c1 2300 	strd	r2, r3, [r1]
        Ic_g=0; //CURRENT_B_PHASE
 8000de8:	4934      	ldr	r1, [pc, #208]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	e9c1 2300 	strd	r2, r3, [r1]
    	TPGCI_STM32_step();
 8000df6:	f00a f9fb 	bl	800b1f0 <TPGCI_STM32_step>
    	Tim2_check++;
 8000dfa:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]
    }
    if (htim->Instance == TIM8) {
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d131      	bne.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x14c>
        VDC=VDC_i;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e22:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e24:	ed83 7b00 	vstr	d7, [r3]
        CCR_max = CCR_max_i;
 8000e28:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e32:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e34:	ed83 7b00 	vstr	d7, [r3]
        Id_ref = Id_ref_i;
 8000e38:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e42:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e44:	ed83 7b00 	vstr	d7, [r3]
        Iq_ref = Iq_ref_i;
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e52:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000e54:	ed83 7b00 	vstr	d7, [r3]
        phasedelay = phasedelay_i;
 8000e58:	4b23      	ldr	r3, [pc, #140]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e62:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e64:	ed83 7b00 	vstr	d7, [r3]
    	Tim8_check++;
 8000e68:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e78:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010000 	.word	0x40010000
 8000e88:	24000598 	.word	0x24000598
 8000e8c:	24000384 	.word	0x24000384
 8000e90:	240005a0 	.word	0x240005a0
 8000e94:	240005a8 	.word	0x240005a8
 8000e98:	240004a0 	.word	0x240004a0
 8000e9c:	2400046c 	.word	0x2400046c
 8000ea0:	240005c0 	.word	0x240005c0
 8000ea4:	24000470 	.word	0x24000470
 8000ea8:	240005c8 	.word	0x240005c8
 8000eac:	24000474 	.word	0x24000474
 8000eb0:	240005d0 	.word	0x240005d0
 8000eb4:	24000560 	.word	0x24000560
 8000eb8:	24000568 	.word	0x24000568
 8000ebc:	24000570 	.word	0x24000570
 8000ec0:	240004a4 	.word	0x240004a4
 8000ec4:	40010400 	.word	0x40010400
 8000ec8:	24000000 	.word	0x24000000
 8000ecc:	240005b8 	.word	0x240005b8
 8000ed0:	24000004 	.word	0x24000004
 8000ed4:	24000550 	.word	0x24000550
 8000ed8:	24000008 	.word	0x24000008
 8000edc:	24000580 	.word	0x24000580
 8000ee0:	24000468 	.word	0x24000468
 8000ee4:	24000590 	.word	0x24000590
 8000ee8:	2400000c 	.word	0x2400000c
 8000eec:	24000600 	.word	0x24000600
 8000ef0:	240004a8 	.word	0x240004a8

08000ef4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a9e      	ldr	r2, [pc, #632]	@ (800117c <HAL_ADC_ConvCpltCallback+0x288>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f040 808b 	bne.w	800101e <HAL_ADC_ConvCpltCallback+0x12a>
    {
        // Convert the raw ADC values to voltages (0 to 3.3V scale)
    	float rawR = (((((float)VoltageadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_R_OFFSET)*VOLTAGE_R_GAIN)-4;
 8000f08:	4b9d      	ldr	r3, [pc, #628]	@ (8001180 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f14:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8000f18:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f1c:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 8000f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f28:	4b98      	ldr	r3, [pc, #608]	@ (800118c <HAL_ADC_ConvCpltCallback+0x298>)
 8000f2a:	edd3 7a00 	vldr	s15, [r3]
 8000f2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f32:	4b97      	ldr	r3, [pc, #604]	@ (8001190 <HAL_ADC_ConvCpltCallback+0x29c>)
 8000f34:	edd3 7a00 	vldr	s15, [r3]
 8000f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f44:	edc7 7a07 	vstr	s15, [r7, #28]
    	float rawY = (((((float)VoltageadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_Y_OFFSET)*VOLTAGE_Y_GAIN)-4;
 8000f48:	4b8d      	ldr	r3, [pc, #564]	@ (8001180 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000f4a:	885b      	ldrh	r3, [r3, #2]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f54:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8000f58:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f5c:	eddf 7a8a 	vldr	s15, [pc, #552]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 8000f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f68:	4b8a      	ldr	r3, [pc, #552]	@ (8001194 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f72:	4b89      	ldr	r3, [pc, #548]	@ (8001198 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000f74:	edd3 7a00 	vldr	s15, [r3]
 8000f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f84:	edc7 7a06 	vstr	s15, [r7, #24]
    	float rawB = (((((float)VoltageadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_B_OFFSET)*VOLTAGE_B_GAIN)-4;
 8000f88:	4b7d      	ldr	r3, [pc, #500]	@ (8001180 <HAL_ADC_ConvCpltCallback+0x28c>)
 8000f8a:	889b      	ldrh	r3, [r3, #4]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f94:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8000f98:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f9c:	eddf 7a7a 	vldr	s15, [pc, #488]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 8000fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fa8:	4b7c      	ldr	r3, [pc, #496]	@ (800119c <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb2:	4b7b      	ldr	r3, [pc, #492]	@ (80011a0 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fc4:	edc7 7a05 	vstr	s15, [r7, #20]
        // Apply the filter to each phase voltage
        VOLTAGE_R_PHASE = applyLowPassFilter(rawR, VoltageR_Input, VoltageR_Output);
 8000fc8:	4976      	ldr	r1, [pc, #472]	@ (80011a4 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8000fca:	4877      	ldr	r0, [pc, #476]	@ (80011a8 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8000fcc:	ed97 0a07 	vldr	s0, [r7, #28]
 8000fd0:	f7ff f99e 	bl	8000310 <applyLowPassFilter>
 8000fd4:	eef0 7a40 	vmov.f32	s15, s0
 8000fd8:	4b74      	ldr	r3, [pc, #464]	@ (80011ac <HAL_ADC_ConvCpltCallback+0x2b8>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]
        VOLTAGE_Y_PHASE = applyLowPassFilter(rawY, VoltageY_Input, VoltageY_Output);
 8000fde:	4974      	ldr	r1, [pc, #464]	@ (80011b0 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8000fe0:	4874      	ldr	r0, [pc, #464]	@ (80011b4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8000fe2:	ed97 0a06 	vldr	s0, [r7, #24]
 8000fe6:	f7ff f993 	bl	8000310 <applyLowPassFilter>
 8000fea:	eef0 7a40 	vmov.f32	s15, s0
 8000fee:	4b72      	ldr	r3, [pc, #456]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
        VOLTAGE_B_PHASE = applyLowPassFilter(rawB, VoltageB_Input, VoltageB_Output);
 8000ff4:	4971      	ldr	r1, [pc, #452]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8000ff6:	4872      	ldr	r0, [pc, #456]	@ (80011c0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8000ff8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ffc:	f7ff f988 	bl	8000310 <applyLowPassFilter>
 8001000:	eef0 7a40 	vmov.f32	s15, s0
 8001004:	4b6f      	ldr	r3, [pc, #444]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001006:	edc3 7a00 	vstr	s15, [r3]
    	ADC1_Check++;
 800100a:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001018:	4b6b      	ldr	r3, [pc, #428]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 800101a:	edc3 7a00 	vstr	s15, [r3]
    }
    if (hadc->Instance == ADC2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a6a      	ldr	r2, [pc, #424]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d16f      	bne.n	8001108 <HAL_ADC_ConvCpltCallback+0x214>
    {
//    	float rawIR = ((((float)CurrentadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-CURRENT_R_OFFSET)*CURRENT_R_GAIN;
//    	float rawIY = ((((float)CurrentadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-CURRENT_Y_OFFSET)*CURRENT_Y_GAIN;
//    	float rawIB = ((((float)CurrentadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-CURRENT_B_OFFSET)*CURRENT_B_GAIN;
    	float rawIR = (((float)CurrentadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-CURRENT_R_OFFSET;
 8001028:	4b69      	ldr	r3, [pc, #420]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001034:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8001038:	ee67 6a87 	vmul.f32	s13, s15, s14
 800103c:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 8001040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001048:	4b62      	ldr	r3, [pc, #392]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001052:	edc7 7a04 	vstr	s15, [r7, #16]
    	float rawIY = (((float)CurrentadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-CURRENT_Y_OFFSET;
 8001056:	4b5e      	ldr	r3, [pc, #376]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8001058:	885b      	ldrh	r3, [r3, #2]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001062:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8001066:	ee67 6a87 	vmul.f32	s13, s15, s14
 800106a:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 800106e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001076:	4b58      	ldr	r3, [pc, #352]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001080:	edc7 7a03 	vstr	s15, [r7, #12]
    	float rawIB = (((float)CurrentadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-CURRENT_B_OFFSET;
 8001084:	4b52      	ldr	r3, [pc, #328]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8001086:	889b      	ldrh	r3, [r3, #4]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001090:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8001094:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001098:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 800109c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010a4:	4b4d      	ldr	r3, [pc, #308]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ae:	edc7 7a02 	vstr	s15, [r7, #8]
    	CURRENT_R_PHASE = applyLowPassFilter(rawIR, CurrentR_Input, CurrentR_Output);
 80010b2:	494b      	ldr	r1, [pc, #300]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x2ec>)
 80010b4:	484b      	ldr	r0, [pc, #300]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x2f0>)
 80010b6:	ed97 0a04 	vldr	s0, [r7, #16]
 80010ba:	f7ff f929 	bl	8000310 <applyLowPassFilter>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <HAL_ADC_ConvCpltCallback+0x2f4>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
    	CURRENT_Y_PHASE = applyLowPassFilter(rawIY, CurrentY_Input, CurrentY_Output);
 80010c8:	4948      	ldr	r1, [pc, #288]	@ (80011ec <HAL_ADC_ConvCpltCallback+0x2f8>)
 80010ca:	4849      	ldr	r0, [pc, #292]	@ (80011f0 <HAL_ADC_ConvCpltCallback+0x2fc>)
 80010cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80010d0:	f7ff f91e 	bl	8000310 <applyLowPassFilter>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	4b46      	ldr	r3, [pc, #280]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0x300>)
 80010da:	edc3 7a00 	vstr	s15, [r3]
    	CURRENT_B_PHASE = applyLowPassFilter(rawIB, CurrentB_Input, CurrentB_Output);
 80010de:	4946      	ldr	r1, [pc, #280]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0x304>)
 80010e0:	4846      	ldr	r0, [pc, #280]	@ (80011fc <HAL_ADC_ConvCpltCallback+0x308>)
 80010e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80010e6:	f7ff f913 	bl	8000310 <applyLowPassFilter>
 80010ea:	eef0 7a40 	vmov.f32	s15, s0
 80010ee:	4b44      	ldr	r3, [pc, #272]	@ (8001200 <HAL_ADC_ConvCpltCallback+0x30c>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
    	ADC2_Check++;
 80010f4:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x310>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001102:	4b40      	ldr	r3, [pc, #256]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x310>)
 8001104:	edc3 7a00 	vstr	s15, [r3]
    }
    if (hadc->Instance == ADC3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3e      	ldr	r2, [pc, #248]	@ (8001208 <HAL_ADC_ConvCpltCallback+0x314>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12f      	bne.n	8001172 <HAL_ADC_ConvCpltCallback+0x27e>
    {
    	DC_Voltage = (((float)DCSenseBuffer[0] * VREF) / ADC_16bRESOLUTION);
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <HAL_ADC_ConvCpltCallback+0x318>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8001122:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001126:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 800112a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800112e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <HAL_ADC_ConvCpltCallback+0x31c>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
    	DC_Current = (((float)DCSenseBuffer[1] * VREF) / ADC_16bRESOLUTION);
 8001138:	4b34      	ldr	r3, [pc, #208]	@ (800120c <HAL_ADC_ConvCpltCallback+0x318>)
 800113a:	885b      	ldrh	r3, [r3, #2]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001144:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001184 <HAL_ADC_ConvCpltCallback+0x290>
 8001148:	ee67 6a87 	vmul.f32	s13, s15, s14
 800114c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8001188 <HAL_ADC_ConvCpltCallback+0x294>
 8001150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <HAL_ADC_ConvCpltCallback+0x320>)
 800115a:	edc3 7a00 	vstr	s15, [r3]
    	ADC3_Check++;
 800115e:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <HAL_ADC_ConvCpltCallback+0x324>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001168:	ee77 7a87 	vadd.f32	s15, s15, s14
 800116c:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <HAL_ADC_ConvCpltCallback+0x324>)
 800116e:	edc3 7a00 	vstr	s15, [r3]
    }

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000
 8001180:	2400048c 	.word	0x2400048c
 8001184:	40533333 	.word	0x40533333
 8001188:	0000ffff 	.word	0x0000ffff
 800118c:	24000010 	.word	0x24000010
 8001190:	2400001c 	.word	0x2400001c
 8001194:	24000014 	.word	0x24000014
 8001198:	24000020 	.word	0x24000020
 800119c:	24000018 	.word	0x24000018
 80011a0:	24000024 	.word	0x24000024
 80011a4:	240004c4 	.word	0x240004c4
 80011a8:	240004b8 	.word	0x240004b8
 80011ac:	2400046c 	.word	0x2400046c
 80011b0:	240004dc 	.word	0x240004dc
 80011b4:	240004d0 	.word	0x240004d0
 80011b8:	24000470 	.word	0x24000470
 80011bc:	240004f4 	.word	0x240004f4
 80011c0:	240004e8 	.word	0x240004e8
 80011c4:	24000474 	.word	0x24000474
 80011c8:	240004ac 	.word	0x240004ac
 80011cc:	40022100 	.word	0x40022100
 80011d0:	24000494 	.word	0x24000494
 80011d4:	24000028 	.word	0x24000028
 80011d8:	2400002c 	.word	0x2400002c
 80011dc:	24000030 	.word	0x24000030
 80011e0:	2400050c 	.word	0x2400050c
 80011e4:	24000500 	.word	0x24000500
 80011e8:	24000478 	.word	0x24000478
 80011ec:	24000524 	.word	0x24000524
 80011f0:	24000518 	.word	0x24000518
 80011f4:	2400047c 	.word	0x2400047c
 80011f8:	2400053c 	.word	0x2400053c
 80011fc:	24000530 	.word	0x24000530
 8001200:	24000480 	.word	0x24000480
 8001204:	240004b0 	.word	0x240004b0
 8001208:	58026000 	.word	0x58026000
 800120c:	2400049c 	.word	0x2400049c
 8001210:	24000484 	.word	0x24000484
 8001214:	24000488 	.word	0x24000488
 8001218:	240004b4 	.word	0x240004b4

0800121c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800122e:	f002 fb8f 	bl	8003950 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001232:	2301      	movs	r3, #1
 8001234:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001236:	2300      	movs	r3, #0
 8001238:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800123e:	231f      	movs	r3, #31
 8001240:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001242:	2387      	movs	r3, #135	@ 0x87
 8001244:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001246:	2300      	movs	r3, #0
 8001248:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800124a:	2300      	movs	r3, #0
 800124c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001252:	2301      	movs	r3, #1
 8001254:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800125e:	463b      	mov	r3, r7
 8001260:	4618      	mov	r0, r3
 8001262:	f002 fbad 	bl	80039c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001266:	2004      	movs	r0, #4
 8001268:	f002 fb8a 	bl	8003980 <HAL_MPU_Enable>

}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <Error_Handler+0x8>

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_MspInit+0x30>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800128c:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x30>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x30>)
 8001298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	@ 0x40
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a84      	ldr	r2, [pc, #528]	@ (80014e4 <HAL_ADC_MspInit+0x230>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d17f      	bne.n	80013d6 <HAL_ADC_MspInit+0x122>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012d6:	4b84      	ldr	r3, [pc, #528]	@ (80014e8 <HAL_ADC_MspInit+0x234>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a82      	ldr	r2, [pc, #520]	@ (80014e8 <HAL_ADC_MspInit+0x234>)
 80012de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012e0:	4b81      	ldr	r3, [pc, #516]	@ (80014e8 <HAL_ADC_MspInit+0x234>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10e      	bne.n	8001306 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012e8:	4b80      	ldr	r3, [pc, #512]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 80012ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012ee:	4a7f      	ldr	r2, [pc, #508]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012f8:	4b7c      	ldr	r3, [pc, #496]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 80012fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b79      	ldr	r3, [pc, #484]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	4a77      	ldr	r2, [pc, #476]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001316:	4b75      	ldr	r3, [pc, #468]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001324:	4b71      	ldr	r3, [pc, #452]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	4a70      	ldr	r2, [pc, #448]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 800132c:	f043 0320 	orr.w	r3, r3, #32
 8001330:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001334:	4b6d      	ldr	r3, [pc, #436]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001342:	2340      	movs	r3, #64	@ 0x40
 8001344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001352:	4619      	mov	r1, r3
 8001354:	4866      	ldr	r0, [pc, #408]	@ (80014f0 <HAL_ADC_MspInit+0x23c>)
 8001356:	f004 fc47 	bl	8005be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800135a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001360:	2303      	movs	r3, #3
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001368:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136c:	4619      	mov	r1, r3
 800136e:	4861      	ldr	r0, [pc, #388]	@ (80014f4 <HAL_ADC_MspInit+0x240>)
 8001370:	f004 fc3a 	bl	8005be8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001374:	4b60      	ldr	r3, [pc, #384]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 8001376:	4a61      	ldr	r2, [pc, #388]	@ (80014fc <HAL_ADC_MspInit+0x248>)
 8001378:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800137a:	4b5f      	ldr	r3, [pc, #380]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 800137c:	2209      	movs	r2, #9
 800137e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001380:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b5c      	ldr	r3, [pc, #368]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b5a      	ldr	r3, [pc, #360]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 800138e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001392:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001394:	4b58      	ldr	r3, [pc, #352]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 8001396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800139a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800139c:	4b56      	ldr	r3, [pc, #344]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 800139e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013a4:	4b54      	ldr	r3, [pc, #336]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 80013a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013ac:	4b52      	ldr	r3, [pc, #328]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b2:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013b8:	484f      	ldr	r0, [pc, #316]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 80013ba:	f002 fb41 	bl	8003a40 <HAL_DMA_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 80013c4:	f7ff ff56 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4b      	ldr	r2, [pc, #300]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 80013cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80013ce:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <HAL_ADC_MspInit+0x244>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80013d4:	e10f      	b.n	80015f6 <HAL_ADC_MspInit+0x342>
  else if(hadc->Instance==ADC2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_ADC_MspInit+0x24c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	f040 8095 	bne.w	800150c <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_ADC_MspInit+0x234>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a3f      	ldr	r2, [pc, #252]	@ (80014e8 <HAL_ADC_MspInit+0x234>)
 80013ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ec:	4b3e      	ldr	r3, [pc, #248]	@ (80014e8 <HAL_ADC_MspInit+0x234>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10e      	bne.n	8001412 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013f4:	4b3d      	ldr	r3, [pc, #244]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 80013f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013fa:	4a3c      	ldr	r2, [pc, #240]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001404:	4b39      	ldr	r3, [pc, #228]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001406:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b36      	ldr	r3, [pc, #216]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001418:	4a34      	ldr	r2, [pc, #208]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001422:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001430:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001436:	4a2d      	ldr	r2, [pc, #180]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_ADC_MspInit+0x238>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800144e:	2310      	movs	r3, #16
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145e:	4619      	mov	r1, r3
 8001460:	4823      	ldr	r0, [pc, #140]	@ (80014f0 <HAL_ADC_MspInit+0x23c>)
 8001462:	f004 fbc1 	bl	8005be8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001466:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146c:	2303      	movs	r3, #3
 800146e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001478:	4619      	mov	r1, r3
 800147a:	481e      	ldr	r0, [pc, #120]	@ (80014f4 <HAL_ADC_MspInit+0x240>)
 800147c:	f004 fbb4 	bl	8005be8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 8001482:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <HAL_ADC_MspInit+0x254>)
 8001484:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 8001488:	220a      	movs	r2, #10
 800148a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 800149a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800149e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a8:	4b16      	ldr	r3, [pc, #88]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014b0:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014c4:	480f      	ldr	r0, [pc, #60]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014c6:	f002 fabb 	bl	8003a40 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0x220>
      Error_Handler();
 80014d0:	f7ff fed0 	bl	8001274 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <HAL_ADC_MspInit+0x250>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80014e0:	e089      	b.n	80015f6 <HAL_ADC_MspInit+0x342>
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000
 80014e8:	24000548 	.word	0x24000548
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020000 	.word	0x58020000
 80014f4:	58021400 	.word	0x58021400
 80014f8:	2400021c 	.word	0x2400021c
 80014fc:	40020010 	.word	0x40020010
 8001500:	40022100 	.word	0x40022100
 8001504:	24000294 	.word	0x24000294
 8001508:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a3b      	ldr	r2, [pc, #236]	@ (8001600 <HAL_ADC_MspInit+0x34c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d16f      	bne.n	80015f6 <HAL_ADC_MspInit+0x342>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	4a39      	ldr	r2, [pc, #228]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001534:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153a:	4a32      	ldr	r2, [pc, #200]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001544:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154a:	f003 0320 	and.w	r3, r3, #32
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	4a2a      	ldr	r2, [pc, #168]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001562:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <HAL_ADC_MspInit+0x350>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001582:	4619      	mov	r1, r3
 8001584:	4820      	ldr	r0, [pc, #128]	@ (8001608 <HAL_ADC_MspInit+0x354>)
 8001586:	f004 fb2f 	bl	8005be8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800158a:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800158e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001592:	f000 fad1 	bl	8001b38 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream2;
 8001596:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <HAL_ADC_MspInit+0x358>)
 8001598:	4a1d      	ldr	r2, [pc, #116]	@ (8001610 <HAL_ADC_MspInit+0x35c>)
 800159a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_ADC_MspInit+0x358>)
 800159e:	2273      	movs	r2, #115	@ 0x73
 80015a0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015bc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015cc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015da:	480c      	ldr	r0, [pc, #48]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015dc:	f002 fa30 	bl	8003a40 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_ADC_MspInit+0x336>
      Error_Handler();
 80015e6:	f7ff fe45 	bl	8001274 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <HAL_ADC_MspInit+0x358>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015f6:	bf00      	nop
 80015f8:	3740      	adds	r7, #64	@ 0x40
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	58026000 	.word	0x58026000
 8001604:	58024400 	.word	0x58024400
 8001608:	58021400 	.word	0x58021400
 800160c:	2400030c 	.word	0x2400030c
 8001610:	40020440 	.word	0x40020440

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2b      	ldr	r2, [pc, #172]	@ (80016d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d117      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800162c:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001636:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2019      	movs	r0, #25
 800164a:	f002 f94c 	bl	80038e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800164e:	2019      	movs	r0, #25
 8001650:	f002 f963 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001654:	e038      	b.n	80016c8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800165e:	d117      	bne.n	8001690 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001660:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001666:	4a1b      	ldr	r2, [pc, #108]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 8001672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	201c      	movs	r0, #28
 8001684:	f002 f92f 	bl	80038e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001688:	201c      	movs	r0, #28
 800168a:	f002 f946 	bl	800391a <HAL_NVIC_EnableIRQ>
}
 800168e:	e01b      	b.n	80016c8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM8)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <HAL_TIM_Base_MspInit+0xc4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d116      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 800169c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_TIM_Base_MspInit+0xc0>)
 80016ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	202c      	movs	r0, #44	@ 0x2c
 80016be:	f002 f912 	bl	80038e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80016c2:	202c      	movs	r0, #44	@ 0x2c
 80016c4:	f002 f929 	bl	800391a <HAL_NVIC_EnableIRQ>
}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010000 	.word	0x40010000
 80016d4:	58024400 	.word	0x58024400
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a22      	ldr	r2, [pc, #136]	@ (8001784 <HAL_TIM_MspPostInit+0xa8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d13e      	bne.n	800177c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <HAL_TIM_MspPostInit+0xac>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	4a20      	ldr	r2, [pc, #128]	@ (8001788 <HAL_TIM_MspPostInit+0xac>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <HAL_TIM_MspPostInit+0xac>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <HAL_TIM_MspPostInit+0xac>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001722:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_TIM_MspPostInit+0xac>)
 8001724:	f043 0310 	orr.w	r3, r3, #16
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <HAL_TIM_MspPostInit+0xac>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800173a:	2303      	movs	r3, #3
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800174a:	2301      	movs	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <HAL_TIM_MspPostInit+0xb0>)
 8001756:	f004 fa47 	bl	8005be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800175a:	f44f 532c 	mov.w	r3, #11008	@ 0x2b00
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800176c:	2301      	movs	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	@ (8001790 <HAL_TIM_MspPostInit+0xb4>)
 8001778:	f004 fa36 	bl	8005be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	@ 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010000 	.word	0x40010000
 8001788:	58024400 	.word	0x58024400
 800178c:	58020400 	.word	0x58020400
 8001790:	58021000 	.word	0x58021000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <NMI_Handler+0x4>

0800179c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <MemManage_Handler+0x4>

080017ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <UsageFault_Handler+0x4>

080017bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ea:	f000 f985 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Stream0_IRQHandler+0x10>)
 80017fa:	f002 fee3 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2400021c 	.word	0x2400021c

08001808 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <DMA1_Stream1_IRQHandler+0x10>)
 800180e:	f002 fed9 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	24000294 	.word	0x24000294

0800181c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <TIM1_UP_IRQHandler+0x10>)
 8001822:	f008 f955 	bl	8009ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000384 	.word	0x24000384

08001830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <TIM2_IRQHandler+0x10>)
 8001836:	f008 f94b 	bl	8009ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	240003d0 	.word	0x240003d0

08001844 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800184a:	f008 f941 	bl	8009ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2400041c 	.word	0x2400041c

08001858 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <DMA2_Stream2_IRQHandler+0x10>)
 800185e:	f002 feb1 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2400030c 	.word	0x2400030c

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001870:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <SystemInit+0x100>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001876:	4a3d      	ldr	r2, [pc, #244]	@ (800196c <SystemInit+0x100>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001880:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <SystemInit+0x104>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	2b06      	cmp	r3, #6
 800188a:	d807      	bhi.n	800189c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800188c:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <SystemInit+0x104>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 030f 	bic.w	r3, r3, #15
 8001894:	4a36      	ldr	r2, [pc, #216]	@ (8001970 <SystemInit+0x104>)
 8001896:	f043 0307 	orr.w	r3, r3, #7
 800189a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800189c:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <SystemInit+0x108>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a34      	ldr	r2, [pc, #208]	@ (8001974 <SystemInit+0x108>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018a8:	4b32      	ldr	r3, [pc, #200]	@ (8001974 <SystemInit+0x108>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018ae:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <SystemInit+0x108>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4930      	ldr	r1, [pc, #192]	@ (8001974 <SystemInit+0x108>)
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <SystemInit+0x10c>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <SystemInit+0x104>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001970 <SystemInit+0x104>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 030f 	bic.w	r3, r3, #15
 80018ce:	4a28      	ldr	r2, [pc, #160]	@ (8001970 <SystemInit+0x104>)
 80018d0:	f043 0307 	orr.w	r3, r3, #7
 80018d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018d6:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <SystemInit+0x108>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018dc:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <SystemInit+0x108>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <SystemInit+0x108>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <SystemInit+0x108>)
 80018ea:	4a24      	ldr	r2, [pc, #144]	@ (800197c <SystemInit+0x110>)
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <SystemInit+0x108>)
 80018f0:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <SystemInit+0x114>)
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <SystemInit+0x108>)
 80018f6:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <SystemInit+0x118>)
 80018f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <SystemInit+0x108>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001900:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <SystemInit+0x108>)
 8001902:	4a20      	ldr	r2, [pc, #128]	@ (8001984 <SystemInit+0x118>)
 8001904:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001906:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <SystemInit+0x108>)
 8001908:	2200      	movs	r2, #0
 800190a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <SystemInit+0x108>)
 800190e:	4a1d      	ldr	r2, [pc, #116]	@ (8001984 <SystemInit+0x118>)
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <SystemInit+0x108>)
 8001914:	2200      	movs	r2, #0
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <SystemInit+0x108>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a15      	ldr	r2, [pc, #84]	@ (8001974 <SystemInit+0x108>)
 800191e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001922:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <SystemInit+0x108>)
 8001926:	2200      	movs	r2, #0
 8001928:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <SystemInit+0x108>)
 800192c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d113      	bne.n	8001960 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <SystemInit+0x108>)
 800193a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800193e:	4a0d      	ldr	r2, [pc, #52]	@ (8001974 <SystemInit+0x108>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001944:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <SystemInit+0x11c>)
 800194a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800194e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <SystemInit+0x108>)
 8001952:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001956:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <SystemInit+0x108>)
 8001958:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800195c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00
 8001970:	52002000 	.word	0x52002000
 8001974:	58024400 	.word	0x58024400
 8001978:	eaf6ed7f 	.word	0xeaf6ed7f
 800197c:	02020200 	.word	0x02020200
 8001980:	01ff0000 	.word	0x01ff0000
 8001984:	01010280 	.word	0x01010280
 8001988:	52004000 	.word	0x52004000

0800198c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001990:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <ExitRun0Mode+0x2c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <ExitRun0Mode+0x2c>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800199c:	bf00      	nop
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <ExitRun0Mode+0x2c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f9      	beq.n	800199e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	58024800 	.word	0x58024800

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80019f8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80019c0:	f7ff ffe4 	bl	800198c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c4:	f7ff ff52 	bl	800186c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f009 ff83 	bl	800b8f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7fe fcf1 	bl	80003d8 <main>
  bx  lr
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a00:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8001a04:	0800cad0 	.word	0x0800cad0
  ldr r2, =_sbss
 8001a08:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8001a0c:	240007d0 	.word	0x240007d0

08001a10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC3_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1a:	2003      	movs	r0, #3
 8001a1c:	f001 ff58 	bl	80038d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a20:	f005 f854 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_Init+0x68>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	4913      	ldr	r1, [pc, #76]	@ (8001a80 <HAL_Init+0x6c>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_Init+0x68>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_Init+0x6c>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	4a0b      	ldr	r2, [pc, #44]	@ (8001a84 <HAL_Init+0x70>)
 8001a56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a58:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_Init+0x74>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f814 	bl	8001a8c <HAL_InitTick>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e002      	b.n	8001a74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6e:	f7ff fc07 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	0800c830 	.word	0x0800c830
 8001a84:	24000038 	.word	0x24000038
 8001a88:	24000034 	.word	0x24000034

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_InitTick+0x60>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e021      	b.n	8001ae4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <HAL_InitTick+0x64>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_InitTick+0x60>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 ff3d 	bl	8003936 <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f001 ff07 	bl	80038e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	@ (8001af4 <HAL_InitTick+0x68>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	24000040 	.word	0x24000040
 8001af0:	24000034 	.word	0x24000034
 8001af4:	2400003c 	.word	0x2400003c

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	24000040 	.word	0x24000040
 8001b1c:	2400054c 	.word	0x2400054c

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2400054c 	.word	0x2400054c

08001b38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001b42:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	4904      	ldr	r1, [pc, #16]	@ (8001b60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	58000400 	.word	0x58000400

08001b64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <LL_ADC_SetChannelPreselection+0x70>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <LL_ADC_SetChannelPreselection+0x2c>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	e015      	b.n	8001c24 <LL_ADC_SetChannelPreselection+0x58>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	69d2      	ldr	r2, [r2, #28]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	58026000 	.word	0x58026000

08001c40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	3360      	adds	r3, #96	@ 0x60
 8001c52:	461a      	mov	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <LL_ADC_SetOffset+0x60>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d10b      	bne.n	8001c7c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c7a:	e00b      	b.n	8001c94 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	bf00      	nop
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	58026000 	.word	0x58026000

08001ca4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3360      	adds	r3, #96	@ 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3360      	adds	r3, #96	@ 0x60
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	601a      	str	r2, [r3, #0]
  }
}
 8001d36:	bf00      	nop
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	58026000 	.word	0x58026000

08001d48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a0c      	ldr	r2, [pc, #48]	@ (8001d88 <LL_ADC_SetOffsetSaturation+0x40>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d10e      	bne.n	8001d7a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3360      	adds	r3, #96	@ 0x60
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	58026000 	.word	0x58026000

08001d8c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001dcc <LL_ADC_SetOffsetSign+0x40>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d10e      	bne.n	8001dbe <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3360      	adds	r3, #96	@ 0x60
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	58026000 	.word	0x58026000

08001dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3360      	adds	r3, #96	@ 0x60
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <LL_ADC_SetOffsetState+0x50>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001e02:	e007      	b.n	8001e14 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	58026000 	.word	0x58026000

08001e24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b087      	sub	sp, #28
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3330      	adds	r3, #48	@ 0x30
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	211f      	movs	r1, #31
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0e9b      	lsrs	r3, r3, #26
 8001e82:	f003 011f 	and.w	r1, r3, #31
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	60da      	str	r2, [r3, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	60da      	str	r2, [r3, #12]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d107      	bne.n	8001f0a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	60da      	str	r2, [r3, #12]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	58026000 	.word	0x58026000

08001f1c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3314      	adds	r3, #20
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0e5b      	lsrs	r3, r3, #25
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	0d1b      	lsrs	r3, r3, #20
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2107      	movs	r1, #7
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	401a      	ands	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0d1b      	lsrs	r3, r3, #20
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f66:	bf00      	nop
 8001f68:	371c      	adds	r7, #28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <LL_ADC_SetChannelSingleDiff+0x78>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d115      	bne.n	8001fb4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0318 	and.w	r3, r3, #24
 8001f9e:	4914      	ldr	r1, [pc, #80]	@ (8001ff0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001fa0:	40d9      	lsrs	r1, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fb2:	e014      	b.n	8001fde <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0318 	and.w	r3, r3, #24
 8001fca:	4909      	ldr	r1, [pc, #36]	@ (8001ff0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001fcc:	40d9      	lsrs	r1, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	400b      	ands	r3, r1
 8001fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	58026000 	.word	0x58026000
 8001ff0:	000fffff 	.word	0x000fffff

08001ff4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 031f 	and.w	r3, r3, #31
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <LL_ADC_DisableDeepPowerDown+0x20>)
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6093      	str	r3, [r2, #8]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	5fffffc0 	.word	0x5fffffc0

08002034 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002048:	d101      	bne.n	800204e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <LL_ADC_EnableInternalRegulator+0x24>)
 800206a:	4013      	ands	r3, r2
 800206c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	6fffffc0 	.word	0x6fffffc0

08002084 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002098:	d101      	bne.n	800209e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <LL_ADC_Enable+0x24>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	7fffffc0 	.word	0x7fffffc0

080020d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <LL_ADC_IsEnabled+0x18>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <LL_ADC_IsEnabled+0x1a>
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <LL_ADC_REG_StartConversion+0x24>)
 800210a:	4013      	ands	r3, r2
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	7fffffc0 	.word	0x7fffffc0

08002124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d101      	bne.n	800213c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b08      	cmp	r3, #8
 800215c:	d101      	bne.n	8002162 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1ee      	b.n	8002568 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff f88b 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff3f 	bl	8002034 <LL_ADC_IsDeepPowerDownEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff25 	bl	8002010 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff5a 	bl	8002084 <LL_ADC_IsInternalRegulatorEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d114      	bne.n	8002200 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff3e 	bl	800205c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e0:	4b8e      	ldr	r3, [pc, #568]	@ (800241c <HAL_ADC_Init+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	4a8e      	ldr	r2, [pc, #568]	@ (8002420 <HAL_ADC_Init+0x2b0>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f2:	e002      	b.n	80021fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff3d 	bl	8002084 <LL_ADC_IsInternalRegulatorEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff77 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 8002236:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 8188 	bne.w	8002556 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f040 8184 	bne.w	8002556 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002256:	f043 0202 	orr.w	r2, r3, #2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff36 	bl	80020d4 <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d136      	bne.n	80022dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6c      	ldr	r2, [pc, #432]	@ (8002424 <HAL_ADC_Init+0x2b4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d004      	beq.n	8002282 <HAL_ADC_Init+0x112>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	@ (8002428 <HAL_ADC_Init+0x2b8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10e      	bne.n	80022a0 <HAL_ADC_Init+0x130>
 8002282:	4868      	ldr	r0, [pc, #416]	@ (8002424 <HAL_ADC_Init+0x2b4>)
 8002284:	f7ff ff26 	bl	80020d4 <LL_ADC_IsEnabled>
 8002288:	4604      	mov	r4, r0
 800228a:	4867      	ldr	r0, [pc, #412]	@ (8002428 <HAL_ADC_Init+0x2b8>)
 800228c:	f7ff ff22 	bl	80020d4 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e008      	b.n	80022b2 <HAL_ADC_Init+0x142>
 80022a0:	4862      	ldr	r0, [pc, #392]	@ (800242c <HAL_ADC_Init+0x2bc>)
 80022a2:	f7ff ff17 	bl	80020d4 <LL_ADC_IsEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d012      	beq.n	80022dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002424 <HAL_ADC_Init+0x2b4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_Init+0x15a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_ADC_Init+0x2b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Init+0x15e>
 80022ca:	4a59      	ldr	r2, [pc, #356]	@ (8002430 <HAL_ADC_Init+0x2c0>)
 80022cc:	e000      	b.n	80022d0 <HAL_ADC_Init+0x160>
 80022ce:	4a59      	ldr	r2, [pc, #356]	@ (8002434 <HAL_ADC_Init+0x2c4>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7ff fc44 	bl	8001b64 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a52      	ldr	r2, [pc, #328]	@ (800242c <HAL_ADC_Init+0x2bc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d129      	bne.n	800233a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7e5b      	ldrb	r3, [r3, #25]
 80022ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80022f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d013      	beq.n	8002328 <HAL_ADC_Init+0x1b8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	d00d      	beq.n	8002324 <HAL_ADC_Init+0x1b4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b1c      	cmp	r3, #28
 800230e:	d007      	beq.n	8002320 <HAL_ADC_Init+0x1b0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b18      	cmp	r3, #24
 8002316:	d101      	bne.n	800231c <HAL_ADC_Init+0x1ac>
 8002318:	2318      	movs	r3, #24
 800231a:	e006      	b.n	800232a <HAL_ADC_Init+0x1ba>
 800231c:	2300      	movs	r3, #0
 800231e:	e004      	b.n	800232a <HAL_ADC_Init+0x1ba>
 8002320:	2310      	movs	r3, #16
 8002322:	e002      	b.n	800232a <HAL_ADC_Init+0x1ba>
 8002324:	2308      	movs	r3, #8
 8002326:	e000      	b.n	800232a <HAL_ADC_Init+0x1ba>
 8002328:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800232a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002332:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e00e      	b.n	8002358 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7e5b      	ldrb	r3, [r3, #25]
 800233e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002344:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800234a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002352:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	045b      	lsls	r3, r3, #17
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a26      	ldr	r2, [pc, #152]	@ (800242c <HAL_ADC_Init+0x2bc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d115      	bne.n	80023c2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <HAL_ADC_Init+0x2c8>)
 800239e:	4013      	ands	r3, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	611a      	str	r2, [r3, #16]
 80023c0:	e009      	b.n	80023d6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <HAL_ADC_Init+0x2cc>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	69b9      	ldr	r1, [r7, #24]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fea2 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80023e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff feaf 	bl	800214a <LL_ADC_INJ_IsConversionOngoing>
 80023ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 808e 	bne.w	8002512 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 808a 	bne.w	8002512 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_ADC_Init+0x2bc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d11b      	bne.n	8002440 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
 800240c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002414:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	e018      	b.n	800244e <HAL_ADC_Init+0x2de>
 800241c:	24000034 	.word	0x24000034
 8002420:	053e2d63 	.word	0x053e2d63
 8002424:	40022000 	.word	0x40022000
 8002428:	40022100 	.word	0x40022100
 800242c:	58026000 	.word	0x58026000
 8002430:	40022300 	.word	0x40022300
 8002434:	58026300 	.word	0x58026300
 8002438:	fff04007 	.word	0xfff04007
 800243c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7e1b      	ldrb	r3, [r3, #24]
 8002444:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4b46      	ldr	r3, [pc, #280]	@ (8002570 <HAL_ADC_Init+0x400>)
 8002456:	4013      	ands	r3, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	69b9      	ldr	r1, [r7, #24]
 800245e:	430b      	orrs	r3, r1
 8002460:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002468:	2b01      	cmp	r3, #1
 800246a:	d137      	bne.n	80024dc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a3f      	ldr	r2, [pc, #252]	@ (8002574 <HAL_ADC_Init+0x404>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d116      	bne.n	80024aa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_ADC_Init+0x408>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800249a:	430a      	orrs	r2, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	e020      	b.n	80024ec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <HAL_ADC_Init+0x40c>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0411      	lsls	r1, r2, #16
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	e007      	b.n	80024ec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_ADC_Init+0x404>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d002      	beq.n	8002512 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 ff19 	bl	8003344 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10c      	bne.n	8002534 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f023 010f 	bic.w	r1, r3, #15
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
 8002532:	e007      	b.n	8002544 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020f 	bic.w	r2, r2, #15
 8002542:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002548:	f023 0303 	bic.w	r3, r3, #3
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	661a      	str	r2, [r3, #96]	@ 0x60
 8002554:	e007      	b.n	8002566 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3724      	adds	r7, #36	@ 0x24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	ffffbffc 	.word	0xffffbffc
 8002574:	58026000 	.word	0x58026000
 8002578:	fc00f81f 	.word	0xfc00f81f
 800257c:	fc00f81e 	.word	0xfc00f81e

08002580 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a60      	ldr	r2, [pc, #384]	@ (8002714 <HAL_ADC_Start_DMA+0x194>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <HAL_ADC_Start_DMA+0x20>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5f      	ldr	r2, [pc, #380]	@ (8002718 <HAL_ADC_Start_DMA+0x198>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_Start_DMA+0x24>
 80025a0:	4b5e      	ldr	r3, [pc, #376]	@ (800271c <HAL_ADC_Start_DMA+0x19c>)
 80025a2:	e000      	b.n	80025a6 <HAL_ADC_Start_DMA+0x26>
 80025a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002720 <HAL_ADC_Start_DMA+0x1a0>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd24 	bl	8001ff4 <LL_ADC_GetMultimode>
 80025ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fdb6 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80a2 	bne.w	8002704 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start_DMA+0x4e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e09d      	b.n	800270a <HAL_ADC_Start_DMA+0x18a>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d003      	beq.n	80025ea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	f040 8086 	bne.w	80026f6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fd8c 	bl	8003108 <ADC_Enable>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d178      	bne.n	80026ec <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025fe:	4b49      	ldr	r3, [pc, #292]	@ (8002724 <HAL_ADC_Start_DMA+0x1a4>)
 8002600:	4013      	ands	r3, r2
 8002602:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a42      	ldr	r2, [pc, #264]	@ (8002718 <HAL_ADC_Start_DMA+0x198>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d002      	beq.n	800261a <HAL_ADC_Start_DMA+0x9a>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e000      	b.n	800261c <HAL_ADC_Start_DMA+0x9c>
 800261a:	4b3e      	ldr	r3, [pc, #248]	@ (8002714 <HAL_ADC_Start_DMA+0x194>)
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	4293      	cmp	r3, r2
 8002622:	d002      	beq.n	800262a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800262e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002646:	f023 0206 	bic.w	r2, r3, #6
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	665a      	str	r2, [r3, #100]	@ 0x64
 800264e:	e002      	b.n	8002656 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a33      	ldr	r2, [pc, #204]	@ (8002728 <HAL_ADC_Start_DMA+0x1a8>)
 800265c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002662:	4a32      	ldr	r2, [pc, #200]	@ (800272c <HAL_ADC_Start_DMA+0x1ac>)
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	4a31      	ldr	r2, [pc, #196]	@ (8002730 <HAL_ADC_Start_DMA+0x1b0>)
 800266c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	221c      	movs	r2, #28
 8002674:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0210 	orr.w	r2, r2, #16
 800268c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a28      	ldr	r2, [pc, #160]	@ (8002734 <HAL_ADC_Start_DMA+0x1b4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10f      	bne.n	80026b8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f7ff fc1e 	bl	8001ee8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fc09 	bl	8001ec8 <LL_ADC_EnableDMAReq>
 80026b6:	e007      	b.n	80026c8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7ff fbed 	bl	8001ea2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3340      	adds	r3, #64	@ 0x40
 80026d2:	4619      	mov	r1, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f001 fd0a 	bl	80040f0 <HAL_DMA_Start_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fd09 	bl	80020fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80026ea:	e00d      	b.n	8002708 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80026f4:	e008      	b.n	8002708 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002702:	e001      	b.n	8002708 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002704:	2302      	movs	r3, #2
 8002706:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002708:	7dfb      	ldrb	r3, [r7, #23]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40022000 	.word	0x40022000
 8002718:	40022100 	.word	0x40022100
 800271c:	40022300 	.word	0x40022300
 8002720:	58026300 	.word	0x58026300
 8002724:	fffff0fe 	.word	0xfffff0fe
 8002728:	0800321d 	.word	0x0800321d
 800272c:	080032f5 	.word	0x080032f5
 8002730:	08003311 	.word	0x08003311
 8002734:	58026000 	.word	0x58026000

08002738 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b0a5      	sub	sp, #148	@ 0x94
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800277a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4aa4      	ldr	r2, [pc, #656]	@ (8002a14 <HAL_ADC_ConfigChannel+0x2b4>)
 8002782:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x34>
 800278e:	2302      	movs	r3, #2
 8002790:	f000 bca2 	b.w	80030d8 <HAL_ADC_ConfigChannel+0x978>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fcbf 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 8486 	bne.w	80030ba <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db31      	blt.n	800281a <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a97      	ldr	r2, [pc, #604]	@ (8002a18 <HAL_ADC_ConfigChannel+0x2b8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d108      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7e>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2201      	movs	r2, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	e016      	b.n	800280c <HAL_ADC_ConfigChannel+0xac>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80027f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80027fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2201      	movs	r2, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	69d1      	ldr	r1, [r2, #28]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	430b      	orrs	r3, r1
 8002818:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	f7ff fb0f 	bl	8001e4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fc77 	bl	8002124 <LL_ADC_REG_IsConversionOngoing>
 8002836:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fc83 	bl	800214a <LL_ADC_INJ_IsConversionOngoing>
 8002844:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 824a 	bne.w	8002ce6 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002852:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8245 	bne.w	8002ce6 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	461a      	mov	r2, r3
 800286a:	f7ff fb57 	bl	8001f1c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a69      	ldr	r2, [pc, #420]	@ (8002a18 <HAL_ADC_ConfigChannel+0x2b8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10d      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	08db      	lsrs	r3, r3, #3
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002892:	e032      	b.n	80028fa <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002894:	4b61      	ldr	r3, [pc, #388]	@ (8002a1c <HAL_ADC_ConfigChannel+0x2bc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800289c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028a0:	d10b      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x15a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	e01d      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x196>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x180>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	e00a      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x196>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d048      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6919      	ldr	r1, [r3, #16]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002912:	f7ff f995 	bl	8001c40 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a18 <HAL_ADC_ConfigChannel+0x2b8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d119      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6919      	ldr	r1, [r3, #16]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	461a      	mov	r2, r3
 800292e:	f7ff fa2d 	bl	8001d8c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6919      	ldr	r1, [r3, #16]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_ADC_ConfigChannel+0x1ea>
 8002944:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002948:	e000      	b.n	800294c <HAL_ADC_ConfigChannel+0x1ec>
 800294a:	2300      	movs	r3, #0
 800294c:	461a      	mov	r2, r3
 800294e:	f7ff f9fb 	bl	8001d48 <LL_ADC_SetOffsetSaturation>
 8002952:	e1c8      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6919      	ldr	r1, [r3, #16]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_ADC_ConfigChannel+0x20c>
 8002966:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800296a:	e000      	b.n	800296e <HAL_ADC_ConfigChannel+0x20e>
 800296c:	2300      	movs	r3, #0
 800296e:	461a      	mov	r2, r3
 8002970:	f7ff f9c8 	bl	8001d04 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6919      	ldr	r1, [r3, #16]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	7e1b      	ldrb	r3, [r3, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_ADC_ConfigChannel+0x22a>
 8002984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002988:	e000      	b.n	800298c <HAL_ADC_ConfigChannel+0x22c>
 800298a:	2300      	movs	r3, #0
 800298c:	461a      	mov	r2, r3
 800298e:	f7ff f99f 	bl	8001cd0 <LL_ADC_SetDataRightShift>
 8002992:	e1a8      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_ADC_ConfigChannel+0x2b8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	f040 815b 	bne.w	8002c56 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f97c 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x26c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f971 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	f003 021f 	and.w	r2, r3, #31
 80029ca:	e017      	b.n	80029fc <HAL_ADC_ConfigChannel+0x29c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f966 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80029e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80029e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80029f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x2c0>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e017      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x2e4>
 8002a14:	47ff0000 	.word	0x47ff0000
 8002a18:	58026000 	.word	0x58026000
 8002a1c:	5c001000 	.word	0x5c001000
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a30:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002a3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d106      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff f9bd 	bl	8001dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f921 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x322>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff f916 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	e017      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x352>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff f90b 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x36a>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	e011      	b.n	8002aee <HAL_ADC_ConfigChannel+0x38e>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d106      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2200      	movs	r2, #0
 8002af8:	2101      	movs	r1, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f968 	bl	8001dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f8cc 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x3cc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff f8c1 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 021f 	and.w	r2, r3, #31
 8002b2a:	e017      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x3fc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f8b6 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	e003      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x414>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	e011      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x438>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d106      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f913 	bl	8001dd0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2103      	movs	r1, #3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f877 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x476>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2103      	movs	r1, #3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f86c 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	e017      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x4a6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2103      	movs	r1, #3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff f861 	bl	8001ca4 <LL_ADC_GetOffsetChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	61fb      	str	r3, [r7, #28]
  return result;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d105      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x4be>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	e011      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4e2>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	613b      	str	r3, [r7, #16]
  return result;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e003      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	fab3 f383 	clz	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d14f      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f8be 	bl	8001dd0 <LL_ADC_SetOffsetState>
 8002c54:	e047      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	069b      	lsls	r3, r3, #26
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d107      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c78:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c9c:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cc0:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	069b      	lsls	r3, r3, #26
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ce4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f9f2 	bl	80020d4 <LL_ADC_IsEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 81ea 	bne.w	80030cc <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6819      	ldr	r1, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	461a      	mov	r2, r3
 8002d06:	f7ff f935 	bl	8001f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x798>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	f040 80e0 	bne.w	8002ed6 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4977      	ldr	r1, [pc, #476]	@ (8002efc <HAL_ADC_ConfigChannel+0x79c>)
 8002d20:	428b      	cmp	r3, r1
 8002d22:	d147      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x654>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4975      	ldr	r1, [pc, #468]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7a0>)
 8002d2a:	428b      	cmp	r3, r1
 8002d2c:	d040      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x650>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4974      	ldr	r1, [pc, #464]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d039      	beq.n	8002dac <HAL_ADC_ConfigChannel+0x64c>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4972      	ldr	r1, [pc, #456]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d3e:	428b      	cmp	r3, r1
 8002d40:	d032      	beq.n	8002da8 <HAL_ADC_ConfigChannel+0x648>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4971      	ldr	r1, [pc, #452]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	d02b      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x644>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	496f      	ldr	r1, [pc, #444]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d52:	428b      	cmp	r3, r1
 8002d54:	d024      	beq.n	8002da0 <HAL_ADC_ConfigChannel+0x640>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	496e      	ldr	r1, [pc, #440]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d5c:	428b      	cmp	r3, r1
 8002d5e:	d01d      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x63c>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	496c      	ldr	r1, [pc, #432]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d016      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x638>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	496b      	ldr	r1, [pc, #428]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d00f      	beq.n	8002d94 <HAL_ADC_ConfigChannel+0x634>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4969      	ldr	r1, [pc, #420]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d7a:	428b      	cmp	r3, r1
 8002d7c:	d008      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x630>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4968      	ldr	r1, [pc, #416]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x62c>
 8002d88:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d8a:	e0a0      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e09e      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002d90:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d92:	e09c      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002d94:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d96:	e09a      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002d98:	4b60      	ldr	r3, [pc, #384]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002d9a:	e098      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d9e:	e096      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002da0:	4b64      	ldr	r3, [pc, #400]	@ (8002f34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002da2:	e094      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002da4:	4b64      	ldr	r3, [pc, #400]	@ (8002f38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002da6:	e092      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002da8:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002daa:	e090      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002dac:	4b64      	ldr	r3, [pc, #400]	@ (8002f40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002dae:	e08e      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e08c      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4962      	ldr	r1, [pc, #392]	@ (8002f44 <HAL_ADC_ConfigChannel+0x7e4>)
 8002dba:	428b      	cmp	r3, r1
 8002dbc:	d140      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x6e0>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	494f      	ldr	r1, [pc, #316]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7a0>)
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	d039      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x6dc>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	494d      	ldr	r1, [pc, #308]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dce:	428b      	cmp	r3, r1
 8002dd0:	d032      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x6d8>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	494c      	ldr	r1, [pc, #304]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	d02b      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x6d4>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	494a      	ldr	r1, [pc, #296]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002de2:	428b      	cmp	r3, r1
 8002de4:	d024      	beq.n	8002e30 <HAL_ADC_ConfigChannel+0x6d0>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4949      	ldr	r1, [pc, #292]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002dec:	428b      	cmp	r3, r1
 8002dee:	d01d      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0x6cc>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4947      	ldr	r1, [pc, #284]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7b4>)
 8002df6:	428b      	cmp	r3, r1
 8002df8:	d016      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x6c8>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4946      	ldr	r1, [pc, #280]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e00:	428b      	cmp	r3, r1
 8002e02:	d00f      	beq.n	8002e24 <HAL_ADC_ConfigChannel+0x6c4>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4944      	ldr	r1, [pc, #272]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002e0a:	428b      	cmp	r3, r1
 8002e0c:	d008      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x6c0>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4944      	ldr	r1, [pc, #272]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x6bc>
 8002e18:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e1a:	e058      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e056      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e20:	4b43      	ldr	r3, [pc, #268]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e22:	e054      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e24:	4b3d      	ldr	r3, [pc, #244]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002e26:	e052      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e28:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e2a:	e050      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e2c:	4b41      	ldr	r3, [pc, #260]	@ (8002f34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e2e:	e04e      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e30:	4b41      	ldr	r3, [pc, #260]	@ (8002f38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e32:	e04c      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e34:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002e36:	e04a      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e38:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e3a:	e048      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e046      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4940      	ldr	r1, [pc, #256]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e46:	428b      	cmp	r3, r1
 8002e48:	d140      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x76c>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	492c      	ldr	r1, [pc, #176]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7a0>)
 8002e50:	428b      	cmp	r3, r1
 8002e52:	d039      	beq.n	8002ec8 <HAL_ADC_ConfigChannel+0x768>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	492a      	ldr	r1, [pc, #168]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e5a:	428b      	cmp	r3, r1
 8002e5c:	d032      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x764>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4929      	ldr	r1, [pc, #164]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d02b      	beq.n	8002ec0 <HAL_ADC_ConfigChannel+0x760>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4927      	ldr	r1, [pc, #156]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002e6e:	428b      	cmp	r3, r1
 8002e70:	d024      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x75c>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4926      	ldr	r1, [pc, #152]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	d01d      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x758>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4924      	ldr	r1, [pc, #144]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e82:	428b      	cmp	r3, r1
 8002e84:	d016      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x754>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4923      	ldr	r1, [pc, #140]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	d00f      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x750>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4926      	ldr	r1, [pc, #152]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e96:	428b      	cmp	r3, r1
 8002e98:	d008      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x74c>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	492b      	ldr	r1, [pc, #172]	@ (8002f4c <HAL_ADC_ConfigChannel+0x7ec>)
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x748>
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f50 <HAL_ADC_ConfigChannel+0x7f0>)
 8002ea6:	e012      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e010      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002eac:	4b27      	ldr	r3, [pc, #156]	@ (8002f4c <HAL_ADC_ConfigChannel+0x7ec>)
 8002eae:	e00e      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002eb2:	e00c      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002eb4:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002eb6:	e00a      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f34 <HAL_ADC_ConfigChannel+0x7d4>)
 8002eba:	e008      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ebe:	e006      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <HAL_ADC_ConfigChannel+0x7dc>)
 8002ec2:	e004      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f40 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ec6:	e002      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_ADC_ConfigChannel+0x76e>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f7fe fe7b 	bl	8001bcc <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f280 80f6 	bge.w	80030cc <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a05      	ldr	r2, [pc, #20]	@ (8002efc <HAL_ADC_ConfigChannel+0x79c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_ADC_ConfigChannel+0x794>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <HAL_ADC_ConfigChannel+0x7e4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d131      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x7f8>
 8002ef4:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <HAL_ADC_ConfigChannel+0x7f4>)
 8002ef6:	e030      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x7fa>
 8002ef8:	47ff0000 	.word	0x47ff0000
 8002efc:	40022000 	.word	0x40022000
 8002f00:	04300002 	.word	0x04300002
 8002f04:	08600004 	.word	0x08600004
 8002f08:	0c900008 	.word	0x0c900008
 8002f0c:	10c00010 	.word	0x10c00010
 8002f10:	14f00020 	.word	0x14f00020
 8002f14:	2a000400 	.word	0x2a000400
 8002f18:	2e300800 	.word	0x2e300800
 8002f1c:	32601000 	.word	0x32601000
 8002f20:	43210000 	.word	0x43210000
 8002f24:	4b840000 	.word	0x4b840000
 8002f28:	4fb80000 	.word	0x4fb80000
 8002f2c:	47520000 	.word	0x47520000
 8002f30:	36902000 	.word	0x36902000
 8002f34:	25b00200 	.word	0x25b00200
 8002f38:	21800100 	.word	0x21800100
 8002f3c:	1d500080 	.word	0x1d500080
 8002f40:	19200040 	.word	0x19200040
 8002f44:	40022100 	.word	0x40022100
 8002f48:	58026000 	.word	0x58026000
 8002f4c:	3ac04000 	.word	0x3ac04000
 8002f50:	3ef08000 	.word	0x3ef08000
 8002f54:	40022300 	.word	0x40022300
 8002f58:	4b61      	ldr	r3, [pc, #388]	@ (80030e0 <HAL_ADC_ConfigChannel+0x980>)
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fe28 	bl	8001bb0 <LL_ADC_GetCommonPathInternalCh>
 8002f60:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5f      	ldr	r2, [pc, #380]	@ (80030e4 <HAL_ADC_ConfigChannel+0x984>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_ConfigChannel+0x816>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <HAL_ADC_ConfigChannel+0x988>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10e      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x834>
 8002f76:	485b      	ldr	r0, [pc, #364]	@ (80030e4 <HAL_ADC_ConfigChannel+0x984>)
 8002f78:	f7ff f8ac 	bl	80020d4 <LL_ADC_IsEnabled>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	485a      	ldr	r0, [pc, #360]	@ (80030e8 <HAL_ADC_ConfigChannel+0x988>)
 8002f80:	f7ff f8a8 	bl	80020d4 <LL_ADC_IsEnabled>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4323      	orrs	r3, r4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e008      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x846>
 8002f94:	4855      	ldr	r0, [pc, #340]	@ (80030ec <HAL_ADC_ConfigChannel+0x98c>)
 8002f96:	f7ff f89d 	bl	80020d4 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d07d      	beq.n	80030a6 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a50      	ldr	r2, [pc, #320]	@ (80030f0 <HAL_ADC_ConfigChannel+0x990>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d130      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x8b6>
 8002fb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d12b      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <HAL_ADC_ConfigChannel+0x98c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	f040 8081 	bne.w	80030cc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a45      	ldr	r2, [pc, #276]	@ (80030e4 <HAL_ADC_ConfigChannel+0x984>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_ConfigChannel+0x87e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a43      	ldr	r2, [pc, #268]	@ (80030e8 <HAL_ADC_ConfigChannel+0x988>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x882>
 8002fde:	4a45      	ldr	r2, [pc, #276]	@ (80030f4 <HAL_ADC_ConfigChannel+0x994>)
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x884>
 8002fe2:	4a3f      	ldr	r2, [pc, #252]	@ (80030e0 <HAL_ADC_ConfigChannel+0x980>)
 8002fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fe6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f7fe fdcc 	bl	8001b8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff2:	4b41      	ldr	r3, [pc, #260]	@ (80030f8 <HAL_ADC_ConfigChannel+0x998>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	4a40      	ldr	r2, [pc, #256]	@ (80030fc <HAL_ADC_ConfigChannel+0x99c>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	3301      	adds	r3, #1
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003006:	e002      	b.n	800300e <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f9      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003014:	e05a      	b.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a39      	ldr	r2, [pc, #228]	@ (8003100 <HAL_ADC_ConfigChannel+0x9a0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11e      	bne.n	800305e <HAL_ADC_ConfigChannel+0x8fe>
 8003020:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003022:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d119      	bne.n	800305e <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2f      	ldr	r2, [pc, #188]	@ (80030ec <HAL_ADC_ConfigChannel+0x98c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d14b      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2a      	ldr	r2, [pc, #168]	@ (80030e4 <HAL_ADC_ConfigChannel+0x984>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_ADC_ConfigChannel+0x8e8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a29      	ldr	r2, [pc, #164]	@ (80030e8 <HAL_ADC_ConfigChannel+0x988>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x8ec>
 8003048:	4a2a      	ldr	r2, [pc, #168]	@ (80030f4 <HAL_ADC_ConfigChannel+0x994>)
 800304a:	e000      	b.n	800304e <HAL_ADC_ConfigChannel+0x8ee>
 800304c:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <HAL_ADC_ConfigChannel+0x980>)
 800304e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f7fe fd97 	bl	8001b8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305c:	e036      	b.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a28      	ldr	r2, [pc, #160]	@ (8003104 <HAL_ADC_ConfigChannel+0x9a4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d131      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
 8003068:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800306a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d12c      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_ADC_ConfigChannel+0x98c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d127      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	@ (80030e4 <HAL_ADC_ConfigChannel+0x984>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x930>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a17      	ldr	r2, [pc, #92]	@ (80030e8 <HAL_ADC_ConfigChannel+0x988>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x934>
 8003090:	4a18      	ldr	r2, [pc, #96]	@ (80030f4 <HAL_ADC_ConfigChannel+0x994>)
 8003092:	e000      	b.n	8003096 <HAL_ADC_ConfigChannel+0x936>
 8003094:	4a12      	ldr	r2, [pc, #72]	@ (80030e0 <HAL_ADC_ConfigChannel+0x980>)
 8003096:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003098:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fe fd73 	bl	8001b8a <LL_ADC_SetCommonPathInternalCh>
 80030a4:	e012      	b.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	f043 0220 	orr.w	r2, r3, #32
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80030b8:	e008      	b.n	80030cc <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80030d4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3794      	adds	r7, #148	@ 0x94
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	58026300 	.word	0x58026300
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40022100 	.word	0x40022100
 80030ec:	58026000 	.word	0x58026000
 80030f0:	c7520000 	.word	0xc7520000
 80030f4:	40022300 	.word	0x40022300
 80030f8:	24000034 	.word	0x24000034
 80030fc:	053e2d63 	.word	0x053e2d63
 8003100:	c3210000 	.word	0xc3210000
 8003104:	cb840000 	.word	0xcb840000

08003108 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe ffdd 	bl	80020d4 <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d16e      	bne.n	80031fe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	4b38      	ldr	r3, [pc, #224]	@ (8003208 <ADC_Enable+0x100>)
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e05a      	b.n	8003200 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe ffac 	bl	80020ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003154:	f7fe fce4 	bl	8001b20 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2b      	ldr	r2, [pc, #172]	@ (800320c <ADC_Enable+0x104>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <ADC_Enable+0x66>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a29      	ldr	r2, [pc, #164]	@ (8003210 <ADC_Enable+0x108>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <ADC_Enable+0x6a>
 800316e:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <ADC_Enable+0x10c>)
 8003170:	e000      	b.n	8003174 <ADC_Enable+0x6c>
 8003172:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <ADC_Enable+0x110>)
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe ff3d 	bl	8001ff4 <LL_ADC_GetMultimode>
 800317a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <ADC_Enable+0x108>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d002      	beq.n	800318c <ADC_Enable+0x84>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e000      	b.n	800318e <ADC_Enable+0x86>
 800318c:	4b1f      	ldr	r3, [pc, #124]	@ (800320c <ADC_Enable+0x104>)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4293      	cmp	r3, r2
 8003194:	d02c      	beq.n	80031f0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d130      	bne.n	80031fe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800319c:	e028      	b.n	80031f0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe ff96 	bl	80020d4 <LL_ADC_IsEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe ff7a 	bl	80020ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031b8:	f7fe fcb2 	bl	8001b20 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d914      	bls.n	80031f0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d00d      	beq.n	80031f0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e007      	b.n	8003200 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d1cf      	bne.n	800319e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	8000003f 	.word	0x8000003f
 800320c:	40022000 	.word	0x40022000
 8003210:	40022100 	.word	0x40022100
 8003214:	40022300 	.word	0x40022300
 8003218:	58026300 	.word	0x58026300

0800321c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003232:	2b00      	cmp	r3, #0
 8003234:	d14b      	bne.n	80032ce <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d021      	beq.n	8003294 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fde5 	bl	8001e24 <LL_ADC_REG_IsTriggerSourceSWStart>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d032      	beq.n	80032c6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d12b      	bne.n	80032c6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003272:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11f      	bne.n	80032c6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60
 8003292:	e018      	b.n	80032c6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d111      	bne.n	80032c6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f7fd fe14 	bl	8000ef4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032cc:	e00e      	b.n	80032ec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fa36 	bl	800274c <HAL_ADC_ErrorCallback>
}
 80032e0:	e004      	b.n	80032ec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff fa18 	bl	8002738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800332e:	f043 0204 	orr.w	r2, r3, #4
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7ff fa08 	bl	800274c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6c      	ldr	r2, [pc, #432]	@ (8003504 <ADC_ConfigureBoostMode+0x1c0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <ADC_ConfigureBoostMode+0x1c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6b      	ldr	r2, [pc, #428]	@ (8003508 <ADC_ConfigureBoostMode+0x1c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d109      	bne.n	8003374 <ADC_ConfigureBoostMode+0x30>
 8003360:	4b6a      	ldr	r3, [pc, #424]	@ (800350c <ADC_ConfigureBoostMode+0x1c8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e008      	b.n	8003386 <ADC_ConfigureBoostMode+0x42>
 8003374:	4b66      	ldr	r3, [pc, #408]	@ (8003510 <ADC_ConfigureBoostMode+0x1cc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01c      	beq.n	80033c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800338a:	f003 fd19 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 800338e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003398:	d010      	beq.n	80033bc <ADC_ConfigureBoostMode+0x78>
 800339a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800339e:	d873      	bhi.n	8003488 <ADC_ConfigureBoostMode+0x144>
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a4:	d002      	beq.n	80033ac <ADC_ConfigureBoostMode+0x68>
 80033a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033aa:	d16d      	bne.n	8003488 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	60fb      	str	r3, [r7, #12]
        break;
 80033ba:	e068      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]
        break;
 80033c2:	e064      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033c4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	f004 fede 	bl	800818c <HAL_RCCEx_GetPeriphCLKFreq>
 80033d0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033da:	d051      	beq.n	8003480 <ADC_ConfigureBoostMode+0x13c>
 80033dc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033e0:	d854      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 80033e2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033e6:	d047      	beq.n	8003478 <ADC_ConfigureBoostMode+0x134>
 80033e8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033ec:	d84e      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 80033ee:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033f2:	d03d      	beq.n	8003470 <ADC_ConfigureBoostMode+0x12c>
 80033f4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033f8:	d848      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 80033fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fe:	d033      	beq.n	8003468 <ADC_ConfigureBoostMode+0x124>
 8003400:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003404:	d842      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 8003406:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800340a:	d029      	beq.n	8003460 <ADC_ConfigureBoostMode+0x11c>
 800340c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003410:	d83c      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 8003412:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003416:	d01a      	beq.n	800344e <ADC_ConfigureBoostMode+0x10a>
 8003418:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800341c:	d836      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 800341e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003422:	d014      	beq.n	800344e <ADC_ConfigureBoostMode+0x10a>
 8003424:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003428:	d830      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 800342a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800342e:	d00e      	beq.n	800344e <ADC_ConfigureBoostMode+0x10a>
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003434:	d82a      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 8003436:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800343a:	d008      	beq.n	800344e <ADC_ConfigureBoostMode+0x10a>
 800343c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003440:	d824      	bhi.n	800348c <ADC_ConfigureBoostMode+0x148>
 8003442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003446:	d002      	beq.n	800344e <ADC_ConfigureBoostMode+0x10a>
 8003448:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800344c:	d11e      	bne.n	800348c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	0c9b      	lsrs	r3, r3, #18
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	fbb2 f3f3 	udiv	r3, r2, r3
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e016      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
        break;
 8003466:	e012      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	60fb      	str	r3, [r7, #12]
        break;
 800346e:	e00e      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	60fb      	str	r3, [r7, #12]
        break;
 8003476:	e00a      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	09db      	lsrs	r3, r3, #7
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	e006      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	e002      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003488:	bf00      	nop
 800348a:	e000      	b.n	800348e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800348c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <ADC_ConfigureBoostMode+0x1d0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d808      	bhi.n	80034ae <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034ac:	e025      	b.n	80034fa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a19      	ldr	r2, [pc, #100]	@ (8003518 <ADC_ConfigureBoostMode+0x1d4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d80a      	bhi.n	80034cc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034c8:	609a      	str	r2, [r3, #8]
}
 80034ca:	e016      	b.n	80034fa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a13      	ldr	r2, [pc, #76]	@ (800351c <ADC_ConfigureBoostMode+0x1d8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d80a      	bhi.n	80034ea <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	e007      	b.n	80034fa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80034f8:	609a      	str	r2, [r3, #8]
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40022000 	.word	0x40022000
 8003508:	40022100 	.word	0x40022100
 800350c:	40022300 	.word	0x40022300
 8003510:	58026300 	.word	0x58026300
 8003514:	005f5e10 	.word	0x005f5e10
 8003518:	00bebc20 	.word	0x00bebc20
 800351c:	017d7840 	.word	0x017d7840

08003520 <LL_ADC_IsEnabled>:
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <LL_ADC_IsEnabled+0x18>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <LL_ADC_IsEnabled+0x1a>
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <LL_ADC_REG_IsConversionOngoing>:
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d101      	bne.n	800355e <LL_ADC_REG_IsConversionOngoing+0x18>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b0a3      	sub	sp, #140	@ 0x8c
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003586:	2302      	movs	r3, #2
 8003588:	e0c1      	b.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003592:	2300      	movs	r3, #0
 8003594:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003596:	2300      	movs	r3, #0
 8003598:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5e      	ldr	r2, [pc, #376]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d102      	bne.n	80035aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035a4:	4b5d      	ldr	r3, [pc, #372]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e001      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a0      	b.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ffb9 	bl	8003546 <LL_ADC_REG_IsConversionOngoing>
 80035d4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ffb2 	bl	8003546 <LL_ADC_REG_IsConversionOngoing>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 8081 	bne.w	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80035ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d17c      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a48      	ldr	r2, [pc, #288]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d004      	beq.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a46      	ldr	r2, [pc, #280]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003606:	4b46      	ldr	r3, [pc, #280]	@ (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003608:	e000      	b.n	800360c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800360a:	4b46      	ldr	r3, [pc, #280]	@ (8003724 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800360c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d039      	beq.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003616:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	431a      	orrs	r2, r3
 8003624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003626:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a3a      	ldr	r2, [pc, #232]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a39      	ldr	r2, [pc, #228]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10e      	bne.n	800365a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800363c:	4836      	ldr	r0, [pc, #216]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800363e:	f7ff ff6f 	bl	8003520 <LL_ADC_IsEnabled>
 8003642:	4604      	mov	r4, r0
 8003644:	4835      	ldr	r0, [pc, #212]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003646:	f7ff ff6b 	bl	8003520 <LL_ADC_IsEnabled>
 800364a:	4603      	mov	r3, r0
 800364c:	4323      	orrs	r3, r4
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e008      	b.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800365a:	4833      	ldr	r0, [pc, #204]	@ (8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800365c:	f7ff ff60 	bl	8003520 <LL_ADC_IsEnabled>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d047      	beq.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003676:	4013      	ands	r3, r2
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	6811      	ldr	r1, [r2, #0]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	6892      	ldr	r2, [r2, #8]
 8003680:	430a      	orrs	r2, r1
 8003682:	431a      	orrs	r2, r3
 8003684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003686:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003688:	e03a      	b.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800368a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003692:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003694:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1f      	ldr	r2, [pc, #124]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10e      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80036aa:	481b      	ldr	r0, [pc, #108]	@ (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036ac:	f7ff ff38 	bl	8003520 <LL_ADC_IsEnabled>
 80036b0:	4604      	mov	r4, r0
 80036b2:	481a      	ldr	r0, [pc, #104]	@ (800371c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036b4:	f7ff ff34 	bl	8003520 <LL_ADC_IsEnabled>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4323      	orrs	r3, r4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e008      	b.n	80036da <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80036c8:	4817      	ldr	r0, [pc, #92]	@ (8003728 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80036ca:	f7ff ff29 	bl	8003520 <LL_ADC_IsEnabled>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	4b12      	ldr	r3, [pc, #72]	@ (800372c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80036e8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ea:	e009      	b.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80036fe:	e000      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003700:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800370a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800370e:	4618      	mov	r0, r3
 8003710:	378c      	adds	r7, #140	@ 0x8c
 8003712:	46bd      	mov	sp, r7
 8003714:	bd90      	pop	{r4, r7, pc}
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40022100 	.word	0x40022100
 8003720:	40022300 	.word	0x40022300
 8003724:	58026300 	.word	0x58026300
 8003728:	58026000 	.word	0x58026000
 800372c:	fffff0e0 	.word	0xfffff0e0

08003730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <__NVIC_SetPriorityGrouping+0x40>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 800375a:	4313      	orrs	r3, r2
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <__NVIC_SetPriorityGrouping+0x40>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00
 8003774:	05fa0000 	.word	0x05fa0000

08003778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db0b      	blt.n	80037be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4907      	ldr	r1, [pc, #28]	@ (80037cc <__NVIC_EnableIRQ+0x38>)
 80037ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0a      	blt.n	80037fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	490c      	ldr	r1, [pc, #48]	@ (800381c <__NVIC_SetPriority+0x4c>)
 80037ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f8:	e00a      	b.n	8003810 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4908      	ldr	r1, [pc, #32]	@ (8003820 <__NVIC_SetPriority+0x50>)
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3b04      	subs	r3, #4
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	440b      	add	r3, r1
 800380e:	761a      	strb	r2, [r3, #24]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	@ 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f1c3 0307 	rsb	r3, r3, #7
 800383e:	2b04      	cmp	r3, #4
 8003840:	bf28      	it	cs
 8003842:	2304      	movcs	r3, #4
 8003844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3304      	adds	r3, #4
 800384a:	2b06      	cmp	r3, #6
 800384c:	d902      	bls.n	8003854 <NVIC_EncodePriority+0x30>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3b03      	subs	r3, #3
 8003852:	e000      	b.n	8003856 <NVIC_EncodePriority+0x32>
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	f04f 32ff 	mov.w	r2, #4294967295
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800386c:	f04f 31ff 	mov.w	r1, #4294967295
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43d9      	mvns	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	4313      	orrs	r3, r2
         );
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	@ 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800389c:	d301      	bcc.n	80038a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389e:	2301      	movs	r3, #1
 80038a0:	e00f      	b.n	80038c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a2:	4a0a      	ldr	r2, [pc, #40]	@ (80038cc <SysTick_Config+0x40>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038aa:	210f      	movs	r1, #15
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f7ff ff8e 	bl	80037d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <SysTick_Config+0x40>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ba:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <SysTick_Config+0x40>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	e000e010 	.word	0xe000e010

080038d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff29 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038f4:	f7ff ff40 	bl	8003778 <__NVIC_GetPriorityGrouping>
 80038f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff ff90 	bl	8003824 <NVIC_EncodePriority>
 8003904:	4602      	mov	r2, r0
 8003906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff5f 	bl	80037d0 <__NVIC_SetPriority>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff33 	bl	8003794 <__NVIC_EnableIRQ>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffa4 	bl	800388c <SysTick_Config>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003954:	f3bf 8f5f 	dmb	sy
}
 8003958:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <HAL_MPU_Disable+0x28>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	4a06      	ldr	r2, [pc, #24]	@ (8003978 <HAL_MPU_Disable+0x28>)
 8003960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003964:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_MPU_Disable+0x2c>)
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	e000ed90 	.word	0xe000ed90

08003980 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003988:	4a0b      	ldr	r2, [pc, #44]	@ (80039b8 <HAL_MPU_Enable+0x38>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003992:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <HAL_MPU_Enable+0x3c>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	4a09      	ldr	r2, [pc, #36]	@ (80039bc <HAL_MPU_Enable+0x3c>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800399e:	f3bf 8f4f 	dsb	sy
}
 80039a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039a4:	f3bf 8f6f 	isb	sy
}
 80039a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000ed90 	.word	0xe000ed90
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	785a      	ldrb	r2, [r3, #1]
 80039cc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <HAL_MPU_ConfigRegion+0x7c>)
 80039ce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80039d0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <HAL_MPU_ConfigRegion+0x7c>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	4a19      	ldr	r2, [pc, #100]	@ (8003a3c <HAL_MPU_ConfigRegion+0x7c>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80039dc:	4a17      	ldr	r2, [pc, #92]	@ (8003a3c <HAL_MPU_ConfigRegion+0x7c>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7b1b      	ldrb	r3, [r3, #12]
 80039e8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	7adb      	ldrb	r3, [r3, #11]
 80039ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80039f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7a9b      	ldrb	r3, [r3, #10]
 80039f6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80039f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7b5b      	ldrb	r3, [r3, #13]
 80039fe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7b9b      	ldrb	r3, [r3, #14]
 8003a06:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7bdb      	ldrb	r3, [r3, #15]
 8003a0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7a5b      	ldrb	r3, [r3, #9]
 8003a16:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7a1b      	ldrb	r3, [r3, #8]
 8003a1e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a20:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a28:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a2a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a2c:	6113      	str	r3, [r2, #16]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000ed90 	.word	0xe000ed90

08003a40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a48:	f7fe f86a 	bl	8001b20 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e312      	b.n	800407e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a66      	ldr	r2, [pc, #408]	@ (8003bf8 <HAL_DMA_Init+0x1b8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a65      	ldr	r2, [pc, #404]	@ (8003bfc <HAL_DMA_Init+0x1bc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a63      	ldr	r2, [pc, #396]	@ (8003c00 <HAL_DMA_Init+0x1c0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a62      	ldr	r2, [pc, #392]	@ (8003c04 <HAL_DMA_Init+0x1c4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a60      	ldr	r2, [pc, #384]	@ (8003c08 <HAL_DMA_Init+0x1c8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c0c <HAL_DMA_Init+0x1cc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5d      	ldr	r2, [pc, #372]	@ (8003c10 <HAL_DMA_Init+0x1d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c14 <HAL_DMA_Init+0x1d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5a      	ldr	r2, [pc, #360]	@ (8003c18 <HAL_DMA_Init+0x1d8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a59      	ldr	r2, [pc, #356]	@ (8003c1c <HAL_DMA_Init+0x1dc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a57      	ldr	r2, [pc, #348]	@ (8003c20 <HAL_DMA_Init+0x1e0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a56      	ldr	r2, [pc, #344]	@ (8003c24 <HAL_DMA_Init+0x1e4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a54      	ldr	r2, [pc, #336]	@ (8003c28 <HAL_DMA_Init+0x1e8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a53      	ldr	r2, [pc, #332]	@ (8003c2c <HAL_DMA_Init+0x1ec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a51      	ldr	r2, [pc, #324]	@ (8003c30 <HAL_DMA_Init+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_Init+0xb8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a50      	ldr	r2, [pc, #320]	@ (8003c34 <HAL_DMA_Init+0x1f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_DMA_Init+0xbc>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <HAL_DMA_Init+0xbe>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 813c 	beq.w	8003d7c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <HAL_DMA_Init+0x1b8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a36      	ldr	r2, [pc, #216]	@ (8003bfc <HAL_DMA_Init+0x1bc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a34      	ldr	r2, [pc, #208]	@ (8003c00 <HAL_DMA_Init+0x1c0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <HAL_DMA_Init+0x1c4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a31      	ldr	r2, [pc, #196]	@ (8003c08 <HAL_DMA_Init+0x1c8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a30      	ldr	r2, [pc, #192]	@ (8003c0c <HAL_DMA_Init+0x1cc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2e      	ldr	r2, [pc, #184]	@ (8003c10 <HAL_DMA_Init+0x1d0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c14 <HAL_DMA_Init+0x1d4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <HAL_DMA_Init+0x1d8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <HAL_DMA_Init+0x1dc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	@ (8003c20 <HAL_DMA_Init+0x1e0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a27      	ldr	r2, [pc, #156]	@ (8003c24 <HAL_DMA_Init+0x1e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <HAL_DMA_Init+0x1e8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <HAL_DMA_Init+0x1ec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_DMA_Init+0x1f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Init+0x174>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a21      	ldr	r2, [pc, #132]	@ (8003c34 <HAL_DMA_Init+0x1f4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <HAL_DMA_Init+0x186>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e007      	b.n	8003bd6 <HAL_DMA_Init+0x196>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bd6:	e02f      	b.n	8003c38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd8:	f7fd ffa2 	bl	8001b20 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d928      	bls.n	8003c38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e242      	b.n	800407e <HAL_DMA_Init+0x63e>
 8003bf8:	40020010 	.word	0x40020010
 8003bfc:	40020028 	.word	0x40020028
 8003c00:	40020040 	.word	0x40020040
 8003c04:	40020058 	.word	0x40020058
 8003c08:	40020070 	.word	0x40020070
 8003c0c:	40020088 	.word	0x40020088
 8003c10:	400200a0 	.word	0x400200a0
 8003c14:	400200b8 	.word	0x400200b8
 8003c18:	40020410 	.word	0x40020410
 8003c1c:	40020428 	.word	0x40020428
 8003c20:	40020440 	.word	0x40020440
 8003c24:	40020458 	.word	0x40020458
 8003c28:	40020470 	.word	0x40020470
 8003c2c:	40020488 	.word	0x40020488
 8003c30:	400204a0 	.word	0x400204a0
 8003c34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1c8      	bne.n	8003bd8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4b83      	ldr	r3, [pc, #524]	@ (8003e60 <HAL_DMA_Init+0x420>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003c5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d107      	bne.n	8003c9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	4313      	orrs	r3, r2
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b28      	cmp	r3, #40	@ 0x28
 8003ca2:	d903      	bls.n	8003cac <HAL_DMA_Init+0x26c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003caa:	d91f      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cb2:	d903      	bls.n	8003cbc <HAL_DMA_Init+0x27c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b42      	cmp	r3, #66	@ 0x42
 8003cba:	d917      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b46      	cmp	r3, #70	@ 0x46
 8003cc2:	d903      	bls.n	8003ccc <HAL_DMA_Init+0x28c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b48      	cmp	r3, #72	@ 0x48
 8003cca:	d90f      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cd2:	d903      	bls.n	8003cdc <HAL_DMA_Init+0x29c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b52      	cmp	r3, #82	@ 0x52
 8003cda:	d907      	bls.n	8003cec <HAL_DMA_Init+0x2ac>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b73      	cmp	r3, #115	@ 0x73
 8003ce2:	d905      	bls.n	8003cf0 <HAL_DMA_Init+0x2b0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b77      	cmp	r3, #119	@ 0x77
 8003cea:	d801      	bhi.n	8003cf0 <HAL_DMA_Init+0x2b0>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_Init+0x2b2>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0307 	bic.w	r3, r3, #7
 8003d14:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d117      	bne.n	8003d58 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f001 fdca 	bl	80058d4 <DMA_CheckFifoParam>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2240      	movs	r2, #64	@ 0x40
 8003d4a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e192      	b.n	800407e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f001 fd05 	bl	8005770 <DMA_CalcBaseAndBitshift>
 8003d66:	4603      	mov	r3, r0
 8003d68:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	223f      	movs	r2, #63	@ 0x3f
 8003d74:	409a      	lsls	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	e0c8      	b.n	8003f0e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a38      	ldr	r2, [pc, #224]	@ (8003e64 <HAL_DMA_Init+0x424>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d022      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a37      	ldr	r2, [pc, #220]	@ (8003e68 <HAL_DMA_Init+0x428>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d01d      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a35      	ldr	r2, [pc, #212]	@ (8003e6c <HAL_DMA_Init+0x42c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d018      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a34      	ldr	r2, [pc, #208]	@ (8003e70 <HAL_DMA_Init+0x430>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d013      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a32      	ldr	r2, [pc, #200]	@ (8003e74 <HAL_DMA_Init+0x434>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d00e      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a31      	ldr	r2, [pc, #196]	@ (8003e78 <HAL_DMA_Init+0x438>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d009      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2f      	ldr	r2, [pc, #188]	@ (8003e7c <HAL_DMA_Init+0x43c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <HAL_DMA_Init+0x38c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e80 <HAL_DMA_Init+0x440>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <HAL_DMA_Init+0x390>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_DMA_Init+0x392>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 8092 	beq.w	8003efc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a21      	ldr	r2, [pc, #132]	@ (8003e64 <HAL_DMA_Init+0x424>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d021      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a20      	ldr	r2, [pc, #128]	@ (8003e68 <HAL_DMA_Init+0x428>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01c      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_DMA_Init+0x42c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d017      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003e70 <HAL_DMA_Init+0x430>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d012      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <HAL_DMA_Init+0x434>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00d      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <HAL_DMA_Init+0x438>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d008      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <HAL_DMA_Init+0x43c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <HAL_DMA_Init+0x3e6>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a17      	ldr	r2, [pc, #92]	@ (8003e80 <HAL_DMA_Init+0x440>)
 8003e24:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_DMA_Init+0x444>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b40      	cmp	r3, #64	@ 0x40
 8003e4c:	d01c      	beq.n	8003e88 <HAL_DMA_Init+0x448>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	d102      	bne.n	8003e5c <HAL_DMA_Init+0x41c>
 8003e56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e5a:	e016      	b.n	8003e8a <HAL_DMA_Init+0x44a>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e014      	b.n	8003e8a <HAL_DMA_Init+0x44a>
 8003e60:	fe10803f 	.word	0xfe10803f
 8003e64:	58025408 	.word	0x58025408
 8003e68:	5802541c 	.word	0x5802541c
 8003e6c:	58025430 	.word	0x58025430
 8003e70:	58025444 	.word	0x58025444
 8003e74:	58025458 	.word	0x58025458
 8003e78:	5802546c 	.word	0x5802546c
 8003e7c:	58025480 	.word	0x58025480
 8003e80:	58025494 	.word	0x58025494
 8003e84:	fffe000f 	.word	0xfffe000f
 8003e88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003eb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4b6e      	ldr	r3, [pc, #440]	@ (8004088 <HAL_DMA_Init+0x648>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800408c <HAL_DMA_Init+0x64c>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f001 fc45 	bl	8005770 <DMA_CalcBaseAndBitshift>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	e008      	b.n	8003f0e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2240      	movs	r2, #64	@ 0x40
 8003f00:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2203      	movs	r2, #3
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0b7      	b.n	800407e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5f      	ldr	r2, [pc, #380]	@ (8004090 <HAL_DMA_Init+0x650>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d072      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004094 <HAL_DMA_Init+0x654>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d06d      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5c      	ldr	r2, [pc, #368]	@ (8004098 <HAL_DMA_Init+0x658>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d068      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5a      	ldr	r2, [pc, #360]	@ (800409c <HAL_DMA_Init+0x65c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d063      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a59      	ldr	r2, [pc, #356]	@ (80040a0 <HAL_DMA_Init+0x660>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d05e      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a57      	ldr	r2, [pc, #348]	@ (80040a4 <HAL_DMA_Init+0x664>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d059      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a56      	ldr	r2, [pc, #344]	@ (80040a8 <HAL_DMA_Init+0x668>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d054      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a54      	ldr	r2, [pc, #336]	@ (80040ac <HAL_DMA_Init+0x66c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d04f      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a53      	ldr	r2, [pc, #332]	@ (80040b0 <HAL_DMA_Init+0x670>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d04a      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a51      	ldr	r2, [pc, #324]	@ (80040b4 <HAL_DMA_Init+0x674>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d045      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a50      	ldr	r2, [pc, #320]	@ (80040b8 <HAL_DMA_Init+0x678>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d040      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4e      	ldr	r2, [pc, #312]	@ (80040bc <HAL_DMA_Init+0x67c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d03b      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80040c0 <HAL_DMA_Init+0x680>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d036      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4b      	ldr	r2, [pc, #300]	@ (80040c4 <HAL_DMA_Init+0x684>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d031      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <HAL_DMA_Init+0x688>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d02c      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a48      	ldr	r2, [pc, #288]	@ (80040cc <HAL_DMA_Init+0x68c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d027      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a47      	ldr	r2, [pc, #284]	@ (80040d0 <HAL_DMA_Init+0x690>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a45      	ldr	r2, [pc, #276]	@ (80040d4 <HAL_DMA_Init+0x694>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a44      	ldr	r2, [pc, #272]	@ (80040d8 <HAL_DMA_Init+0x698>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a42      	ldr	r2, [pc, #264]	@ (80040dc <HAL_DMA_Init+0x69c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a41      	ldr	r2, [pc, #260]	@ (80040e0 <HAL_DMA_Init+0x6a0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80040e4 <HAL_DMA_Init+0x6a4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3e      	ldr	r2, [pc, #248]	@ (80040e8 <HAL_DMA_Init+0x6a8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_DMA_Init+0x5be>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80040ec <HAL_DMA_Init+0x6ac>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_DMA_Init+0x5c2>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_DMA_Init+0x5c4>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d032      	beq.n	800406e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f001 fcdf 	bl	80059cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b80      	cmp	r3, #128	@ 0x80
 8004014:	d102      	bne.n	800401c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004030:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <HAL_DMA_Init+0x61c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b08      	cmp	r3, #8
 8004040:	d80c      	bhi.n	800405c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f001 fd5c 	bl	8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e008      	b.n	800406e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	a7fdabf8 	.word	0xa7fdabf8
 800408c:	cccccccd 	.word	0xcccccccd
 8004090:	40020010 	.word	0x40020010
 8004094:	40020028 	.word	0x40020028
 8004098:	40020040 	.word	0x40020040
 800409c:	40020058 	.word	0x40020058
 80040a0:	40020070 	.word	0x40020070
 80040a4:	40020088 	.word	0x40020088
 80040a8:	400200a0 	.word	0x400200a0
 80040ac:	400200b8 	.word	0x400200b8
 80040b0:	40020410 	.word	0x40020410
 80040b4:	40020428 	.word	0x40020428
 80040b8:	40020440 	.word	0x40020440
 80040bc:	40020458 	.word	0x40020458
 80040c0:	40020470 	.word	0x40020470
 80040c4:	40020488 	.word	0x40020488
 80040c8:	400204a0 	.word	0x400204a0
 80040cc:	400204b8 	.word	0x400204b8
 80040d0:	58025408 	.word	0x58025408
 80040d4:	5802541c 	.word	0x5802541c
 80040d8:	58025430 	.word	0x58025430
 80040dc:	58025444 	.word	0x58025444
 80040e0:	58025458 	.word	0x58025458
 80040e4:	5802546c 	.word	0x5802546c
 80040e8:	58025480 	.word	0x58025480
 80040ec:	58025494 	.word	0x58025494

080040f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e226      	b.n	800455a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_DMA_Start_IT+0x2a>
 8004116:	2302      	movs	r3, #2
 8004118:	e21f      	b.n	800455a <HAL_DMA_Start_IT+0x46a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	f040 820a 	bne.w	8004544 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a68      	ldr	r2, [pc, #416]	@ (80042e4 <HAL_DMA_Start_IT+0x1f4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d04a      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a66      	ldr	r2, [pc, #408]	@ (80042e8 <HAL_DMA_Start_IT+0x1f8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d045      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a65      	ldr	r2, [pc, #404]	@ (80042ec <HAL_DMA_Start_IT+0x1fc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d040      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a63      	ldr	r2, [pc, #396]	@ (80042f0 <HAL_DMA_Start_IT+0x200>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d03b      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a62      	ldr	r2, [pc, #392]	@ (80042f4 <HAL_DMA_Start_IT+0x204>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d036      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a60      	ldr	r2, [pc, #384]	@ (80042f8 <HAL_DMA_Start_IT+0x208>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d031      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a5f      	ldr	r2, [pc, #380]	@ (80042fc <HAL_DMA_Start_IT+0x20c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d02c      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a5d      	ldr	r2, [pc, #372]	@ (8004300 <HAL_DMA_Start_IT+0x210>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d027      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a5c      	ldr	r2, [pc, #368]	@ (8004304 <HAL_DMA_Start_IT+0x214>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d022      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a5a      	ldr	r2, [pc, #360]	@ (8004308 <HAL_DMA_Start_IT+0x218>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01d      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a59      	ldr	r2, [pc, #356]	@ (800430c <HAL_DMA_Start_IT+0x21c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d018      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a57      	ldr	r2, [pc, #348]	@ (8004310 <HAL_DMA_Start_IT+0x220>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a56      	ldr	r2, [pc, #344]	@ (8004314 <HAL_DMA_Start_IT+0x224>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a54      	ldr	r2, [pc, #336]	@ (8004318 <HAL_DMA_Start_IT+0x228>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a53      	ldr	r2, [pc, #332]	@ (800431c <HAL_DMA_Start_IT+0x22c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_DMA_Start_IT+0xee>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a51      	ldr	r2, [pc, #324]	@ (8004320 <HAL_DMA_Start_IT+0x230>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <HAL_DMA_Start_IT+0x100>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0201 	bic.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e007      	b.n	8004200 <HAL_DMA_Start_IT+0x110>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f001 f906 	bl	8005418 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a34      	ldr	r2, [pc, #208]	@ (80042e4 <HAL_DMA_Start_IT+0x1f4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d04a      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a33      	ldr	r2, [pc, #204]	@ (80042e8 <HAL_DMA_Start_IT+0x1f8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d045      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a31      	ldr	r2, [pc, #196]	@ (80042ec <HAL_DMA_Start_IT+0x1fc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d040      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a30      	ldr	r2, [pc, #192]	@ (80042f0 <HAL_DMA_Start_IT+0x200>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d03b      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <HAL_DMA_Start_IT+0x204>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d036      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2d      	ldr	r2, [pc, #180]	@ (80042f8 <HAL_DMA_Start_IT+0x208>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d031      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2b      	ldr	r2, [pc, #172]	@ (80042fc <HAL_DMA_Start_IT+0x20c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02c      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <HAL_DMA_Start_IT+0x210>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d027      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a28      	ldr	r2, [pc, #160]	@ (8004304 <HAL_DMA_Start_IT+0x214>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d022      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a27      	ldr	r2, [pc, #156]	@ (8004308 <HAL_DMA_Start_IT+0x218>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d01d      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a25      	ldr	r2, [pc, #148]	@ (800430c <HAL_DMA_Start_IT+0x21c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d018      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a24      	ldr	r2, [pc, #144]	@ (8004310 <HAL_DMA_Start_IT+0x220>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d013      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a22      	ldr	r2, [pc, #136]	@ (8004314 <HAL_DMA_Start_IT+0x224>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00e      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a21      	ldr	r2, [pc, #132]	@ (8004318 <HAL_DMA_Start_IT+0x228>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <HAL_DMA_Start_IT+0x22c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_DMA_Start_IT+0x1bc>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004320 <HAL_DMA_Start_IT+0x230>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_DMA_Start_IT+0x1c0>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <HAL_DMA_Start_IT+0x1c2>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d036      	beq.n	8004324 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 021e 	bic.w	r2, r3, #30
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0216 	orr.w	r2, r2, #22
 80042c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03e      	beq.n	8004350 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0208 	orr.w	r2, r2, #8
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e035      	b.n	8004350 <HAL_DMA_Start_IT+0x260>
 80042e4:	40020010 	.word	0x40020010
 80042e8:	40020028 	.word	0x40020028
 80042ec:	40020040 	.word	0x40020040
 80042f0:	40020058 	.word	0x40020058
 80042f4:	40020070 	.word	0x40020070
 80042f8:	40020088 	.word	0x40020088
 80042fc:	400200a0 	.word	0x400200a0
 8004300:	400200b8 	.word	0x400200b8
 8004304:	40020410 	.word	0x40020410
 8004308:	40020428 	.word	0x40020428
 800430c:	40020440 	.word	0x40020440
 8004310:	40020458 	.word	0x40020458
 8004314:	40020470 	.word	0x40020470
 8004318:	40020488 	.word	0x40020488
 800431c:	400204a0 	.word	0x400204a0
 8004320:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 020e 	bic.w	r2, r3, #14
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 020a 	orr.w	r2, r2, #10
 8004336:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d007      	beq.n	8004350 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0204 	orr.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a83      	ldr	r2, [pc, #524]	@ (8004564 <HAL_DMA_Start_IT+0x474>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d072      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a82      	ldr	r2, [pc, #520]	@ (8004568 <HAL_DMA_Start_IT+0x478>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d06d      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a80      	ldr	r2, [pc, #512]	@ (800456c <HAL_DMA_Start_IT+0x47c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d068      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a7f      	ldr	r2, [pc, #508]	@ (8004570 <HAL_DMA_Start_IT+0x480>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d063      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a7d      	ldr	r2, [pc, #500]	@ (8004574 <HAL_DMA_Start_IT+0x484>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d05e      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7c      	ldr	r2, [pc, #496]	@ (8004578 <HAL_DMA_Start_IT+0x488>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d059      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7a      	ldr	r2, [pc, #488]	@ (800457c <HAL_DMA_Start_IT+0x48c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d054      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a79      	ldr	r2, [pc, #484]	@ (8004580 <HAL_DMA_Start_IT+0x490>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d04f      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a77      	ldr	r2, [pc, #476]	@ (8004584 <HAL_DMA_Start_IT+0x494>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d04a      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a76      	ldr	r2, [pc, #472]	@ (8004588 <HAL_DMA_Start_IT+0x498>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d045      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a74      	ldr	r2, [pc, #464]	@ (800458c <HAL_DMA_Start_IT+0x49c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d040      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	@ (8004590 <HAL_DMA_Start_IT+0x4a0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d03b      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a71      	ldr	r2, [pc, #452]	@ (8004594 <HAL_DMA_Start_IT+0x4a4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d036      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a70      	ldr	r2, [pc, #448]	@ (8004598 <HAL_DMA_Start_IT+0x4a8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d031      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6e      	ldr	r2, [pc, #440]	@ (800459c <HAL_DMA_Start_IT+0x4ac>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02c      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a6d      	ldr	r2, [pc, #436]	@ (80045a0 <HAL_DMA_Start_IT+0x4b0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d027      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6b      	ldr	r2, [pc, #428]	@ (80045a4 <HAL_DMA_Start_IT+0x4b4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d022      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6a      	ldr	r2, [pc, #424]	@ (80045a8 <HAL_DMA_Start_IT+0x4b8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d01d      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a68      	ldr	r2, [pc, #416]	@ (80045ac <HAL_DMA_Start_IT+0x4bc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d018      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a67      	ldr	r2, [pc, #412]	@ (80045b0 <HAL_DMA_Start_IT+0x4c0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d013      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a65      	ldr	r2, [pc, #404]	@ (80045b4 <HAL_DMA_Start_IT+0x4c4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00e      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	@ (80045b8 <HAL_DMA_Start_IT+0x4c8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a62      	ldr	r2, [pc, #392]	@ (80045bc <HAL_DMA_Start_IT+0x4cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_DMA_Start_IT+0x350>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a61      	ldr	r2, [pc, #388]	@ (80045c0 <HAL_DMA_Start_IT+0x4d0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_DMA_Start_IT+0x354>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_DMA_Start_IT+0x356>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01a      	beq.n	8004480 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004466:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800447e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a37      	ldr	r2, [pc, #220]	@ (8004564 <HAL_DMA_Start_IT+0x474>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d04a      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a36      	ldr	r2, [pc, #216]	@ (8004568 <HAL_DMA_Start_IT+0x478>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d045      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a34      	ldr	r2, [pc, #208]	@ (800456c <HAL_DMA_Start_IT+0x47c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d040      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a33      	ldr	r2, [pc, #204]	@ (8004570 <HAL_DMA_Start_IT+0x480>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d03b      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a31      	ldr	r2, [pc, #196]	@ (8004574 <HAL_DMA_Start_IT+0x484>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d036      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <HAL_DMA_Start_IT+0x488>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d031      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <HAL_DMA_Start_IT+0x48c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02c      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <HAL_DMA_Start_IT+0x490>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d027      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a2b      	ldr	r2, [pc, #172]	@ (8004584 <HAL_DMA_Start_IT+0x494>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <HAL_DMA_Start_IT+0x498>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d01d      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a28      	ldr	r2, [pc, #160]	@ (800458c <HAL_DMA_Start_IT+0x49c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a27      	ldr	r2, [pc, #156]	@ (8004590 <HAL_DMA_Start_IT+0x4a0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <HAL_DMA_Start_IT+0x4a4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a24      	ldr	r2, [pc, #144]	@ (8004598 <HAL_DMA_Start_IT+0x4a8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a22      	ldr	r2, [pc, #136]	@ (800459c <HAL_DMA_Start_IT+0x4ac>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_DMA_Start_IT+0x430>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <HAL_DMA_Start_IT+0x4b0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <HAL_DMA_Start_IT+0x442>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e012      	b.n	8004558 <HAL_DMA_Start_IT+0x468>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e009      	b.n	8004558 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800454a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40020010 	.word	0x40020010
 8004568:	40020028 	.word	0x40020028
 800456c:	40020040 	.word	0x40020040
 8004570:	40020058 	.word	0x40020058
 8004574:	40020070 	.word	0x40020070
 8004578:	40020088 	.word	0x40020088
 800457c:	400200a0 	.word	0x400200a0
 8004580:	400200b8 	.word	0x400200b8
 8004584:	40020410 	.word	0x40020410
 8004588:	40020428 	.word	0x40020428
 800458c:	40020440 	.word	0x40020440
 8004590:	40020458 	.word	0x40020458
 8004594:	40020470 	.word	0x40020470
 8004598:	40020488 	.word	0x40020488
 800459c:	400204a0 	.word	0x400204a0
 80045a0:	400204b8 	.word	0x400204b8
 80045a4:	58025408 	.word	0x58025408
 80045a8:	5802541c 	.word	0x5802541c
 80045ac:	58025430 	.word	0x58025430
 80045b0:	58025444 	.word	0x58025444
 80045b4:	58025458 	.word	0x58025458
 80045b8:	5802546c 	.word	0x5802546c
 80045bc:	58025480 	.word	0x58025480
 80045c0:	58025494 	.word	0x58025494

080045c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045d0:	4b67      	ldr	r3, [pc, #412]	@ (8004770 <HAL_DMA_IRQHandler+0x1ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a67      	ldr	r2, [pc, #412]	@ (8004774 <HAL_DMA_IRQHandler+0x1b0>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0a9b      	lsrs	r3, r3, #10
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004778 <HAL_DMA_IRQHandler+0x1b4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04a      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5d      	ldr	r2, [pc, #372]	@ (800477c <HAL_DMA_IRQHandler+0x1b8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d045      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5c      	ldr	r2, [pc, #368]	@ (8004780 <HAL_DMA_IRQHandler+0x1bc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5a      	ldr	r2, [pc, #360]	@ (8004784 <HAL_DMA_IRQHandler+0x1c0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d03b      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a59      	ldr	r2, [pc, #356]	@ (8004788 <HAL_DMA_IRQHandler+0x1c4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d036      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a57      	ldr	r2, [pc, #348]	@ (800478c <HAL_DMA_IRQHandler+0x1c8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a56      	ldr	r2, [pc, #344]	@ (8004790 <HAL_DMA_IRQHandler+0x1cc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d02c      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a54      	ldr	r2, [pc, #336]	@ (8004794 <HAL_DMA_IRQHandler+0x1d0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d027      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a53      	ldr	r2, [pc, #332]	@ (8004798 <HAL_DMA_IRQHandler+0x1d4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a51      	ldr	r2, [pc, #324]	@ (800479c <HAL_DMA_IRQHandler+0x1d8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01d      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a50      	ldr	r2, [pc, #320]	@ (80047a0 <HAL_DMA_IRQHandler+0x1dc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a4e      	ldr	r2, [pc, #312]	@ (80047a4 <HAL_DMA_IRQHandler+0x1e0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a4d      	ldr	r2, [pc, #308]	@ (80047a8 <HAL_DMA_IRQHandler+0x1e4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a4b      	ldr	r2, [pc, #300]	@ (80047ac <HAL_DMA_IRQHandler+0x1e8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a4a      	ldr	r2, [pc, #296]	@ (80047b0 <HAL_DMA_IRQHandler+0x1ec>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_DMA_IRQHandler+0xd2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a48      	ldr	r2, [pc, #288]	@ (80047b4 <HAL_DMA_IRQHandler+0x1f0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <HAL_DMA_IRQHandler+0xd6>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_DMA_IRQHandler+0xd8>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 842b 	beq.w	8004ef8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2208      	movs	r2, #8
 80046ac:	409a      	lsls	r2, r3
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80a2 	beq.w	80047fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004778 <HAL_DMA_IRQHandler+0x1b4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d04a      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2d      	ldr	r2, [pc, #180]	@ (800477c <HAL_DMA_IRQHandler+0x1b8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d045      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004780 <HAL_DMA_IRQHandler+0x1bc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d040      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2a      	ldr	r2, [pc, #168]	@ (8004784 <HAL_DMA_IRQHandler+0x1c0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d03b      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a28      	ldr	r2, [pc, #160]	@ (8004788 <HAL_DMA_IRQHandler+0x1c4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d036      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a27      	ldr	r2, [pc, #156]	@ (800478c <HAL_DMA_IRQHandler+0x1c8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d031      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a25      	ldr	r2, [pc, #148]	@ (8004790 <HAL_DMA_IRQHandler+0x1cc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02c      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a24      	ldr	r2, [pc, #144]	@ (8004794 <HAL_DMA_IRQHandler+0x1d0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d027      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a22      	ldr	r2, [pc, #136]	@ (8004798 <HAL_DMA_IRQHandler+0x1d4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d022      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a21      	ldr	r2, [pc, #132]	@ (800479c <HAL_DMA_IRQHandler+0x1d8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01d      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1f      	ldr	r2, [pc, #124]	@ (80047a0 <HAL_DMA_IRQHandler+0x1dc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d018      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1e      	ldr	r2, [pc, #120]	@ (80047a4 <HAL_DMA_IRQHandler+0x1e0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <HAL_DMA_IRQHandler+0x1e4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <HAL_DMA_IRQHandler+0x1e8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <HAL_DMA_IRQHandler+0x1ec>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_DMA_IRQHandler+0x194>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_DMA_IRQHandler+0x1f0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d12f      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x1f4>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e02e      	b.n	80047cc <HAL_DMA_IRQHandler+0x208>
 800476e:	bf00      	nop
 8004770:	24000034 	.word	0x24000034
 8004774:	1b4e81b5 	.word	0x1b4e81b5
 8004778:	40020010 	.word	0x40020010
 800477c:	40020028 	.word	0x40020028
 8004780:	40020040 	.word	0x40020040
 8004784:	40020058 	.word	0x40020058
 8004788:	40020070 	.word	0x40020070
 800478c:	40020088 	.word	0x40020088
 8004790:	400200a0 	.word	0x400200a0
 8004794:	400200b8 	.word	0x400200b8
 8004798:	40020410 	.word	0x40020410
 800479c:	40020428 	.word	0x40020428
 80047a0:	40020440 	.word	0x40020440
 80047a4:	40020458 	.word	0x40020458
 80047a8:	40020470 	.word	0x40020470
 80047ac:	40020488 	.word	0x40020488
 80047b0:	400204a0 	.word	0x400204a0
 80047b4:	400204b8 	.word	0x400204b8
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2208      	movs	r2, #8
 80047ea:	409a      	lsls	r2, r3
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f4:	f043 0201 	orr.w	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d06e      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a69      	ldr	r2, [pc, #420]	@ (80049bc <HAL_DMA_IRQHandler+0x3f8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d04a      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a67      	ldr	r2, [pc, #412]	@ (80049c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d045      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a66      	ldr	r2, [pc, #408]	@ (80049c4 <HAL_DMA_IRQHandler+0x400>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d040      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a64      	ldr	r2, [pc, #400]	@ (80049c8 <HAL_DMA_IRQHandler+0x404>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d03b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a63      	ldr	r2, [pc, #396]	@ (80049cc <HAL_DMA_IRQHandler+0x408>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d036      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a61      	ldr	r2, [pc, #388]	@ (80049d0 <HAL_DMA_IRQHandler+0x40c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d031      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a60      	ldr	r2, [pc, #384]	@ (80049d4 <HAL_DMA_IRQHandler+0x410>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d02c      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5e      	ldr	r2, [pc, #376]	@ (80049d8 <HAL_DMA_IRQHandler+0x414>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d027      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5d      	ldr	r2, [pc, #372]	@ (80049dc <HAL_DMA_IRQHandler+0x418>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a5b      	ldr	r2, [pc, #364]	@ (80049e0 <HAL_DMA_IRQHandler+0x41c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d01d      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a5a      	ldr	r2, [pc, #360]	@ (80049e4 <HAL_DMA_IRQHandler+0x420>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a58      	ldr	r2, [pc, #352]	@ (80049e8 <HAL_DMA_IRQHandler+0x424>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a57      	ldr	r2, [pc, #348]	@ (80049ec <HAL_DMA_IRQHandler+0x428>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a55      	ldr	r2, [pc, #340]	@ (80049f0 <HAL_DMA_IRQHandler+0x42c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a54      	ldr	r2, [pc, #336]	@ (80049f4 <HAL_DMA_IRQHandler+0x430>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2ee>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a52      	ldr	r2, [pc, #328]	@ (80049f8 <HAL_DMA_IRQHandler+0x434>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10a      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x304>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf14      	ite	ne
 80048c0:	2301      	movne	r3, #1
 80048c2:	2300      	moveq	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e003      	b.n	80048d0 <HAL_DMA_IRQHandler+0x30c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00d      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	f043 0202 	orr.w	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2204      	movs	r2, #4
 80048fa:	409a      	lsls	r2, r3
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 808f 	beq.w	8004a24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	@ (80049bc <HAL_DMA_IRQHandler+0x3f8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d04a      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d045      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a29      	ldr	r2, [pc, #164]	@ (80049c4 <HAL_DMA_IRQHandler+0x400>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d040      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a27      	ldr	r2, [pc, #156]	@ (80049c8 <HAL_DMA_IRQHandler+0x404>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d03b      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a26      	ldr	r2, [pc, #152]	@ (80049cc <HAL_DMA_IRQHandler+0x408>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d036      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a24      	ldr	r2, [pc, #144]	@ (80049d0 <HAL_DMA_IRQHandler+0x40c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d031      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a23      	ldr	r2, [pc, #140]	@ (80049d4 <HAL_DMA_IRQHandler+0x410>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d02c      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a21      	ldr	r2, [pc, #132]	@ (80049d8 <HAL_DMA_IRQHandler+0x414>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d027      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a20      	ldr	r2, [pc, #128]	@ (80049dc <HAL_DMA_IRQHandler+0x418>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d022      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_DMA_IRQHandler+0x41c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01d      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <HAL_DMA_IRQHandler+0x420>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d018      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <HAL_DMA_IRQHandler+0x424>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <HAL_DMA_IRQHandler+0x428>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a18      	ldr	r2, [pc, #96]	@ (80049f0 <HAL_DMA_IRQHandler+0x42c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <HAL_DMA_IRQHandler+0x430>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_DMA_IRQHandler+0x3e2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <HAL_DMA_IRQHandler+0x434>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d12a      	bne.n	80049fc <HAL_DMA_IRQHandler+0x438>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf14      	ite	ne
 80049b4:	2301      	movne	r3, #1
 80049b6:	2300      	moveq	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e023      	b.n	8004a04 <HAL_DMA_IRQHandler+0x440>
 80049bc:	40020010 	.word	0x40020010
 80049c0:	40020028 	.word	0x40020028
 80049c4:	40020040 	.word	0x40020040
 80049c8:	40020058 	.word	0x40020058
 80049cc:	40020070 	.word	0x40020070
 80049d0:	40020088 	.word	0x40020088
 80049d4:	400200a0 	.word	0x400200a0
 80049d8:	400200b8 	.word	0x400200b8
 80049dc:	40020410 	.word	0x40020410
 80049e0:	40020428 	.word	0x40020428
 80049e4:	40020440 	.word	0x40020440
 80049e8:	40020458 	.word	0x40020458
 80049ec:	40020470 	.word	0x40020470
 80049f0:	40020488 	.word	0x40020488
 80049f4:	400204a0 	.word	0x400204a0
 80049f8:	400204b8 	.word	0x400204b8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2204      	movs	r2, #4
 8004a12:	409a      	lsls	r2, r3
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	f043 0204 	orr.w	r2, r3, #4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80a6 	beq.w	8004b86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a85      	ldr	r2, [pc, #532]	@ (8004c54 <HAL_DMA_IRQHandler+0x690>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d04a      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a83      	ldr	r2, [pc, #524]	@ (8004c58 <HAL_DMA_IRQHandler+0x694>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d045      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a82      	ldr	r2, [pc, #520]	@ (8004c5c <HAL_DMA_IRQHandler+0x698>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d040      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a80      	ldr	r2, [pc, #512]	@ (8004c60 <HAL_DMA_IRQHandler+0x69c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d03b      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a7f      	ldr	r2, [pc, #508]	@ (8004c64 <HAL_DMA_IRQHandler+0x6a0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d036      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a7d      	ldr	r2, [pc, #500]	@ (8004c68 <HAL_DMA_IRQHandler+0x6a4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d031      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c6c <HAL_DMA_IRQHandler+0x6a8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d02c      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7a      	ldr	r2, [pc, #488]	@ (8004c70 <HAL_DMA_IRQHandler+0x6ac>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d027      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a79      	ldr	r2, [pc, #484]	@ (8004c74 <HAL_DMA_IRQHandler+0x6b0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a77      	ldr	r2, [pc, #476]	@ (8004c78 <HAL_DMA_IRQHandler+0x6b4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01d      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a76      	ldr	r2, [pc, #472]	@ (8004c7c <HAL_DMA_IRQHandler+0x6b8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a74      	ldr	r2, [pc, #464]	@ (8004c80 <HAL_DMA_IRQHandler+0x6bc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a73      	ldr	r2, [pc, #460]	@ (8004c84 <HAL_DMA_IRQHandler+0x6c0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a71      	ldr	r2, [pc, #452]	@ (8004c88 <HAL_DMA_IRQHandler+0x6c4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a70      	ldr	r2, [pc, #448]	@ (8004c8c <HAL_DMA_IRQHandler+0x6c8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_DMA_IRQHandler+0x516>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8004c90 <HAL_DMA_IRQHandler+0x6cc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10a      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x52c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e009      	b.n	8004b04 <HAL_DMA_IRQHandler+0x540>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d03e      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2210      	movs	r2, #16
 8004b12:	409a      	lsls	r2, r3
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d018      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d024      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
 8004b44:	e01f      	b.n	8004b86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01b      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
 8004b56:	e016      	b.n	8004b86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d107      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0208 	bic.w	r2, r2, #8
 8004b74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2220      	movs	r2, #32
 8004b90:	409a      	lsls	r2, r3
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8110 	beq.w	8004dbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <HAL_DMA_IRQHandler+0x690>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d04a      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a2b      	ldr	r2, [pc, #172]	@ (8004c58 <HAL_DMA_IRQHandler+0x694>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d045      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a29      	ldr	r2, [pc, #164]	@ (8004c5c <HAL_DMA_IRQHandler+0x698>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d040      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a28      	ldr	r2, [pc, #160]	@ (8004c60 <HAL_DMA_IRQHandler+0x69c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d03b      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <HAL_DMA_IRQHandler+0x6a0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d036      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a25      	ldr	r2, [pc, #148]	@ (8004c68 <HAL_DMA_IRQHandler+0x6a4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d031      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <HAL_DMA_IRQHandler+0x6a8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02c      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <HAL_DMA_IRQHandler+0x6ac>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d027      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a20      	ldr	r2, [pc, #128]	@ (8004c74 <HAL_DMA_IRQHandler+0x6b0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d022      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <HAL_DMA_IRQHandler+0x6b4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d01d      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <HAL_DMA_IRQHandler+0x6b8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d018      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <HAL_DMA_IRQHandler+0x6bc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1a      	ldr	r2, [pc, #104]	@ (8004c84 <HAL_DMA_IRQHandler+0x6c0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00e      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <HAL_DMA_IRQHandler+0x6c4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d009      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <HAL_DMA_IRQHandler+0x6c8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x678>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <HAL_DMA_IRQHandler+0x6cc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d12b      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x6d0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	e02a      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x6e4>
 8004c52:	bf00      	nop
 8004c54:	40020010 	.word	0x40020010
 8004c58:	40020028 	.word	0x40020028
 8004c5c:	40020040 	.word	0x40020040
 8004c60:	40020058 	.word	0x40020058
 8004c64:	40020070 	.word	0x40020070
 8004c68:	40020088 	.word	0x40020088
 8004c6c:	400200a0 	.word	0x400200a0
 8004c70:	400200b8 	.word	0x400200b8
 8004c74:	40020410 	.word	0x40020410
 8004c78:	40020428 	.word	0x40020428
 8004c7c:	40020440 	.word	0x40020440
 8004c80:	40020458 	.word	0x40020458
 8004c84:	40020470 	.word	0x40020470
 8004c88:	40020488 	.word	0x40020488
 8004c8c:	400204a0 	.word	0x400204a0
 8004c90:	400204b8 	.word	0x400204b8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf14      	ite	ne
 8004ca2:	2301      	movne	r3, #1
 8004ca4:	2300      	moveq	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8087 	beq.w	8004dbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d139      	bne.n	8004d3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0216 	bic.w	r2, r2, #22
 8004cd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ce8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <HAL_DMA_IRQHandler+0x736>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0208 	bic.w	r2, r2, #8
 8004d08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	223f      	movs	r2, #63	@ 0x3f
 8004d14:	409a      	lsls	r2, r3
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 834a 	beq.w	80053c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
          }
          return;
 8004d3c:	e344      	b.n	80053c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d108      	bne.n	8004d6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02c      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
 8004d6a:	e027      	b.n	8004dbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d023      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
 8004d7c:	e01e      	b.n	8004dbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10f      	bne.n	8004dac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0210 	bic.w	r2, r2, #16
 8004d9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8306 	beq.w	80053d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8088 	beq.w	8004ee4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7a      	ldr	r2, [pc, #488]	@ (8004fcc <HAL_DMA_IRQHandler+0xa08>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d04a      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a79      	ldr	r2, [pc, #484]	@ (8004fd0 <HAL_DMA_IRQHandler+0xa0c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d045      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a77      	ldr	r2, [pc, #476]	@ (8004fd4 <HAL_DMA_IRQHandler+0xa10>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d040      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a76      	ldr	r2, [pc, #472]	@ (8004fd8 <HAL_DMA_IRQHandler+0xa14>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d03b      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a74      	ldr	r2, [pc, #464]	@ (8004fdc <HAL_DMA_IRQHandler+0xa18>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d036      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a73      	ldr	r2, [pc, #460]	@ (8004fe0 <HAL_DMA_IRQHandler+0xa1c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d031      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a71      	ldr	r2, [pc, #452]	@ (8004fe4 <HAL_DMA_IRQHandler+0xa20>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d02c      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a70      	ldr	r2, [pc, #448]	@ (8004fe8 <HAL_DMA_IRQHandler+0xa24>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d027      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6e      	ldr	r2, [pc, #440]	@ (8004fec <HAL_DMA_IRQHandler+0xa28>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d022      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ff0 <HAL_DMA_IRQHandler+0xa2c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d01d      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6b      	ldr	r2, [pc, #428]	@ (8004ff4 <HAL_DMA_IRQHandler+0xa30>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ff8 <HAL_DMA_IRQHandler+0xa34>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a68      	ldr	r2, [pc, #416]	@ (8004ffc <HAL_DMA_IRQHandler+0xa38>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a67      	ldr	r2, [pc, #412]	@ (8005000 <HAL_DMA_IRQHandler+0xa3c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a65      	ldr	r2, [pc, #404]	@ (8005004 <HAL_DMA_IRQHandler+0xa40>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x8b8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a64      	ldr	r2, [pc, #400]	@ (8005008 <HAL_DMA_IRQHandler+0xa44>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <HAL_DMA_IRQHandler+0x8ca>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <HAL_DMA_IRQHandler+0x8da>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d307      	bcc.n	8004eba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f2      	bne.n	8004e9e <HAL_DMA_IRQHandler+0x8da>
 8004eb8:	e000      	b.n	8004ebc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004eba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2203      	movs	r2, #3
 8004ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004ed2:	e003      	b.n	8004edc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8272 	beq.w	80053d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4798      	blx	r3
 8004ef6:	e26c      	b.n	80053d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a43      	ldr	r2, [pc, #268]	@ (800500c <HAL_DMA_IRQHandler+0xa48>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d022      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a42      	ldr	r2, [pc, #264]	@ (8005010 <HAL_DMA_IRQHandler+0xa4c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01d      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a40      	ldr	r2, [pc, #256]	@ (8005014 <HAL_DMA_IRQHandler+0xa50>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d018      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	@ (8005018 <HAL_DMA_IRQHandler+0xa54>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3d      	ldr	r2, [pc, #244]	@ (800501c <HAL_DMA_IRQHandler+0xa58>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00e      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8005020 <HAL_DMA_IRQHandler+0xa5c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3a      	ldr	r2, [pc, #232]	@ (8005024 <HAL_DMA_IRQHandler+0xa60>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <HAL_DMA_IRQHandler+0x984>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a39      	ldr	r2, [pc, #228]	@ (8005028 <HAL_DMA_IRQHandler+0xa64>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d101      	bne.n	8004f4c <HAL_DMA_IRQHandler+0x988>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <HAL_DMA_IRQHandler+0x98a>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 823f 	beq.w	80053d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2204      	movs	r2, #4
 8004f66:	409a      	lsls	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80cd 	beq.w	800510c <HAL_DMA_IRQHandler+0xb48>
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80c7 	beq.w	800510c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2204      	movs	r2, #4
 8004f88:	409a      	lsls	r2, r3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d049      	beq.n	800502c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8210 	beq.w	80053cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb4:	e20a      	b.n	80053cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8206 	beq.w	80053cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fc8:	e200      	b.n	80053cc <HAL_DMA_IRQHandler+0xe08>
 8004fca:	bf00      	nop
 8004fcc:	40020010 	.word	0x40020010
 8004fd0:	40020028 	.word	0x40020028
 8004fd4:	40020040 	.word	0x40020040
 8004fd8:	40020058 	.word	0x40020058
 8004fdc:	40020070 	.word	0x40020070
 8004fe0:	40020088 	.word	0x40020088
 8004fe4:	400200a0 	.word	0x400200a0
 8004fe8:	400200b8 	.word	0x400200b8
 8004fec:	40020410 	.word	0x40020410
 8004ff0:	40020428 	.word	0x40020428
 8004ff4:	40020440 	.word	0x40020440
 8004ff8:	40020458 	.word	0x40020458
 8004ffc:	40020470 	.word	0x40020470
 8005000:	40020488 	.word	0x40020488
 8005004:	400204a0 	.word	0x400204a0
 8005008:	400204b8 	.word	0x400204b8
 800500c:	58025408 	.word	0x58025408
 8005010:	5802541c 	.word	0x5802541c
 8005014:	58025430 	.word	0x58025430
 8005018:	58025444 	.word	0x58025444
 800501c:	58025458 	.word	0x58025458
 8005020:	5802546c 	.word	0x5802546c
 8005024:	58025480 	.word	0x58025480
 8005028:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d160      	bne.n	80050f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7f      	ldr	r2, [pc, #508]	@ (8005238 <HAL_DMA_IRQHandler+0xc74>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d04a      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a7d      	ldr	r2, [pc, #500]	@ (800523c <HAL_DMA_IRQHandler+0xc78>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d045      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a7c      	ldr	r2, [pc, #496]	@ (8005240 <HAL_DMA_IRQHandler+0xc7c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d040      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7a      	ldr	r2, [pc, #488]	@ (8005244 <HAL_DMA_IRQHandler+0xc80>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d03b      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a79      	ldr	r2, [pc, #484]	@ (8005248 <HAL_DMA_IRQHandler+0xc84>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d036      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a77      	ldr	r2, [pc, #476]	@ (800524c <HAL_DMA_IRQHandler+0xc88>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d031      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a76      	ldr	r2, [pc, #472]	@ (8005250 <HAL_DMA_IRQHandler+0xc8c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d02c      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a74      	ldr	r2, [pc, #464]	@ (8005254 <HAL_DMA_IRQHandler+0xc90>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d027      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a73      	ldr	r2, [pc, #460]	@ (8005258 <HAL_DMA_IRQHandler+0xc94>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d022      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a71      	ldr	r2, [pc, #452]	@ (800525c <HAL_DMA_IRQHandler+0xc98>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a70      	ldr	r2, [pc, #448]	@ (8005260 <HAL_DMA_IRQHandler+0xc9c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6e      	ldr	r2, [pc, #440]	@ (8005264 <HAL_DMA_IRQHandler+0xca0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	@ (8005268 <HAL_DMA_IRQHandler+0xca4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6b      	ldr	r2, [pc, #428]	@ (800526c <HAL_DMA_IRQHandler+0xca8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6a      	ldr	r2, [pc, #424]	@ (8005270 <HAL_DMA_IRQHandler+0xcac>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xb12>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a68      	ldr	r2, [pc, #416]	@ (8005274 <HAL_DMA_IRQHandler+0xcb0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <HAL_DMA_IRQHandler+0xb24>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0208 	bic.w	r2, r2, #8
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e007      	b.n	80050f8 <HAL_DMA_IRQHandler+0xb34>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8165 	beq.w	80053cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800510a:	e15f      	b.n	80053cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2202      	movs	r2, #2
 8005116:	409a      	lsls	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80c5 	beq.w	80052ac <HAL_DMA_IRQHandler+0xce8>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 80bf 	beq.w	80052ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	2202      	movs	r2, #2
 8005138:	409a      	lsls	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d018      	beq.n	800517a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 813a 	beq.w	80053d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005164:	e134      	b.n	80053d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8130 	beq.w	80053d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005178:	e12a      	b.n	80053d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 8089 	bne.w	8005298 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a2b      	ldr	r2, [pc, #172]	@ (8005238 <HAL_DMA_IRQHandler+0xc74>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d04a      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a29      	ldr	r2, [pc, #164]	@ (800523c <HAL_DMA_IRQHandler+0xc78>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d045      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a28      	ldr	r2, [pc, #160]	@ (8005240 <HAL_DMA_IRQHandler+0xc7c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d040      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a26      	ldr	r2, [pc, #152]	@ (8005244 <HAL_DMA_IRQHandler+0xc80>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d03b      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a25      	ldr	r2, [pc, #148]	@ (8005248 <HAL_DMA_IRQHandler+0xc84>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d036      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a23      	ldr	r2, [pc, #140]	@ (800524c <HAL_DMA_IRQHandler+0xc88>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d031      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a22      	ldr	r2, [pc, #136]	@ (8005250 <HAL_DMA_IRQHandler+0xc8c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d02c      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a20      	ldr	r2, [pc, #128]	@ (8005254 <HAL_DMA_IRQHandler+0xc90>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d027      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1f      	ldr	r2, [pc, #124]	@ (8005258 <HAL_DMA_IRQHandler+0xc94>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	@ (800525c <HAL_DMA_IRQHandler+0xc98>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01d      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005260 <HAL_DMA_IRQHandler+0xc9c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005264 <HAL_DMA_IRQHandler+0xca0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a19      	ldr	r2, [pc, #100]	@ (8005268 <HAL_DMA_IRQHandler+0xca4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a17      	ldr	r2, [pc, #92]	@ (800526c <HAL_DMA_IRQHandler+0xca8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <HAL_DMA_IRQHandler+0xcac>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_DMA_IRQHandler+0xc62>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a14      	ldr	r2, [pc, #80]	@ (8005274 <HAL_DMA_IRQHandler+0xcb0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d128      	bne.n	8005278 <HAL_DMA_IRQHandler+0xcb4>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0214 	bic.w	r2, r2, #20
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e027      	b.n	8005288 <HAL_DMA_IRQHandler+0xcc4>
 8005238:	40020010 	.word	0x40020010
 800523c:	40020028 	.word	0x40020028
 8005240:	40020040 	.word	0x40020040
 8005244:	40020058 	.word	0x40020058
 8005248:	40020070 	.word	0x40020070
 800524c:	40020088 	.word	0x40020088
 8005250:	400200a0 	.word	0x400200a0
 8005254:	400200b8 	.word	0x400200b8
 8005258:	40020410 	.word	0x40020410
 800525c:	40020428 	.word	0x40020428
 8005260:	40020440 	.word	0x40020440
 8005264:	40020458 	.word	0x40020458
 8005268:	40020470 	.word	0x40020470
 800526c:	40020488 	.word	0x40020488
 8005270:	400204a0 	.word	0x400204a0
 8005274:	400204b8 	.word	0x400204b8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 020a 	bic.w	r2, r2, #10
 8005286:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8097 	beq.w	80053d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052aa:	e091      	b.n	80053d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	2208      	movs	r2, #8
 80052b6:	409a      	lsls	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8088 	beq.w	80053d2 <HAL_DMA_IRQHandler+0xe0e>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8082 	beq.w	80053d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a41      	ldr	r2, [pc, #260]	@ (80053d8 <HAL_DMA_IRQHandler+0xe14>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d04a      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a3f      	ldr	r2, [pc, #252]	@ (80053dc <HAL_DMA_IRQHandler+0xe18>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d045      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a3e      	ldr	r2, [pc, #248]	@ (80053e0 <HAL_DMA_IRQHandler+0xe1c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d040      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a3c      	ldr	r2, [pc, #240]	@ (80053e4 <HAL_DMA_IRQHandler+0xe20>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03b      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a3b      	ldr	r2, [pc, #236]	@ (80053e8 <HAL_DMA_IRQHandler+0xe24>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d036      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a39      	ldr	r2, [pc, #228]	@ (80053ec <HAL_DMA_IRQHandler+0xe28>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d031      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a38      	ldr	r2, [pc, #224]	@ (80053f0 <HAL_DMA_IRQHandler+0xe2c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d02c      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a36      	ldr	r2, [pc, #216]	@ (80053f4 <HAL_DMA_IRQHandler+0xe30>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d027      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a35      	ldr	r2, [pc, #212]	@ (80053f8 <HAL_DMA_IRQHandler+0xe34>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a33      	ldr	r2, [pc, #204]	@ (80053fc <HAL_DMA_IRQHandler+0xe38>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a32      	ldr	r2, [pc, #200]	@ (8005400 <HAL_DMA_IRQHandler+0xe3c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a30      	ldr	r2, [pc, #192]	@ (8005404 <HAL_DMA_IRQHandler+0xe40>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2f      	ldr	r2, [pc, #188]	@ (8005408 <HAL_DMA_IRQHandler+0xe44>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2d      	ldr	r2, [pc, #180]	@ (800540c <HAL_DMA_IRQHandler+0xe48>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2c      	ldr	r2, [pc, #176]	@ (8005410 <HAL_DMA_IRQHandler+0xe4c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_DMA_IRQHandler+0xdaa>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2a      	ldr	r2, [pc, #168]	@ (8005414 <HAL_DMA_IRQHandler+0xe50>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <HAL_DMA_IRQHandler+0xdbc>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 021c 	bic.w	r2, r2, #28
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e007      	b.n	8005390 <HAL_DMA_IRQHandler+0xdcc>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 020e 	bic.w	r2, r2, #14
 800538e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	2201      	movs	r2, #1
 800539a:	409a      	lsls	r2, r3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
 80053c6:	e004      	b.n	80053d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80053c8:	bf00      	nop
 80053ca:	e002      	b.n	80053d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053d2:	3728      	adds	r7, #40	@ 0x28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40020010 	.word	0x40020010
 80053dc:	40020028 	.word	0x40020028
 80053e0:	40020040 	.word	0x40020040
 80053e4:	40020058 	.word	0x40020058
 80053e8:	40020070 	.word	0x40020070
 80053ec:	40020088 	.word	0x40020088
 80053f0:	400200a0 	.word	0x400200a0
 80053f4:	400200b8 	.word	0x400200b8
 80053f8:	40020410 	.word	0x40020410
 80053fc:	40020428 	.word	0x40020428
 8005400:	40020440 	.word	0x40020440
 8005404:	40020458 	.word	0x40020458
 8005408:	40020470 	.word	0x40020470
 800540c:	40020488 	.word	0x40020488
 8005410:	400204a0 	.word	0x400204a0
 8005414:	400204b8 	.word	0x400204b8

08005418 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7f      	ldr	r2, [pc, #508]	@ (8005634 <DMA_SetConfig+0x21c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d072      	beq.n	8005522 <DMA_SetConfig+0x10a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a7d      	ldr	r2, [pc, #500]	@ (8005638 <DMA_SetConfig+0x220>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d06d      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7c      	ldr	r2, [pc, #496]	@ (800563c <DMA_SetConfig+0x224>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d068      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a7a      	ldr	r2, [pc, #488]	@ (8005640 <DMA_SetConfig+0x228>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d063      	beq.n	8005522 <DMA_SetConfig+0x10a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a79      	ldr	r2, [pc, #484]	@ (8005644 <DMA_SetConfig+0x22c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d05e      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a77      	ldr	r2, [pc, #476]	@ (8005648 <DMA_SetConfig+0x230>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d059      	beq.n	8005522 <DMA_SetConfig+0x10a>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a76      	ldr	r2, [pc, #472]	@ (800564c <DMA_SetConfig+0x234>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d054      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a74      	ldr	r2, [pc, #464]	@ (8005650 <DMA_SetConfig+0x238>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04f      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a73      	ldr	r2, [pc, #460]	@ (8005654 <DMA_SetConfig+0x23c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <DMA_SetConfig+0x10a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a71      	ldr	r2, [pc, #452]	@ (8005658 <DMA_SetConfig+0x240>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a70      	ldr	r2, [pc, #448]	@ (800565c <DMA_SetConfig+0x244>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005660 <DMA_SetConfig+0x248>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005664 <DMA_SetConfig+0x24c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005668 <DMA_SetConfig+0x250>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6a      	ldr	r2, [pc, #424]	@ (800566c <DMA_SetConfig+0x254>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a68      	ldr	r2, [pc, #416]	@ (8005670 <DMA_SetConfig+0x258>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a67      	ldr	r2, [pc, #412]	@ (8005674 <DMA_SetConfig+0x25c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a65      	ldr	r2, [pc, #404]	@ (8005678 <DMA_SetConfig+0x260>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a64      	ldr	r2, [pc, #400]	@ (800567c <DMA_SetConfig+0x264>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a62      	ldr	r2, [pc, #392]	@ (8005680 <DMA_SetConfig+0x268>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <DMA_SetConfig+0x10a>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a61      	ldr	r2, [pc, #388]	@ (8005684 <DMA_SetConfig+0x26c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a5f      	ldr	r2, [pc, #380]	@ (8005688 <DMA_SetConfig+0x270>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <DMA_SetConfig+0x10a>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a5e      	ldr	r2, [pc, #376]	@ (800568c <DMA_SetConfig+0x274>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <DMA_SetConfig+0x10a>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a5c      	ldr	r2, [pc, #368]	@ (8005690 <DMA_SetConfig+0x278>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <DMA_SetConfig+0x10e>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <DMA_SetConfig+0x110>
 8005526:	2300      	movs	r3, #0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005534:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005546:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a39      	ldr	r2, [pc, #228]	@ (8005634 <DMA_SetConfig+0x21c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d04a      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a38      	ldr	r2, [pc, #224]	@ (8005638 <DMA_SetConfig+0x220>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d045      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a36      	ldr	r2, [pc, #216]	@ (800563c <DMA_SetConfig+0x224>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d040      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a35      	ldr	r2, [pc, #212]	@ (8005640 <DMA_SetConfig+0x228>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03b      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a33      	ldr	r2, [pc, #204]	@ (8005644 <DMA_SetConfig+0x22c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d036      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a32      	ldr	r2, [pc, #200]	@ (8005648 <DMA_SetConfig+0x230>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d031      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a30      	ldr	r2, [pc, #192]	@ (800564c <DMA_SetConfig+0x234>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d02c      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a2f      	ldr	r2, [pc, #188]	@ (8005650 <DMA_SetConfig+0x238>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d027      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2d      	ldr	r2, [pc, #180]	@ (8005654 <DMA_SetConfig+0x23c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d022      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <DMA_SetConfig+0x240>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01d      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a2a      	ldr	r2, [pc, #168]	@ (800565c <DMA_SetConfig+0x244>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <DMA_SetConfig+0x248>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d013      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a27      	ldr	r2, [pc, #156]	@ (8005664 <DMA_SetConfig+0x24c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a26      	ldr	r2, [pc, #152]	@ (8005668 <DMA_SetConfig+0x250>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a24      	ldr	r2, [pc, #144]	@ (800566c <DMA_SetConfig+0x254>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <DMA_SetConfig+0x1d0>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a23      	ldr	r2, [pc, #140]	@ (8005670 <DMA_SetConfig+0x258>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <DMA_SetConfig+0x1d4>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <DMA_SetConfig+0x1d6>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d059      	beq.n	80056a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	223f      	movs	r2, #63	@ 0x3f
 80055fc:	409a      	lsls	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005610:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	d138      	bne.n	8005694 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005632:	e086      	b.n	8005742 <DMA_SetConfig+0x32a>
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
 8005674:	58025408 	.word	0x58025408
 8005678:	5802541c 	.word	0x5802541c
 800567c:	58025430 	.word	0x58025430
 8005680:	58025444 	.word	0x58025444
 8005684:	58025458 	.word	0x58025458
 8005688:	5802546c 	.word	0x5802546c
 800568c:	58025480 	.word	0x58025480
 8005690:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	60da      	str	r2, [r3, #12]
}
 80056a4:	e04d      	b.n	8005742 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a29      	ldr	r2, [pc, #164]	@ (8005750 <DMA_SetConfig+0x338>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a27      	ldr	r2, [pc, #156]	@ (8005754 <DMA_SetConfig+0x33c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01d      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a26      	ldr	r2, [pc, #152]	@ (8005758 <DMA_SetConfig+0x340>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a24      	ldr	r2, [pc, #144]	@ (800575c <DMA_SetConfig+0x344>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a23      	ldr	r2, [pc, #140]	@ (8005760 <DMA_SetConfig+0x348>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a21      	ldr	r2, [pc, #132]	@ (8005764 <DMA_SetConfig+0x34c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a20      	ldr	r2, [pc, #128]	@ (8005768 <DMA_SetConfig+0x350>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <DMA_SetConfig+0x2de>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1e      	ldr	r2, [pc, #120]	@ (800576c <DMA_SetConfig+0x354>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <DMA_SetConfig+0x2e2>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <DMA_SetConfig+0x2e4>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d020      	beq.n	8005742 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2201      	movs	r2, #1
 800570a:	409a      	lsls	r2, r3
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b40      	cmp	r3, #64	@ 0x40
 800571e:	d108      	bne.n	8005732 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	60da      	str	r2, [r3, #12]
}
 8005730:	e007      	b.n	8005742 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	58025408 	.word	0x58025408
 8005754:	5802541c 	.word	0x5802541c
 8005758:	58025430 	.word	0x58025430
 800575c:	58025444 	.word	0x58025444
 8005760:	58025458 	.word	0x58025458
 8005764:	5802546c 	.word	0x5802546c
 8005768:	58025480 	.word	0x58025480
 800576c:	58025494 	.word	0x58025494

08005770 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a42      	ldr	r2, [pc, #264]	@ (8005888 <DMA_CalcBaseAndBitshift+0x118>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d04a      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a41      	ldr	r2, [pc, #260]	@ (800588c <DMA_CalcBaseAndBitshift+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d045      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a3f      	ldr	r2, [pc, #252]	@ (8005890 <DMA_CalcBaseAndBitshift+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d040      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3e      	ldr	r2, [pc, #248]	@ (8005894 <DMA_CalcBaseAndBitshift+0x124>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d03b      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005898 <DMA_CalcBaseAndBitshift+0x128>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d036      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a3b      	ldr	r2, [pc, #236]	@ (800589c <DMA_CalcBaseAndBitshift+0x12c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d031      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a39      	ldr	r2, [pc, #228]	@ (80058a0 <DMA_CalcBaseAndBitshift+0x130>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d02c      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a38      	ldr	r2, [pc, #224]	@ (80058a4 <DMA_CalcBaseAndBitshift+0x134>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d027      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a36      	ldr	r2, [pc, #216]	@ (80058a8 <DMA_CalcBaseAndBitshift+0x138>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d022      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a35      	ldr	r2, [pc, #212]	@ (80058ac <DMA_CalcBaseAndBitshift+0x13c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d01d      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a33      	ldr	r2, [pc, #204]	@ (80058b0 <DMA_CalcBaseAndBitshift+0x140>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d018      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a32      	ldr	r2, [pc, #200]	@ (80058b4 <DMA_CalcBaseAndBitshift+0x144>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a30      	ldr	r2, [pc, #192]	@ (80058b8 <DMA_CalcBaseAndBitshift+0x148>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00e      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2f      	ldr	r2, [pc, #188]	@ (80058bc <DMA_CalcBaseAndBitshift+0x14c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d009      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2d      	ldr	r2, [pc, #180]	@ (80058c0 <DMA_CalcBaseAndBitshift+0x150>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <DMA_CalcBaseAndBitshift+0xa8>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2c      	ldr	r2, [pc, #176]	@ (80058c4 <DMA_CalcBaseAndBitshift+0x154>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d101      	bne.n	800581c <DMA_CalcBaseAndBitshift+0xac>
 8005818:	2301      	movs	r3, #1
 800581a:	e000      	b.n	800581e <DMA_CalcBaseAndBitshift+0xae>
 800581c:	2300      	movs	r3, #0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d024      	beq.n	800586c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	3b10      	subs	r3, #16
 800582a:	4a27      	ldr	r2, [pc, #156]	@ (80058c8 <DMA_CalcBaseAndBitshift+0x158>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	4a24      	ldr	r2, [pc, #144]	@ (80058cc <DMA_CalcBaseAndBitshift+0x15c>)
 800583c:	5cd3      	ldrb	r3, [r2, r3]
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d908      	bls.n	800585c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	4b1f      	ldr	r3, [pc, #124]	@ (80058d0 <DMA_CalcBaseAndBitshift+0x160>)
 8005852:	4013      	ands	r3, r2
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	659a      	str	r2, [r3, #88]	@ 0x58
 800585a:	e00d      	b.n	8005878 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	4b1b      	ldr	r3, [pc, #108]	@ (80058d0 <DMA_CalcBaseAndBitshift+0x160>)
 8005864:	4013      	ands	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6593      	str	r3, [r2, #88]	@ 0x58
 800586a:	e005      	b.n	8005878 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40020010 	.word	0x40020010
 800588c:	40020028 	.word	0x40020028
 8005890:	40020040 	.word	0x40020040
 8005894:	40020058 	.word	0x40020058
 8005898:	40020070 	.word	0x40020070
 800589c:	40020088 	.word	0x40020088
 80058a0:	400200a0 	.word	0x400200a0
 80058a4:	400200b8 	.word	0x400200b8
 80058a8:	40020410 	.word	0x40020410
 80058ac:	40020428 	.word	0x40020428
 80058b0:	40020440 	.word	0x40020440
 80058b4:	40020458 	.word	0x40020458
 80058b8:	40020470 	.word	0x40020470
 80058bc:	40020488 	.word	0x40020488
 80058c0:	400204a0 	.word	0x400204a0
 80058c4:	400204b8 	.word	0x400204b8
 80058c8:	aaaaaaab 	.word	0xaaaaaaab
 80058cc:	0800c840 	.word	0x0800c840
 80058d0:	fffffc00 	.word	0xfffffc00

080058d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d120      	bne.n	800592a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d858      	bhi.n	80059a2 <DMA_CheckFifoParam+0xce>
 80058f0:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <DMA_CheckFifoParam+0x24>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	08005909 	.word	0x08005909
 80058fc:	0800591b 	.word	0x0800591b
 8005900:	08005909 	.word	0x08005909
 8005904:	080059a3 	.word	0x080059a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d048      	beq.n	80059a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005918:	e045      	b.n	80059a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005922:	d142      	bne.n	80059aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005928:	e03f      	b.n	80059aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005932:	d123      	bne.n	800597c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	2b03      	cmp	r3, #3
 800593a:	d838      	bhi.n	80059ae <DMA_CheckFifoParam+0xda>
 800593c:	a201      	add	r2, pc, #4	@ (adr r2, 8005944 <DMA_CheckFifoParam+0x70>)
 800593e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005955 	.word	0x08005955
 8005948:	0800595b 	.word	0x0800595b
 800594c:	08005955 	.word	0x08005955
 8005950:	0800596d 	.word	0x0800596d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
        break;
 8005958:	e030      	b.n	80059bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d025      	beq.n	80059b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800596a:	e022      	b.n	80059b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005974:	d11f      	bne.n	80059b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800597a:	e01c      	b.n	80059b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	2b02      	cmp	r3, #2
 8005982:	d902      	bls.n	800598a <DMA_CheckFifoParam+0xb6>
 8005984:	2b03      	cmp	r3, #3
 8005986:	d003      	beq.n	8005990 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005988:	e018      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
        break;
 800598e:	e015      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
    break;
 80059a0:	e00b      	b.n	80059ba <DMA_CheckFifoParam+0xe6>
        break;
 80059a2:	bf00      	nop
 80059a4:	e00a      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        break;
 80059a6:	bf00      	nop
 80059a8:	e008      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        break;
 80059aa:	bf00      	nop
 80059ac:	e006      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        break;
 80059ae:	bf00      	nop
 80059b0:	e004      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        break;
 80059b2:	bf00      	nop
 80059b4:	e002      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
        break;
 80059b6:	bf00      	nop
 80059b8:	e000      	b.n	80059bc <DMA_CheckFifoParam+0xe8>
    break;
 80059ba:	bf00      	nop
    }
  }

  return status;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop

080059cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a38      	ldr	r2, [pc, #224]	@ (8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a36      	ldr	r2, [pc, #216]	@ (8005ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a35      	ldr	r2, [pc, #212]	@ (8005ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a33      	ldr	r2, [pc, #204]	@ (8005acc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a32      	ldr	r2, [pc, #200]	@ (8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a30      	ldr	r2, [pc, #192]	@ (8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	@ (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01a      	beq.n	8005a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	3b08      	subs	r3, #8
 8005a3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4b26      	ldr	r3, [pc, #152]	@ (8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	461a      	mov	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a24      	ldr	r2, [pc, #144]	@ (8005ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2201      	movs	r2, #1
 8005a62:	409a      	lsls	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a68:	e024      	b.n	8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	3b10      	subs	r3, #16
 8005a72:	4a1e      	ldr	r2, [pc, #120]	@ (8005aec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d806      	bhi.n	8005a92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	@ (8005af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d902      	bls.n	8005a92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4b18      	ldr	r3, [pc, #96]	@ (8005af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	@ (8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005aa4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2201      	movs	r2, #1
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	58025408 	.word	0x58025408
 8005ac4:	5802541c 	.word	0x5802541c
 8005ac8:	58025430 	.word	0x58025430
 8005acc:	58025444 	.word	0x58025444
 8005ad0:	58025458 	.word	0x58025458
 8005ad4:	5802546c 	.word	0x5802546c
 8005ad8:	58025480 	.word	0x58025480
 8005adc:	58025494 	.word	0x58025494
 8005ae0:	cccccccd 	.word	0xcccccccd
 8005ae4:	16009600 	.word	0x16009600
 8005ae8:	58025880 	.word	0x58025880
 8005aec:	aaaaaaab 	.word	0xaaaaaaab
 8005af0:	400204b8 	.word	0x400204b8
 8005af4:	4002040f 	.word	0x4002040f
 8005af8:	10008200 	.word	0x10008200
 8005afc:	40020880 	.word	0x40020880

08005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d04a      	beq.n	8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d847      	bhi.n	8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a25      	ldr	r2, [pc, #148]	@ (8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a24      	ldr	r2, [pc, #144]	@ (8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d01d      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a22      	ldr	r2, [pc, #136]	@ (8005bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d101      	bne.n	8005b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4b17      	ldr	r3, [pc, #92]	@ (8005bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a15      	ldr	r2, [pc, #84]	@ (8005bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b88:	671a      	str	r2, [r3, #112]	@ 0x70
 8005b8a:	e009      	b.n	8005ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	461a      	mov	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a11      	ldr	r2, [pc, #68]	@ (8005be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	58025408 	.word	0x58025408
 8005bbc:	5802541c 	.word	0x5802541c
 8005bc0:	58025430 	.word	0x58025430
 8005bc4:	58025444 	.word	0x58025444
 8005bc8:	58025458 	.word	0x58025458
 8005bcc:	5802546c 	.word	0x5802546c
 8005bd0:	58025480 	.word	0x58025480
 8005bd4:	58025494 	.word	0x58025494
 8005bd8:	1600963f 	.word	0x1600963f
 8005bdc:	58025940 	.word	0x58025940
 8005be0:	1000823f 	.word	0x1000823f
 8005be4:	40020940 	.word	0x40020940

08005be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b089      	sub	sp, #36	@ 0x24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bf6:	4b86      	ldr	r3, [pc, #536]	@ (8005e10 <HAL_GPIO_Init+0x228>)
 8005bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bfa:	e18c      	b.n	8005f16 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2101      	movs	r1, #1
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 817e 	beq.w	8005f10 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d005      	beq.n	8005c2c <HAL_GPIO_Init+0x44>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d130      	bne.n	8005c8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	2203      	movs	r2, #3
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4013      	ands	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c62:	2201      	movs	r2, #1
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 0201 	and.w	r2, r3, #1
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d017      	beq.n	8005cca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d123      	bne.n	8005d1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	08da      	lsrs	r2, r3, #3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3208      	adds	r2, #8
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	220f      	movs	r2, #15
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	08da      	lsrs	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3208      	adds	r2, #8
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	2203      	movs	r2, #3
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4013      	ands	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0203 	and.w	r2, r3, #3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80d8 	beq.w	8005f10 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d60:	4b2c      	ldr	r3, [pc, #176]	@ (8005e14 <HAL_GPIO_Init+0x22c>)
 8005d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d66:	4a2b      	ldr	r2, [pc, #172]	@ (8005e14 <HAL_GPIO_Init+0x22c>)
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d70:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <HAL_GPIO_Init+0x22c>)
 8005d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d7e:	4a26      	ldr	r2, [pc, #152]	@ (8005e18 <HAL_GPIO_Init+0x230>)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	089b      	lsrs	r3, r3, #2
 8005d84:	3302      	adds	r3, #2
 8005d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	220f      	movs	r2, #15
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <HAL_GPIO_Init+0x234>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d04a      	beq.n	8005e40 <HAL_GPIO_Init+0x258>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <HAL_GPIO_Init+0x238>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d02b      	beq.n	8005e0a <HAL_GPIO_Init+0x222>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <HAL_GPIO_Init+0x23c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d025      	beq.n	8005e06 <HAL_GPIO_Init+0x21e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e28 <HAL_GPIO_Init+0x240>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01f      	beq.n	8005e02 <HAL_GPIO_Init+0x21a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	@ (8005e2c <HAL_GPIO_Init+0x244>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d019      	beq.n	8005dfe <HAL_GPIO_Init+0x216>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_GPIO_Init+0x248>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <HAL_GPIO_Init+0x212>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <HAL_GPIO_Init+0x24c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00d      	beq.n	8005df6 <HAL_GPIO_Init+0x20e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	@ (8005e38 <HAL_GPIO_Init+0x250>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <HAL_GPIO_Init+0x20a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <HAL_GPIO_Init+0x254>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d101      	bne.n	8005dee <HAL_GPIO_Init+0x206>
 8005dea:	2309      	movs	r3, #9
 8005dec:	e029      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005dee:	230a      	movs	r3, #10
 8005df0:	e027      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005df2:	2307      	movs	r3, #7
 8005df4:	e025      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005df6:	2306      	movs	r3, #6
 8005df8:	e023      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005dfa:	2305      	movs	r3, #5
 8005dfc:	e021      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005dfe:	2304      	movs	r3, #4
 8005e00:	e01f      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005e02:	2303      	movs	r3, #3
 8005e04:	e01d      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e01b      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e019      	b.n	8005e42 <HAL_GPIO_Init+0x25a>
 8005e0e:	bf00      	nop
 8005e10:	58000080 	.word	0x58000080
 8005e14:	58024400 	.word	0x58024400
 8005e18:	58000400 	.word	0x58000400
 8005e1c:	58020000 	.word	0x58020000
 8005e20:	58020400 	.word	0x58020400
 8005e24:	58020800 	.word	0x58020800
 8005e28:	58020c00 	.word	0x58020c00
 8005e2c:	58021000 	.word	0x58021000
 8005e30:	58021400 	.word	0x58021400
 8005e34:	58021800 	.word	0x58021800
 8005e38:	58021c00 	.word	0x58021c00
 8005e3c:	58022400 	.word	0x58022400
 8005e40:	2300      	movs	r3, #0
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	f002 0203 	and.w	r2, r2, #3
 8005e48:	0092      	lsls	r2, r2, #2
 8005e4a:	4093      	lsls	r3, r2
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e52:	4938      	ldr	r1, [pc, #224]	@ (8005f34 <HAL_GPIO_Init+0x34c>)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	089b      	lsrs	r3, r3, #2
 8005e58:	3302      	adds	r3, #2
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005eb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	3301      	adds	r3, #1
 8005f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f47f ae6b 	bne.w	8005bfc <HAL_GPIO_Init+0x14>
  }
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	3724      	adds	r7, #36	@ 0x24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	58000400 	.word	0x58000400

08005f38 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f40:	4b19      	ldr	r3, [pc, #100]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d00a      	beq.n	8005f62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f4c:	4b16      	ldr	r3, [pc, #88]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e01f      	b.n	8005f9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e01d      	b.n	8005f9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f62:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f023 0207 	bic.w	r2, r3, #7
 8005f6a:	490f      	ldr	r1, [pc, #60]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f72:	f7fb fdd5 	bl	8001b20 <HAL_GetTick>
 8005f76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f78:	e009      	b.n	8005f8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f7a:	f7fb fdd1 	bl	8001b20 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f88:	d901      	bls.n	8005f8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e007      	b.n	8005f9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f8e:	4b06      	ldr	r3, [pc, #24]	@ (8005fa8 <HAL_PWREx_ConfigSupply+0x70>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f9a:	d1ee      	bne.n	8005f7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	58024800 	.word	0x58024800

08005fac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	@ 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e3c8      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 8087 	beq.w	80060da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fcc:	4b88      	ldr	r3, [pc, #544]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd6:	4b86      	ldr	r3, [pc, #536]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d007      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x46>
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	2b18      	cmp	r3, #24
 8005fe6:	d110      	bne.n	800600a <HAL_RCC_OscConfig+0x5e>
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d10b      	bne.n	800600a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d06c      	beq.n	80060d8 <HAL_RCC_OscConfig+0x12c>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d168      	bne.n	80060d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e3a2      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x76>
 8006014:	4b76      	ldr	r3, [pc, #472]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a75      	ldr	r2, [pc, #468]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800601a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e02e      	b.n	8006080 <HAL_RCC_OscConfig+0xd4>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10c      	bne.n	8006044 <HAL_RCC_OscConfig+0x98>
 800602a:	4b71      	ldr	r3, [pc, #452]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a70      	ldr	r2, [pc, #448]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b6e      	ldr	r3, [pc, #440]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a6d      	ldr	r2, [pc, #436]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800603c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e01d      	b.n	8006080 <HAL_RCC_OscConfig+0xd4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0xbc>
 800604e:	4b68      	ldr	r3, [pc, #416]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a67      	ldr	r2, [pc, #412]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	4b65      	ldr	r3, [pc, #404]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a64      	ldr	r2, [pc, #400]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e00b      	b.n	8006080 <HAL_RCC_OscConfig+0xd4>
 8006068:	4b61      	ldr	r3, [pc, #388]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a60      	ldr	r2, [pc, #384]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800606e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b5e      	ldr	r3, [pc, #376]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a5d      	ldr	r2, [pc, #372]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800607a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800607e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d013      	beq.n	80060b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fb fd4a 	bl	8001b20 <HAL_GetTick>
 800608c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006090:	f7fb fd46 	bl	8001b20 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	@ 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e356      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060a2:	4b53      	ldr	r3, [pc, #332]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0xe4>
 80060ae:	e014      	b.n	80060da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fb fd36 	bl	8001b20 <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060b8:	f7fb fd32 	bl	8001b20 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b64      	cmp	r3, #100	@ 0x64
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e342      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060ca:	4b49      	ldr	r3, [pc, #292]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x10c>
 80060d6:	e000      	b.n	80060da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 808c 	beq.w	8006200 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e8:	4b41      	ldr	r3, [pc, #260]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060f2:	4b3f      	ldr	r3, [pc, #252]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_RCC_OscConfig+0x162>
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	2b18      	cmp	r3, #24
 8006102:	d137      	bne.n	8006174 <HAL_RCC_OscConfig+0x1c8>
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d132      	bne.n	8006174 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610e:	4b38      	ldr	r3, [pc, #224]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCC_OscConfig+0x17a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e314      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006126:	4b32      	ldr	r3, [pc, #200]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 0219 	bic.w	r2, r3, #25
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	492f      	ldr	r1, [pc, #188]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006138:	f7fb fcf2 	bl	8001b20 <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006140:	f7fb fcee 	bl	8001b20 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e2fe      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006152:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615e:	4b24      	ldr	r3, [pc, #144]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	4920      	ldr	r1, [pc, #128]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006172:	e045      	b.n	8006200 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d026      	beq.n	80061ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800617c:	4b1c      	ldr	r3, [pc, #112]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 0219 	bic.w	r2, r3, #25
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4919      	ldr	r1, [pc, #100]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800618a:	4313      	orrs	r3, r2
 800618c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7fb fcc7 	bl	8001b20 <HAL_GetTick>
 8006192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006196:	f7fb fcc3 	bl	8001b20 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e2d3      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a8:	4b11      	ldr	r3, [pc, #68]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b4:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	490b      	ldr	r1, [pc, #44]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	604b      	str	r3, [r1, #4]
 80061c8:	e01a      	b.n	8006200 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ca:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a08      	ldr	r2, [pc, #32]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d6:	f7fb fca3 	bl	8001b20 <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061de:	f7fb fc9f 	bl	8001b20 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d903      	bls.n	80061f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e2af      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
 80061f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061f4:	4b96      	ldr	r3, [pc, #600]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ee      	bne.n	80061de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0310 	and.w	r3, r3, #16
 8006208:	2b00      	cmp	r3, #0
 800620a:	d06a      	beq.n	80062e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800620c:	4b90      	ldr	r3, [pc, #576]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006214:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006216:	4b8e      	ldr	r3, [pc, #568]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	2b08      	cmp	r3, #8
 8006220:	d007      	beq.n	8006232 <HAL_RCC_OscConfig+0x286>
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b18      	cmp	r3, #24
 8006226:	d11b      	bne.n	8006260 <HAL_RCC_OscConfig+0x2b4>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b01      	cmp	r3, #1
 8006230:	d116      	bne.n	8006260 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006232:	4b87      	ldr	r3, [pc, #540]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_RCC_OscConfig+0x29e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	2b80      	cmp	r3, #128	@ 0x80
 8006244:	d001      	beq.n	800624a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e282      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624a:	4b81      	ldr	r3, [pc, #516]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	061b      	lsls	r3, r3, #24
 8006258:	497d      	ldr	r1, [pc, #500]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800625a:	4313      	orrs	r3, r2
 800625c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800625e:	e040      	b.n	80062e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d023      	beq.n	80062b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006268:	4b79      	ldr	r3, [pc, #484]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a78      	ldr	r2, [pc, #480]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006274:	f7fb fc54 	bl	8001b20 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800627c:	f7fb fc50 	bl	8001b20 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e260      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800628e:	4b70      	ldr	r3, [pc, #448]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800629a:	4b6d      	ldr	r3, [pc, #436]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	061b      	lsls	r3, r3, #24
 80062a8:	4969      	ldr	r1, [pc, #420]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60cb      	str	r3, [r1, #12]
 80062ae:	e018      	b.n	80062e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062b0:	4b67      	ldr	r3, [pc, #412]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a66      	ldr	r2, [pc, #408]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80062b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fb fc30 	bl	8001b20 <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062c4:	f7fb fc2c 	bl	8001b20 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e23c      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f0      	bne.n	80062c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d036      	beq.n	800635c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d019      	beq.n	800632a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062f6:	4b56      	ldr	r3, [pc, #344]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062fa:	4a55      	ldr	r2, [pc, #340]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006302:	f7fb fc0d 	bl	8001b20 <HAL_GetTick>
 8006306:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800630a:	f7fb fc09 	bl	8001b20 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e219      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800631c:	4b4c      	ldr	r3, [pc, #304]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800631e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0f0      	beq.n	800630a <HAL_RCC_OscConfig+0x35e>
 8006328:	e018      	b.n	800635c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800632a:	4b49      	ldr	r3, [pc, #292]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800632c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632e:	4a48      	ldr	r2, [pc, #288]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006336:	f7fb fbf3 	bl	8001b20 <HAL_GetTick>
 800633a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800633e:	f7fb fbef 	bl	8001b20 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1ff      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006350:	4b3f      	ldr	r3, [pc, #252]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d036      	beq.n	80063d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d019      	beq.n	80063a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006370:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a36      	ldr	r2, [pc, #216]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006376:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800637a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800637c:	f7fb fbd0 	bl	8001b20 <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006384:	f7fb fbcc 	bl	8001b20 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e1dc      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006396:	4b2e      	ldr	r3, [pc, #184]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x3d8>
 80063a2:	e018      	b.n	80063d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a29      	ldr	r2, [pc, #164]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80063aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063b0:	f7fb fbb6 	bl	8001b20 <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063b8:	f7fb fbb2 	bl	8001b20 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e1c2      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ca:	4b21      	ldr	r3, [pc, #132]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 8086 	beq.w	80064f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <HAL_RCC_OscConfig+0x4a8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006454 <HAL_RCC_OscConfig+0x4a8>)
 80063ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063f0:	f7fb fb96 	bl	8001b20 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f8:	f7fb fb92 	bl	8001b20 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	@ 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1a2      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800640a:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <HAL_RCC_OscConfig+0x4a8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f0      	beq.n	80063f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d106      	bne.n	800642c <HAL_RCC_OscConfig+0x480>
 800641e:	4b0c      	ldr	r3, [pc, #48]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006422:	4a0b      	ldr	r2, [pc, #44]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	6713      	str	r3, [r2, #112]	@ 0x70
 800642a:	e032      	b.n	8006492 <HAL_RCC_OscConfig+0x4e6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d111      	bne.n	8006458 <HAL_RCC_OscConfig+0x4ac>
 8006434:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006438:	4a05      	ldr	r2, [pc, #20]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006440:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006444:	4a02      	ldr	r2, [pc, #8]	@ (8006450 <HAL_RCC_OscConfig+0x4a4>)
 8006446:	f023 0304 	bic.w	r3, r3, #4
 800644a:	6713      	str	r3, [r2, #112]	@ 0x70
 800644c:	e021      	b.n	8006492 <HAL_RCC_OscConfig+0x4e6>
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
 8006454:	58024800 	.word	0x58024800
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b05      	cmp	r3, #5
 800645e:	d10c      	bne.n	800647a <HAL_RCC_OscConfig+0x4ce>
 8006460:	4b83      	ldr	r3, [pc, #524]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	4a82      	ldr	r2, [pc, #520]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006466:	f043 0304 	orr.w	r3, r3, #4
 800646a:	6713      	str	r3, [r2, #112]	@ 0x70
 800646c:	4b80      	ldr	r3, [pc, #512]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006470:	4a7f      	ldr	r2, [pc, #508]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6713      	str	r3, [r2, #112]	@ 0x70
 8006478:	e00b      	b.n	8006492 <HAL_RCC_OscConfig+0x4e6>
 800647a:	4b7d      	ldr	r3, [pc, #500]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647e:	4a7c      	ldr	r2, [pc, #496]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	@ 0x70
 8006486:	4b7a      	ldr	r3, [pc, #488]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648a:	4a79      	ldr	r2, [pc, #484]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d015      	beq.n	80064c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649a:	f7fb fb41 	bl	8001b20 <HAL_GetTick>
 800649e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064a0:	e00a      	b.n	80064b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a2:	f7fb fb3d 	bl	8001b20 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e14b      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064b8:	4b6d      	ldr	r3, [pc, #436]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0ee      	beq.n	80064a2 <HAL_RCC_OscConfig+0x4f6>
 80064c4:	e014      	b.n	80064f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c6:	f7fb fb2b 	bl	8001b20 <HAL_GetTick>
 80064ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064cc:	e00a      	b.n	80064e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ce:	f7fb fb27 	bl	8001b20 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064dc:	4293      	cmp	r3, r2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e135      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064e4:	4b62      	ldr	r3, [pc, #392]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ee      	bne.n	80064ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 812a 	beq.w	800674e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006502:	2b18      	cmp	r3, #24
 8006504:	f000 80ba 	beq.w	800667c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	2b02      	cmp	r3, #2
 800650e:	f040 8095 	bne.w	800663c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006512:	4b57      	ldr	r3, [pc, #348]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a56      	ldr	r2, [pc, #344]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800651c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651e:	f7fb faff 	bl	8001b20 <HAL_GetTick>
 8006522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006526:	f7fb fafb 	bl	8001b20 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e10b      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006538:	4b4d      	ldr	r3, [pc, #308]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f0      	bne.n	8006526 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006544:	4b4a      	ldr	r3, [pc, #296]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006546:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006548:	4b4a      	ldr	r3, [pc, #296]	@ (8006674 <HAL_RCC_OscConfig+0x6c8>)
 800654a:	4013      	ands	r3, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006554:	0112      	lsls	r2, r2, #4
 8006556:	430a      	orrs	r2, r1
 8006558:	4945      	ldr	r1, [pc, #276]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800655a:	4313      	orrs	r3, r2
 800655c:	628b      	str	r3, [r1, #40]	@ 0x28
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	3b01      	subs	r3, #1
 8006564:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656c:	3b01      	subs	r3, #1
 800656e:	025b      	lsls	r3, r3, #9
 8006570:	b29b      	uxth	r3, r3
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	3b01      	subs	r3, #1
 800657a:	041b      	lsls	r3, r3, #16
 800657c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006586:	3b01      	subs	r3, #1
 8006588:	061b      	lsls	r3, r3, #24
 800658a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800658e:	4938      	ldr	r1, [pc, #224]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006590:	4313      	orrs	r3, r2
 8006592:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006594:	4b36      	ldr	r3, [pc, #216]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	4a35      	ldr	r2, [pc, #212]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065a0:	4b33      	ldr	r3, [pc, #204]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065a4:	4b34      	ldr	r3, [pc, #208]	@ (8006678 <HAL_RCC_OscConfig+0x6cc>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065ac:	00d2      	lsls	r2, r2, #3
 80065ae:	4930      	ldr	r1, [pc, #192]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	f023 020c 	bic.w	r2, r3, #12
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c0:	492b      	ldr	r1, [pc, #172]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065c6:	4b2a      	ldr	r3, [pc, #168]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	f023 0202 	bic.w	r2, r3, #2
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	4927      	ldr	r1, [pc, #156]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065d8:	4b25      	ldr	r3, [pc, #148]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	4a24      	ldr	r2, [pc, #144]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e4:	4b22      	ldr	r3, [pc, #136]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4a21      	ldr	r2, [pc, #132]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800660e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fb fa84 	bl	8001b20 <HAL_GetTick>
 8006618:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fb fa80 	bl	8001b20 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e090      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800662e:	4b10      	ldr	r3, [pc, #64]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x670>
 800663a:	e088      	b.n	800674e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663c:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0b      	ldr	r2, [pc, #44]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fb fa6a 	bl	8001b20 <HAL_GetTick>
 800664c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006650:	f7fb fa66 	bl	8001b20 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e076      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006662:	4b03      	ldr	r3, [pc, #12]	@ (8006670 <HAL_RCC_OscConfig+0x6c4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x6a4>
 800666e:	e06e      	b.n	800674e <HAL_RCC_OscConfig+0x7a2>
 8006670:	58024400 	.word	0x58024400
 8006674:	fffffc0c 	.word	0xfffffc0c
 8006678:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800667c:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006682:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006686:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	2b01      	cmp	r3, #1
 800668e:	d031      	beq.n	80066f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f003 0203 	and.w	r2, r3, #3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d12a      	bne.n	80066f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d122      	bne.n	80066f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d11a      	bne.n	80066f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	0a5b      	lsrs	r3, r3, #9
 80066c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d111      	bne.n	80066f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066de:	429a      	cmp	r2, r3
 80066e0:	d108      	bne.n	80066f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	0e1b      	lsrs	r3, r3, #24
 80066e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d001      	beq.n	80066f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e02b      	b.n	8006750 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066f8:	4b17      	ldr	r3, [pc, #92]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 80066fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fc:	08db      	lsrs	r3, r3, #3
 80066fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006702:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	429a      	cmp	r2, r3
 800670c:	d01f      	beq.n	800674e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800670e:	4b12      	ldr	r3, [pc, #72]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800671a:	f7fb fa01 	bl	8001b20 <HAL_GetTick>
 800671e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006720:	bf00      	nop
 8006722:	f7fb f9fd 	bl	8001b20 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	4293      	cmp	r3, r2
 800672c:	d0f9      	beq.n	8006722 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800672e:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 8006730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006732:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_RCC_OscConfig+0x7b0>)
 8006734:	4013      	ands	r3, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800673a:	00d2      	lsls	r2, r2, #3
 800673c:	4906      	ldr	r1, [pc, #24]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 800673e:	4313      	orrs	r3, r2
 8006740:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006742:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 8006744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006746:	4a04      	ldr	r2, [pc, #16]	@ (8006758 <HAL_RCC_OscConfig+0x7ac>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3730      	adds	r7, #48	@ 0x30
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	58024400 	.word	0x58024400
 800675c:	ffff0007 	.word	0xffff0007

08006760 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e19c      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006774:	4b8a      	ldr	r3, [pc, #552]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	429a      	cmp	r2, r3
 8006780:	d910      	bls.n	80067a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006782:	4b87      	ldr	r3, [pc, #540]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 020f 	bic.w	r2, r3, #15
 800678a:	4985      	ldr	r1, [pc, #532]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006792:	4b83      	ldr	r3, [pc, #524]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e184      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d010      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	4b7b      	ldr	r3, [pc, #492]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067bc:	429a      	cmp	r2, r3
 80067be:	d908      	bls.n	80067d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067c0:	4b78      	ldr	r3, [pc, #480]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	4975      	ldr	r1, [pc, #468]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d010      	beq.n	8006800 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	4b70      	ldr	r3, [pc, #448]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d908      	bls.n	8006800 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067ee:	4b6d      	ldr	r3, [pc, #436]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	496a      	ldr	r1, [pc, #424]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0310 	and.w	r3, r3, #16
 8006808:	2b00      	cmp	r3, #0
 800680a:	d010      	beq.n	800682e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	4b64      	ldr	r3, [pc, #400]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006818:	429a      	cmp	r2, r3
 800681a:	d908      	bls.n	800682e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800681c:	4b61      	ldr	r3, [pc, #388]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	495e      	ldr	r1, [pc, #376]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	4b59      	ldr	r3, [pc, #356]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006846:	429a      	cmp	r2, r3
 8006848:	d908      	bls.n	800685c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800684a:	4b56      	ldr	r3, [pc, #344]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	4953      	ldr	r1, [pc, #332]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006858:	4313      	orrs	r3, r2
 800685a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d010      	beq.n	800688a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	429a      	cmp	r2, r3
 8006876:	d908      	bls.n	800688a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006878:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f023 020f 	bic.w	r2, r3, #15
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4947      	ldr	r1, [pc, #284]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006886:	4313      	orrs	r3, r2
 8006888:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d055      	beq.n	8006942 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006896:	4b43      	ldr	r3, [pc, #268]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4940      	ldr	r1, [pc, #256]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068b0:	4b3c      	ldr	r3, [pc, #240]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d121      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0f6      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068c8:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d115      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0ea      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d107      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068e0:	4b30      	ldr	r3, [pc, #192]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d109      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0de      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068f0:	4b2c      	ldr	r3, [pc, #176]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0d6      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006900:	4b28      	ldr	r3, [pc, #160]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f023 0207 	bic.w	r2, r3, #7
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4925      	ldr	r1, [pc, #148]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800690e:	4313      	orrs	r3, r2
 8006910:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006912:	f7fb f905 	bl	8001b20 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006918:	e00a      	b.n	8006930 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800691a:	f7fb f901 	bl	8001b20 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e0be      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006930:	4b1c      	ldr	r3, [pc, #112]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	429a      	cmp	r2, r3
 8006940:	d1eb      	bne.n	800691a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d010      	beq.n	8006970 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	4b14      	ldr	r3, [pc, #80]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	429a      	cmp	r2, r3
 800695c:	d208      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800695e:	4b11      	ldr	r3, [pc, #68]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f023 020f 	bic.w	r2, r3, #15
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	490e      	ldr	r1, [pc, #56]	@ (80069a4 <HAL_RCC_ClockConfig+0x244>)
 800696c:	4313      	orrs	r3, r2
 800696e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d214      	bcs.n	80069a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	4b08      	ldr	r3, [pc, #32]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 020f 	bic.w	r2, r3, #15
 8006986:	4906      	ldr	r1, [pc, #24]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4313      	orrs	r3, r2
 800698c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800698e:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <HAL_RCC_ClockConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d005      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e086      	b.n	8006aae <HAL_RCC_ClockConfig+0x34e>
 80069a0:	52002000 	.word	0x52002000
 80069a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d010      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d208      	bcs.n	80069d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069c4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	4939      	ldr	r1, [pc, #228]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d010      	beq.n	8006a04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	4b34      	ldr	r3, [pc, #208]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d208      	bcs.n	8006a04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069f2:	4b31      	ldr	r3, [pc, #196]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	492e      	ldr	r1, [pc, #184]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d010      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699a      	ldr	r2, [r3, #24]
 8006a14:	4b28      	ldr	r3, [pc, #160]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d208      	bcs.n	8006a32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a20:	4b25      	ldr	r3, [pc, #148]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	4922      	ldr	r1, [pc, #136]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69da      	ldr	r2, [r3, #28]
 8006a42:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d208      	bcs.n	8006a60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	4917      	ldr	r1, [pc, #92]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a60:	f000 f834 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f003 030f 	and.w	r3, r3, #15
 8006a70:	4912      	ldr	r1, [pc, #72]	@ (8006abc <HAL_RCC_ClockConfig+0x35c>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab8 <HAL_RCC_ClockConfig+0x358>)
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	4a0d      	ldr	r2, [pc, #52]	@ (8006abc <HAL_RCC_ClockConfig+0x35c>)
 8006a88:	5cd3      	ldrb	r3, [r2, r3]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
 8006a94:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac0 <HAL_RCC_ClockConfig+0x360>)
 8006a96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a98:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac4 <HAL_RCC_ClockConfig+0x364>)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac8 <HAL_RCC_ClockConfig+0x368>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fa fff2 	bl	8001a8c <HAL_InitTick>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	0800c830 	.word	0x0800c830
 8006ac0:	24000038 	.word	0x24000038
 8006ac4:	24000034 	.word	0x24000034
 8006ac8:	2400003c 	.word	0x2400003c

08006acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ad2:	4bb3      	ldr	r3, [pc, #716]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ada:	2b18      	cmp	r3, #24
 8006adc:	f200 8155 	bhi.w	8006d8a <HAL_RCC_GetSysClockFreq+0x2be>
 8006ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006d8b 	.word	0x08006d8b
 8006af0:	08006d8b 	.word	0x08006d8b
 8006af4:	08006d8b 	.word	0x08006d8b
 8006af8:	08006d8b 	.word	0x08006d8b
 8006afc:	08006d8b 	.word	0x08006d8b
 8006b00:	08006d8b 	.word	0x08006d8b
 8006b04:	08006d8b 	.word	0x08006d8b
 8006b08:	08006b73 	.word	0x08006b73
 8006b0c:	08006d8b 	.word	0x08006d8b
 8006b10:	08006d8b 	.word	0x08006d8b
 8006b14:	08006d8b 	.word	0x08006d8b
 8006b18:	08006d8b 	.word	0x08006d8b
 8006b1c:	08006d8b 	.word	0x08006d8b
 8006b20:	08006d8b 	.word	0x08006d8b
 8006b24:	08006d8b 	.word	0x08006d8b
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006d8b 	.word	0x08006d8b
 8006b30:	08006d8b 	.word	0x08006d8b
 8006b34:	08006d8b 	.word	0x08006d8b
 8006b38:	08006d8b 	.word	0x08006d8b
 8006b3c:	08006d8b 	.word	0x08006d8b
 8006b40:	08006d8b 	.word	0x08006d8b
 8006b44:	08006d8b 	.word	0x08006d8b
 8006b48:	08006b7f 	.word	0x08006b7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b4c:	4b94      	ldr	r3, [pc, #592]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d009      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b58:	4b91      	ldr	r3, [pc, #580]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	08db      	lsrs	r3, r3, #3
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	4a90      	ldr	r2, [pc, #576]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
 8006b68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b6a:	e111      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b6e:	61bb      	str	r3, [r7, #24]
      break;
 8006b70:	e10e      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b72:	4b8d      	ldr	r3, [pc, #564]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b74:	61bb      	str	r3, [r7, #24]
      break;
 8006b76:	e10b      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b78:	4b8c      	ldr	r3, [pc, #560]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b7a:	61bb      	str	r3, [r7, #24]
      break;
 8006b7c:	e108      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b7e:	4b88      	ldr	r3, [pc, #544]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b88:	4b85      	ldr	r3, [pc, #532]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b94:	4b82      	ldr	r3, [pc, #520]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b9e:	4b80      	ldr	r3, [pc, #512]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba2:	08db      	lsrs	r3, r3, #3
 8006ba4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80e1 	beq.w	8006d84 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	f000 8083 	beq.w	8006cd0 <HAL_RCC_GetSysClockFreq+0x204>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	f200 80a1 	bhi.w	8006d14 <HAL_RCC_GetSysClockFreq+0x248>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x114>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d056      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bde:	e099      	b.n	8006d14 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be0:	4b6f      	ldr	r3, [pc, #444]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d02d      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bec:	4b6c      	ldr	r3, [pc, #432]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	08db      	lsrs	r3, r3, #3
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	4a6b      	ldr	r2, [pc, #428]	@ (8006da4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c16:	4b62      	ldr	r3, [pc, #392]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c46:	e087      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006db4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b51      	ldr	r3, [pc, #324]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c8a:	e065      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006db8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b40      	ldr	r3, [pc, #256]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cce:	e043      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006dbc <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cf6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d12:	e021      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006db8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	4b1e      	ldr	r3, [pc, #120]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006db0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d56:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d58:	4b11      	ldr	r3, [pc, #68]	@ (8006da0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5c:	0a5b      	lsrs	r3, r3, #9
 8006d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d62:	3301      	adds	r3, #1
 8006d64:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	ee07 3a90 	vmov	s15, r3
 8006d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7c:	ee17 3a90 	vmov	r3, s15
 8006d80:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d82:	e005      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
      break;
 8006d88:	e002      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d8a:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d8c:	61bb      	str	r3, [r7, #24]
      break;
 8006d8e:	bf00      	nop
  }

  return sysclockfreq;
 8006d90:	69bb      	ldr	r3, [r7, #24]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3724      	adds	r7, #36	@ 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	58024400 	.word	0x58024400
 8006da4:	03d09000 	.word	0x03d09000
 8006da8:	003d0900 	.word	0x003d0900
 8006dac:	007a1200 	.word	0x007a1200
 8006db0:	46000000 	.word	0x46000000
 8006db4:	4c742400 	.word	0x4c742400
 8006db8:	4a742400 	.word	0x4a742400
 8006dbc:	4af42400 	.word	0x4af42400

08006dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dc6:	f7ff fe81 	bl	8006acc <HAL_RCC_GetSysClockFreq>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b10      	ldr	r3, [pc, #64]	@ (8006e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	0a1b      	lsrs	r3, r3, #8
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	490f      	ldr	r1, [pc, #60]	@ (8006e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dd8:	5ccb      	ldrb	r3, [r1, r3]
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <HAL_RCC_GetHCLKFreq+0x50>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	4a09      	ldr	r2, [pc, #36]	@ (8006e14 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dee:	5cd3      	ldrb	r3, [r2, r3]
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	4a07      	ldr	r2, [pc, #28]	@ (8006e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dfc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dfe:	4a07      	ldr	r2, [pc, #28]	@ (8006e1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e04:	4b04      	ldr	r3, [pc, #16]	@ (8006e18 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e06:	681b      	ldr	r3, [r3, #0]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	58024400 	.word	0x58024400
 8006e14:	0800c830 	.word	0x0800c830
 8006e18:	24000038 	.word	0x24000038
 8006e1c:	24000034 	.word	0x24000034

08006e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e24:	f7ff ffcc 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	4b06      	ldr	r3, [pc, #24]	@ (8006e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	4904      	ldr	r1, [pc, #16]	@ (8006e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e36:	5ccb      	ldrb	r3, [r1, r3]
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58024400 	.word	0x58024400
 8006e48:	0800c830 	.word	0x0800c830

08006e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e50:	b0c6      	sub	sp, #280	@ 0x118
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e5e:	2300      	movs	r3, #0
 8006e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e70:	2500      	movs	r5, #0
 8006e72:	ea54 0305 	orrs.w	r3, r4, r5
 8006e76:	d049      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e82:	d02f      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e88:	d828      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e8e:	d01a      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e94:	d822      	bhi.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e9e:	d007      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ea0:	e01c      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea2:	4bab      	ldr	r3, [pc, #684]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	4aaa      	ldr	r2, [pc, #680]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eae:	e01a      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f002 fa49 	bl	8009350 <RCCEx_PLL2_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ec4:	e00f      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eca:	3328      	adds	r3, #40	@ 0x28
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 faf0 	bl	80094b4 <RCCEx_PLL3_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006eda:	e004      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006eee:	4b98      	ldr	r3, [pc, #608]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006efc:	4a94      	ldr	r2, [pc, #592]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006efe:	430b      	orrs	r3, r1
 8006f00:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f02:	e003      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f18:	f04f 0900 	mov.w	r9, #0
 8006f1c:	ea58 0309 	orrs.w	r3, r8, r9
 8006f20:	d047      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f28:	2b04      	cmp	r3, #4
 8006f2a:	d82a      	bhi.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f49 	.word	0x08006f49
 8006f38:	08006f57 	.word	0x08006f57
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006f8b 	.word	0x08006f8b
 8006f44:	08006f8b 	.word	0x08006f8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f48:	4b81      	ldr	r3, [pc, #516]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	4a80      	ldr	r2, [pc, #512]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f54:	e01a      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f002 f9f6 	bl	8009350 <RCCEx_PLL2_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f6a:	e00f      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f70:	3328      	adds	r3, #40	@ 0x28
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f002 fa9d 	bl	80094b4 <RCCEx_PLL3_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f80:	e004      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f88:	e000      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f94:	4b6e      	ldr	r3, [pc, #440]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	f023 0107 	bic.w	r1, r3, #7
 8006f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa2:	4a6b      	ldr	r2, [pc, #428]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fa8:	e003      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006faa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006fbe:	f04f 0b00 	mov.w	fp, #0
 8006fc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fc6:	d05b      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fd0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006fd4:	d03b      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006fd6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006fda:	d834      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fe0:	d037      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fe6:	d82e      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006fe8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006fec:	d033      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006fee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ff2:	d828      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ff8:	d01a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ffe:	d822      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007004:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007008:	d007      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800700a:	e01c      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700c:	4b50      	ldr	r3, [pc, #320]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a4f      	ldr	r2, [pc, #316]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007018:	e01e      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701e:	3308      	adds	r3, #8
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f002 f994 	bl	8009350 <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800702e:	e013      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	3328      	adds	r3, #40	@ 0x28
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fa3b 	bl	80094b4 <RCCEx_PLL3_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007044:	e008      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800704c:	e004      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007060:	4b3b      	ldr	r3, [pc, #236]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007070:	4a37      	ldr	r2, [pc, #220]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007072:	430b      	orrs	r3, r1
 8007074:	6593      	str	r3, [r2, #88]	@ 0x58
 8007076:	e003      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800707c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800708c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007096:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800709a:	460b      	mov	r3, r1
 800709c:	4313      	orrs	r3, r2
 800709e:	d05d      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070ac:	d03b      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80070ae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070b2:	d834      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070b8:	d037      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80070ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070be:	d82e      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070c4:	d033      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80070c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070ca:	d828      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070d0:	d01a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80070d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070d6:	d822      	bhi.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80070dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070e0:	d007      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80070e2:	e01c      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e8:	4a19      	ldr	r2, [pc, #100]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070f0:	e01e      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f6:	3308      	adds	r3, #8
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f002 f928 	bl	8009350 <RCCEx_PLL2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007106:	e013      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710c:	3328      	adds	r3, #40	@ 0x28
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f002 f9cf 	bl	80094b4 <RCCEx_PLL3_Config>
 8007116:	4603      	mov	r3, r0
 8007118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007124:	e004      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800712e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007138:	4b05      	ldr	r3, [pc, #20]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800713a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800713c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007144:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007148:	4a01      	ldr	r2, [pc, #4]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800714a:	430b      	orrs	r3, r1
 800714c:	6593      	str	r3, [r2, #88]	@ 0x58
 800714e:	e005      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800715c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007168:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800716c:	2300      	movs	r3, #0
 800716e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007172:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007176:	460b      	mov	r3, r1
 8007178:	4313      	orrs	r3, r2
 800717a:	d03a      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800717c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007182:	2b30      	cmp	r3, #48	@ 0x30
 8007184:	d01f      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8007186:	2b30      	cmp	r3, #48	@ 0x30
 8007188:	d819      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x372>
 800718a:	2b20      	cmp	r3, #32
 800718c:	d00c      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800718e:	2b20      	cmp	r3, #32
 8007190:	d815      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x372>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d019      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007196:	2b10      	cmp	r3, #16
 8007198:	d111      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800719a:	4baa      	ldr	r3, [pc, #680]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	4aa9      	ldr	r2, [pc, #676]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071a6:	e011      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ac:	3308      	adds	r3, #8
 80071ae:	2102      	movs	r1, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f002 f8cd 	bl	8009350 <RCCEx_PLL2_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80071ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80071d4:	4b9b      	ldr	r3, [pc, #620]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e2:	4a98      	ldr	r2, [pc, #608]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071e4:	430b      	orrs	r3, r1
 80071e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071e8:	e003      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80071fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007202:	2300      	movs	r3, #0
 8007204:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007208:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800720c:	460b      	mov	r3, r1
 800720e:	4313      	orrs	r3, r2
 8007210:	d051      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007218:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800721c:	d035      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800721e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007222:	d82e      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007224:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007228:	d031      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800722a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800722e:	d828      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007234:	d01a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800723a:	d822      	bhi.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007244:	d007      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007246:	e01c      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007248:	4b7e      	ldr	r3, [pc, #504]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	4a7d      	ldr	r2, [pc, #500]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800724e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007252:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007254:	e01c      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725a:	3308      	adds	r3, #8
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f002 f876 	bl	8009350 <RCCEx_PLL2_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800726a:	e011      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800726c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007270:	3328      	adds	r3, #40	@ 0x28
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f002 f91d 	bl	80094b4 <RCCEx_PLL3_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007280:	e006      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800728a:	bf00      	nop
 800728c:	e000      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800728e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007298:	4b6a      	ldr	r3, [pc, #424]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800729a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800729c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a6:	4a67      	ldr	r2, [pc, #412]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80072ac:	e003      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80072c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4313      	orrs	r3, r2
 80072d4:	d053      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80072d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072e0:	d033      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80072e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072e6:	d82c      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80072e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072ec:	d02f      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80072ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072f2:	d826      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80072f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072f8:	d02b      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80072fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072fe:	d820      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007300:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007304:	d012      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8007306:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800730a:	d81a      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d022      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007314:	d115      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	3308      	adds	r3, #8
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f002 f816 	bl	8009350 <RCCEx_PLL2_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800732a:	e015      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007330:	3328      	adds	r3, #40	@ 0x28
 8007332:	2101      	movs	r1, #1
 8007334:	4618      	mov	r0, r3
 8007336:	f002 f8bd 	bl	80094b4 <RCCEx_PLL3_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007340:	e00a      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007348:	e006      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800734a:	bf00      	nop
 800734c:	e004      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800734e:	bf00      	nop
 8007350:	e002      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007360:	4b38      	ldr	r3, [pc, #224]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007364:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736e:	4a35      	ldr	r2, [pc, #212]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007370:	430b      	orrs	r3, r1
 8007372:	6513      	str	r3, [r2, #80]	@ 0x50
 8007374:	e003      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007376:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800737a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800738a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800738e:	2300      	movs	r3, #0
 8007390:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007394:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d058      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800739e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073aa:	d033      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073b0:	d82c      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073b6:	d02f      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073bc:	d826      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073c2:	d02b      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80073c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80073c8:	d820      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073ce:	d012      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80073d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073d4:	d81a      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d022      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80073da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073de:	d115      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	3308      	adds	r3, #8
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 ffb1 	bl	8009350 <RCCEx_PLL2_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80073f4:	e015      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	3328      	adds	r3, #40	@ 0x28
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f002 f858 	bl	80094b4 <RCCEx_PLL3_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800740a:	e00a      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007412:	e006      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007414:	bf00      	nop
 8007416:	e004      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007418:	bf00      	nop
 800741a:	e002      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800741c:	bf00      	nop
 800741e:	e000      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10e      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800743a:	4a02      	ldr	r2, [pc, #8]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800743c:	430b      	orrs	r3, r1
 800743e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007440:	e006      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007458:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800745c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007460:	2300      	movs	r3, #0
 8007462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007466:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800746a:	460b      	mov	r3, r1
 800746c:	4313      	orrs	r3, r2
 800746e:	d037      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800747a:	d00e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800747c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007480:	d816      	bhi.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800748a:	d111      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800748c:	4bc4      	ldr	r3, [pc, #784]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	4ac3      	ldr	r2, [pc, #780]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007498:	e00f      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749e:	3308      	adds	r3, #8
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 ff54 	bl	8009350 <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074ae:	e004      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074c2:	4bb7      	ldr	r3, [pc, #732]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074d0:	4ab3      	ldr	r2, [pc, #716]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80074ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80074fa:	460b      	mov	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d039      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007506:	2b03      	cmp	r3, #3
 8007508:	d81c      	bhi.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800750a:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	0800754d 	.word	0x0800754d
 8007514:	08007521 	.word	0x08007521
 8007518:	0800752f 	.word	0x0800752f
 800751c:	0800754d 	.word	0x0800754d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007520:	4b9f      	ldr	r3, [pc, #636]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a9e      	ldr	r2, [pc, #632]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800752a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800752c:	e00f      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800752e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007532:	3308      	adds	r3, #8
 8007534:	2102      	movs	r1, #2
 8007536:	4618      	mov	r0, r3
 8007538:	f001 ff0a 	bl	8009350 <RCCEx_PLL2_Config>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007542:	e004      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800754a:	e000      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800754c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007556:	4b92      	ldr	r3, [pc, #584]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755a:	f023 0103 	bic.w	r1, r3, #3
 800755e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007564:	4a8e      	ldr	r2, [pc, #568]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007566:	430b      	orrs	r3, r1
 8007568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800756a:	e003      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007584:	2300      	movs	r3, #0
 8007586:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800758a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800758e:	460b      	mov	r3, r1
 8007590:	4313      	orrs	r3, r2
 8007592:	f000 8099 	beq.w	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007596:	4b83      	ldr	r3, [pc, #524]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a82      	ldr	r2, [pc, #520]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800759c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075a2:	f7fa fabd 	bl	8001b20 <HAL_GetTick>
 80075a6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075aa:	e00b      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ac:	f7fa fab8 	bl	8001b20 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b64      	cmp	r3, #100	@ 0x64
 80075ba:	d903      	bls.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075c2:	e005      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075c4:	4b77      	ldr	r3, [pc, #476]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0ed      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80075d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d173      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075d8:	4b71      	ldr	r3, [pc, #452]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80075e4:	4053      	eors	r3, r2
 80075e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d015      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075ee:	4b6c      	ldr	r3, [pc, #432]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075fa:	4b69      	ldr	r3, [pc, #420]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fe:	4a68      	ldr	r2, [pc, #416]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007604:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007606:	4b66      	ldr	r3, [pc, #408]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760a:	4a65      	ldr	r2, [pc, #404]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800760c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007610:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007612:	4a63      	ldr	r2, [pc, #396]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007618:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007626:	d118      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007628:	f7fa fa7a 	bl	8001b20 <HAL_GetTick>
 800762c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007630:	e00d      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007632:	f7fa fa75 	bl	8001b20 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800763c:	1ad2      	subs	r2, r2, r3
 800763e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007642:	429a      	cmp	r2, r3
 8007644:	d903      	bls.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800764c:	e005      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800764e:	4b54      	ldr	r3, [pc, #336]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0eb      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800765a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800765e:	2b00      	cmp	r3, #0
 8007660:	d129      	bne.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800766a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007672:	d10e      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007674:	4b4a      	ldr	r3, [pc, #296]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007684:	091a      	lsrs	r2, r3, #4
 8007686:	4b48      	ldr	r3, [pc, #288]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007688:	4013      	ands	r3, r2
 800768a:	4a45      	ldr	r2, [pc, #276]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800768c:	430b      	orrs	r3, r1
 800768e:	6113      	str	r3, [r2, #16]
 8007690:	e005      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007692:	4b43      	ldr	r3, [pc, #268]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	4a42      	ldr	r2, [pc, #264]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800769c:	6113      	str	r3, [r2, #16]
 800769e:	4b40      	ldr	r3, [pc, #256]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ae:	4a3c      	ldr	r2, [pc, #240]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80076b4:	e008      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80076be:	e003      	b.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f002 0301 	and.w	r3, r2, #1
 80076d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076d8:	2300      	movs	r3, #0
 80076da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80076e2:	460b      	mov	r3, r1
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f000 808f 	beq.w	8007808 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076f0:	2b28      	cmp	r3, #40	@ 0x28
 80076f2:	d871      	bhi.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80076f4:	a201      	add	r2, pc, #4	@ (adr r2, 80076fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	080077e1 	.word	0x080077e1
 8007700:	080077d9 	.word	0x080077d9
 8007704:	080077d9 	.word	0x080077d9
 8007708:	080077d9 	.word	0x080077d9
 800770c:	080077d9 	.word	0x080077d9
 8007710:	080077d9 	.word	0x080077d9
 8007714:	080077d9 	.word	0x080077d9
 8007718:	080077d9 	.word	0x080077d9
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077d9 	.word	0x080077d9
 8007724:	080077d9 	.word	0x080077d9
 8007728:	080077d9 	.word	0x080077d9
 800772c:	080077d9 	.word	0x080077d9
 8007730:	080077d9 	.word	0x080077d9
 8007734:	080077d9 	.word	0x080077d9
 8007738:	080077d9 	.word	0x080077d9
 800773c:	080077c3 	.word	0x080077c3
 8007740:	080077d9 	.word	0x080077d9
 8007744:	080077d9 	.word	0x080077d9
 8007748:	080077d9 	.word	0x080077d9
 800774c:	080077d9 	.word	0x080077d9
 8007750:	080077d9 	.word	0x080077d9
 8007754:	080077d9 	.word	0x080077d9
 8007758:	080077d9 	.word	0x080077d9
 800775c:	080077e1 	.word	0x080077e1
 8007760:	080077d9 	.word	0x080077d9
 8007764:	080077d9 	.word	0x080077d9
 8007768:	080077d9 	.word	0x080077d9
 800776c:	080077d9 	.word	0x080077d9
 8007770:	080077d9 	.word	0x080077d9
 8007774:	080077d9 	.word	0x080077d9
 8007778:	080077d9 	.word	0x080077d9
 800777c:	080077e1 	.word	0x080077e1
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077d9 	.word	0x080077d9
 8007788:	080077d9 	.word	0x080077d9
 800778c:	080077d9 	.word	0x080077d9
 8007790:	080077d9 	.word	0x080077d9
 8007794:	080077d9 	.word	0x080077d9
 8007798:	080077d9 	.word	0x080077d9
 800779c:	080077e1 	.word	0x080077e1
 80077a0:	58024400 	.word	0x58024400
 80077a4:	58024800 	.word	0x58024800
 80077a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b0:	3308      	adds	r3, #8
 80077b2:	2101      	movs	r1, #1
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fdcb 	bl	8009350 <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077c0:	e00f      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c6:	3328      	adds	r3, #40	@ 0x28
 80077c8:	2101      	movs	r1, #1
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fe72 	bl	80094b4 <RCCEx_PLL3_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80077d6:	e004      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077de:	e000      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80077e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80077ea:	4bbf      	ldr	r3, [pc, #764]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077f8:	4abb      	ldr	r2, [pc, #748]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077fa:	430b      	orrs	r3, r1
 80077fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80077fe:	e003      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	f002 0302 	and.w	r3, r2, #2
 8007814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007818:	2300      	movs	r3, #0
 800781a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800781e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007822:	460b      	mov	r3, r1
 8007824:	4313      	orrs	r3, r2
 8007826:	d041      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782e:	2b05      	cmp	r3, #5
 8007830:	d824      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007832:	a201      	add	r2, pc, #4	@ (adr r2, 8007838 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	08007885 	.word	0x08007885
 800783c:	08007851 	.word	0x08007851
 8007840:	08007867 	.word	0x08007867
 8007844:	08007885 	.word	0x08007885
 8007848:	08007885 	.word	0x08007885
 800784c:	08007885 	.word	0x08007885
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	3308      	adds	r3, #8
 8007856:	2101      	movs	r1, #1
 8007858:	4618      	mov	r0, r3
 800785a:	f001 fd79 	bl	8009350 <RCCEx_PLL2_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007864:	e00f      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786a:	3328      	adds	r3, #40	@ 0x28
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fe20 	bl	80094b4 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800787a:	e004      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007882:	e000      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800788e:	4b96      	ldr	r3, [pc, #600]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007892:	f023 0107 	bic.w	r1, r3, #7
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789c:	4a92      	ldr	r2, [pc, #584]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800789e:	430b      	orrs	r3, r1
 80078a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078a2:	e003      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f002 0304 	and.w	r3, r2, #4
 80078b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078c6:	460b      	mov	r3, r1
 80078c8:	4313      	orrs	r3, r2
 80078ca:	d044      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	d825      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80078d8:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	0800792d 	.word	0x0800792d
 80078e4:	080078f9 	.word	0x080078f9
 80078e8:	0800790f 	.word	0x0800790f
 80078ec:	0800792d 	.word	0x0800792d
 80078f0:	0800792d 	.word	0x0800792d
 80078f4:	0800792d 	.word	0x0800792d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fc:	3308      	adds	r3, #8
 80078fe:	2101      	movs	r1, #1
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fd25 	bl	8009350 <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800790c:	e00f      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	3328      	adds	r3, #40	@ 0x28
 8007914:	2101      	movs	r1, #1
 8007916:	4618      	mov	r0, r3
 8007918:	f001 fdcc 	bl	80094b4 <RCCEx_PLL3_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007922:	e004      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800792a:	e000      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800792c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10b      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007936:	4b6c      	ldr	r3, [pc, #432]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800793a:	f023 0107 	bic.w	r1, r3, #7
 800793e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007946:	4a68      	ldr	r2, [pc, #416]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007948:	430b      	orrs	r3, r1
 800794a:	6593      	str	r3, [r2, #88]	@ 0x58
 800794c:	e003      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007952:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f002 0320 	and.w	r3, r2, #32
 8007962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007966:	2300      	movs	r3, #0
 8007968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800796c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007970:	460b      	mov	r3, r1
 8007972:	4313      	orrs	r3, r2
 8007974:	d055      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800797e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007982:	d033      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007988:	d82c      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800798a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798e:	d02f      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007994:	d826      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800799a:	d02b      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800799c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079a0:	d820      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a6:	d012      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80079a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ac:	d81a      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d022      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079b6:	d115      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079bc:	3308      	adds	r3, #8
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 fcc5 	bl	8009350 <RCCEx_PLL2_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079cc:	e015      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	3328      	adds	r3, #40	@ 0x28
 80079d4:	2102      	movs	r1, #2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fd6c 	bl	80094b4 <RCCEx_PLL3_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80079e2:	e00a      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079ea:	e006      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80079ec:	bf00      	nop
 80079ee:	e004      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80079f0:	bf00      	nop
 80079f2:	e002      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80079f4:	bf00      	nop
 80079f6:	e000      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80079f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10b      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a02:	4b39      	ldr	r3, [pc, #228]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a12:	4a35      	ldr	r2, [pc, #212]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a14:	430b      	orrs	r3, r1
 8007a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a18:	e003      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a32:	2300      	movs	r3, #0
 8007a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	d058      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a4a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a4e:	d033      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007a50:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a54:	d82c      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5a:	d02f      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a60:	d826      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a66:	d02b      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007a68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a6c:	d820      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a72:	d012      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a78:	d81a      	bhi.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d022      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a82:	d115      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a88:	3308      	adds	r3, #8
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 fc5f 	bl	8009350 <RCCEx_PLL2_Config>
 8007a92:	4603      	mov	r3, r0
 8007a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a98:	e015      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9e:	3328      	adds	r3, #40	@ 0x28
 8007aa0:	2102      	movs	r1, #2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 fd06 	bl	80094b4 <RCCEx_PLL3_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007aae:	e00a      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ab6:	e006      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ab8:	bf00      	nop
 8007aba:	e004      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007abc:	bf00      	nop
 8007abe:	e002      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ac0:	bf00      	nop
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ac6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10e      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ace:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ade:	4a02      	ldr	r2, [pc, #8]	@ (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ae4:	e006      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007af0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d055      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b1c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b20:	d033      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007b22:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b26:	d82c      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b2c:	d02f      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b32:	d826      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b34:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b38:	d02b      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b3a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b3e:	d820      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b44:	d012      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b4a:	d81a      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d022      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b54:	d115      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 fbf6 	bl	8009350 <RCCEx_PLL2_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b6a:	e015      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b70:	3328      	adds	r3, #40	@ 0x28
 8007b72:	2102      	movs	r1, #2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 fc9d 	bl	80094b4 <RCCEx_PLL3_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007b80:	e00a      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b88:	e006      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007b8a:	bf00      	nop
 8007b8c:	e004      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007b8e:	bf00      	nop
 8007b90:	e002      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007b92:	bf00      	nop
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ba0:	4ba0      	ldr	r3, [pc, #640]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ba4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bb0:	4a9c      	ldr	r2, [pc, #624]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bb6:	e003      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f002 0308 	and.w	r3, r2, #8
 8007bcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007bd6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d01e      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bec:	d10c      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf2:	3328      	adds	r3, #40	@ 0x28
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 fc5c 	bl	80094b4 <RCCEx_PLL3_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c08:	4b86      	ldr	r3, [pc, #536]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c18:	4a82      	ldr	r2, [pc, #520]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f002 0310 	and.w	r3, r2, #16
 8007c2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c34:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	d01e      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c4a:	d10c      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	3328      	adds	r3, #40	@ 0x28
 8007c52:	2102      	movs	r1, #2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fc2d 	bl	80094b4 <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c66:	4b6f      	ldr	r3, [pc, #444]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c76:	4a6b      	ldr	r2, [pc, #428]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c92:	460b      	mov	r3, r1
 8007c94:	4313      	orrs	r3, r2
 8007c96:	d03e      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca4:	d022      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007ca6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007caa:	d81b      	bhi.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb4:	d00b      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007cb6:	e015      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 fb45 	bl	8009350 <RCCEx_PLL2_Config>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ccc:	e00f      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd2:	3328      	adds	r3, #40	@ 0x28
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 fbec 	bl	80094b4 <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ce2:	e004      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d06:	4a47      	ldr	r2, [pc, #284]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d0c:	e003      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d24:	2300      	movs	r3, #0
 8007d26:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	d03b      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d3e:	d01f      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d44:	d818      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d4a:	d003      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007d4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d50:	d007      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007d52:	e011      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d54:	4b33      	ldr	r3, [pc, #204]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	4a32      	ldr	r2, [pc, #200]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d60:	e00f      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d66:	3328      	adds	r3, #40	@ 0x28
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fba2 	bl	80094b4 <RCCEx_PLL3_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d8a:	4b26      	ldr	r3, [pc, #152]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d9a:	4a22      	ldr	r2, [pc, #136]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007da0:	e003      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007db6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007db8:	2300      	movs	r3, #0
 8007dba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dbc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	d034      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007dd4:	d007      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007dd6:	e011      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd8:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	4a11      	ldr	r2, [pc, #68]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007de4:	e00e      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dea:	3308      	adds	r3, #8
 8007dec:	2102      	movs	r1, #2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 faae 	bl	8009350 <RCCEx_PLL2_Config>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007dfa:	e003      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10d      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e1a:	4a02      	ldr	r2, [pc, #8]	@ (8007e24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e20:	e006      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007e22:	bf00      	nop
 8007e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e3e:	2300      	movs	r3, #0
 8007e40:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e42:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e46:	460b      	mov	r3, r1
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	d00c      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e50:	3328      	adds	r3, #40	@ 0x28
 8007e52:	2102      	movs	r1, #2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 fb2d 	bl	80094b4 <RCCEx_PLL3_Config>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007e72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e74:	2300      	movs	r3, #0
 8007e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	d036      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e8c:	d018      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007e8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e92:	d811      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e98:	d014      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e9e:	d80b      	bhi.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d011      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ea8:	d106      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eaa:	4bb7      	ldr	r3, [pc, #732]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eae:	4ab6      	ldr	r2, [pc, #728]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007eb6:	e008      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007ebe:	e004      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10a      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ed2:	4bad      	ldr	r3, [pc, #692]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ee0:	4aa9      	ldr	r2, [pc, #676]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ee6:	e003      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007efe:	2300      	movs	r3, #0
 8007f00:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f0c:	4b9e      	ldr	r3, [pc, #632]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f10:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1a:	4a9b      	ldr	r2, [pc, #620]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f2e:	2300      	movs	r3, #0
 8007f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f36:	460b      	mov	r3, r1
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f3c:	4b92      	ldr	r3, [pc, #584]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f40:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f4a:	4a8f      	ldr	r2, [pc, #572]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f5e:	2300      	movs	r3, #0
 8007f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f66:	460b      	mov	r3, r1
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f6c:	4b86      	ldr	r3, [pc, #536]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4a85      	ldr	r2, [pc, #532]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f76:	6113      	str	r3, [r2, #16]
 8007f78:	4b83      	ldr	r3, [pc, #524]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f7a:	6919      	ldr	r1, [r3, #16]
 8007f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f84:	4a80      	ldr	r2, [pc, #512]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f86:	430b      	orrs	r3, r1
 8007f88:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d009      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fa6:	4b78      	ldr	r3, [pc, #480]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007faa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb4:	4a74      	ldr	r2, [pc, #464]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fc8:	2300      	movs	r3, #0
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fcc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d00a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fda:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe6:	4a68      	ldr	r2, [pc, #416]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ffe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008002:	460b      	mov	r3, r1
 8008004:	4313      	orrs	r3, r2
 8008006:	d011      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800c:	3308      	adds	r3, #8
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f001 f99d 	bl	8009350 <RCCEx_PLL2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800801c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008028:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	2100      	movs	r1, #0
 8008036:	6239      	str	r1, [r7, #32]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	627b      	str	r3, [r7, #36]	@ 0x24
 800803e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008042:	460b      	mov	r3, r1
 8008044:	4313      	orrs	r3, r2
 8008046:	d011      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800804c:	3308      	adds	r3, #8
 800804e:	2101      	movs	r1, #1
 8008050:	4618      	mov	r0, r3
 8008052:	f001 f97d 	bl	8009350 <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800805c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	2100      	movs	r1, #0
 8008076:	61b9      	str	r1, [r7, #24]
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	d011      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	3308      	adds	r3, #8
 800808e:	2102      	movs	r1, #2
 8008090:	4618      	mov	r0, r3
 8008092:	f001 f95d 	bl	8009350 <RCCEx_PLL2_Config>
 8008096:	4603      	mov	r3, r0
 8008098:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800809c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	2100      	movs	r1, #0
 80080b6:	6139      	str	r1, [r7, #16]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80080c2:	460b      	mov	r3, r1
 80080c4:	4313      	orrs	r3, r2
 80080c6:	d011      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080cc:	3328      	adds	r3, #40	@ 0x28
 80080ce:	2100      	movs	r1, #0
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 f9ef 	bl	80094b4 <RCCEx_PLL3_Config>
 80080d6:	4603      	mov	r3, r0
 80080d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80080dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80080ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	2100      	movs	r1, #0
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008102:	460b      	mov	r3, r1
 8008104:	4313      	orrs	r3, r2
 8008106:	d011      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810c:	3328      	adds	r3, #40	@ 0x28
 800810e:	2101      	movs	r1, #1
 8008110:	4618      	mov	r0, r3
 8008112:	f001 f9cf 	bl	80094b4 <RCCEx_PLL3_Config>
 8008116:	4603      	mov	r3, r0
 8008118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800811c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800812c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	2100      	movs	r1, #0
 8008136:	6039      	str	r1, [r7, #0]
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008142:	460b      	mov	r3, r1
 8008144:	4313      	orrs	r3, r2
 8008146:	d011      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814c:	3328      	adds	r3, #40	@ 0x28
 800814e:	2102      	movs	r1, #2
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f9af 	bl	80094b4 <RCCEx_PLL3_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800815c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008168:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800816c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	e000      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
}
 800817a:	4618      	mov	r0, r3
 800817c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8008180:	46bd      	mov	sp, r7
 8008182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400

0800818c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b090      	sub	sp, #64	@ 0x40
 8008190:	af00      	add	r7, sp, #0
 8008192:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800819a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800819e:	430b      	orrs	r3, r1
 80081a0:	f040 8094 	bne.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	f200 8087 	bhi.w	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80081b6:	a201      	add	r2, pc, #4	@ (adr r2, 80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081d1 	.word	0x080081d1
 80081c0:	080081f9 	.word	0x080081f9
 80081c4:	08008221 	.word	0x08008221
 80081c8:	080082bd 	.word	0x080082bd
 80081cc:	08008249 	.word	0x08008249
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081d0:	4b90      	ldr	r3, [pc, #576]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081dc:	d108      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 ff62 	bl	80090ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ec:	f000 bc93 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081f4:	f000 bc8f 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081f8:	4b86      	ldr	r3, [pc, #536]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008204:	d108      	bne.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008206:	f107 0318 	add.w	r3, r7, #24
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fca6 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008214:	f000 bc7f 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821c:	f000 bc7b 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008220:	4b7c      	ldr	r3, [pc, #496]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800822c:	d108      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800822e:	f107 030c 	add.w	r3, r7, #12
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fde6 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800823c:	f000 bc6b 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008244:	f000 bc67 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008248:	4b72      	ldr	r3, [pc, #456]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800824a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008250:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008252:	4b70      	ldr	r3, [pc, #448]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	2b04      	cmp	r3, #4
 800825c:	d10c      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800825e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008264:	4b6b      	ldr	r3, [pc, #428]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	08db      	lsrs	r3, r3, #3
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	4a6a      	ldr	r2, [pc, #424]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
 8008274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008276:	e01f      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008278:	4b66      	ldr	r3, [pc, #408]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008284:	d106      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800828c:	d102      	bne.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800828e:	4b63      	ldr	r3, [pc, #396]	@ (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008292:	e011      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008294:	4b5f      	ldr	r3, [pc, #380]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800829c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082a0:	d106      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082a8:	d102      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082aa:	4b5d      	ldr	r3, [pc, #372]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ae:	e003      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082b4:	f000 bc2f 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082b8:	f000 bc2d 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082bc:	4b59      	ldr	r3, [pc, #356]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c0:	f000 bc29 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c8:	f000 bc25 	b.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80082cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80082d4:	430b      	orrs	r3, r1
 80082d6:	f040 80a7 	bne.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80082da:	4b4e      	ldr	r3, [pc, #312]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082de:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80082e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082ea:	d054      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082f2:	f200 808b 	bhi.w	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80082f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80082fc:	f000 8083 	beq.w	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008306:	f200 8081 	bhi.w	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008310:	d02f      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008318:	d878      	bhi.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	2b00      	cmp	r3, #0
 800831e:	d004      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008326:	d012      	beq.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008328:	e070      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800832a:	4b3a      	ldr	r3, [pc, #232]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008336:	d107      	bne.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800833c:	4618      	mov	r0, r3
 800833e:	f000 feb5 	bl	80090ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008346:	e3e6      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800834c:	e3e3      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800834e:	4b31      	ldr	r3, [pc, #196]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800835a:	d107      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800835c:	f107 0318 	add.w	r3, r7, #24
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fbfb 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800836a:	e3d4      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008370:	e3d1      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008372:	4b28      	ldr	r3, [pc, #160]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800837e:	d107      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fd3d 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838e:	e3c2      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008394:	e3bf      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008396:	4b1f      	ldr	r3, [pc, #124]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800839a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800839e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d10c      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80083ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b2:	4b18      	ldr	r3, [pc, #96]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	08db      	lsrs	r3, r3, #3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	4a16      	ldr	r2, [pc, #88]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80083be:	fa22 f303 	lsr.w	r3, r2, r3
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c4:	e01e      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083c6:	4b13      	ldr	r3, [pc, #76]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d2:	d106      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80083d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083da:	d102      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083dc:	4b0f      	ldr	r3, [pc, #60]	@ (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083e0:	e010      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ee:	d106      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80083f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f6:	d102      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083f8:	4b09      	ldr	r3, [pc, #36]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fc:	e002      	b.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008402:	e388      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008404:	e387      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008406:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800840a:	e384      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008410:	e381      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008412:	bf00      	nop
 8008414:	58024400 	.word	0x58024400
 8008418:	03d09000 	.word	0x03d09000
 800841c:	003d0900 	.word	0x003d0900
 8008420:	007a1200 	.word	0x007a1200
 8008424:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008430:	430b      	orrs	r3, r1
 8008432:	f040 809c 	bne.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008436:	4b9e      	ldr	r3, [pc, #632]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800843a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800843e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008446:	d054      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800844e:	f200 808b 	bhi.w	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008454:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008458:	f000 8083 	beq.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008462:	f200 8081 	bhi.w	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800846c:	d02f      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008474:	d878      	bhi.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008482:	d012      	beq.n	80084aa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008484:	e070      	b.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008486:	4b8a      	ldr	r3, [pc, #552]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800848e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008492:	d107      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fe07 	bl	80090ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084a2:	e338      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084a8:	e335      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084aa:	4b81      	ldr	r3, [pc, #516]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084b6:	d107      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b8:	f107 0318 	add.w	r3, r7, #24
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fb4d 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084c6:	e326      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084cc:	e323      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084ce:	4b78      	ldr	r3, [pc, #480]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084da:	d107      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084dc:	f107 030c 	add.w	r3, r7, #12
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fc8f 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ea:	e314      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e311      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084f2:	4b6f      	ldr	r3, [pc, #444]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80084fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084fc:	4b6c      	ldr	r3, [pc, #432]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d10c      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800850e:	4b68      	ldr	r3, [pc, #416]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	08db      	lsrs	r3, r3, #3
 8008514:	f003 0303 	and.w	r3, r3, #3
 8008518:	4a66      	ldr	r2, [pc, #408]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800851a:	fa22 f303 	lsr.w	r3, r2, r3
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008520:	e01e      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008522:	4b63      	ldr	r3, [pc, #396]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800852e:	d106      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008536:	d102      	bne.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008538:	4b5f      	ldr	r3, [pc, #380]	@ (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800853c:	e010      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800853e:	4b5c      	ldr	r3, [pc, #368]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800854a:	d106      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008552:	d102      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008554:	4b59      	ldr	r3, [pc, #356]	@ (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008558:	e002      	b.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800855e:	e2da      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008560:	e2d9      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008562:	4b57      	ldr	r3, [pc, #348]	@ (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008566:	e2d6      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800856c:	e2d3      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800856e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008572:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008576:	430b      	orrs	r3, r1
 8008578:	f040 80a7 	bne.w	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800857c:	4b4c      	ldr	r3, [pc, #304]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800857e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008580:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008584:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800858c:	d055      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800858e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008594:	f200 8096 	bhi.w	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800859e:	f000 8084 	beq.w	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085a8:	f200 808c 	bhi.w	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085b2:	d030      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80085b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ba:	f200 8083 	bhi.w	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d004      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085ca:	d012      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80085cc:	e07a      	b.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085ce:	4b38      	ldr	r3, [pc, #224]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085da:	d107      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fd63 	bl	80090ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ea:	e294      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e291      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085f2:	4b2f      	ldr	r3, [pc, #188]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085fe:	d107      	bne.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008600:	f107 0318 	add.w	r3, r7, #24
 8008604:	4618      	mov	r0, r3
 8008606:	f000 faa9 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800860e:	e282      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008614:	e27f      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008616:	4b26      	ldr	r3, [pc, #152]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800861e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008622:	d107      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008624:	f107 030c 	add.w	r3, r7, #12
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fbeb 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008632:	e270      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008638:	e26d      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800863a:	4b1d      	ldr	r3, [pc, #116]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800863c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008644:	4b1a      	ldr	r3, [pc, #104]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b04      	cmp	r3, #4
 800864e:	d10c      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008656:	4b16      	ldr	r3, [pc, #88]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	08db      	lsrs	r3, r3, #3
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	4a14      	ldr	r2, [pc, #80]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008662:	fa22 f303 	lsr.w	r3, r2, r3
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008668:	e01e      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800866a:	4b11      	ldr	r3, [pc, #68]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008676:	d106      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800867e:	d102      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008680:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008684:	e010      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008686:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800868e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008692:	d106      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800869a:	d102      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800869c:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086a0:	e002      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086a6:	e236      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086a8:	e235      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086aa:	4b05      	ldr	r3, [pc, #20]	@ (80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ae:	e232      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086b0:	58024400 	.word	0x58024400
 80086b4:	03d09000 	.word	0x03d09000
 80086b8:	003d0900 	.word	0x003d0900
 80086bc:	007a1200 	.word	0x007a1200
 80086c0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c8:	e225      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80086ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80086d2:	430b      	orrs	r3, r1
 80086d4:	f040 8085 	bne.w	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80086d8:	4b9c      	ldr	r3, [pc, #624]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80086da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80086e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086e8:	d06b      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80086ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80086f0:	d874      	bhi.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80086f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086f8:	d056      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008700:	d86c      	bhi.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008704:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008708:	d03b      	beq.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008710:	d864      	bhi.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008718:	d021      	beq.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008720:	d85c      	bhi.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800872e:	d004      	beq.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008730:	e054      	b.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008732:	f7fe fb75 	bl	8006e20 <HAL_RCC_GetPCLK1Freq>
 8008736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008738:	e1ed      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800873a:	4b84      	ldr	r3, [pc, #528]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008746:	d107      	bne.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008748:	f107 0318 	add.w	r3, r7, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fa05 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008756:	e1de      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800875c:	e1db      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800875e:	4b7b      	ldr	r3, [pc, #492]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800876a:	d107      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800876c:	f107 030c 	add.w	r3, r7, #12
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fb47 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800877a:	e1cc      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008780:	e1c9      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008782:	4b72      	ldr	r3, [pc, #456]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d109      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800878e:	4b6f      	ldr	r3, [pc, #444]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	08db      	lsrs	r3, r3, #3
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	4a6d      	ldr	r2, [pc, #436]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800879a:	fa22 f303 	lsr.w	r3, r2, r3
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a0:	e1b9      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a6:	e1b6      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087a8:	4b68      	ldr	r3, [pc, #416]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80087b6:	4b67      	ldr	r3, [pc, #412]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80087b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ba:	e1ac      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c0:	e1a9      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087c2:	4b62      	ldr	r3, [pc, #392]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80087d0:	4b61      	ldr	r3, [pc, #388]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d4:	e19f      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087da:	e19c      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e0:	e199      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80087e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80087ea:	430b      	orrs	r3, r1
 80087ec:	d173      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80087ee:	4b57      	ldr	r3, [pc, #348]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80087f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087fe:	d02f      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008806:	d863      	bhi.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800880e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008814:	d012      	beq.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8008816:	e05b      	b.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008818:	4b4c      	ldr	r3, [pc, #304]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008824:	d107      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008826:	f107 0318 	add.w	r3, r7, #24
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f996 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008834:	e16f      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800883a:	e16c      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800883c:	4b43      	ldr	r3, [pc, #268]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008848:	d107      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800884a:	f107 030c 	add.w	r3, r7, #12
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fad8 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008858:	e15d      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800885e:	e15a      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008860:	4b3a      	ldr	r3, [pc, #232]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008864:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800886a:	4b38      	ldr	r3, [pc, #224]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d10c      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	d109      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800887c:	4b33      	ldr	r3, [pc, #204]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	08db      	lsrs	r3, r3, #3
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	4a32      	ldr	r2, [pc, #200]	@ (8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800888e:	e01e      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008890:	4b2e      	ldr	r3, [pc, #184]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800889c:	d106      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800889e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088a4:	d102      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80088a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088aa:	e010      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ac:	4b27      	ldr	r3, [pc, #156]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088b8:	d106      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80088ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c0:	d102      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088c2:	4b25      	ldr	r3, [pc, #148]	@ (8008958 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088c6:	e002      	b.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088cc:	e123      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ce:	e122      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d4:	e11f      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80088d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088da:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80088de:	430b      	orrs	r3, r1
 80088e0:	d13c      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80088e2:	4b1a      	ldr	r3, [pc, #104]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f8:	d012      	beq.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80088fa:	e023      	b.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088fc:	4b13      	ldr	r3, [pc, #76]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008908:	d107      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800890a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fbcc 	bl	80090ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008918:	e0fd      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891e:	e0fa      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008920:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800892c:	d107      	bne.n	800893e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800892e:	f107 0318 	add.w	r3, r7, #24
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f912 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893c:	e0eb      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008942:	e0e8      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008948:	e0e5      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800894a:	bf00      	nop
 800894c:	58024400 	.word	0x58024400
 8008950:	03d09000 	.word	0x03d09000
 8008954:	003d0900 	.word	0x003d0900
 8008958:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800895c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008960:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008964:	430b      	orrs	r3, r1
 8008966:	f040 8085 	bne.w	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800896a:	4b6d      	ldr	r3, [pc, #436]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008972:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800897a:	d06b      	beq.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800897c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008982:	d874      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800898a:	d056      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800898c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008992:	d86c      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800899a:	d03b      	beq.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089a2:	d864      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089aa:	d021      	beq.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b2:	d85c      	bhi.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d004      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089c0:	d004      	beq.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80089c2:	e054      	b.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80089c4:	f000 f8b4 	bl	8008b30 <HAL_RCCEx_GetD3PCLK1Freq>
 80089c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089ca:	e0a4      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089cc:	4b54      	ldr	r3, [pc, #336]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089d8:	d107      	bne.n	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089da:	f107 0318 	add.w	r3, r7, #24
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f8bc 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e8:	e095      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ee:	e092      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089fc:	d107      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089fe:	f107 030c 	add.w	r3, r7, #12
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f9fe 	bl	8008e04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a0c:	e083      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a12:	e080      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a14:	4b42      	ldr	r3, [pc, #264]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d109      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a20:	4b3f      	ldr	r3, [pc, #252]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	08db      	lsrs	r3, r3, #3
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	4a3e      	ldr	r2, [pc, #248]	@ (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a32:	e070      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a38:	e06d      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a3a:	4b39      	ldr	r3, [pc, #228]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a46:	d102      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008a48:	4b37      	ldr	r3, [pc, #220]	@ (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4c:	e063      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a52:	e060      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a54:	4b32      	ldr	r3, [pc, #200]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a60:	d102      	bne.n	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008a62:	4b32      	ldr	r3, [pc, #200]	@ (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a66:	e056      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6c:	e053      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a72:	e050      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a78:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	d148      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008a80:	4b27      	ldr	r3, [pc, #156]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a88:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a90:	d02a      	beq.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a98:	d838      	bhi.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d004      	beq.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aa6:	d00d      	beq.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008aa8:	e030      	b.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ab6:	d102      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008abc:	e02b      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac2:	e028      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ac4:	4b16      	ldr	r3, [pc, #88]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008acc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ad0:	d107      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fae8 	bl	80090ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ae0:	e019      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae6:	e016      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008af0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008af4:	d107      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af6:	f107 0318 	add.w	r3, r7, #24
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 f82e 	bl	8008b5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b04:	e007      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0a:	e004      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b10:	e001      	b.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b12:	2300      	movs	r3, #0
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3740      	adds	r7, #64	@ 0x40
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	58024400 	.word	0x58024400
 8008b24:	03d09000 	.word	0x03d09000
 8008b28:	003d0900 	.word	0x003d0900
 8008b2c:	007a1200 	.word	0x007a1200

08008b30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b34:	f7fe f944 	bl	8006dc0 <HAL_RCC_GetHCLKFreq>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	4b06      	ldr	r3, [pc, #24]	@ (8008b54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	091b      	lsrs	r3, r3, #4
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	4904      	ldr	r1, [pc, #16]	@ (8008b58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b46:	5ccb      	ldrb	r3, [r1, r3]
 8008b48:	f003 031f 	and.w	r3, r3, #31
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	58024400 	.word	0x58024400
 8008b58:	0800c830 	.word	0x0800c830

08008b5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b089      	sub	sp, #36	@ 0x24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b64:	4ba1      	ldr	r3, [pc, #644]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b6e:	4b9f      	ldr	r3, [pc, #636]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b72:	0b1b      	lsrs	r3, r3, #12
 8008b74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b7a:	4b9c      	ldr	r3, [pc, #624]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7e:	091b      	lsrs	r3, r3, #4
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b86:	4b99      	ldr	r3, [pc, #612]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8a:	08db      	lsrs	r3, r3, #3
 8008b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	fb02 f303 	mul.w	r3, r2, r3
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 8111 	beq.w	8008dcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	f000 8083 	beq.w	8008cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	f200 80a1 	bhi.w	8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d056      	beq.n	8008c74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008bc6:	e099      	b.n	8008cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc8:	4b88      	ldr	r3, [pc, #544]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d02d      	beq.n	8008c30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bd4:	4b85      	ldr	r3, [pc, #532]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	4a84      	ldr	r2, [pc, #528]	@ (8008df0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
 8008be4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	ee07 3a90 	vmov	s15, r3
 8008bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c2e:	e087      	b.n	8008d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008df8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c42:	4b6a      	ldr	r3, [pc, #424]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c72:	e065      	b.n	8008d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c86:	4b59      	ldr	r3, [pc, #356]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cb6:	e043      	b.n	8008d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cca:	4b48      	ldr	r3, [pc, #288]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cfa:	e021      	b.n	8008d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0e:	4b37      	ldr	r3, [pc, #220]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008df4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d40:	4b2a      	ldr	r3, [pc, #168]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	0a5b      	lsrs	r3, r3, #9
 8008d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d66:	ee17 2a90 	vmov	r2, s15
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d72:	0c1b      	lsrs	r3, r3, #16
 8008d74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d78:	ee07 3a90 	vmov	s15, r3
 8008d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d94:	ee17 2a90 	vmov	r2, s15
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008d9c:	4b13      	ldr	r3, [pc, #76]	@ (8008dec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da0:	0e1b      	lsrs	r3, r3, #24
 8008da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc2:	ee17 2a90 	vmov	r2, s15
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008dca:	e008      	b.n	8008dde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	609a      	str	r2, [r3, #8]
}
 8008dde:	bf00      	nop
 8008de0:	3724      	adds	r7, #36	@ 0x24
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	58024400 	.word	0x58024400
 8008df0:	03d09000 	.word	0x03d09000
 8008df4:	46000000 	.word	0x46000000
 8008df8:	4c742400 	.word	0x4c742400
 8008dfc:	4a742400 	.word	0x4a742400
 8008e00:	4af42400 	.word	0x4af42400

08008e04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b089      	sub	sp, #36	@ 0x24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e0c:	4ba1      	ldr	r3, [pc, #644]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e16:	4b9f      	ldr	r3, [pc, #636]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1a:	0d1b      	lsrs	r3, r3, #20
 8008e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e22:	4b9c      	ldr	r3, [pc, #624]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e2e:	4b99      	ldr	r3, [pc, #612]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e32:	08db      	lsrs	r3, r3, #3
 8008e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8111 	beq.w	8009074 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	f000 8083 	beq.w	8008f60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	f200 80a1 	bhi.w	8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d056      	beq.n	8008f1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008e6e:	e099      	b.n	8008fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e70:	4b88      	ldr	r3, [pc, #544]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d02d      	beq.n	8008ed8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e7c:	4b85      	ldr	r3, [pc, #532]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	08db      	lsrs	r3, r3, #3
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	4a84      	ldr	r2, [pc, #528]	@ (8009098 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	ee07 3a90 	vmov	s15, r3
 8008e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea6:	4b7b      	ldr	r3, [pc, #492]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ed6:	e087      	b.n	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	ee07 3a90 	vmov	s15, r3
 8008ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eea:	4b6a      	ldr	r3, [pc, #424]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef2:	ee07 3a90 	vmov	s15, r3
 8008ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008efe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f1a:	e065      	b.n	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2e:	4b59      	ldr	r3, [pc, #356]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f5e:	e043      	b.n	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f72:	4b48      	ldr	r3, [pc, #288]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fa2:	e021      	b.n	8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fb6:	4b37      	ldr	r3, [pc, #220]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800909c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fe6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fec:	0a5b      	lsrs	r3, r3, #9
 8008fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009002:	edd7 6a07 	vldr	s13, [r7, #28]
 8009006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800900a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800900e:	ee17 2a90 	vmov	r2, s15
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009016:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901a:	0c1b      	lsrs	r3, r3, #16
 800901c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009020:	ee07 3a90 	vmov	s15, r3
 8009024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800902c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009030:	edd7 6a07 	vldr	s13, [r7, #28]
 8009034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800903c:	ee17 2a90 	vmov	r2, s15
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009044:	4b13      	ldr	r3, [pc, #76]	@ (8009094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009048:	0e1b      	lsrs	r3, r3, #24
 800904a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800905a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800905e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800906a:	ee17 2a90 	vmov	r2, s15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009072:	e008      	b.n	8009086 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	609a      	str	r2, [r3, #8]
}
 8009086:	bf00      	nop
 8009088:	3724      	adds	r7, #36	@ 0x24
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	58024400 	.word	0x58024400
 8009098:	03d09000 	.word	0x03d09000
 800909c:	46000000 	.word	0x46000000
 80090a0:	4c742400 	.word	0x4c742400
 80090a4:	4a742400 	.word	0x4a742400
 80090a8:	4af42400 	.word	0x4af42400

080090ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b089      	sub	sp, #36	@ 0x24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090b4:	4ba0      	ldr	r3, [pc, #640]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80090be:	4b9e      	ldr	r3, [pc, #632]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c2:	091b      	lsrs	r3, r3, #4
 80090c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80090ca:	4b9b      	ldr	r3, [pc, #620]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090d4:	4b98      	ldr	r3, [pc, #608]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d8:	08db      	lsrs	r3, r3, #3
 80090da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	fb02 f303 	mul.w	r3, r2, r3
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8111 	beq.w	800931a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	f000 8083 	beq.w	8009206 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b02      	cmp	r3, #2
 8009104:	f200 80a1 	bhi.w	800924a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d056      	beq.n	80091c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009114:	e099      	b.n	800924a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009116:	4b88      	ldr	r3, [pc, #544]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d02d      	beq.n	800917e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009122:	4b85      	ldr	r3, [pc, #532]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	08db      	lsrs	r3, r3, #3
 8009128:	f003 0303 	and.w	r3, r3, #3
 800912c:	4a83      	ldr	r2, [pc, #524]	@ (800933c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800912e:	fa22 f303 	lsr.w	r3, r2, r3
 8009132:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914c:	4b7a      	ldr	r3, [pc, #488]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800914e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009154:	ee07 3a90 	vmov	s15, r3
 8009158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009160:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009178:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800917c:	e087      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009188:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009344 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800918c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009190:	4b69      	ldr	r3, [pc, #420]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009198:	ee07 3a90 	vmov	s15, r3
 800919c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c0:	e065      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	ee07 3a90 	vmov	s15, r3
 80091c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091cc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009348 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80091d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d4:	4b58      	ldr	r3, [pc, #352]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091dc:	ee07 3a90 	vmov	s15, r3
 80091e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009200:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009204:	e043      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	ee07 3a90 	vmov	s15, r3
 800920c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009210:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800934c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009218:	4b47      	ldr	r3, [pc, #284]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800921c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009220:	ee07 3a90 	vmov	s15, r3
 8009224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009228:	ed97 6a03 	vldr	s12, [r7, #12]
 800922c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009238:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009244:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009248:	e021      	b.n	800928e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	ee07 3a90 	vmov	s15, r3
 8009250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009254:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009344 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925c:	4b36      	ldr	r3, [pc, #216]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800925e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009264:	ee07 3a90 	vmov	s15, r3
 8009268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009270:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009288:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800928c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800928e:	4b2a      	ldr	r3, [pc, #168]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009292:	0a5b      	lsrs	r3, r3, #9
 8009294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009298:	ee07 3a90 	vmov	s15, r3
 800929c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092b4:	ee17 2a90 	vmov	r2, s15
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80092bc:	4b1e      	ldr	r3, [pc, #120]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c0:	0c1b      	lsrs	r3, r3, #16
 80092c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80092da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092e2:	ee17 2a90 	vmov	r2, s15
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80092ea:	4b13      	ldr	r3, [pc, #76]	@ (8009338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ee:	0e1b      	lsrs	r3, r3, #24
 80092f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009300:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009304:	edd7 6a07 	vldr	s13, [r7, #28]
 8009308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800930c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009310:	ee17 2a90 	vmov	r2, s15
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009318:	e008      	b.n	800932c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	609a      	str	r2, [r3, #8]
}
 800932c:	bf00      	nop
 800932e:	3724      	adds	r7, #36	@ 0x24
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	58024400 	.word	0x58024400
 800933c:	03d09000 	.word	0x03d09000
 8009340:	46000000 	.word	0x46000000
 8009344:	4c742400 	.word	0x4c742400
 8009348:	4a742400 	.word	0x4a742400
 800934c:	4af42400 	.word	0x4af42400

08009350 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800935e:	4b53      	ldr	r3, [pc, #332]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	2b03      	cmp	r3, #3
 8009368:	d101      	bne.n	800936e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e099      	b.n	80094a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800936e:	4b4f      	ldr	r3, [pc, #316]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a4e      	ldr	r2, [pc, #312]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009374:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800937a:	f7f8 fbd1 	bl	8001b20 <HAL_GetTick>
 800937e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009380:	e008      	b.n	8009394 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009382:	f7f8 fbcd 	bl	8001b20 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d901      	bls.n	8009394 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e086      	b.n	80094a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009394:	4b45      	ldr	r3, [pc, #276]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1f0      	bne.n	8009382 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093a0:	4b42      	ldr	r3, [pc, #264]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 80093a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	031b      	lsls	r3, r3, #12
 80093ae:	493f      	ldr	r1, [pc, #252]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	025b      	lsls	r3, r3, #9
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	3b01      	subs	r3, #1
 80093de:	061b      	lsls	r3, r3, #24
 80093e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80093e4:	4931      	ldr	r1, [pc, #196]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80093ea:	4b30      	ldr	r3, [pc, #192]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	492d      	ldr	r1, [pc, #180]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80093fc:	4b2b      	ldr	r3, [pc, #172]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009400:	f023 0220 	bic.w	r2, r3, #32
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	4928      	ldr	r1, [pc, #160]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 800940a:	4313      	orrs	r3, r2
 800940c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800940e:	4b27      	ldr	r3, [pc, #156]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	4a26      	ldr	r2, [pc, #152]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009414:	f023 0310 	bic.w	r3, r3, #16
 8009418:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800941a:	4b24      	ldr	r3, [pc, #144]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 800941c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800941e:	4b24      	ldr	r3, [pc, #144]	@ (80094b0 <RCCEx_PLL2_Config+0x160>)
 8009420:	4013      	ands	r3, r2
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	69d2      	ldr	r2, [r2, #28]
 8009426:	00d2      	lsls	r2, r2, #3
 8009428:	4920      	ldr	r1, [pc, #128]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 800942a:	4313      	orrs	r3, r2
 800942c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800942e:	4b1f      	ldr	r3, [pc, #124]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009432:	4a1e      	ldr	r2, [pc, #120]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009434:	f043 0310 	orr.w	r3, r3, #16
 8009438:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d106      	bne.n	800944e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009440:	4b1a      	ldr	r3, [pc, #104]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009444:	4a19      	ldr	r2, [pc, #100]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009446:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800944a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800944c:	e00f      	b.n	800946e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d106      	bne.n	8009462 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009454:	4b15      	ldr	r3, [pc, #84]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009458:	4a14      	ldr	r2, [pc, #80]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 800945a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800945e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009460:	e005      	b.n	800946e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009462:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	4a11      	ldr	r2, [pc, #68]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009468:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800946c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800946e:	4b0f      	ldr	r3, [pc, #60]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a0e      	ldr	r2, [pc, #56]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800947a:	f7f8 fb51 	bl	8001b20 <HAL_GetTick>
 800947e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009480:	e008      	b.n	8009494 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009482:	f7f8 fb4d 	bl	8001b20 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b02      	cmp	r3, #2
 800948e:	d901      	bls.n	8009494 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e006      	b.n	80094a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009494:	4b05      	ldr	r3, [pc, #20]	@ (80094ac <RCCEx_PLL2_Config+0x15c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0f0      	beq.n	8009482 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	58024400 	.word	0x58024400
 80094b0:	ffff0007 	.word	0xffff0007

080094b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094c2:	4b53      	ldr	r3, [pc, #332]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d101      	bne.n	80094d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e099      	b.n	8009606 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094d2:	4b4f      	ldr	r3, [pc, #316]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a4e      	ldr	r2, [pc, #312]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80094d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094de:	f7f8 fb1f 	bl	8001b20 <HAL_GetTick>
 80094e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094e4:	e008      	b.n	80094f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094e6:	f7f8 fb1b 	bl	8001b20 <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d901      	bls.n	80094f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e086      	b.n	8009606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094f8:	4b45      	ldr	r3, [pc, #276]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1f0      	bne.n	80094e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009504:	4b42      	ldr	r3, [pc, #264]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009508:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	051b      	lsls	r3, r3, #20
 8009512:	493f      	ldr	r1, [pc, #252]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009514:	4313      	orrs	r3, r2
 8009516:	628b      	str	r3, [r1, #40]	@ 0x28
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	3b01      	subs	r3, #1
 800951e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	3b01      	subs	r3, #1
 8009528:	025b      	lsls	r3, r3, #9
 800952a:	b29b      	uxth	r3, r3
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	3b01      	subs	r3, #1
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	3b01      	subs	r3, #1
 8009542:	061b      	lsls	r3, r3, #24
 8009544:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009548:	4931      	ldr	r1, [pc, #196]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 800954a:	4313      	orrs	r3, r2
 800954c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800954e:	4b30      	ldr	r3, [pc, #192]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	492d      	ldr	r1, [pc, #180]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 800955c:	4313      	orrs	r3, r2
 800955e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009560:	4b2b      	ldr	r3, [pc, #172]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	4928      	ldr	r1, [pc, #160]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 800956e:	4313      	orrs	r3, r2
 8009570:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009572:	4b27      	ldr	r3, [pc, #156]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009576:	4a26      	ldr	r2, [pc, #152]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800957c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800957e:	4b24      	ldr	r3, [pc, #144]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009582:	4b24      	ldr	r3, [pc, #144]	@ (8009614 <RCCEx_PLL3_Config+0x160>)
 8009584:	4013      	ands	r3, r2
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	69d2      	ldr	r2, [r2, #28]
 800958a:	00d2      	lsls	r2, r2, #3
 800958c:	4920      	ldr	r1, [pc, #128]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 800958e:	4313      	orrs	r3, r2
 8009590:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009592:	4b1f      	ldr	r3, [pc, #124]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009596:	4a1e      	ldr	r2, [pc, #120]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 8009598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800959c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a8:	4a19      	ldr	r2, [pc, #100]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095b0:	e00f      	b.n	80095d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d106      	bne.n	80095c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80095b8:	4b15      	ldr	r3, [pc, #84]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095bc:	4a14      	ldr	r2, [pc, #80]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80095c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095c4:	e005      	b.n	80095d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095c6:	4b12      	ldr	r3, [pc, #72]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	4a11      	ldr	r2, [pc, #68]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095de:	f7f8 fa9f 	bl	8001b20 <HAL_GetTick>
 80095e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095e4:	e008      	b.n	80095f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095e6:	f7f8 fa9b 	bl	8001b20 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d901      	bls.n	80095f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e006      	b.n	8009606 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095f8:	4b05      	ldr	r3, [pc, #20]	@ (8009610 <RCCEx_PLL3_Config+0x15c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d0f0      	beq.n	80095e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009604:	7bfb      	ldrb	r3, [r7, #15]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	58024400 	.word	0x58024400
 8009614:	ffff0007 	.word	0xffff0007

08009618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e049      	b.n	80096be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f7 ffe8 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f000 fd76 	bl	800a148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e05e      	b.n	800979e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a2b      	ldr	r2, [pc, #172]	@ (80097ac <HAL_TIM_Base_Start_IT+0xe4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d02c      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800970a:	d027      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a27      	ldr	r2, [pc, #156]	@ (80097b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d022      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a26      	ldr	r2, [pc, #152]	@ (80097b4 <HAL_TIM_Base_Start_IT+0xec>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d01d      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a24      	ldr	r2, [pc, #144]	@ (80097b8 <HAL_TIM_Base_Start_IT+0xf0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d018      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a23      	ldr	r2, [pc, #140]	@ (80097bc <HAL_TIM_Base_Start_IT+0xf4>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d013      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a21      	ldr	r2, [pc, #132]	@ (80097c0 <HAL_TIM_Base_Start_IT+0xf8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00e      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a20      	ldr	r2, [pc, #128]	@ (80097c4 <HAL_TIM_Base_Start_IT+0xfc>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d009      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a1e      	ldr	r2, [pc, #120]	@ (80097c8 <HAL_TIM_Base_Start_IT+0x100>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d004      	beq.n	800975c <HAL_TIM_Base_Start_IT+0x94>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a1d      	ldr	r2, [pc, #116]	@ (80097cc <HAL_TIM_Base_Start_IT+0x104>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d115      	bne.n	8009788 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	4b1b      	ldr	r3, [pc, #108]	@ (80097d0 <HAL_TIM_Base_Start_IT+0x108>)
 8009764:	4013      	ands	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2b06      	cmp	r3, #6
 800976c:	d015      	beq.n	800979a <HAL_TIM_Base_Start_IT+0xd2>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009774:	d011      	beq.n	800979a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f042 0201 	orr.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009786:	e008      	b.n	800979a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0201 	orr.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	e000      	b.n	800979c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800979a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40000c00 	.word	0x40000c00
 80097bc:	40010400 	.word	0x40010400
 80097c0:	40001800 	.word	0x40001800
 80097c4:	40014000 	.word	0x40014000
 80097c8:	4000e000 	.word	0x4000e000
 80097cc:	4000e400 	.word	0x4000e400
 80097d0:	00010007 	.word	0x00010007

080097d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e049      	b.n	800987a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f841 	bl	8009882 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	4619      	mov	r1, r3
 8009812:	4610      	mov	r0, r2
 8009814:	f000 fc98 	bl	800a148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
	...

08009898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <HAL_TIM_PWM_Start+0x24>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	bf14      	ite	ne
 80098b4:	2301      	movne	r3, #1
 80098b6:	2300      	moveq	r3, #0
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	e03c      	b.n	8009936 <HAL_TIM_PWM_Start+0x9e>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d109      	bne.n	80098d6 <HAL_TIM_PWM_Start+0x3e>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	bf14      	ite	ne
 80098ce:	2301      	movne	r3, #1
 80098d0:	2300      	moveq	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	e02f      	b.n	8009936 <HAL_TIM_PWM_Start+0x9e>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b08      	cmp	r3, #8
 80098da:	d109      	bne.n	80098f0 <HAL_TIM_PWM_Start+0x58>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	e022      	b.n	8009936 <HAL_TIM_PWM_Start+0x9e>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b0c      	cmp	r3, #12
 80098f4:	d109      	bne.n	800990a <HAL_TIM_PWM_Start+0x72>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b01      	cmp	r3, #1
 8009900:	bf14      	ite	ne
 8009902:	2301      	movne	r3, #1
 8009904:	2300      	moveq	r3, #0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	e015      	b.n	8009936 <HAL_TIM_PWM_Start+0x9e>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b10      	cmp	r3, #16
 800990e:	d109      	bne.n	8009924 <HAL_TIM_PWM_Start+0x8c>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	e008      	b.n	8009936 <HAL_TIM_PWM_Start+0x9e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e0ab      	b.n	8009a96 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <HAL_TIM_PWM_Start+0xb6>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800994c:	e023      	b.n	8009996 <HAL_TIM_PWM_Start+0xfe>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b04      	cmp	r3, #4
 8009952:	d104      	bne.n	800995e <HAL_TIM_PWM_Start+0xc6>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800995c:	e01b      	b.n	8009996 <HAL_TIM_PWM_Start+0xfe>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b08      	cmp	r3, #8
 8009962:	d104      	bne.n	800996e <HAL_TIM_PWM_Start+0xd6>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800996c:	e013      	b.n	8009996 <HAL_TIM_PWM_Start+0xfe>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b0c      	cmp	r3, #12
 8009972:	d104      	bne.n	800997e <HAL_TIM_PWM_Start+0xe6>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800997c:	e00b      	b.n	8009996 <HAL_TIM_PWM_Start+0xfe>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b10      	cmp	r3, #16
 8009982:	d104      	bne.n	800998e <HAL_TIM_PWM_Start+0xf6>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800998c:	e003      	b.n	8009996 <HAL_TIM_PWM_Start+0xfe>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2202      	movs	r2, #2
 8009992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2201      	movs	r2, #1
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fff2 	bl	800a988 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a3d      	ldr	r2, [pc, #244]	@ (8009aa0 <HAL_TIM_PWM_Start+0x208>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d013      	beq.n	80099d6 <HAL_TIM_PWM_Start+0x13e>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a3c      	ldr	r2, [pc, #240]	@ (8009aa4 <HAL_TIM_PWM_Start+0x20c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d00e      	beq.n	80099d6 <HAL_TIM_PWM_Start+0x13e>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a3a      	ldr	r2, [pc, #232]	@ (8009aa8 <HAL_TIM_PWM_Start+0x210>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d009      	beq.n	80099d6 <HAL_TIM_PWM_Start+0x13e>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a39      	ldr	r2, [pc, #228]	@ (8009aac <HAL_TIM_PWM_Start+0x214>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d004      	beq.n	80099d6 <HAL_TIM_PWM_Start+0x13e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a37      	ldr	r2, [pc, #220]	@ (8009ab0 <HAL_TIM_PWM_Start+0x218>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d101      	bne.n	80099da <HAL_TIM_PWM_Start+0x142>
 80099d6:	2301      	movs	r3, #1
 80099d8:	e000      	b.n	80099dc <HAL_TIM_PWM_Start+0x144>
 80099da:	2300      	movs	r3, #0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d007      	beq.n	80099f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a2a      	ldr	r2, [pc, #168]	@ (8009aa0 <HAL_TIM_PWM_Start+0x208>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d02c      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a02:	d027      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a2a      	ldr	r2, [pc, #168]	@ (8009ab4 <HAL_TIM_PWM_Start+0x21c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d022      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a29      	ldr	r2, [pc, #164]	@ (8009ab8 <HAL_TIM_PWM_Start+0x220>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d01d      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a27      	ldr	r2, [pc, #156]	@ (8009abc <HAL_TIM_PWM_Start+0x224>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d018      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a1f      	ldr	r2, [pc, #124]	@ (8009aa4 <HAL_TIM_PWM_Start+0x20c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d013      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a23      	ldr	r2, [pc, #140]	@ (8009ac0 <HAL_TIM_PWM_Start+0x228>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00e      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa8 <HAL_TIM_PWM_Start+0x210>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d009      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac4 <HAL_TIM_PWM_Start+0x22c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d004      	beq.n	8009a54 <HAL_TIM_PWM_Start+0x1bc>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac8 <HAL_TIM_PWM_Start+0x230>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d115      	bne.n	8009a80 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8009acc <HAL_TIM_PWM_Start+0x234>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b06      	cmp	r3, #6
 8009a64:	d015      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x1fa>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a6c:	d011      	beq.n	8009a92 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0201 	orr.w	r2, r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7e:	e008      	b.n	8009a92 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f042 0201 	orr.w	r2, r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	e000      	b.n	8009a94 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	40010000 	.word	0x40010000
 8009aa4:	40010400 	.word	0x40010400
 8009aa8:	40014000 	.word	0x40014000
 8009aac:	40014400 	.word	0x40014400
 8009ab0:	40014800 	.word	0x40014800
 8009ab4:	40000400 	.word	0x40000400
 8009ab8:	40000800 	.word	0x40000800
 8009abc:	40000c00 	.word	0x40000c00
 8009ac0:	40001800 	.word	0x40001800
 8009ac4:	4000e000 	.word	0x4000e000
 8009ac8:	4000e400 	.word	0x4000e400
 8009acc:	00010007 	.word	0x00010007

08009ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d020      	beq.n	8009b34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01b      	beq.n	8009b34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f06f 0202 	mvn.w	r2, #2
 8009b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 faf6 	bl	800a10c <HAL_TIM_IC_CaptureCallback>
 8009b20:	e005      	b.n	8009b2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fae8 	bl	800a0f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 faf9 	bl	800a120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d020      	beq.n	8009b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f003 0304 	and.w	r3, r3, #4
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d01b      	beq.n	8009b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f06f 0204 	mvn.w	r2, #4
 8009b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2202      	movs	r2, #2
 8009b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fad0 	bl	800a10c <HAL_TIM_IC_CaptureCallback>
 8009b6c:	e005      	b.n	8009b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fac2 	bl	800a0f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fad3 	bl	800a120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d020      	beq.n	8009bcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f003 0308 	and.w	r3, r3, #8
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01b      	beq.n	8009bcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f06f 0208 	mvn.w	r2, #8
 8009b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2204      	movs	r2, #4
 8009ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 faaa 	bl	800a10c <HAL_TIM_IC_CaptureCallback>
 8009bb8:	e005      	b.n	8009bc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fa9c 	bl	800a0f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 faad 	bl	800a120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d020      	beq.n	8009c18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f003 0310 	and.w	r3, r3, #16
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01b      	beq.n	8009c18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f06f 0210 	mvn.w	r2, #16
 8009be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2208      	movs	r2, #8
 8009bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa84 	bl	800a10c <HAL_TIM_IC_CaptureCallback>
 8009c04:	e005      	b.n	8009c12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa76 	bl	800a0f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fa87 	bl	800a120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00c      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f06f 0201 	mvn.w	r2, #1
 8009c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7f7 f87a 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d104      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00c      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 f8b7 	bl	800add8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00c      	beq.n	8009c8e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f8af 	bl	800adec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00c      	beq.n	8009cb2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d007      	beq.n	8009cb2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fa41 	bl	800a134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f003 0320 	and.w	r3, r3, #32
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00c      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f06f 0220 	mvn.w	r2, #32
 8009cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 f877 	bl	800adc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cd6:	bf00      	nop
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
	...

08009ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d101      	bne.n	8009cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	e0ff      	b.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b14      	cmp	r3, #20
 8009d0a:	f200 80f0 	bhi.w	8009eee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d69 	.word	0x08009d69
 8009d18:	08009eef 	.word	0x08009eef
 8009d1c:	08009eef 	.word	0x08009eef
 8009d20:	08009eef 	.word	0x08009eef
 8009d24:	08009da9 	.word	0x08009da9
 8009d28:	08009eef 	.word	0x08009eef
 8009d2c:	08009eef 	.word	0x08009eef
 8009d30:	08009eef 	.word	0x08009eef
 8009d34:	08009deb 	.word	0x08009deb
 8009d38:	08009eef 	.word	0x08009eef
 8009d3c:	08009eef 	.word	0x08009eef
 8009d40:	08009eef 	.word	0x08009eef
 8009d44:	08009e2b 	.word	0x08009e2b
 8009d48:	08009eef 	.word	0x08009eef
 8009d4c:	08009eef 	.word	0x08009eef
 8009d50:	08009eef 	.word	0x08009eef
 8009d54:	08009e6d 	.word	0x08009e6d
 8009d58:	08009eef 	.word	0x08009eef
 8009d5c:	08009eef 	.word	0x08009eef
 8009d60:	08009eef 	.word	0x08009eef
 8009d64:	08009ead 	.word	0x08009ead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68b9      	ldr	r1, [r7, #8]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 fa96 	bl	800a2a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	699a      	ldr	r2, [r3, #24]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f042 0208 	orr.w	r2, r2, #8
 8009d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0204 	bic.w	r2, r2, #4
 8009d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6999      	ldr	r1, [r3, #24]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	691a      	ldr	r2, [r3, #16]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	619a      	str	r2, [r3, #24]
      break;
 8009da6:	e0a5      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68b9      	ldr	r1, [r7, #8]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 fb06 	bl	800a3c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699a      	ldr	r2, [r3, #24]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6999      	ldr	r1, [r3, #24]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	021a      	lsls	r2, r3, #8
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	619a      	str	r2, [r3, #24]
      break;
 8009de8:	e084      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 fb6f 	bl	800a4d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69da      	ldr	r2, [r3, #28]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f042 0208 	orr.w	r2, r2, #8
 8009e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69da      	ldr	r2, [r3, #28]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0204 	bic.w	r2, r2, #4
 8009e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	69d9      	ldr	r1, [r3, #28]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	691a      	ldr	r2, [r3, #16]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	61da      	str	r2, [r3, #28]
      break;
 8009e28:	e064      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fbd7 	bl	800a5e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	69da      	ldr	r2, [r3, #28]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69da      	ldr	r2, [r3, #28]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	69d9      	ldr	r1, [r3, #28]
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	021a      	lsls	r2, r3, #8
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	61da      	str	r2, [r3, #28]
      break;
 8009e6a:	e043      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68b9      	ldr	r1, [r7, #8]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 fc20 	bl	800a6b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0208 	orr.w	r2, r2, #8
 8009e86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f022 0204 	bic.w	r2, r2, #4
 8009e96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	691a      	ldr	r2, [r3, #16]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009eaa:	e023      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fc64 	bl	800a780 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ec6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	021a      	lsls	r2, r3, #8
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009eec:	e002      	b.n	8009ef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop

08009f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_TIM_ConfigClockSource+0x1c>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e0dc      	b.n	800a0de <HAL_TIM_ConfigClockSource+0x1d6>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	4b6a      	ldr	r3, [pc, #424]	@ (800a0e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a64      	ldr	r2, [pc, #400]	@ (800a0ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	f000 80a9 	beq.w	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f60:	4a62      	ldr	r2, [pc, #392]	@ (800a0ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	f200 80ae 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f68:	4a61      	ldr	r2, [pc, #388]	@ (800a0f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	f000 80a1 	beq.w	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f70:	4a5f      	ldr	r2, [pc, #380]	@ (800a0f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	f200 80a6 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f78:	4a5e      	ldr	r2, [pc, #376]	@ (800a0f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	f000 8099 	beq.w	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f80:	4a5c      	ldr	r2, [pc, #368]	@ (800a0f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	f200 809e 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009f8c:	f000 8091 	beq.w	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f90:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009f94:	f200 8096 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f9c:	f000 8089 	beq.w	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fa0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fa4:	f200 808e 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fac:	d03e      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x124>
 8009fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fb2:	f200 8087 	bhi.w	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fba:	f000 8086 	beq.w	800a0ca <HAL_TIM_ConfigClockSource+0x1c2>
 8009fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc2:	d87f      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc4:	2b70      	cmp	r3, #112	@ 0x70
 8009fc6:	d01a      	beq.n	8009ffe <HAL_TIM_ConfigClockSource+0xf6>
 8009fc8:	2b70      	cmp	r3, #112	@ 0x70
 8009fca:	d87b      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fcc:	2b60      	cmp	r3, #96	@ 0x60
 8009fce:	d050      	beq.n	800a072 <HAL_TIM_ConfigClockSource+0x16a>
 8009fd0:	2b60      	cmp	r3, #96	@ 0x60
 8009fd2:	d877      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd4:	2b50      	cmp	r3, #80	@ 0x50
 8009fd6:	d03c      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0x14a>
 8009fd8:	2b50      	cmp	r3, #80	@ 0x50
 8009fda:	d873      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fdc:	2b40      	cmp	r3, #64	@ 0x40
 8009fde:	d058      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x18a>
 8009fe0:	2b40      	cmp	r3, #64	@ 0x40
 8009fe2:	d86f      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe4:	2b30      	cmp	r3, #48	@ 0x30
 8009fe6:	d064      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe8:	2b30      	cmp	r3, #48	@ 0x30
 8009fea:	d86b      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	d060      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d867      	bhi.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05c      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	d05a      	beq.n	800a0b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ffc:	e062      	b.n	800a0c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a00e:	f000 fc9b 	bl	800a948 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	609a      	str	r2, [r3, #8]
      break;
 800a02a:	e04f      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a03c:	f000 fc84 	bl	800a948 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a04e:	609a      	str	r2, [r3, #8]
      break;
 800a050:	e03c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a05e:	461a      	mov	r2, r3
 800a060:	f000 fbf4 	bl	800a84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2150      	movs	r1, #80	@ 0x50
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fc4e 	bl	800a90c <TIM_ITRx_SetConfig>
      break;
 800a070:	e02c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a07e:	461a      	mov	r2, r3
 800a080:	f000 fc13 	bl	800a8aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2160      	movs	r1, #96	@ 0x60
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fc3e 	bl	800a90c <TIM_ITRx_SetConfig>
      break;
 800a090:	e01c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f000 fbd4 	bl	800a84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2140      	movs	r1, #64	@ 0x40
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fc2e 	bl	800a90c <TIM_ITRx_SetConfig>
      break;
 800a0b0:	e00c      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4610      	mov	r0, r2
 800a0be:	f000 fc25 	bl	800a90c <TIM_ITRx_SetConfig>
      break;
 800a0c2:	e003      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c8:	e000      	b.n	800a0cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a0ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	ffceff88 	.word	0xffceff88
 800a0ec:	00100040 	.word	0x00100040
 800a0f0:	00100030 	.word	0x00100030
 800a0f4:	00100020 	.word	0x00100020

0800a0f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a47      	ldr	r2, [pc, #284]	@ (800a278 <TIM_Base_SetConfig+0x130>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d013      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a166:	d00f      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a44      	ldr	r2, [pc, #272]	@ (800a27c <TIM_Base_SetConfig+0x134>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00b      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a43      	ldr	r2, [pc, #268]	@ (800a280 <TIM_Base_SetConfig+0x138>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d007      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a42      	ldr	r2, [pc, #264]	@ (800a284 <TIM_Base_SetConfig+0x13c>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_Base_SetConfig+0x40>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a41      	ldr	r2, [pc, #260]	@ (800a288 <TIM_Base_SetConfig+0x140>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d108      	bne.n	800a19a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a18e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a36      	ldr	r2, [pc, #216]	@ (800a278 <TIM_Base_SetConfig+0x130>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d027      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a8:	d023      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a33      	ldr	r2, [pc, #204]	@ (800a27c <TIM_Base_SetConfig+0x134>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d01f      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a32      	ldr	r2, [pc, #200]	@ (800a280 <TIM_Base_SetConfig+0x138>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d01b      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a31      	ldr	r2, [pc, #196]	@ (800a284 <TIM_Base_SetConfig+0x13c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d017      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a30      	ldr	r2, [pc, #192]	@ (800a288 <TIM_Base_SetConfig+0x140>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d013      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a2f      	ldr	r2, [pc, #188]	@ (800a28c <TIM_Base_SetConfig+0x144>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a2e      	ldr	r2, [pc, #184]	@ (800a290 <TIM_Base_SetConfig+0x148>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a2d      	ldr	r2, [pc, #180]	@ (800a294 <TIM_Base_SetConfig+0x14c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a2c      	ldr	r2, [pc, #176]	@ (800a298 <TIM_Base_SetConfig+0x150>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_Base_SetConfig+0xaa>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a2b      	ldr	r2, [pc, #172]	@ (800a29c <TIM_Base_SetConfig+0x154>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d108      	bne.n	800a204 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a14      	ldr	r2, [pc, #80]	@ (800a278 <TIM_Base_SetConfig+0x130>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00f      	beq.n	800a24a <TIM_Base_SetConfig+0x102>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a16      	ldr	r2, [pc, #88]	@ (800a288 <TIM_Base_SetConfig+0x140>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d00b      	beq.n	800a24a <TIM_Base_SetConfig+0x102>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a15      	ldr	r2, [pc, #84]	@ (800a28c <TIM_Base_SetConfig+0x144>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d007      	beq.n	800a24a <TIM_Base_SetConfig+0x102>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a14      	ldr	r2, [pc, #80]	@ (800a290 <TIM_Base_SetConfig+0x148>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d003      	beq.n	800a24a <TIM_Base_SetConfig+0x102>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a13      	ldr	r2, [pc, #76]	@ (800a294 <TIM_Base_SetConfig+0x14c>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d103      	bne.n	800a252 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f043 0204 	orr.w	r2, r3, #4
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	601a      	str	r2, [r3, #0]
}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	40010000 	.word	0x40010000
 800a27c:	40000400 	.word	0x40000400
 800a280:	40000800 	.word	0x40000800
 800a284:	40000c00 	.word	0x40000c00
 800a288:	40010400 	.word	0x40010400
 800a28c:	40014000 	.word	0x40014000
 800a290:	40014400 	.word	0x40014400
 800a294:	40014800 	.word	0x40014800
 800a298:	4000e000 	.word	0x4000e000
 800a29c:	4000e400 	.word	0x4000e400

0800a2a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	f023 0201 	bic.w	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4b37      	ldr	r3, [pc, #220]	@ (800a3a8 <TIM_OC1_SetConfig+0x108>)
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f023 0302 	bic.w	r3, r3, #2
 800a2e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a2d      	ldr	r2, [pc, #180]	@ (800a3ac <TIM_OC1_SetConfig+0x10c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00f      	beq.n	800a31c <TIM_OC1_SetConfig+0x7c>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a2c      	ldr	r2, [pc, #176]	@ (800a3b0 <TIM_OC1_SetConfig+0x110>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d00b      	beq.n	800a31c <TIM_OC1_SetConfig+0x7c>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a2b      	ldr	r2, [pc, #172]	@ (800a3b4 <TIM_OC1_SetConfig+0x114>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d007      	beq.n	800a31c <TIM_OC1_SetConfig+0x7c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a2a      	ldr	r2, [pc, #168]	@ (800a3b8 <TIM_OC1_SetConfig+0x118>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d003      	beq.n	800a31c <TIM_OC1_SetConfig+0x7c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a29      	ldr	r2, [pc, #164]	@ (800a3bc <TIM_OC1_SetConfig+0x11c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d10c      	bne.n	800a336 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f023 0308 	bic.w	r3, r3, #8
 800a322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f023 0304 	bic.w	r3, r3, #4
 800a334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a1c      	ldr	r2, [pc, #112]	@ (800a3ac <TIM_OC1_SetConfig+0x10c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d00f      	beq.n	800a35e <TIM_OC1_SetConfig+0xbe>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b0 <TIM_OC1_SetConfig+0x110>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00b      	beq.n	800a35e <TIM_OC1_SetConfig+0xbe>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a1a      	ldr	r2, [pc, #104]	@ (800a3b4 <TIM_OC1_SetConfig+0x114>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d007      	beq.n	800a35e <TIM_OC1_SetConfig+0xbe>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a19      	ldr	r2, [pc, #100]	@ (800a3b8 <TIM_OC1_SetConfig+0x118>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d003      	beq.n	800a35e <TIM_OC1_SetConfig+0xbe>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a18      	ldr	r2, [pc, #96]	@ (800a3bc <TIM_OC1_SetConfig+0x11c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d111      	bne.n	800a382 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a36c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	4313      	orrs	r3, r2
 800a376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	621a      	str	r2, [r3, #32]
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	fffeff8f 	.word	0xfffeff8f
 800a3ac:	40010000 	.word	0x40010000
 800a3b0:	40010400 	.word	0x40010400
 800a3b4:	40014000 	.word	0x40014000
 800a3b8:	40014400 	.word	0x40014400
 800a3bc:	40014800 	.word	0x40014800

0800a3c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a1b      	ldr	r3, [r3, #32]
 800a3d4:	f023 0210 	bic.w	r2, r3, #16
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	4b34      	ldr	r3, [pc, #208]	@ (800a4bc <TIM_OC2_SetConfig+0xfc>)
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4313      	orrs	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f023 0320 	bic.w	r3, r3, #32
 800a40a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	011b      	lsls	r3, r3, #4
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	4313      	orrs	r3, r2
 800a416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a29      	ldr	r2, [pc, #164]	@ (800a4c0 <TIM_OC2_SetConfig+0x100>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_OC2_SetConfig+0x68>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a28      	ldr	r2, [pc, #160]	@ (800a4c4 <TIM_OC2_SetConfig+0x104>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d10d      	bne.n	800a444 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a42e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	011b      	lsls	r3, r3, #4
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c0 <TIM_OC2_SetConfig+0x100>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00f      	beq.n	800a46c <TIM_OC2_SetConfig+0xac>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c4 <TIM_OC2_SetConfig+0x104>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00b      	beq.n	800a46c <TIM_OC2_SetConfig+0xac>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a1c      	ldr	r2, [pc, #112]	@ (800a4c8 <TIM_OC2_SetConfig+0x108>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_OC2_SetConfig+0xac>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a1b      	ldr	r2, [pc, #108]	@ (800a4cc <TIM_OC2_SetConfig+0x10c>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_OC2_SetConfig+0xac>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a1a      	ldr	r2, [pc, #104]	@ (800a4d0 <TIM_OC2_SetConfig+0x110>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d113      	bne.n	800a494 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a47a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	4313      	orrs	r3, r2
 800a486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	4313      	orrs	r3, r2
 800a492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	693a      	ldr	r2, [r7, #16]
 800a498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	621a      	str	r2, [r3, #32]
}
 800a4ae:	bf00      	nop
 800a4b0:	371c      	adds	r7, #28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	feff8fff 	.word	0xfeff8fff
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40010400 	.word	0x40010400
 800a4c8:	40014000 	.word	0x40014000
 800a4cc:	40014400 	.word	0x40014400
 800a4d0:	40014800 	.word	0x40014800

0800a4d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b087      	sub	sp, #28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4b33      	ldr	r3, [pc, #204]	@ (800a5cc <TIM_OC3_SetConfig+0xf8>)
 800a500:	4013      	ands	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0303 	bic.w	r3, r3, #3
 800a50a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a51c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	4313      	orrs	r3, r2
 800a528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a28      	ldr	r2, [pc, #160]	@ (800a5d0 <TIM_OC3_SetConfig+0xfc>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <TIM_OC3_SetConfig+0x66>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a27      	ldr	r2, [pc, #156]	@ (800a5d4 <TIM_OC3_SetConfig+0x100>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d10d      	bne.n	800a556 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <TIM_OC3_SetConfig+0xfc>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00f      	beq.n	800a57e <TIM_OC3_SetConfig+0xaa>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d4 <TIM_OC3_SetConfig+0x100>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00b      	beq.n	800a57e <TIM_OC3_SetConfig+0xaa>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a1b      	ldr	r2, [pc, #108]	@ (800a5d8 <TIM_OC3_SetConfig+0x104>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d007      	beq.n	800a57e <TIM_OC3_SetConfig+0xaa>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a1a      	ldr	r2, [pc, #104]	@ (800a5dc <TIM_OC3_SetConfig+0x108>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d003      	beq.n	800a57e <TIM_OC3_SetConfig+0xaa>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a19      	ldr	r2, [pc, #100]	@ (800a5e0 <TIM_OC3_SetConfig+0x10c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d113      	bne.n	800a5a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a58c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	621a      	str	r2, [r3, #32]
}
 800a5c0:	bf00      	nop
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	fffeff8f 	.word	0xfffeff8f
 800a5d0:	40010000 	.word	0x40010000
 800a5d4:	40010400 	.word	0x40010400
 800a5d8:	40014000 	.word	0x40014000
 800a5dc:	40014400 	.word	0x40014400
 800a5e0:	40014800 	.word	0x40014800

0800a5e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	4b24      	ldr	r3, [pc, #144]	@ (800a6a0 <TIM_OC4_SetConfig+0xbc>)
 800a610:	4013      	ands	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a61a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	4313      	orrs	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a62e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	031b      	lsls	r3, r3, #12
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	4313      	orrs	r3, r2
 800a63a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a19      	ldr	r2, [pc, #100]	@ (800a6a4 <TIM_OC4_SetConfig+0xc0>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00f      	beq.n	800a664 <TIM_OC4_SetConfig+0x80>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a18      	ldr	r2, [pc, #96]	@ (800a6a8 <TIM_OC4_SetConfig+0xc4>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_OC4_SetConfig+0x80>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a17      	ldr	r2, [pc, #92]	@ (800a6ac <TIM_OC4_SetConfig+0xc8>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_OC4_SetConfig+0x80>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a16      	ldr	r2, [pc, #88]	@ (800a6b0 <TIM_OC4_SetConfig+0xcc>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_OC4_SetConfig+0x80>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a15      	ldr	r2, [pc, #84]	@ (800a6b4 <TIM_OC4_SetConfig+0xd0>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d109      	bne.n	800a678 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a66a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	019b      	lsls	r3, r3, #6
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	4313      	orrs	r3, r2
 800a676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	621a      	str	r2, [r3, #32]
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	feff8fff 	.word	0xfeff8fff
 800a6a4:	40010000 	.word	0x40010000
 800a6a8:	40010400 	.word	0x40010400
 800a6ac:	40014000 	.word	0x40014000
 800a6b0:	40014400 	.word	0x40014400
 800a6b4:	40014800 	.word	0x40014800

0800a6b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a1b      	ldr	r3, [r3, #32]
 800a6cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4b21      	ldr	r3, [pc, #132]	@ (800a768 <TIM_OC5_SetConfig+0xb0>)
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a6f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	041b      	lsls	r3, r3, #16
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a18      	ldr	r2, [pc, #96]	@ (800a76c <TIM_OC5_SetConfig+0xb4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d00f      	beq.n	800a72e <TIM_OC5_SetConfig+0x76>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a17      	ldr	r2, [pc, #92]	@ (800a770 <TIM_OC5_SetConfig+0xb8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d00b      	beq.n	800a72e <TIM_OC5_SetConfig+0x76>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a16      	ldr	r2, [pc, #88]	@ (800a774 <TIM_OC5_SetConfig+0xbc>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d007      	beq.n	800a72e <TIM_OC5_SetConfig+0x76>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a15      	ldr	r2, [pc, #84]	@ (800a778 <TIM_OC5_SetConfig+0xc0>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d003      	beq.n	800a72e <TIM_OC5_SetConfig+0x76>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a14      	ldr	r2, [pc, #80]	@ (800a77c <TIM_OC5_SetConfig+0xc4>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d109      	bne.n	800a742 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	621a      	str	r2, [r3, #32]
}
 800a75c:	bf00      	nop
 800a75e:	371c      	adds	r7, #28
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	fffeff8f 	.word	0xfffeff8f
 800a76c:	40010000 	.word	0x40010000
 800a770:	40010400 	.word	0x40010400
 800a774:	40014000 	.word	0x40014000
 800a778:	40014400 	.word	0x40014400
 800a77c:	40014800 	.word	0x40014800

0800a780 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4b22      	ldr	r3, [pc, #136]	@ (800a834 <TIM_OC6_SetConfig+0xb4>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	051b      	lsls	r3, r3, #20
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a19      	ldr	r2, [pc, #100]	@ (800a838 <TIM_OC6_SetConfig+0xb8>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00f      	beq.n	800a7f8 <TIM_OC6_SetConfig+0x78>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a18      	ldr	r2, [pc, #96]	@ (800a83c <TIM_OC6_SetConfig+0xbc>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00b      	beq.n	800a7f8 <TIM_OC6_SetConfig+0x78>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a17      	ldr	r2, [pc, #92]	@ (800a840 <TIM_OC6_SetConfig+0xc0>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d007      	beq.n	800a7f8 <TIM_OC6_SetConfig+0x78>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a16      	ldr	r2, [pc, #88]	@ (800a844 <TIM_OC6_SetConfig+0xc4>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_OC6_SetConfig+0x78>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a15      	ldr	r2, [pc, #84]	@ (800a848 <TIM_OC6_SetConfig+0xc8>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d109      	bne.n	800a80c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	029b      	lsls	r3, r3, #10
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	621a      	str	r2, [r3, #32]
}
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	feff8fff 	.word	0xfeff8fff
 800a838:	40010000 	.word	0x40010000
 800a83c:	40010400 	.word	0x40010400
 800a840:	40014000 	.word	0x40014000
 800a844:	40014400 	.word	0x40014400
 800a848:	40014800 	.word	0x40014800

0800a84c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	f023 0201 	bic.w	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	011b      	lsls	r3, r3, #4
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4313      	orrs	r3, r2
 800a880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f023 030a 	bic.w	r3, r3, #10
 800a888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	621a      	str	r2, [r3, #32]
}
 800a89e:	bf00      	nop
 800a8a0:	371c      	adds	r7, #28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b087      	sub	sp, #28
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	f023 0210 	bic.w	r2, r3, #16
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	031b      	lsls	r3, r3, #12
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	011b      	lsls	r3, r3, #4
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	621a      	str	r2, [r3, #32]
}
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	4b09      	ldr	r3, [pc, #36]	@ (800a944 <TIM_ITRx_SetConfig+0x38>)
 800a920:	4013      	ands	r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	f043 0307 	orr.w	r3, r3, #7
 800a92e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	609a      	str	r2, [r3, #8]
}
 800a936:	bf00      	nop
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	ffcfff8f 	.word	0xffcfff8f

0800a948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	021a      	lsls	r2, r3, #8
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	431a      	orrs	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4313      	orrs	r3, r2
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	4313      	orrs	r3, r2
 800a974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	609a      	str	r2, [r3, #8]
}
 800a97c:	bf00      	nop
 800a97e:	371c      	adds	r7, #28
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	f003 031f 	and.w	r3, r3, #31
 800a99a:	2201      	movs	r2, #1
 800a99c:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a1a      	ldr	r2, [r3, #32]
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	43db      	mvns	r3, r3
 800a9aa:	401a      	ands	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6a1a      	ldr	r2, [r3, #32]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f003 031f 	and.w	r3, r3, #31
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	621a      	str	r2, [r3, #32]
}
 800a9c6:	bf00      	nop
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d109      	bne.n	800a9f8 <HAL_TIMEx_PWMN_Start+0x24>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	bf14      	ite	ne
 800a9f0:	2301      	movne	r3, #1
 800a9f2:	2300      	moveq	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	e022      	b.n	800aa3e <HAL_TIMEx_PWMN_Start+0x6a>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	d109      	bne.n	800aa12 <HAL_TIMEx_PWMN_Start+0x3e>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	bf14      	ite	ne
 800aa0a:	2301      	movne	r3, #1
 800aa0c:	2300      	moveq	r3, #0
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	e015      	b.n	800aa3e <HAL_TIMEx_PWMN_Start+0x6a>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d109      	bne.n	800aa2c <HAL_TIMEx_PWMN_Start+0x58>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	bf14      	ite	ne
 800aa24:	2301      	movne	r3, #1
 800aa26:	2300      	moveq	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	e008      	b.n	800aa3e <HAL_TIMEx_PWMN_Start+0x6a>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	bf14      	ite	ne
 800aa38:	2301      	movne	r3, #1
 800aa3a:	2300      	moveq	r3, #0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e07d      	b.n	800ab42 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d104      	bne.n	800aa56 <HAL_TIMEx_PWMN_Start+0x82>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa54:	e013      	b.n	800aa7e <HAL_TIMEx_PWMN_Start+0xaa>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d104      	bne.n	800aa66 <HAL_TIMEx_PWMN_Start+0x92>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa64:	e00b      	b.n	800aa7e <HAL_TIMEx_PWMN_Start+0xaa>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d104      	bne.n	800aa76 <HAL_TIMEx_PWMN_Start+0xa2>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aa74:	e003      	b.n	800aa7e <HAL_TIMEx_PWMN_Start+0xaa>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2202      	movs	r2, #2
 800aa7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2204      	movs	r2, #4
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 f9ba 	bl	800ae00 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aa9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a2a      	ldr	r2, [pc, #168]	@ (800ab4c <HAL_TIMEx_PWMN_Start+0x178>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d02c      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaae:	d027      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a26      	ldr	r2, [pc, #152]	@ (800ab50 <HAL_TIMEx_PWMN_Start+0x17c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d022      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a25      	ldr	r2, [pc, #148]	@ (800ab54 <HAL_TIMEx_PWMN_Start+0x180>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d01d      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a23      	ldr	r2, [pc, #140]	@ (800ab58 <HAL_TIMEx_PWMN_Start+0x184>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d018      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a22      	ldr	r2, [pc, #136]	@ (800ab5c <HAL_TIMEx_PWMN_Start+0x188>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d013      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a20      	ldr	r2, [pc, #128]	@ (800ab60 <HAL_TIMEx_PWMN_Start+0x18c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d00e      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a1f      	ldr	r2, [pc, #124]	@ (800ab64 <HAL_TIMEx_PWMN_Start+0x190>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d009      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab68 <HAL_TIMEx_PWMN_Start+0x194>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d004      	beq.n	800ab00 <HAL_TIMEx_PWMN_Start+0x12c>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a1c      	ldr	r2, [pc, #112]	@ (800ab6c <HAL_TIMEx_PWMN_Start+0x198>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d115      	bne.n	800ab2c <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689a      	ldr	r2, [r3, #8]
 800ab06:	4b1a      	ldr	r3, [pc, #104]	@ (800ab70 <HAL_TIMEx_PWMN_Start+0x19c>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b06      	cmp	r3, #6
 800ab10:	d015      	beq.n	800ab3e <HAL_TIMEx_PWMN_Start+0x16a>
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab18:	d011      	beq.n	800ab3e <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f042 0201 	orr.w	r2, r2, #1
 800ab28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab2a:	e008      	b.n	800ab3e <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0201 	orr.w	r2, r2, #1
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	e000      	b.n	800ab40 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	40010000 	.word	0x40010000
 800ab50:	40000400 	.word	0x40000400
 800ab54:	40000800 	.word	0x40000800
 800ab58:	40000c00 	.word	0x40000c00
 800ab5c:	40010400 	.word	0x40010400
 800ab60:	40001800 	.word	0x40001800
 800ab64:	40014000 	.word	0x40014000
 800ab68:	4000e000 	.word	0x4000e000
 800ab6c:	4000e400 	.word	0x4000e400
 800ab70:	00010007 	.word	0x00010007

0800ab74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d101      	bne.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e077      	b.n	800ac7c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2202      	movs	r2, #2
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a35      	ldr	r2, [pc, #212]	@ (800ac88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d004      	beq.n	800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a34      	ldr	r2, [pc, #208]	@ (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d108      	bne.n	800abd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a25      	ldr	r2, [pc, #148]	@ (800ac88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d02c      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abfe:	d027      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a22      	ldr	r2, [pc, #136]	@ (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d022      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a21      	ldr	r2, [pc, #132]	@ (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d01d      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a1f      	ldr	r2, [pc, #124]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d018      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a1a      	ldr	r2, [pc, #104]	@ (800ac8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d013      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00e      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a1a      	ldr	r2, [pc, #104]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d009      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a18      	ldr	r2, [pc, #96]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d004      	beq.n	800ac50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a17      	ldr	r2, [pc, #92]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d10c      	bne.n	800ac6a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	40010000 	.word	0x40010000
 800ac8c:	40010400 	.word	0x40010400
 800ac90:	40000400 	.word	0x40000400
 800ac94:	40000800 	.word	0x40000800
 800ac98:	40000c00 	.word	0x40000c00
 800ac9c:	40001800 	.word	0x40001800
 800aca0:	40014000 	.word	0x40014000
 800aca4:	4000e000 	.word	0x4000e000
 800aca8:	4000e400 	.word	0x4000e400

0800acac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d101      	bne.n	800acc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800acc4:	2302      	movs	r3, #2
 800acc6:	e073      	b.n	800adb0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a19      	ldr	r2, [pc, #100]	@ (800adbc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d004      	beq.n	800ad64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a18      	ldr	r2, [pc, #96]	@ (800adc0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d11c      	bne.n	800ad9e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6e:	051b      	lsls	r3, r3, #20
 800ad70:	4313      	orrs	r3, r2
 800ad72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40010400 	.word	0x40010400

0800adc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	2204      	movs	r2, #4
 800ae14:	fa02 f303 	lsl.w	r3, r2, r3
 800ae18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6a1a      	ldr	r2, [r3, #32]
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	43db      	mvns	r3, r3
 800ae22:	401a      	ands	r2, r3
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6a1a      	ldr	r2, [r3, #32]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	f003 030f 	and.w	r3, r3, #15
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	fa01 f303 	lsl.w	r3, r1, r3
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	621a      	str	r2, [r3, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
	...

0800ae4c <rtIsInf>:
  return rtNaNF;
}

/* Test if value is infinite */
static bool rtIsInf(double value)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	ed87 0b00 	vstr	d0, [r7]
  return (bool)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800ae56:	4b0e      	ldr	r3, [pc, #56]	@ (800ae90 <rtIsInf+0x44>)
 800ae58:	ed93 7b00 	vldr	d7, [r3]
 800ae5c:	ed97 6b00 	vldr	d6, [r7]
 800ae60:	eeb4 6b47 	vcmp.f64	d6, d7
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	d009      	beq.n	800ae7e <rtIsInf+0x32>
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <rtIsInf+0x48>)
 800ae6c:	ed93 7b00 	vldr	d7, [r3]
 800ae70:	ed97 6b00 	vldr	d6, [r7]
 800ae74:	eeb4 6b47 	vcmp.f64	d6, d7
 800ae78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae7c:	d101      	bne.n	800ae82 <rtIsInf+0x36>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e000      	b.n	800ae84 <rtIsInf+0x38>
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	24000050 	.word	0x24000050
 800ae94:	24000058 	.word	0x24000058

0800ae98 <rtIsNaN>:
  return (bool)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
static bool rtIsNaN(double value)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	ed87 0b00 	vstr	d0, [r7]
  return (bool)(isnan(value) != 0);
 800aea2:	ed97 6b00 	vldr	d6, [r7]
 800aea6:	ed97 7b00 	vldr	d7, [r7]
 800aeaa:	eeb4 6b47 	vcmp.f64	d6, d7
 800aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb2:	d701      	bvc.n	800aeb8 <rtIsNaN+0x20>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e000      	b.n	800aeba <rtIsNaN+0x22>
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <Subsystempi2delay>:
 *    '<S158>/Subsystem - pi//2 delay'
 *    '<S164>/Subsystem - pi//2 delay'
 */
static void Subsystempi2delay(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_j)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b08a      	sub	sp, #40	@ 0x28
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6139      	str	r1, [r7, #16]
 800aece:	ed87 0b02 	vstr	d0, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
 800aed4:	603b      	str	r3, [r7, #0]
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
  /* Outputs for Enabled SubSystem: '<S158>/Subsystem - pi//2 delay' incorporates:
   *  EnablePort: '<S162>/Enable'
   */
  if (rtu_Enable > 0) {
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d033      	beq.n	800af48 <Subsystempi2delay+0x82>
    double tmp_0;

    /* Fcn: '<S162>/Fcn' incorporates:
     *  Fcn: '<S162>/Fcn1'
     */
    tmp = cos(rtu_wt);
 800aee0:	ed97 0b02 	vldr	d0, [r7, #8]
 800aee4:	f000 fd70 	bl	800b9c8 <cos>
 800aee8:	ed87 0b08 	vstr	d0, [r7, #32]
    tmp_0 = sin(rtu_wt);
 800aeec:	ed97 0b02 	vldr	d0, [r7, #8]
 800aef0:	f000 fdb6 	bl	800ba60 <sin>
 800aef4:	ed87 0b06 	vstr	d0, [r7, #24]
    *rty_dq = rtu_alpha_beta[0] * tmp_0 - rtu_alpha_beta[1] * tmp;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	ed93 6b00 	vldr	d6, [r3]
 800aefe:	ed97 7b06 	vldr	d7, [r7, #24]
 800af02:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	3308      	adds	r3, #8
 800af0a:	ed93 5b00 	vldr	d5, [r3]
 800af0e:	ed97 7b08 	vldr	d7, [r7, #32]
 800af12:	ee25 7b07 	vmul.f64	d7, d5, d7
 800af16:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	ed83 7b00 	vstr	d7, [r3]

    /* Fcn: '<S162>/Fcn1' */
    *rty_dq_j = rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	ed93 6b00 	vldr	d6, [r3]
 800af26:	ed97 7b08 	vldr	d7, [r7, #32]
 800af2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	3308      	adds	r3, #8
 800af32:	ed93 5b00 	vldr	d5, [r3]
 800af36:	ed97 7b06 	vldr	d7, [r7, #24]
 800af3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800af3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	ed83 7b00 	vstr	d7, [r3]
  }

  /* End of Outputs for SubSystem: '<S158>/Subsystem - pi//2 delay' */
}
 800af48:	bf00      	nop
 800af4a:	3728      	adds	r7, #40	@ 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <Subsystem1>:
 *    '<S158>/Subsystem1'
 *    '<S164>/Subsystem1'
 */
static void Subsystem1(uint8_t rtu_Enable, const double rtu_alpha_beta[2],
  double rtu_wt, double *rty_dq, double *rty_dq_e)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	@ 0x28
 800af54:	af00      	add	r7, sp, #0
 800af56:	6139      	str	r1, [r7, #16]
 800af58:	ed87 0b02 	vstr	d0, [r7, #8]
 800af5c:	607a      	str	r2, [r7, #4]
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	4603      	mov	r3, r0
 800af62:	75fb      	strb	r3, [r7, #23]
  /* Outputs for Enabled SubSystem: '<S158>/Subsystem1' incorporates:
   *  EnablePort: '<S163>/Enable'
   */
  if (rtu_Enable > 0) {
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d035      	beq.n	800afd6 <Subsystem1+0x86>
    double tmp_0;

    /* Fcn: '<S163>/Fcn' incorporates:
     *  Fcn: '<S163>/Fcn1'
     */
    tmp = sin(rtu_wt);
 800af6a:	ed97 0b02 	vldr	d0, [r7, #8]
 800af6e:	f000 fd77 	bl	800ba60 <sin>
 800af72:	ed87 0b08 	vstr	d0, [r7, #32]
    tmp_0 = cos(rtu_wt);
 800af76:	ed97 0b02 	vldr	d0, [r7, #8]
 800af7a:	f000 fd25 	bl	800b9c8 <cos>
 800af7e:	ed87 0b06 	vstr	d0, [r7, #24]
    *rty_dq = rtu_alpha_beta[0] * tmp_0 + rtu_alpha_beta[1] * tmp;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	ed93 6b00 	vldr	d6, [r3]
 800af88:	ed97 7b06 	vldr	d7, [r7, #24]
 800af8c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	3308      	adds	r3, #8
 800af94:	ed93 5b00 	vldr	d5, [r3]
 800af98:	ed97 7b08 	vldr	d7, [r7, #32]
 800af9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800afa0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	ed83 7b00 	vstr	d7, [r3]

    /* Fcn: '<S163>/Fcn1' */
    *rty_dq_e = -rtu_alpha_beta[0] * tmp + rtu_alpha_beta[1] * tmp_0;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	ed93 7b00 	vldr	d7, [r3]
 800afb0:	eeb1 6b47 	vneg.f64	d6, d7
 800afb4:	ed97 7b08 	vldr	d7, [r7, #32]
 800afb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	3308      	adds	r3, #8
 800afc0:	ed93 5b00 	vldr	d5, [r3]
 800afc4:	ed97 7b06 	vldr	d7, [r7, #24]
 800afc8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800afcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	ed83 7b00 	vstr	d7, [r3]
  }

  /* End of Outputs for SubSystem: '<S158>/Subsystem1' */
}
 800afd6:	bf00      	nop
 800afd8:	3728      	adds	r7, #40	@ 0x28
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <rt_modd_snf>:

double rt_modd_snf(double u0, double u1)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b08a      	sub	sp, #40	@ 0x28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	ed87 0b02 	vstr	d0, [r7, #8]
 800afea:	ed87 1b00 	vstr	d1, [r7]
  double y;
  y = u0;
 800afee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aff2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (u1 == 0.0) {
 800aff6:	ed97 7b00 	vldr	d7, [r7]
 800affa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800affe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b002:	d10c      	bne.n	800b01e <rt_modd_snf+0x3e>
    if (u0 == 0.0) {
 800b004:	ed97 7b02 	vldr	d7, [r7, #8]
 800b008:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b010:	f040 80d8 	bne.w	800b1c4 <rt_modd_snf+0x1e4>
      y = u1;
 800b014:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b018:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b01c:	e0d2      	b.n	800b1c4 <rt_modd_snf+0x1e4>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 800b01e:	ed97 0b02 	vldr	d0, [r7, #8]
 800b022:	f7ff ff39 	bl	800ae98 <rtIsNaN>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10d      	bne.n	800b048 <rt_modd_snf+0x68>
 800b02c:	ed97 0b00 	vldr	d0, [r7]
 800b030:	f7ff ff32 	bl	800ae98 <rtIsNaN>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d106      	bne.n	800b048 <rt_modd_snf+0x68>
 800b03a:	ed97 0b02 	vldr	d0, [r7, #8]
 800b03e:	f7ff ff05 	bl	800ae4c <rtIsInf>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d005      	beq.n	800b054 <rt_modd_snf+0x74>
    y = (rtNaN);
 800b048:	4b67      	ldr	r3, [pc, #412]	@ (800b1e8 <rt_modd_snf+0x208>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b052:	e0b7      	b.n	800b1c4 <rt_modd_snf+0x1e4>
  } else if (u0 == 0.0) {
 800b054:	ed97 7b02 	vldr	d7, [r7, #8]
 800b058:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b060:	d108      	bne.n	800b074 <rt_modd_snf+0x94>
    y = 0.0 / u1;
 800b062:	ed9f 5b5d 	vldr	d5, [pc, #372]	@ 800b1d8 <rt_modd_snf+0x1f8>
 800b066:	ed97 6b00 	vldr	d6, [r7]
 800b06a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b06e:	ed87 7b08 	vstr	d7, [r7, #32]
 800b072:	e0a7      	b.n	800b1c4 <rt_modd_snf+0x1e4>
  } else if (rtIsInf(u1)) {
 800b074:	ed97 0b00 	vldr	d0, [r7]
 800b078:	f7ff fee8 	bl	800ae4c <rtIsInf>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d01d      	beq.n	800b0be <rt_modd_snf+0xde>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 800b082:	ed97 7b00 	vldr	d7, [r7]
 800b086:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08e:	bf4c      	ite	mi
 800b090:	2301      	movmi	r3, #1
 800b092:	2300      	movpl	r3, #0
 800b094:	b2da      	uxtb	r2, r3
 800b096:	ed97 7b02 	vldr	d7, [r7, #8]
 800b09a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a2:	bf4c      	ite	mi
 800b0a4:	2301      	movmi	r3, #1
 800b0a6:	2300      	movpl	r3, #0
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	4053      	eors	r3, r2
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 8088 	beq.w	800b1c4 <rt_modd_snf+0x1e4>
      y = u1;
 800b0b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b0bc:	e082      	b.n	800b1c4 <rt_modd_snf+0x1e4>
    }
  } else {
    bool yEq;
    y = fmod(u0, u1);
 800b0be:	ed97 1b00 	vldr	d1, [r7]
 800b0c2:	ed97 0b02 	vldr	d0, [r7, #8]
 800b0c6:	f000 fc3b 	bl	800b940 <fmod>
 800b0ca:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 800b0ce:	ed97 7b08 	vldr	d7, [r7, #32]
 800b0d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0da:	bf0c      	ite	eq
 800b0dc:	2301      	moveq	r3, #1
 800b0de:	2300      	movne	r3, #0
 800b0e0:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > floor(u1))) {
 800b0e2:	7ffb      	ldrb	r3, [r7, #31]
 800b0e4:	f083 0301 	eor.w	r3, r3, #1
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d03e      	beq.n	800b16c <rt_modd_snf+0x18c>
 800b0ee:	ed97 0b00 	vldr	d0, [r7]
 800b0f2:	f000 fd05 	bl	800bb00 <floor>
 800b0f6:	eeb0 6b40 	vmov.f64	d6, d0
 800b0fa:	ed97 7b00 	vldr	d7, [r7]
 800b0fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b106:	dd31      	ble.n	800b16c <rt_modd_snf+0x18c>
      double q;
      q = fabs(u0 / u1);
 800b108:	ed97 5b02 	vldr	d5, [r7, #8]
 800b10c:	ed97 6b00 	vldr	d6, [r7]
 800b110:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b114:	eeb0 7bc7 	vabs.f64	d7, d7
 800b118:	ed87 7b04 	vstr	d7, [r7, #16]
      yEq = !(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q);
 800b11c:	ed97 7b04 	vldr	d7, [r7, #16]
 800b120:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800b124:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b128:	eeb0 0b47 	vmov.f64	d0, d7
 800b12c:	f000 fce8 	bl	800bb00 <floor>
 800b130:	eeb0 6b40 	vmov.f64	d6, d0
 800b134:	ed97 7b04 	vldr	d7, [r7, #16]
 800b138:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b13c:	eeb0 6bc7 	vabs.f64	d6, d7
 800b140:	ed97 7b04 	vldr	d7, [r7, #16]
 800b144:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 800b1e0 <rt_modd_snf+0x200>
 800b148:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b14c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b154:	bfcc      	ite	gt
 800b156:	2301      	movgt	r3, #1
 800b158:	2300      	movle	r3, #0
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	f083 0301 	eor.w	r3, r3, #1
 800b160:	b2db      	uxtb	r3, r3
 800b162:	77fb      	strb	r3, [r7, #31]
 800b164:	7ffb      	ldrb	r3, [r7, #31]
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 800b16c:	7ffb      	ldrb	r3, [r7, #31]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d008      	beq.n	800b184 <rt_modd_snf+0x1a4>
      y = u1 * 0.0;
 800b172:	ed97 7b00 	vldr	d7, [r7]
 800b176:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 800b1d8 <rt_modd_snf+0x1f8>
 800b17a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b17e:	ed87 7b08 	vstr	d7, [r7, #32]
 800b182:	e01f      	b.n	800b1c4 <rt_modd_snf+0x1e4>
    } else if ((u0 < 0.0) != (u1 < 0.0)) {
 800b184:	ed97 7b02 	vldr	d7, [r7, #8]
 800b188:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b190:	bf4c      	ite	mi
 800b192:	2301      	movmi	r3, #1
 800b194:	2300      	movpl	r3, #0
 800b196:	b2da      	uxtb	r2, r3
 800b198:	ed97 7b00 	vldr	d7, [r7]
 800b19c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a4:	bf4c      	ite	mi
 800b1a6:	2301      	movmi	r3, #1
 800b1a8:	2300      	movpl	r3, #0
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	4053      	eors	r3, r2
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d007      	beq.n	800b1c4 <rt_modd_snf+0x1e4>
      y += u1;
 800b1b4:	ed97 6b08 	vldr	d6, [r7, #32]
 800b1b8:	ed97 7b00 	vldr	d7, [r7]
 800b1bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b1c0:	ed87 7b08 	vstr	d7, [r7, #32]
    }
  }

  return y;
 800b1c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1c8:	ec43 2b17 	vmov	d7, r2, r3
}
 800b1cc:	eeb0 0b47 	vmov.f64	d0, d7
 800b1d0:	3728      	adds	r7, #40	@ 0x28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
	...
 800b1e4:	3cb00000 	.word	0x3cb00000
 800b1e8:	24000048 	.word	0x24000048
 800b1ec:	00000000 	.word	0x00000000

0800b1f0 <TPGCI_STM32_step>:

/* Model step function */
void TPGCI_STM32_step(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b0a4      	sub	sp, #144	@ 0x90
 800b1f4:	af00      	add	r7, sp, #0
  double rtb_Mod1;
  double rtb_Saturation;
  double rtb_Sum8;
  double rtb_y;
  int32_t i;
  for (i = 0; i < 3; i++) {
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b1fa:	e064      	b.n	800b2c6 <TPGCI_STM32_step+0xd6>
    /* Gain: '<S165>/Gain3' */
    rtb_Mod1 = rtConstP.pooled4[i + 3];
 800b1fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b1fe:	3303      	adds	r3, #3
 800b200:	4ad1      	ldr	r2, [pc, #836]	@ (800b548 <TPGCI_STM32_step+0x358>)
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	4413      	add	r3, r2
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    rtb_Sum8 = rtConstP.pooled4[i];
 800b20e:	4ace      	ldr	r2, [pc, #824]	@ (800b548 <TPGCI_STM32_step+0x358>)
 800b210:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b212:	00db      	lsls	r3, r3, #3
 800b214:	4413      	add	r3, r2
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    rtb_Saturation = rtConstP.pooled4[i + 6];
 800b21e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b220:	3306      	adds	r3, #6
 800b222:	4ac9      	ldr	r2, [pc, #804]	@ (800b548 <TPGCI_STM32_step+0x358>)
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	4413      	add	r3, r2
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
     *  Gain: '<S165>/Gain3'
     *  Inport: '<Root>/Ia_g'
     *  Inport: '<Root>/Ib_g'
     *  Inport: '<Root>/Ic_g'
     */
    rtb_Gain1[i] = ((rtb_Mod1 * Ib_g + rtb_Sum8 * Ia_g) + rtb_Saturation * Ic_g)
 800b230:	4bc6      	ldr	r3, [pc, #792]	@ (800b54c <TPGCI_STM32_step+0x35c>)
 800b232:	ed93 6b00 	vldr	d6, [r3]
 800b236:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 800b23a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b23e:	4bc4      	ldr	r3, [pc, #784]	@ (800b550 <TPGCI_STM32_step+0x360>)
 800b240:	ed93 5b00 	vldr	d5, [r3]
 800b244:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800b248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b24c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b250:	4bc0      	ldr	r3, [pc, #768]	@ (800b554 <TPGCI_STM32_step+0x364>)
 800b252:	ed93 5b00 	vldr	d5, [r3]
 800b256:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b25a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b25e:	ee36 7b07 	vadd.f64	d7, d6, d7
      * 0.66666666666666663;
 800b262:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 800b510 <TPGCI_STM32_step+0x320>
 800b266:	ee27 7b06 	vmul.f64	d7, d7, d6
    rtb_Gain1[i] = ((rtb_Mod1 * Ib_g + rtb_Sum8 * Ia_g) + rtb_Saturation * Ic_g)
 800b26a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	3390      	adds	r3, #144	@ 0x90
 800b270:	443b      	add	r3, r7
 800b272:	3b78      	subs	r3, #120	@ 0x78
 800b274:	ed83 7b00 	vstr	d7, [r3]
     *  Gain: '<S159>/Gain3'
     *  Inport: '<Root>/Va_g'
     *  Inport: '<Root>/Vb_g'
     *  Inport: '<Root>/Vc_g'
     */
    rtb_Gain1_am[i] = ((rtb_Mod1 * Vb_g + rtb_Sum8 * Va_g) + rtb_Saturation *
 800b278:	4bb7      	ldr	r3, [pc, #732]	@ (800b558 <TPGCI_STM32_step+0x368>)
 800b27a:	ed93 6b00 	vldr	d6, [r3]
 800b27e:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 800b282:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b286:	4bb5      	ldr	r3, [pc, #724]	@ (800b55c <TPGCI_STM32_step+0x36c>)
 800b288:	ed93 5b00 	vldr	d5, [r3]
 800b28c:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800b290:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b294:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b298:	4bb1      	ldr	r3, [pc, #708]	@ (800b560 <TPGCI_STM32_step+0x370>)
 800b29a:	ed93 5b00 	vldr	d5, [r3]
 800b29e:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b2a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b2a6:	ee36 7b07 	vadd.f64	d7, d6, d7
                       Vc_g) * 0.66666666666666663;
 800b2aa:	ed9f 6b99 	vldr	d6, [pc, #612]	@ 800b510 <TPGCI_STM32_step+0x320>
 800b2ae:	ee27 7b06 	vmul.f64	d7, d7, d6
    rtb_Gain1_am[i] = ((rtb_Mod1 * Vb_g + rtb_Sum8 * Va_g) + rtb_Saturation *
 800b2b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	3390      	adds	r3, #144	@ 0x90
 800b2b8:	443b      	add	r3, r7
 800b2ba:	3b90      	subs	r3, #144	@ 0x90
 800b2bc:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 3; i++) {
 800b2c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b2c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	dd97      	ble.n	800b1fc <TPGCI_STM32_step+0xc>
  }

  /* Outport: '<Root>/Iq' */
  Iq = rtb_Gain1[2];
 800b2cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b2d0:	49a4      	ldr	r1, [pc, #656]	@ (800b564 <TPGCI_STM32_step+0x374>)
 800b2d2:	e9c1 2300 	strd	r2, r3, [r1]

  /* Math: '<Root>/Mod1' incorporates:
   *  Constant: '<Root>/Constant3'
   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'
   */
  rtb_Mod1 = rt_modd_snf(rtDW.DiscreteTimeIntegrator_DSTATE, 6.2831853071795862);
 800b2d6:	4ba4      	ldr	r3, [pc, #656]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b2d8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800b2dc:	ed9f 1b8e 	vldr	d1, [pc, #568]	@ 800b518 <TPGCI_STM32_step+0x328>
 800b2e0:	eeb0 0b47 	vmov.f64	d0, d7
 800b2e4:	f7ff fe7c 	bl	800afe0 <rt_modd_snf>
 800b2e8:	ed87 0b1c 	vstr	d0, [r7, #112]	@ 0x70

  /* Outputs for Enabled SubSystem: '<S164>/Subsystem1' */
  Subsystem1(0, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_n, &rtDW.Fcn1_h);
 800b2ec:	f107 0118 	add.w	r1, r7, #24
 800b2f0:	4b9e      	ldr	r3, [pc, #632]	@ (800b56c <TPGCI_STM32_step+0x37c>)
 800b2f2:	4a9d      	ldr	r2, [pc, #628]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b2f4:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f7ff fe29 	bl	800af50 <Subsystem1>

  /* End of Outputs for SubSystem: '<S164>/Subsystem1' */

  /* Outputs for Enabled SubSystem: '<S164>/Subsystem - pi//2 delay' */
  Subsystempi2delay(rtConstB.Compare_b, &rtb_Gain1[0], rtb_Mod1, &rtDW.Fcn_k1,
 800b2fe:	4b9c      	ldr	r3, [pc, #624]	@ (800b570 <TPGCI_STM32_step+0x380>)
 800b300:	7858      	ldrb	r0, [r3, #1]
 800b302:	f107 0118 	add.w	r1, r7, #24
 800b306:	4b9b      	ldr	r3, [pc, #620]	@ (800b574 <TPGCI_STM32_step+0x384>)
 800b308:	4a9b      	ldr	r2, [pc, #620]	@ (800b578 <TPGCI_STM32_step+0x388>)
 800b30a:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800b30e:	f7ff fdda 	bl	800aec6 <Subsystempi2delay>

  /* Sum: '<Root>/Sum8' incorporates:
   *  Inport: '<Root>/Id_ref'
   *  Switch: '<S164>/Switch'
   */
  rtb_Sum8 = (0.0 - Id_ref) - rtDW.Fcn_k1;
 800b312:	4b9a      	ldr	r3, [pc, #616]	@ (800b57c <TPGCI_STM32_step+0x38c>)
 800b314:	ed93 7b00 	vldr	d7, [r3]
 800b318:	ed9f 6b81 	vldr	d6, [pc, #516]	@ 800b520 <TPGCI_STM32_step+0x330>
 800b31c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b320:	4b91      	ldr	r3, [pc, #580]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b322:	ed93 7b04 	vldr	d7, [r3, #16]
 800b326:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b32a:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68

  /* Sum: '<S100>/Sum' incorporates:
   *  DiscreteIntegrator: '<S91>/Integrator'
   */
  rtb_Saturation = rtb_Sum8 + rtDW.Integrator_DSTATE;
 800b32e:	4b8e      	ldr	r3, [pc, #568]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b330:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 800b334:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 800b338:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b33c:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80

  /* Saturate: '<S98>/Saturation' */
  if (rtb_Saturation > 20.0) {
 800b340:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b344:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 800b348:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b350:	dd05      	ble.n	800b35e <TPGCI_STM32_step+0x16e>
    rtb_Saturation = 20.0;
 800b352:	f04f 0200 	mov.w	r2, #0
 800b356:	4b8a      	ldr	r3, [pc, #552]	@ (800b580 <TPGCI_STM32_step+0x390>)
 800b358:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 800b35c:	e00c      	b.n	800b378 <TPGCI_STM32_step+0x188>
  } else if (rtb_Saturation < 0.0) {
 800b35e:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b362:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36a:	d505      	bpl.n	800b378 <TPGCI_STM32_step+0x188>
    rtb_Saturation = 0.0;
 800b36c:	f04f 0200 	mov.w	r2, #0
 800b370:	f04f 0300 	mov.w	r3, #0
 800b374:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  }

  /* End of Saturate: '<S98>/Saturation' */

  /* Outputs for Enabled SubSystem: '<S158>/Subsystem1' */
  Subsystem1(0, &rtb_Gain1_am[0], rtb_Mod1, &rtDW.Fcn_a, &rtDW.Fcn1_ic);
 800b378:	4639      	mov	r1, r7
 800b37a:	4b82      	ldr	r3, [pc, #520]	@ (800b584 <TPGCI_STM32_step+0x394>)
 800b37c:	4a82      	ldr	r2, [pc, #520]	@ (800b588 <TPGCI_STM32_step+0x398>)
 800b37e:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800b382:	2000      	movs	r0, #0
 800b384:	f7ff fde4 	bl	800af50 <Subsystem1>

  /* End of Outputs for SubSystem: '<S158>/Subsystem1' */

  /* Outputs for Enabled SubSystem: '<S158>/Subsystem - pi//2 delay' */
  Subsystempi2delay(rtConstB.Compare_i, &rtb_Gain1_am[0], rtb_Mod1, &rtDW.Fcn_nk,
 800b388:	4b79      	ldr	r3, [pc, #484]	@ (800b570 <TPGCI_STM32_step+0x380>)
 800b38a:	7818      	ldrb	r0, [r3, #0]
 800b38c:	4639      	mov	r1, r7
 800b38e:	4b7f      	ldr	r3, [pc, #508]	@ (800b58c <TPGCI_STM32_step+0x39c>)
 800b390:	4a7f      	ldr	r2, [pc, #508]	@ (800b590 <TPGCI_STM32_step+0x3a0>)
 800b392:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 800b396:	f7ff fd96 	bl	800aec6 <Subsystempi2delay>
  /* End of Outputs for SubSystem: '<S158>/Subsystem - pi//2 delay' */

  /* MATLAB Function: '<Root>/RMS Exp' incorporates:
   *  Switch: '<S158>/Switch'
   */
  if (!rtDW.rmsSquared_not_empty) {
 800b39a:	4b73      	ldr	r3, [pc, #460]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b39c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800b3a0:	f083 0301 	eor.w	r3, r3, #1
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00e      	beq.n	800b3c8 <TPGCI_STM32_step+0x1d8>
    rtDW.rmsSquared = rtDW.Fcn_nk * rtDW.Fcn_nk;
 800b3aa:	4b6f      	ldr	r3, [pc, #444]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3ac:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 800b3b0:	4b6d      	ldr	r3, [pc, #436]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3b2:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800b3b6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3ba:	4b6b      	ldr	r3, [pc, #428]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3bc:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
    rtDW.rmsSquared_not_empty = true;
 800b3c0:	4b69      	ldr	r3, [pc, #420]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  }

  rtDW.rmsSquared = rtDW.Fcn_nk * rtDW.Fcn_nk * 0.01 + 0.99 * rtDW.rmsSquared;
 800b3c8:	4b67      	ldr	r3, [pc, #412]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3ca:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 800b3ce:	4b66      	ldr	r3, [pc, #408]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3d0:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800b3d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3d8:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 800b528 <TPGCI_STM32_step+0x338>
 800b3dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b3e0:	4b61      	ldr	r3, [pc, #388]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3e2:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800b3e6:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 800b530 <TPGCI_STM32_step+0x340>
 800b3ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b3ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b3f2:	4b5d      	ldr	r3, [pc, #372]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3f4:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
  rtb_y = sqrt(rtDW.rmsSquared);
 800b3f8:	4b5b      	ldr	r3, [pc, #364]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b3fa:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 800b3fe:	eeb0 0b47 	vmov.f64	d0, d7
 800b402:	f000 fac1 	bl	800b988 <sqrt>
 800b406:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
  /* Sum: '<Root>/Sum10' incorporates:
   *  Gain: '<Root>/Gain4'
   *  Sum: '<Root>/Sum9'
   *  Switch: '<S164>/Switch'
   */
  rtb_Filter = (0.15707963267948966 * rtDW.Fcn1_j + rtb_Saturation) + rtb_y;
 800b40a:	4b57      	ldr	r3, [pc, #348]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b40c:	ed93 7b06 	vldr	d7, [r3, #24]
 800b410:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 800b538 <TPGCI_STM32_step+0x348>
 800b414:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b418:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 800b41c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b420:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800b424:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b428:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
  /* Product: '<Root>/Divide' incorporates:
   *  Constant: '<Root>/Constant'
   *  Inport: '<Root>/VDC'
   *  Product: '<Root>/Product'
   */
  rtb_Divide = rtb_Filter * 2.0 / VDC;
 800b42c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b430:	ee37 5b07 	vadd.f64	d5, d7, d7
 800b434:	4b57      	ldr	r3, [pc, #348]	@ (800b594 <TPGCI_STM32_step+0x3a4>)
 800b436:	ed93 6b00 	vldr	d6, [r3]
 800b43a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b43e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50

  /* Sum: '<Root>/Sum11' incorporates:
   *  Inport: '<Root>/Iq_ref'
   *  Switch: '<S164>/Switch'
   */
  rtb_Integrator_l = Iq_ref - rtDW.Fcn1_j;
 800b442:	4b55      	ldr	r3, [pc, #340]	@ (800b598 <TPGCI_STM32_step+0x3a8>)
 800b444:	ed93 6b00 	vldr	d6, [r3]
 800b448:	4b47      	ldr	r3, [pc, #284]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b44a:	ed93 7b06 	vldr	d7, [r3, #24]
 800b44e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b452:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
   *  Sum: '<Root>/Sum13'
   *  Sum: '<S150>/Sum'
   *  Switch: '<S158>/Switch'
   *  Switch: '<S164>/Switch'
   */
  rtb_Divide1 = (((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) -
 800b456:	4b44      	ldr	r3, [pc, #272]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b458:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800b45c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800b460:	ee36 6b07 	vadd.f64	d6, d6, d7
                  0.15707963267948966 * rtDW.Fcn_k1) + rtDW.Fcn1_l) * 2.0 / VDC;
 800b464:	4b40      	ldr	r3, [pc, #256]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b466:	ed93 7b04 	vldr	d7, [r3, #16]
 800b46a:	ed9f 5b33 	vldr	d5, [pc, #204]	@ 800b538 <TPGCI_STM32_step+0x348>
 800b46e:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtb_Divide1 = (((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) -
 800b472:	ee36 6b47 	vsub.f64	d6, d6, d7
                  0.15707963267948966 * rtDW.Fcn_k1) + rtDW.Fcn1_l) * 2.0 / VDC;
 800b476:	4b3c      	ldr	r3, [pc, #240]	@ (800b568 <TPGCI_STM32_step+0x378>)
 800b478:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800b47c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b480:	ee37 5b07 	vadd.f64	d5, d7, d7
 800b484:	4b43      	ldr	r3, [pc, #268]	@ (800b594 <TPGCI_STM32_step+0x3a4>)
 800b486:	ed93 6b00 	vldr	d6, [r3]
  rtb_Divide1 = (((rtb_Integrator_l + rtDW.Integrator_DSTATE_e) -
 800b48a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b48e:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  /* Sum: '<Root>/Add2' incorporates:
   *  Gain: '<Root>/Gain1'
   *  Inport: '<Root>/phase delay'
   */
  rtb_Add2 = 0.017453292519943295 * phasedelay + rtb_Mod1;
 800b492:	4b42      	ldr	r3, [pc, #264]	@ (800b59c <TPGCI_STM32_step+0x3ac>)
 800b494:	ed93 7b00 	vldr	d7, [r3]
 800b498:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 800b540 <TPGCI_STM32_step+0x350>
 800b49c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4a0:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 800b4a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4a8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
   *  EnablePort: '<S174>/Enable'
   */
  /* Fcn: '<S174>/Fcn' incorporates:
   *  Fcn: '<S174>/Fcn1'
   */
  rtb_Divide_idx_0_tmp = cos(rtb_Add2);
 800b4ac:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800b4b0:	f000 fa8a 	bl	800b9c8 <cos>
 800b4b4:	ed87 0b22 	vstr	d0, [r7, #136]	@ 0x88
  rtb_Divide_idx_0_tmp_0 = sin(rtb_Add2);
 800b4b8:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800b4bc:	f000 fad0 	bl	800ba60 <sin>
 800b4c0:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

  /* Switch: '<S171>/Switch' incorporates:
   *  Fcn: '<S174>/Fcn'
   *  Fcn: '<S174>/Fcn1'
   */
  rtb_Add2 = rtb_Divide * rtb_Divide_idx_0_tmp_0 + rtb_Divide1 *
 800b4c4:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800b4c8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b4cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b4d0:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 800b4d4:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800b4d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b4dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4e0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    rtb_Divide_idx_0_tmp;
  rtb_Divide1 = -rtb_Divide * rtb_Divide_idx_0_tmp + rtb_Divide1 *
 800b4e4:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800b4e8:	eeb1 6b47 	vneg.f64	d6, d7
 800b4ec:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800b4f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b4f4:	ed97 5b10 	vldr	d5, [r7, #64]	@ 0x40
 800b4f8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b4fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b500:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b504:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    rtb_Divide_idx_0_tmp_0;

  /* End of Outputs for SubSystem: '<S171>/Subsystem - pi//2 delay' */
  for (i = 0; i < 3; i++) {
 800b508:	2300      	movs	r3, #0
 800b50a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b50c:	e0af      	b.n	800b66e <TPGCI_STM32_step+0x47e>
 800b50e:	bf00      	nop
 800b510:	55555555 	.word	0x55555555
 800b514:	3fe55555 	.word	0x3fe55555
 800b518:	54442d18 	.word	0x54442d18
 800b51c:	401921fb 	.word	0x401921fb
	...
 800b528:	47ae147b 	.word	0x47ae147b
 800b52c:	3f847ae1 	.word	0x3f847ae1
 800b530:	7ae147ae 	.word	0x7ae147ae
 800b534:	3fefae14 	.word	0x3fefae14
 800b538:	769cf0e0 	.word	0x769cf0e0
 800b53c:	3fc41b2f 	.word	0x3fc41b2f
 800b540:	a2529d39 	.word	0xa2529d39
 800b544:	3f91df46 	.word	0x3f91df46
 800b548:	0800c850 	.word	0x0800c850
 800b54c:	24000568 	.word	0x24000568
 800b550:	24000560 	.word	0x24000560
 800b554:	24000570 	.word	0x24000570
 800b558:	240005c8 	.word	0x240005c8
 800b55c:	240005c0 	.word	0x240005c0
 800b560:	240005d0 	.word	0x240005d0
 800b564:	24000588 	.word	0x24000588
 800b568:	24000610 	.word	0x24000610
 800b56c:	24000618 	.word	0x24000618
 800b570:	0800c848 	.word	0x0800c848
 800b574:	24000628 	.word	0x24000628
 800b578:	24000620 	.word	0x24000620
 800b57c:	24000580 	.word	0x24000580
 800b580:	40340000 	.word	0x40340000
 800b584:	24000638 	.word	0x24000638
 800b588:	24000630 	.word	0x24000630
 800b58c:	24000648 	.word	0x24000648
 800b590:	24000640 	.word	0x24000640
 800b594:	240005b8 	.word	0x240005b8
 800b598:	24000590 	.word	0x24000590
 800b59c:	24000600 	.word	0x24000600
    /* Gain: '<S170>/Gain3' incorporates:
     *  Switch: '<S171>/Switch'
     */
    rtb_Divide_idx_0_tmp = (rtConstP.Gain3_Gain[i + 3] * rtb_Divide1 +
 800b5a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5a2:	3303      	adds	r3, #3
 800b5a4:	4aba      	ldr	r2, [pc, #744]	@ (800b890 <TPGCI_STM32_step+0x6a0>)
 800b5a6:	3309      	adds	r3, #9
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	ed93 6b00 	vldr	d6, [r3]
 800b5b0:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b5b4:	ee26 6b07 	vmul.f64	d6, d6, d7
      rtConstP.Gain3_Gain[i] * rtb_Add2) + rtConstP.Gain3_Gain[i + 6] * 0.0;
 800b5b8:	4ab5      	ldr	r2, [pc, #724]	@ (800b890 <TPGCI_STM32_step+0x6a0>)
 800b5ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5bc:	3309      	adds	r3, #9
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	4413      	add	r3, r2
 800b5c2:	ed93 5b00 	vldr	d5, [r3]
 800b5c6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b5ca:	ee25 7b07 	vmul.f64	d7, d5, d7
    rtb_Divide_idx_0_tmp = (rtConstP.Gain3_Gain[i + 3] * rtb_Divide1 +
 800b5ce:	ee36 6b07 	vadd.f64	d6, d6, d7
      rtConstP.Gain3_Gain[i] * rtb_Add2) + rtConstP.Gain3_Gain[i + 6] * 0.0;
 800b5d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5d4:	3306      	adds	r3, #6
 800b5d6:	4aae      	ldr	r2, [pc, #696]	@ (800b890 <TPGCI_STM32_step+0x6a0>)
 800b5d8:	3309      	adds	r3, #9
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	4413      	add	r3, r2
 800b5de:	ed93 7b00 	vldr	d7, [r3]
 800b5e2:	ed9f 5b9b 	vldr	d5, [pc, #620]	@ 800b850 <TPGCI_STM32_step+0x660>
 800b5e6:	ee27 7b05 	vmul.f64	d7, d7, d5
    rtb_Divide_idx_0_tmp = (rtConstP.Gain3_Gain[i + 3] * rtb_Divide1 +
 800b5ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b5ee:	ed87 7b22 	vstr	d7, [r7, #136]	@ 0x88

    /* Saturate: '<Root>/Saturation' incorporates:
     *  Gain: '<S170>/Gain3'
     */
    if (rtb_Divide_idx_0_tmp > 0.95) {
 800b5f2:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800b5f6:	ed9f 6b98 	vldr	d6, [pc, #608]	@ 800b858 <TPGCI_STM32_step+0x668>
 800b5fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b602:	dd05      	ble.n	800b610 <TPGCI_STM32_step+0x420>
      rtb_Divide_idx_0_tmp = 0.95;
 800b604:	a394      	add	r3, pc, #592	@ (adr r3, 800b858 <TPGCI_STM32_step+0x668>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800b60e:	e00d      	b.n	800b62c <TPGCI_STM32_step+0x43c>
    } else if (rtb_Divide_idx_0_tmp < -0.95) {
 800b610:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800b614:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 800b860 <TPGCI_STM32_step+0x670>
 800b618:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b620:	d504      	bpl.n	800b62c <TPGCI_STM32_step+0x43c>
      rtb_Divide_idx_0_tmp = -0.95;
 800b622:	a38f      	add	r3, pc, #572	@ (adr r3, 800b860 <TPGCI_STM32_step+0x670>)
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    }

    /* End of Saturate: '<Root>/Saturation' */

    /* Outport: '<Root>/m_abc' */
    m_abc[i] = rtb_Divide_idx_0_tmp;
 800b62c:	4a99      	ldr	r2, [pc, #612]	@ (800b894 <TPGCI_STM32_step+0x6a4>)
 800b62e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	18d1      	adds	r1, r2, r3
 800b634:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b638:	e9c1 2300 	strd	r2, r3, [r1]
     *  Constant: '<Root>/Constant2'
     *  Gain: '<Root>/Gain'
     *  Inport: '<Root>/CCR_max'
     *  Sum: '<Root>/Add1'
     */
    rtb_Gain1[i] = (rtb_Divide_idx_0_tmp + 1.0) * 0.5 * CCR_max;
 800b63c:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 800b640:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b644:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b648:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800b64c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b650:	4b91      	ldr	r3, [pc, #580]	@ (800b898 <TPGCI_STM32_step+0x6a8>)
 800b652:	ed93 7b00 	vldr	d7, [r3]
 800b656:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b65a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b65c:	00db      	lsls	r3, r3, #3
 800b65e:	3390      	adds	r3, #144	@ 0x90
 800b660:	443b      	add	r3, r7
 800b662:	3b78      	subs	r3, #120	@ 0x78
 800b664:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < 3; i++) {
 800b668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b66a:	3301      	adds	r3, #1
 800b66c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b66e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b670:	2b02      	cmp	r3, #2
 800b672:	dd95      	ble.n	800b5a0 <TPGCI_STM32_step+0x3b0>
  }

  /* Outport: '<Root>/Vq_g' incorporates:
   *  Switch: '<S158>/Switch'
   */
  rtY.Vq_g = rtDW.Fcn1_l;
 800b674:	4b89      	ldr	r3, [pc, #548]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b676:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b67a:	4989      	ldr	r1, [pc, #548]	@ (800b8a0 <TPGCI_STM32_step+0x6b0>)
 800b67c:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Outport: '<Root>/Id' incorporates:
   *  Switch: '<S164>/Switch'
   */
  Id = rtDW.Fcn_k1;
 800b680:	4b86      	ldr	r3, [pc, #536]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b682:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b686:	4987      	ldr	r1, [pc, #540]	@ (800b8a4 <TPGCI_STM32_step+0x6b4>)
 800b688:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/PWMch1' incorporates:
   *  Inport: '<Root>/CCR_max'
   *  Sum: '<Root>/Sum'
   */
  PWMch1 = CCR_max - rtb_Gain1[0];
 800b68c:	4b82      	ldr	r3, [pc, #520]	@ (800b898 <TPGCI_STM32_step+0x6a8>)
 800b68e:	ed93 6b00 	vldr	d6, [r3]
 800b692:	ed97 7b06 	vldr	d7, [r7, #24]
 800b696:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b69a:	4b83      	ldr	r3, [pc, #524]	@ (800b8a8 <TPGCI_STM32_step+0x6b8>)
 800b69c:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/PWMch2' incorporates:
   *  Inport: '<Root>/CCR_max'
   *  Sum: '<Root>/Sum2'
   */
  PWMch2 = CCR_max - rtb_Gain1[1];
 800b6a0:	4b7d      	ldr	r3, [pc, #500]	@ (800b898 <TPGCI_STM32_step+0x6a8>)
 800b6a2:	ed93 6b00 	vldr	d6, [r3]
 800b6a6:	ed97 7b08 	vldr	d7, [r7, #32]
 800b6aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6ae:	4b7f      	ldr	r3, [pc, #508]	@ (800b8ac <TPGCI_STM32_step+0x6bc>)
 800b6b0:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/PWMch3' incorporates:
   *  Inport: '<Root>/CCR_max'
   *  Sum: '<Root>/Sum3'
   */
  PWMch3 = CCR_max - rtb_Gain1[2];
 800b6b4:	4b78      	ldr	r3, [pc, #480]	@ (800b898 <TPGCI_STM32_step+0x6a8>)
 800b6b6:	ed93 6b00 	vldr	d6, [r3]
 800b6ba:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b6be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6c2:	4b7b      	ldr	r3, [pc, #492]	@ (800b8b0 <TPGCI_STM32_step+0x6c0>)
 800b6c4:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/m_d' */
  m_d = rtb_Divide;
 800b6c8:	497a      	ldr	r1, [pc, #488]	@ (800b8b4 <TPGCI_STM32_step+0x6c4>)
 800b6ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b6ce:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Vdc_cal' */
  Vdc_cal = rtb_Filter;
 800b6d2:	4979      	ldr	r1, [pc, #484]	@ (800b8b8 <TPGCI_STM32_step+0x6c8>)
 800b6d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b6d8:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Vd_g' */
  rtY.Vd_g = rtb_y;
 800b6dc:	4970      	ldr	r1, [pc, #448]	@ (800b8a0 <TPGCI_STM32_step+0x6b0>)
 800b6de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800b6e2:	e9c1 2300 	strd	r2, r3, [r1]
   *  DiscreteIntegrator: '<S36>/Filter'
   *  Gain: '<S34>/Derivative Gain'
   *  Sum: '<S36>/SumD'
   *  Switch: '<S158>/Switch'
   */
  rtb_Filter = (0.0 * rtDW.Fcn1_l - rtDW.Filter_DSTATE) * 100.0;
 800b6e6:	4b6d      	ldr	r3, [pc, #436]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b6e8:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800b6ec:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 800b850 <TPGCI_STM32_step+0x660>
 800b6f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6f4:	4b69      	ldr	r3, [pc, #420]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b6f6:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 800b6fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6fe:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 800b868 <TPGCI_STM32_step+0x678>
 800b702:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b706:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
   *  DiscreteIntegrator: '<S41>/Integrator'
   *  Gain: '<S46>/Proportional Gain'
   *  Sum: '<S50>/Sum'
   *  Switch: '<S158>/Switch'
   */
  rtb_Divide = ((10.0 * rtDW.Fcn1_l + rtDW.Integrator_DSTATE_f) + rtb_Filter) +
 800b70a:	4b64      	ldr	r3, [pc, #400]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b70c:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800b710:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b714:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b718:	4b60      	ldr	r3, [pc, #384]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b71a:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 800b71e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b722:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b726:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b72a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 800b870 <TPGCI_STM32_step+0x680>
 800b72e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b732:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    314.15926535897933;

  /* Outport: '<Root>/Freq' incorporates:
   *  Gain: '<Root>/Gain12'
   */
  Freq = 0.15915 * rtb_Divide;
 800b736:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800b73a:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800b878 <TPGCI_STM32_step+0x688>
 800b73e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b742:	4b5e      	ldr	r3, [pc, #376]	@ (800b8bc <TPGCI_STM32_step+0x6cc>)
 800b744:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/pi_out' */
  pi_out = rtb_Saturation;
 800b748:	495d      	ldr	r1, [pc, #372]	@ (800b8c0 <TPGCI_STM32_step+0x6d0>)
 800b74a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800b74e:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Theta_g' */
  Theta_g = rtb_Mod1;
 800b752:	495c      	ldr	r1, [pc, #368]	@ (800b8c4 <TPGCI_STM32_step+0x6d4>)
 800b754:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800b758:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
  rtDW.DiscreteTimeIntegrator_DSTATE += 4.0E-5 * rtb_Divide;
 800b75c:	4b4f      	ldr	r3, [pc, #316]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b75e:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 800b762:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800b766:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 800b880 <TPGCI_STM32_step+0x690>
 800b76a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b76e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b772:	4b4a      	ldr	r3, [pc, #296]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b774:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40

  /* Update for DiscreteIntegrator: '<S91>/Integrator' incorporates:
   *  Gain: '<S88>/Integral Gain'
   */
  rtDW.Integrator_DSTATE += 100.0 * rtb_Sum8 * 4.0E-5;
 800b778:	4b48      	ldr	r3, [pc, #288]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b77a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800b77e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 800b782:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 800b868 <TPGCI_STM32_step+0x678>
 800b786:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b78a:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 800b880 <TPGCI_STM32_step+0x690>
 800b78e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b792:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b796:	4b41      	ldr	r3, [pc, #260]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b798:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  if (rtDW.Integrator_DSTATE > 20.0) {
 800b79c:	4b3f      	ldr	r3, [pc, #252]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b79e:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 800b7a2:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 800b7a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ae:	dd06      	ble.n	800b7be <TPGCI_STM32_step+0x5ce>
    rtDW.Integrator_DSTATE = 20.0;
 800b7b0:	493a      	ldr	r1, [pc, #232]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b7b2:	f04f 0200 	mov.w	r2, #0
 800b7b6:	4b44      	ldr	r3, [pc, #272]	@ (800b8c8 <TPGCI_STM32_step+0x6d8>)
 800b7b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 800b7bc:	e00e      	b.n	800b7dc <TPGCI_STM32_step+0x5ec>
  } else if (rtDW.Integrator_DSTATE < 0.0) {
 800b7be:	4b37      	ldr	r3, [pc, #220]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b7c0:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 800b7c4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7cc:	d506      	bpl.n	800b7dc <TPGCI_STM32_step+0x5ec>
    rtDW.Integrator_DSTATE = 0.0;
 800b7ce:	4933      	ldr	r1, [pc, #204]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	f04f 0300 	mov.w	r3, #0
 800b7d8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  /* End of Update for DiscreteIntegrator: '<S91>/Integrator' */

  /* Update for DiscreteIntegrator: '<S141>/Integrator' incorporates:
   *  Gain: '<S138>/Integral Gain'
   */
  rtDW.Integrator_DSTATE_e += 100.0 * rtb_Integrator_l * 4.0E-5;
 800b7dc:	4b2f      	ldr	r3, [pc, #188]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b7de:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800b7e2:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800b7e6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 800b868 <TPGCI_STM32_step+0x678>
 800b7ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b7ee:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 800b880 <TPGCI_STM32_step+0x690>
 800b7f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b7f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b7fa:	4b28      	ldr	r3, [pc, #160]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b7fc:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50

  /* Update for DiscreteIntegrator: '<S41>/Integrator' incorporates:
   *  Gain: '<S38>/Integral Gain'
   *  Switch: '<S158>/Switch'
   */
  rtDW.Integrator_DSTATE_f += 10000.0 * rtDW.Fcn1_l * 4.0E-5;
 800b800:	4b26      	ldr	r3, [pc, #152]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b802:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800b806:	4b25      	ldr	r3, [pc, #148]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b808:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800b80c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 800b888 <TPGCI_STM32_step+0x698>
 800b810:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b814:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 800b880 <TPGCI_STM32_step+0x690>
 800b818:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b81c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b820:	4b1e      	ldr	r3, [pc, #120]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b822:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58

  /* Update for DiscreteIntegrator: '<S36>/Filter' */
  rtDW.Filter_DSTATE += 4.0E-5 * rtb_Filter;
 800b826:	4b1d      	ldr	r3, [pc, #116]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b828:	ed93 6b18 	vldr	d6, [r3, #96]	@ 0x60
 800b82c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b830:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 800b880 <TPGCI_STM32_step+0x690>
 800b834:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b838:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b83c:	4b17      	ldr	r3, [pc, #92]	@ (800b89c <TPGCI_STM32_step+0x6ac>)
 800b83e:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
}
 800b842:	bf00      	nop
 800b844:	3790      	adds	r7, #144	@ 0x90
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	f3af 8000 	nop.w
	...
 800b858:	66666666 	.word	0x66666666
 800b85c:	3fee6666 	.word	0x3fee6666
 800b860:	66666666 	.word	0x66666666
 800b864:	bfee6666 	.word	0xbfee6666
 800b868:	00000000 	.word	0x00000000
 800b86c:	40590000 	.word	0x40590000
 800b870:	59d5433b 	.word	0x59d5433b
 800b874:	4073a28c 	.word	0x4073a28c
 800b878:	f6944674 	.word	0xf6944674
 800b87c:	3fc45f06 	.word	0x3fc45f06
 800b880:	88e368f1 	.word	0x88e368f1
 800b884:	3f04f8b5 	.word	0x3f04f8b5
 800b888:	00000000 	.word	0x00000000
 800b88c:	40c38800 	.word	0x40c38800
 800b890:	0800c850 	.word	0x0800c850
 800b894:	240005e0 	.word	0x240005e0
 800b898:	24000550 	.word	0x24000550
 800b89c:	24000610 	.word	0x24000610
 800b8a0:	24000688 	.word	0x24000688
 800b8a4:	24000578 	.word	0x24000578
 800b8a8:	24000598 	.word	0x24000598
 800b8ac:	240005a0 	.word	0x240005a0
 800b8b0:	240005a8 	.word	0x240005a8
 800b8b4:	240005f8 	.word	0x240005f8
 800b8b8:	240005d8 	.word	0x240005d8
 800b8bc:	24000558 	.word	0x24000558
 800b8c0:	24000608 	.word	0x24000608
 800b8c4:	240005b0 	.word	0x240005b0
 800b8c8:	40340000 	.word	0x40340000

0800b8cc <TPGCI_STM32_initialize>:

/* Model initialize function */
void TPGCI_STM32_initialize(void)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800b8d0:	bf00      	nop
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <memset>:
 800b8da:	4402      	add	r2, r0
 800b8dc:	4603      	mov	r3, r0
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d100      	bne.n	800b8e4 <memset+0xa>
 800b8e2:	4770      	bx	lr
 800b8e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e8:	e7f9      	b.n	800b8de <memset+0x4>
	...

0800b8ec <__errno>:
 800b8ec:	4b01      	ldr	r3, [pc, #4]	@ (800b8f4 <__errno+0x8>)
 800b8ee:	6818      	ldr	r0, [r3, #0]
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	24000060 	.word	0x24000060

0800b8f8 <__libc_init_array>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b930 <__libc_init_array+0x38>)
 800b8fc:	4c0d      	ldr	r4, [pc, #52]	@ (800b934 <__libc_init_array+0x3c>)
 800b8fe:	1b64      	subs	r4, r4, r5
 800b900:	10a4      	asrs	r4, r4, #2
 800b902:	2600      	movs	r6, #0
 800b904:	42a6      	cmp	r6, r4
 800b906:	d109      	bne.n	800b91c <__libc_init_array+0x24>
 800b908:	4d0b      	ldr	r5, [pc, #44]	@ (800b938 <__libc_init_array+0x40>)
 800b90a:	4c0c      	ldr	r4, [pc, #48]	@ (800b93c <__libc_init_array+0x44>)
 800b90c:	f000 ff82 	bl	800c814 <_init>
 800b910:	1b64      	subs	r4, r4, r5
 800b912:	10a4      	asrs	r4, r4, #2
 800b914:	2600      	movs	r6, #0
 800b916:	42a6      	cmp	r6, r4
 800b918:	d105      	bne.n	800b926 <__libc_init_array+0x2e>
 800b91a:	bd70      	pop	{r4, r5, r6, pc}
 800b91c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b920:	4798      	blx	r3
 800b922:	3601      	adds	r6, #1
 800b924:	e7ee      	b.n	800b904 <__libc_init_array+0xc>
 800b926:	f855 3b04 	ldr.w	r3, [r5], #4
 800b92a:	4798      	blx	r3
 800b92c:	3601      	adds	r6, #1
 800b92e:	e7f2      	b.n	800b916 <__libc_init_array+0x1e>
 800b930:	0800cac8 	.word	0x0800cac8
 800b934:	0800cac8 	.word	0x0800cac8
 800b938:	0800cac8 	.word	0x0800cac8
 800b93c:	0800cacc 	.word	0x0800cacc

0800b940 <fmod>:
 800b940:	b508      	push	{r3, lr}
 800b942:	ed2d 8b04 	vpush	{d8-d9}
 800b946:	eeb0 9b40 	vmov.f64	d9, d0
 800b94a:	eeb0 8b41 	vmov.f64	d8, d1
 800b94e:	f000 fa0f 	bl	800bd70 <__ieee754_fmod>
 800b952:	eeb4 9b48 	vcmp.f64	d9, d8
 800b956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b95a:	d60c      	bvs.n	800b976 <fmod+0x36>
 800b95c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800b980 <fmod+0x40>
 800b960:	eeb4 8b49 	vcmp.f64	d8, d9
 800b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b968:	d105      	bne.n	800b976 <fmod+0x36>
 800b96a:	f7ff ffbf 	bl	800b8ec <__errno>
 800b96e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800b972:	2321      	movs	r3, #33	@ 0x21
 800b974:	6003      	str	r3, [r0, #0]
 800b976:	ecbd 8b04 	vpop	{d8-d9}
 800b97a:	bd08      	pop	{r3, pc}
 800b97c:	f3af 8000 	nop.w
	...

0800b988 <sqrt>:
 800b988:	b508      	push	{r3, lr}
 800b98a:	ed2d 8b04 	vpush	{d8-d9}
 800b98e:	eeb0 8b40 	vmov.f64	d8, d0
 800b992:	f000 f8b1 	bl	800baf8 <__ieee754_sqrt>
 800b996:	eeb4 8b48 	vcmp.f64	d8, d8
 800b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b99e:	d60c      	bvs.n	800b9ba <sqrt+0x32>
 800b9a0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800b9c0 <sqrt+0x38>
 800b9a4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800b9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ac:	d505      	bpl.n	800b9ba <sqrt+0x32>
 800b9ae:	f7ff ff9d 	bl	800b8ec <__errno>
 800b9b2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800b9b6:	2321      	movs	r3, #33	@ 0x21
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	ecbd 8b04 	vpop	{d8-d9}
 800b9be:	bd08      	pop	{r3, pc}
	...

0800b9c8 <cos>:
 800b9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9ca:	eeb0 7b40 	vmov.f64	d7, d0
 800b9ce:	ee17 3a90 	vmov	r3, s15
 800b9d2:	4a21      	ldr	r2, [pc, #132]	@ (800ba58 <cos+0x90>)
 800b9d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d806      	bhi.n	800b9ea <cos+0x22>
 800b9dc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800ba50 <cos+0x88>
 800b9e0:	b005      	add	sp, #20
 800b9e2:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e6:	f000 b903 	b.w	800bbf0 <__kernel_cos>
 800b9ea:	4a1c      	ldr	r2, [pc, #112]	@ (800ba5c <cos+0x94>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d904      	bls.n	800b9fa <cos+0x32>
 800b9f0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b9f4:	b005      	add	sp, #20
 800b9f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9fa:	4668      	mov	r0, sp
 800b9fc:	f000 fac4 	bl	800bf88 <__ieee754_rem_pio2>
 800ba00:	f000 0003 	and.w	r0, r0, #3
 800ba04:	2801      	cmp	r0, #1
 800ba06:	d009      	beq.n	800ba1c <cos+0x54>
 800ba08:	2802      	cmp	r0, #2
 800ba0a:	d010      	beq.n	800ba2e <cos+0x66>
 800ba0c:	b9b0      	cbnz	r0, 800ba3c <cos+0x74>
 800ba0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba12:	ed9d 0b00 	vldr	d0, [sp]
 800ba16:	f000 f8eb 	bl	800bbf0 <__kernel_cos>
 800ba1a:	e7eb      	b.n	800b9f4 <cos+0x2c>
 800ba1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba20:	ed9d 0b00 	vldr	d0, [sp]
 800ba24:	f000 f94c 	bl	800bcc0 <__kernel_sin>
 800ba28:	eeb1 0b40 	vneg.f64	d0, d0
 800ba2c:	e7e2      	b.n	800b9f4 <cos+0x2c>
 800ba2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba32:	ed9d 0b00 	vldr	d0, [sp]
 800ba36:	f000 f8db 	bl	800bbf0 <__kernel_cos>
 800ba3a:	e7f5      	b.n	800ba28 <cos+0x60>
 800ba3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba40:	ed9d 0b00 	vldr	d0, [sp]
 800ba44:	2001      	movs	r0, #1
 800ba46:	f000 f93b 	bl	800bcc0 <__kernel_sin>
 800ba4a:	e7d3      	b.n	800b9f4 <cos+0x2c>
 800ba4c:	f3af 8000 	nop.w
	...
 800ba58:	3fe921fb 	.word	0x3fe921fb
 800ba5c:	7fefffff 	.word	0x7fefffff

0800ba60 <sin>:
 800ba60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba62:	eeb0 7b40 	vmov.f64	d7, d0
 800ba66:	ee17 3a90 	vmov	r3, s15
 800ba6a:	4a21      	ldr	r2, [pc, #132]	@ (800baf0 <sin+0x90>)
 800ba6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d807      	bhi.n	800ba84 <sin+0x24>
 800ba74:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800bae8 <sin+0x88>
 800ba78:	2000      	movs	r0, #0
 800ba7a:	b005      	add	sp, #20
 800ba7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba80:	f000 b91e 	b.w	800bcc0 <__kernel_sin>
 800ba84:	4a1b      	ldr	r2, [pc, #108]	@ (800baf4 <sin+0x94>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d904      	bls.n	800ba94 <sin+0x34>
 800ba8a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ba8e:	b005      	add	sp, #20
 800ba90:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba94:	4668      	mov	r0, sp
 800ba96:	f000 fa77 	bl	800bf88 <__ieee754_rem_pio2>
 800ba9a:	f000 0003 	and.w	r0, r0, #3
 800ba9e:	2801      	cmp	r0, #1
 800baa0:	d00a      	beq.n	800bab8 <sin+0x58>
 800baa2:	2802      	cmp	r0, #2
 800baa4:	d00f      	beq.n	800bac6 <sin+0x66>
 800baa6:	b9c0      	cbnz	r0, 800bada <sin+0x7a>
 800baa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800baac:	ed9d 0b00 	vldr	d0, [sp]
 800bab0:	2001      	movs	r0, #1
 800bab2:	f000 f905 	bl	800bcc0 <__kernel_sin>
 800bab6:	e7ea      	b.n	800ba8e <sin+0x2e>
 800bab8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800babc:	ed9d 0b00 	vldr	d0, [sp]
 800bac0:	f000 f896 	bl	800bbf0 <__kernel_cos>
 800bac4:	e7e3      	b.n	800ba8e <sin+0x2e>
 800bac6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800baca:	ed9d 0b00 	vldr	d0, [sp]
 800bace:	2001      	movs	r0, #1
 800bad0:	f000 f8f6 	bl	800bcc0 <__kernel_sin>
 800bad4:	eeb1 0b40 	vneg.f64	d0, d0
 800bad8:	e7d9      	b.n	800ba8e <sin+0x2e>
 800bada:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bade:	ed9d 0b00 	vldr	d0, [sp]
 800bae2:	f000 f885 	bl	800bbf0 <__kernel_cos>
 800bae6:	e7f5      	b.n	800bad4 <sin+0x74>
	...
 800baf0:	3fe921fb 	.word	0x3fe921fb
 800baf4:	7fefffff 	.word	0x7fefffff

0800baf8 <__ieee754_sqrt>:
 800baf8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800bafc:	4770      	bx	lr
	...

0800bb00 <floor>:
 800bb00:	ee10 3a90 	vmov	r3, s1
 800bb04:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800bb08:	ee10 2a10 	vmov	r2, s0
 800bb0c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800bb10:	2913      	cmp	r1, #19
 800bb12:	b530      	push	{r4, r5, lr}
 800bb14:	4615      	mov	r5, r2
 800bb16:	dc33      	bgt.n	800bb80 <floor+0x80>
 800bb18:	2900      	cmp	r1, #0
 800bb1a:	da18      	bge.n	800bb4e <floor+0x4e>
 800bb1c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800bbe0 <floor+0xe0>
 800bb20:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bb24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2c:	dd0a      	ble.n	800bb44 <floor+0x44>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	da50      	bge.n	800bbd4 <floor+0xd4>
 800bb32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb36:	4313      	orrs	r3, r2
 800bb38:	2200      	movs	r2, #0
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bbe8 <floor+0xe8>)
 800bb3e:	bf08      	it	eq
 800bb40:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	ec41 0b10 	vmov	d0, r0, r1
 800bb4c:	e01f      	b.n	800bb8e <floor+0x8e>
 800bb4e:	4827      	ldr	r0, [pc, #156]	@ (800bbec <floor+0xec>)
 800bb50:	4108      	asrs	r0, r1
 800bb52:	ea03 0400 	and.w	r4, r3, r0
 800bb56:	4314      	orrs	r4, r2
 800bb58:	d019      	beq.n	800bb8e <floor+0x8e>
 800bb5a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bbe0 <floor+0xe0>
 800bb5e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bb62:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6a:	ddeb      	ble.n	800bb44 <floor+0x44>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bfbe      	ittt	lt
 800bb70:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800bb74:	410a      	asrlt	r2, r1
 800bb76:	189b      	addlt	r3, r3, r2
 800bb78:	ea23 0300 	bic.w	r3, r3, r0
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	e7e1      	b.n	800bb44 <floor+0x44>
 800bb80:	2933      	cmp	r1, #51	@ 0x33
 800bb82:	dd05      	ble.n	800bb90 <floor+0x90>
 800bb84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb88:	d101      	bne.n	800bb8e <floor+0x8e>
 800bb8a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bb8e:	bd30      	pop	{r4, r5, pc}
 800bb90:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800bb94:	f04f 30ff 	mov.w	r0, #4294967295
 800bb98:	40e0      	lsrs	r0, r4
 800bb9a:	4210      	tst	r0, r2
 800bb9c:	d0f7      	beq.n	800bb8e <floor+0x8e>
 800bb9e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800bbe0 <floor+0xe0>
 800bba2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bba6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbae:	ddc9      	ble.n	800bb44 <floor+0x44>
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	da02      	bge.n	800bbba <floor+0xba>
 800bbb4:	2914      	cmp	r1, #20
 800bbb6:	d103      	bne.n	800bbc0 <floor+0xc0>
 800bbb8:	3301      	adds	r3, #1
 800bbba:	ea22 0200 	bic.w	r2, r2, r0
 800bbbe:	e7c1      	b.n	800bb44 <floor+0x44>
 800bbc0:	2401      	movs	r4, #1
 800bbc2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800bbc6:	fa04 f101 	lsl.w	r1, r4, r1
 800bbca:	440a      	add	r2, r1
 800bbcc:	42aa      	cmp	r2, r5
 800bbce:	bf38      	it	cc
 800bbd0:	191b      	addcc	r3, r3, r4
 800bbd2:	e7f2      	b.n	800bbba <floor+0xba>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	e7b4      	b.n	800bb44 <floor+0x44>
 800bbda:	bf00      	nop
 800bbdc:	f3af 8000 	nop.w
 800bbe0:	8800759c 	.word	0x8800759c
 800bbe4:	7e37e43c 	.word	0x7e37e43c
 800bbe8:	bff00000 	.word	0xbff00000
 800bbec:	000fffff 	.word	0x000fffff

0800bbf0 <__kernel_cos>:
 800bbf0:	eeb0 5b40 	vmov.f64	d5, d0
 800bbf4:	ee15 1a90 	vmov	r1, s11
 800bbf8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800bbfc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800bc00:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800bc04:	d204      	bcs.n	800bc10 <__kernel_cos+0x20>
 800bc06:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800bc0a:	ee17 3a90 	vmov	r3, s15
 800bc0e:	b343      	cbz	r3, 800bc62 <__kernel_cos+0x72>
 800bc10:	ee25 6b05 	vmul.f64	d6, d5, d5
 800bc14:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800bc18:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800bc88 <__kernel_cos+0x98>
 800bc1c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800bc90 <__kernel_cos+0xa0>
 800bc20:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bc24:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800bc98 <__kernel_cos+0xa8>
 800bc28:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bc2c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800bca0 <__kernel_cos+0xb0>
 800bc30:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bc34:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800bca8 <__kernel_cos+0xb8>
 800bc38:	4b1f      	ldr	r3, [pc, #124]	@ (800bcb8 <__kernel_cos+0xc8>)
 800bc3a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bc3e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800bcb0 <__kernel_cos+0xc0>
 800bc42:	4299      	cmp	r1, r3
 800bc44:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bc48:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800bc4c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800bc50:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bc54:	eea6 1b04 	vfma.f64	d1, d6, d4
 800bc58:	d804      	bhi.n	800bc64 <__kernel_cos+0x74>
 800bc5a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800bc5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bc62:	4770      	bx	lr
 800bc64:	4b15      	ldr	r3, [pc, #84]	@ (800bcbc <__kernel_cos+0xcc>)
 800bc66:	4299      	cmp	r1, r3
 800bc68:	d809      	bhi.n	800bc7e <__kernel_cos+0x8e>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800bc70:	ec43 2b16 	vmov	d6, r2, r3
 800bc74:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bc78:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bc7c:	e7ed      	b.n	800bc5a <__kernel_cos+0x6a>
 800bc7e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800bc82:	e7f7      	b.n	800bc74 <__kernel_cos+0x84>
 800bc84:	f3af 8000 	nop.w
 800bc88:	be8838d4 	.word	0xbe8838d4
 800bc8c:	bda8fae9 	.word	0xbda8fae9
 800bc90:	bdb4b1c4 	.word	0xbdb4b1c4
 800bc94:	3e21ee9e 	.word	0x3e21ee9e
 800bc98:	809c52ad 	.word	0x809c52ad
 800bc9c:	be927e4f 	.word	0xbe927e4f
 800bca0:	19cb1590 	.word	0x19cb1590
 800bca4:	3efa01a0 	.word	0x3efa01a0
 800bca8:	16c15177 	.word	0x16c15177
 800bcac:	bf56c16c 	.word	0xbf56c16c
 800bcb0:	5555554c 	.word	0x5555554c
 800bcb4:	3fa55555 	.word	0x3fa55555
 800bcb8:	3fd33332 	.word	0x3fd33332
 800bcbc:	3fe90000 	.word	0x3fe90000

0800bcc0 <__kernel_sin>:
 800bcc0:	ee10 3a90 	vmov	r3, s1
 800bcc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcc8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bccc:	d204      	bcs.n	800bcd8 <__kernel_sin+0x18>
 800bcce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800bcd2:	ee17 3a90 	vmov	r3, s15
 800bcd6:	b35b      	cbz	r3, 800bd30 <__kernel_sin+0x70>
 800bcd8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800bcdc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800bce0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800bd38 <__kernel_sin+0x78>
 800bce4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800bd40 <__kernel_sin+0x80>
 800bce8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bcec:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800bd48 <__kernel_sin+0x88>
 800bcf0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bcf4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800bd50 <__kernel_sin+0x90>
 800bcf8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bcfc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800bd58 <__kernel_sin+0x98>
 800bd00:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bd04:	b930      	cbnz	r0, 800bd14 <__kernel_sin+0x54>
 800bd06:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800bd60 <__kernel_sin+0xa0>
 800bd0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bd0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800bd12:	4770      	bx	lr
 800bd14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800bd18:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800bd1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800bd20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800bd24:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800bd68 <__kernel_sin+0xa8>
 800bd28:	eea5 1b07 	vfma.f64	d1, d5, d7
 800bd2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	f3af 8000 	nop.w
 800bd38:	5acfd57c 	.word	0x5acfd57c
 800bd3c:	3de5d93a 	.word	0x3de5d93a
 800bd40:	8a2b9ceb 	.word	0x8a2b9ceb
 800bd44:	be5ae5e6 	.word	0xbe5ae5e6
 800bd48:	57b1fe7d 	.word	0x57b1fe7d
 800bd4c:	3ec71de3 	.word	0x3ec71de3
 800bd50:	19c161d5 	.word	0x19c161d5
 800bd54:	bf2a01a0 	.word	0xbf2a01a0
 800bd58:	1110f8a6 	.word	0x1110f8a6
 800bd5c:	3f811111 	.word	0x3f811111
 800bd60:	55555549 	.word	0x55555549
 800bd64:	bfc55555 	.word	0xbfc55555
 800bd68:	55555549 	.word	0x55555549
 800bd6c:	3fc55555 	.word	0x3fc55555

0800bd70 <__ieee754_fmod>:
 800bd70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd74:	ed8d 1b00 	vstr	d1, [sp]
 800bd78:	e9dd 6500 	ldrd	r6, r5, [sp]
 800bd7c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800bd80:	ea56 0307 	orrs.w	r3, r6, r7
 800bd84:	46b6      	mov	lr, r6
 800bd86:	d00d      	beq.n	800bda4 <__ieee754_fmod+0x34>
 800bd88:	ee10 ca90 	vmov	ip, s1
 800bd8c:	4b78      	ldr	r3, [pc, #480]	@ (800bf70 <__ieee754_fmod+0x200>)
 800bd8e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800bd92:	4598      	cmp	r8, r3
 800bd94:	d806      	bhi.n	800bda4 <__ieee754_fmod+0x34>
 800bd96:	4273      	negs	r3, r6
 800bd98:	4a76      	ldr	r2, [pc, #472]	@ (800bf74 <__ieee754_fmod+0x204>)
 800bd9a:	4333      	orrs	r3, r6
 800bd9c:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d908      	bls.n	800bdb6 <__ieee754_fmod+0x46>
 800bda4:	ed9d 7b00 	vldr	d7, [sp]
 800bda8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bdac:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800bdb0:	b003      	add	sp, #12
 800bdb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb6:	ee10 9a10 	vmov	r9, s0
 800bdba:	45b8      	cmp	r8, r7
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800bdc2:	dc09      	bgt.n	800bdd8 <__ieee754_fmod+0x68>
 800bdc4:	dbf4      	blt.n	800bdb0 <__ieee754_fmod+0x40>
 800bdc6:	454e      	cmp	r6, r9
 800bdc8:	d8f2      	bhi.n	800bdb0 <__ieee754_fmod+0x40>
 800bdca:	d105      	bne.n	800bdd8 <__ieee754_fmod+0x68>
 800bdcc:	4b6a      	ldr	r3, [pc, #424]	@ (800bf78 <__ieee754_fmod+0x208>)
 800bdce:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800bdd2:	ed93 0b00 	vldr	d0, [r3]
 800bdd6:	e7eb      	b.n	800bdb0 <__ieee754_fmod+0x40>
 800bdd8:	4a66      	ldr	r2, [pc, #408]	@ (800bf74 <__ieee754_fmod+0x204>)
 800bdda:	ea1c 0f02 	tst.w	ip, r2
 800bdde:	d14a      	bne.n	800be76 <__ieee754_fmod+0x106>
 800bde0:	f1b8 0f00 	cmp.w	r8, #0
 800bde4:	d13f      	bne.n	800be66 <__ieee754_fmod+0xf6>
 800bde6:	4865      	ldr	r0, [pc, #404]	@ (800bf7c <__ieee754_fmod+0x20c>)
 800bde8:	464b      	mov	r3, r9
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	dc38      	bgt.n	800be60 <__ieee754_fmod+0xf0>
 800bdee:	4215      	tst	r5, r2
 800bdf0:	d150      	bne.n	800be94 <__ieee754_fmod+0x124>
 800bdf2:	2f00      	cmp	r7, #0
 800bdf4:	d147      	bne.n	800be86 <__ieee754_fmod+0x116>
 800bdf6:	4a61      	ldr	r2, [pc, #388]	@ (800bf7c <__ieee754_fmod+0x20c>)
 800bdf8:	4633      	mov	r3, r6
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dc40      	bgt.n	800be80 <__ieee754_fmod+0x110>
 800bdfe:	4b60      	ldr	r3, [pc, #384]	@ (800bf80 <__ieee754_fmod+0x210>)
 800be00:	4298      	cmp	r0, r3
 800be02:	db4b      	blt.n	800be9c <__ieee754_fmod+0x12c>
 800be04:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800be08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be0c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800bf80 <__ieee754_fmod+0x210>
 800be10:	4562      	cmp	r2, ip
 800be12:	db58      	blt.n	800bec6 <__ieee754_fmod+0x156>
 800be14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800be18:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800be1c:	1a80      	subs	r0, r0, r2
 800be1e:	1b5e      	subs	r6, r3, r5
 800be20:	eba1 070e 	sub.w	r7, r1, lr
 800be24:	2800      	cmp	r0, #0
 800be26:	d164      	bne.n	800bef2 <__ieee754_fmod+0x182>
 800be28:	4571      	cmp	r1, lr
 800be2a:	bf38      	it	cc
 800be2c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800be30:	2e00      	cmp	r6, #0
 800be32:	bfa4      	itt	ge
 800be34:	4639      	movge	r1, r7
 800be36:	4633      	movge	r3, r6
 800be38:	ea53 0001 	orrs.w	r0, r3, r1
 800be3c:	d0c6      	beq.n	800bdcc <__ieee754_fmod+0x5c>
 800be3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be42:	db6b      	blt.n	800bf1c <__ieee754_fmod+0x1ac>
 800be44:	484e      	ldr	r0, [pc, #312]	@ (800bf80 <__ieee754_fmod+0x210>)
 800be46:	4282      	cmp	r2, r0
 800be48:	db6e      	blt.n	800bf28 <__ieee754_fmod+0x1b8>
 800be4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800be4e:	4323      	orrs	r3, r4
 800be50:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800be54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be58:	460c      	mov	r4, r1
 800be5a:	ec45 4b10 	vmov	d0, r4, r5
 800be5e:	e7a7      	b.n	800bdb0 <__ieee754_fmod+0x40>
 800be60:	3801      	subs	r0, #1
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	e7c1      	b.n	800bdea <__ieee754_fmod+0x7a>
 800be66:	4846      	ldr	r0, [pc, #280]	@ (800bf80 <__ieee754_fmod+0x210>)
 800be68:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	ddbe      	ble.n	800bdee <__ieee754_fmod+0x7e>
 800be70:	3801      	subs	r0, #1
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	e7fa      	b.n	800be6c <__ieee754_fmod+0xfc>
 800be76:	ea4f 5028 	mov.w	r0, r8, asr #20
 800be7a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800be7e:	e7b6      	b.n	800bdee <__ieee754_fmod+0x7e>
 800be80:	3a01      	subs	r2, #1
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	e7b9      	b.n	800bdfa <__ieee754_fmod+0x8a>
 800be86:	4a3e      	ldr	r2, [pc, #248]	@ (800bf80 <__ieee754_fmod+0x210>)
 800be88:	02fb      	lsls	r3, r7, #11
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	ddb7      	ble.n	800bdfe <__ieee754_fmod+0x8e>
 800be8e:	3a01      	subs	r2, #1
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	e7fa      	b.n	800be8a <__ieee754_fmod+0x11a>
 800be94:	153a      	asrs	r2, r7, #20
 800be96:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be9a:	e7b0      	b.n	800bdfe <__ieee754_fmod+0x8e>
 800be9c:	eba3 0c00 	sub.w	ip, r3, r0
 800bea0:	f1bc 0f1f 	cmp.w	ip, #31
 800bea4:	dc09      	bgt.n	800beba <__ieee754_fmod+0x14a>
 800bea6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800beaa:	fa08 f10c 	lsl.w	r1, r8, ip
 800beae:	fa29 f303 	lsr.w	r3, r9, r3
 800beb2:	430b      	orrs	r3, r1
 800beb4:	fa09 f10c 	lsl.w	r1, r9, ip
 800beb8:	e7a8      	b.n	800be0c <__ieee754_fmod+0x9c>
 800beba:	4b32      	ldr	r3, [pc, #200]	@ (800bf84 <__ieee754_fmod+0x214>)
 800bebc:	1a1b      	subs	r3, r3, r0
 800bebe:	fa09 f303 	lsl.w	r3, r9, r3
 800bec2:	2100      	movs	r1, #0
 800bec4:	e7a2      	b.n	800be0c <__ieee754_fmod+0x9c>
 800bec6:	ebac 0c02 	sub.w	ip, ip, r2
 800beca:	f1bc 0f1f 	cmp.w	ip, #31
 800bece:	dc09      	bgt.n	800bee4 <__ieee754_fmod+0x174>
 800bed0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800bed4:	fa07 f70c 	lsl.w	r7, r7, ip
 800bed8:	fa26 f505 	lsr.w	r5, r6, r5
 800bedc:	433d      	orrs	r5, r7
 800bede:	fa06 fe0c 	lsl.w	lr, r6, ip
 800bee2:	e79b      	b.n	800be1c <__ieee754_fmod+0xac>
 800bee4:	4d27      	ldr	r5, [pc, #156]	@ (800bf84 <__ieee754_fmod+0x214>)
 800bee6:	1aad      	subs	r5, r5, r2
 800bee8:	fa06 f505 	lsl.w	r5, r6, r5
 800beec:	f04f 0e00 	mov.w	lr, #0
 800bef0:	e794      	b.n	800be1c <__ieee754_fmod+0xac>
 800bef2:	4571      	cmp	r1, lr
 800bef4:	bf38      	it	cc
 800bef6:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800befa:	2e00      	cmp	r6, #0
 800befc:	da05      	bge.n	800bf0a <__ieee754_fmod+0x19a>
 800befe:	0fce      	lsrs	r6, r1, #31
 800bf00:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800bf04:	0049      	lsls	r1, r1, #1
 800bf06:	3801      	subs	r0, #1
 800bf08:	e789      	b.n	800be1e <__ieee754_fmod+0xae>
 800bf0a:	ea56 0307 	orrs.w	r3, r6, r7
 800bf0e:	f43f af5d 	beq.w	800bdcc <__ieee754_fmod+0x5c>
 800bf12:	0ffb      	lsrs	r3, r7, #31
 800bf14:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800bf18:	0079      	lsls	r1, r7, #1
 800bf1a:	e7f4      	b.n	800bf06 <__ieee754_fmod+0x196>
 800bf1c:	0fc8      	lsrs	r0, r1, #31
 800bf1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bf22:	0049      	lsls	r1, r1, #1
 800bf24:	3a01      	subs	r2, #1
 800bf26:	e78a      	b.n	800be3e <__ieee754_fmod+0xce>
 800bf28:	1a80      	subs	r0, r0, r2
 800bf2a:	2814      	cmp	r0, #20
 800bf2c:	dc0c      	bgt.n	800bf48 <__ieee754_fmod+0x1d8>
 800bf2e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bf32:	fa03 f202 	lsl.w	r2, r3, r2
 800bf36:	40c1      	lsrs	r1, r0
 800bf38:	430a      	orrs	r2, r1
 800bf3a:	4103      	asrs	r3, r0
 800bf3c:	ea43 0104 	orr.w	r1, r3, r4
 800bf40:	4610      	mov	r0, r2
 800bf42:	ec41 0b10 	vmov	d0, r0, r1
 800bf46:	e733      	b.n	800bdb0 <__ieee754_fmod+0x40>
 800bf48:	281f      	cmp	r0, #31
 800bf4a:	dc07      	bgt.n	800bf5c <__ieee754_fmod+0x1ec>
 800bf4c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bf50:	40c1      	lsrs	r1, r0
 800bf52:	fa03 f202 	lsl.w	r2, r3, r2
 800bf56:	430a      	orrs	r2, r1
 800bf58:	4623      	mov	r3, r4
 800bf5a:	e7ef      	b.n	800bf3c <__ieee754_fmod+0x1cc>
 800bf5c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800bf60:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800bf64:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800bf68:	32e2      	adds	r2, #226	@ 0xe2
 800bf6a:	fa43 f202 	asr.w	r2, r3, r2
 800bf6e:	e7f3      	b.n	800bf58 <__ieee754_fmod+0x1e8>
 800bf70:	7fefffff 	.word	0x7fefffff
 800bf74:	7ff00000 	.word	0x7ff00000
 800bf78:	0800c8e0 	.word	0x0800c8e0
 800bf7c:	fffffbed 	.word	0xfffffbed
 800bf80:	fffffc02 	.word	0xfffffc02
 800bf84:	fffffbe2 	.word	0xfffffbe2

0800bf88 <__ieee754_rem_pio2>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	eeb0 7b40 	vmov.f64	d7, d0
 800bf8e:	ee17 5a90 	vmov	r5, s15
 800bf92:	4b99      	ldr	r3, [pc, #612]	@ (800c1f8 <__ieee754_rem_pio2+0x270>)
 800bf94:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bf98:	429e      	cmp	r6, r3
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	d807      	bhi.n	800bfb0 <__ieee754_rem_pio2+0x28>
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	ed84 0b00 	vstr	d0, [r4]
 800bfa8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e01b      	b.n	800bfe8 <__ieee754_rem_pio2+0x60>
 800bfb0:	4b92      	ldr	r3, [pc, #584]	@ (800c1fc <__ieee754_rem_pio2+0x274>)
 800bfb2:	429e      	cmp	r6, r3
 800bfb4:	d83b      	bhi.n	800c02e <__ieee754_rem_pio2+0xa6>
 800bfb6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800c1b8 <__ieee754_rem_pio2+0x230>
 800bfc0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800bfc4:	dd19      	ble.n	800bffa <__ieee754_rem_pio2+0x72>
 800bfc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bfca:	429e      	cmp	r6, r3
 800bfcc:	d00e      	beq.n	800bfec <__ieee754_rem_pio2+0x64>
 800bfce:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800c1c0 <__ieee754_rem_pio2+0x238>
 800bfd2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800bfd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bfda:	ed84 6b00 	vstr	d6, [r4]
 800bfde:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bfe2:	ed84 7b02 	vstr	d7, [r4, #8]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	b008      	add	sp, #32
 800bfea:	bd70      	pop	{r4, r5, r6, pc}
 800bfec:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800c1c8 <__ieee754_rem_pio2+0x240>
 800bff0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800c1d0 <__ieee754_rem_pio2+0x248>
 800bff4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bff8:	e7eb      	b.n	800bfd2 <__ieee754_rem_pio2+0x4a>
 800bffa:	429e      	cmp	r6, r3
 800bffc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c000:	d00e      	beq.n	800c020 <__ieee754_rem_pio2+0x98>
 800c002:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800c1c0 <__ieee754_rem_pio2+0x238>
 800c006:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c00a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c00e:	ed84 6b00 	vstr	d6, [r4]
 800c012:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c01e:	e7e3      	b.n	800bfe8 <__ieee754_rem_pio2+0x60>
 800c020:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800c1c8 <__ieee754_rem_pio2+0x240>
 800c024:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800c1d0 <__ieee754_rem_pio2+0x248>
 800c028:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c02c:	e7eb      	b.n	800c006 <__ieee754_rem_pio2+0x7e>
 800c02e:	4b74      	ldr	r3, [pc, #464]	@ (800c200 <__ieee754_rem_pio2+0x278>)
 800c030:	429e      	cmp	r6, r3
 800c032:	d870      	bhi.n	800c116 <__ieee754_rem_pio2+0x18e>
 800c034:	f000 f8ec 	bl	800c210 <fabs>
 800c038:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c03c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c1d8 <__ieee754_rem_pio2+0x250>
 800c040:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c044:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c048:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c04c:	ee17 0a90 	vmov	r0, s15
 800c050:	eeb1 4b45 	vneg.f64	d4, d5
 800c054:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800c1b8 <__ieee754_rem_pio2+0x230>
 800c058:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c05c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800c1c0 <__ieee754_rem_pio2+0x238>
 800c060:	281f      	cmp	r0, #31
 800c062:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c066:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c06a:	dc05      	bgt.n	800c078 <__ieee754_rem_pio2+0xf0>
 800c06c:	4b65      	ldr	r3, [pc, #404]	@ (800c204 <__ieee754_rem_pio2+0x27c>)
 800c06e:	1e42      	subs	r2, r0, #1
 800c070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c074:	42b3      	cmp	r3, r6
 800c076:	d109      	bne.n	800c08c <__ieee754_rem_pio2+0x104>
 800c078:	ee16 3a90 	vmov	r3, s13
 800c07c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c080:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c084:	2b10      	cmp	r3, #16
 800c086:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c08a:	dc02      	bgt.n	800c092 <__ieee754_rem_pio2+0x10a>
 800c08c:	ed84 6b00 	vstr	d6, [r4]
 800c090:	e01a      	b.n	800c0c8 <__ieee754_rem_pio2+0x140>
 800c092:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800c1c8 <__ieee754_rem_pio2+0x240>
 800c096:	eeb0 6b40 	vmov.f64	d6, d0
 800c09a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c09e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c0a2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c0a6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800c1d0 <__ieee754_rem_pio2+0x248>
 800c0aa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c0ae:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c0b2:	ee13 3a90 	vmov	r3, s7
 800c0b6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	2b31      	cmp	r3, #49	@ 0x31
 800c0be:	dc17      	bgt.n	800c0f0 <__ieee754_rem_pio2+0x168>
 800c0c0:	eeb0 0b46 	vmov.f64	d0, d6
 800c0c4:	ed84 3b00 	vstr	d3, [r4]
 800c0c8:	ed94 6b00 	vldr	d6, [r4]
 800c0cc:	2d00      	cmp	r5, #0
 800c0ce:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c0d2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c0d6:	ed84 0b02 	vstr	d0, [r4, #8]
 800c0da:	da85      	bge.n	800bfe8 <__ieee754_rem_pio2+0x60>
 800c0dc:	eeb1 6b46 	vneg.f64	d6, d6
 800c0e0:	eeb1 0b40 	vneg.f64	d0, d0
 800c0e4:	ed84 6b00 	vstr	d6, [r4]
 800c0e8:	ed84 0b02 	vstr	d0, [r4, #8]
 800c0ec:	4240      	negs	r0, r0
 800c0ee:	e77b      	b.n	800bfe8 <__ieee754_rem_pio2+0x60>
 800c0f0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800c1e0 <__ieee754_rem_pio2+0x258>
 800c0f4:	eeb0 0b46 	vmov.f64	d0, d6
 800c0f8:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c0fc:	ee36 6b40 	vsub.f64	d6, d6, d0
 800c100:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c104:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800c1e8 <__ieee754_rem_pio2+0x260>
 800c108:	eeb0 7b46 	vmov.f64	d7, d6
 800c10c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800c110:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c114:	e7ba      	b.n	800c08c <__ieee754_rem_pio2+0x104>
 800c116:	4b3c      	ldr	r3, [pc, #240]	@ (800c208 <__ieee754_rem_pio2+0x280>)
 800c118:	429e      	cmp	r6, r3
 800c11a:	d906      	bls.n	800c12a <__ieee754_rem_pio2+0x1a2>
 800c11c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c120:	ed80 7b02 	vstr	d7, [r0, #8]
 800c124:	ed80 7b00 	vstr	d7, [r0]
 800c128:	e740      	b.n	800bfac <__ieee754_rem_pio2+0x24>
 800c12a:	ee10 3a10 	vmov	r3, s0
 800c12e:	1532      	asrs	r2, r6, #20
 800c130:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800c134:	4618      	mov	r0, r3
 800c136:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c13a:	ec41 0b17 	vmov	d7, r0, r1
 800c13e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c142:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800c1f0 <__ieee754_rem_pio2+0x268>
 800c146:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c14a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c14e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c152:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c156:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c15a:	a808      	add	r0, sp, #32
 800c15c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c160:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c164:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c168:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c16c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c170:	2103      	movs	r1, #3
 800c172:	ed30 7b02 	vldmdb	r0!, {d7}
 800c176:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c17e:	460b      	mov	r3, r1
 800c180:	f101 31ff 	add.w	r1, r1, #4294967295
 800c184:	d0f5      	beq.n	800c172 <__ieee754_rem_pio2+0x1ea>
 800c186:	4921      	ldr	r1, [pc, #132]	@ (800c20c <__ieee754_rem_pio2+0x284>)
 800c188:	9101      	str	r1, [sp, #4]
 800c18a:	2102      	movs	r1, #2
 800c18c:	9100      	str	r1, [sp, #0]
 800c18e:	a802      	add	r0, sp, #8
 800c190:	4621      	mov	r1, r4
 800c192:	f000 f845 	bl	800c220 <__kernel_rem_pio2>
 800c196:	2d00      	cmp	r5, #0
 800c198:	f6bf af26 	bge.w	800bfe8 <__ieee754_rem_pio2+0x60>
 800c19c:	ed94 7b00 	vldr	d7, [r4]
 800c1a0:	eeb1 7b47 	vneg.f64	d7, d7
 800c1a4:	ed84 7b00 	vstr	d7, [r4]
 800c1a8:	ed94 7b02 	vldr	d7, [r4, #8]
 800c1ac:	eeb1 7b47 	vneg.f64	d7, d7
 800c1b0:	ed84 7b02 	vstr	d7, [r4, #8]
 800c1b4:	e79a      	b.n	800c0ec <__ieee754_rem_pio2+0x164>
 800c1b6:	bf00      	nop
 800c1b8:	54400000 	.word	0x54400000
 800c1bc:	3ff921fb 	.word	0x3ff921fb
 800c1c0:	1a626331 	.word	0x1a626331
 800c1c4:	3dd0b461 	.word	0x3dd0b461
 800c1c8:	1a600000 	.word	0x1a600000
 800c1cc:	3dd0b461 	.word	0x3dd0b461
 800c1d0:	2e037073 	.word	0x2e037073
 800c1d4:	3ba3198a 	.word	0x3ba3198a
 800c1d8:	6dc9c883 	.word	0x6dc9c883
 800c1dc:	3fe45f30 	.word	0x3fe45f30
 800c1e0:	2e000000 	.word	0x2e000000
 800c1e4:	3ba3198a 	.word	0x3ba3198a
 800c1e8:	252049c1 	.word	0x252049c1
 800c1ec:	397b839a 	.word	0x397b839a
 800c1f0:	00000000 	.word	0x00000000
 800c1f4:	41700000 	.word	0x41700000
 800c1f8:	3fe921fb 	.word	0x3fe921fb
 800c1fc:	4002d97b 	.word	0x4002d97b
 800c200:	413921fb 	.word	0x413921fb
 800c204:	0800c8f0 	.word	0x0800c8f0
 800c208:	7fefffff 	.word	0x7fefffff
 800c20c:	0800c970 	.word	0x0800c970

0800c210 <fabs>:
 800c210:	ec51 0b10 	vmov	r0, r1, d0
 800c214:	4602      	mov	r2, r0
 800c216:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c21a:	ec43 2b10 	vmov	d0, r2, r3
 800c21e:	4770      	bx	lr

0800c220 <__kernel_rem_pio2>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	ed2d 8b06 	vpush	{d8-d10}
 800c228:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800c22c:	469b      	mov	fp, r3
 800c22e:	9001      	str	r0, [sp, #4]
 800c230:	4bbb      	ldr	r3, [pc, #748]	@ (800c520 <__kernel_rem_pio2+0x300>)
 800c232:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800c234:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800c238:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800c23c:	f112 0f14 	cmn.w	r2, #20
 800c240:	bfa8      	it	ge
 800c242:	1ed3      	subge	r3, r2, #3
 800c244:	f10b 3aff 	add.w	sl, fp, #4294967295
 800c248:	bfb8      	it	lt
 800c24a:	2300      	movlt	r3, #0
 800c24c:	f06f 0517 	mvn.w	r5, #23
 800c250:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800c508 <__kernel_rem_pio2+0x2e8>
 800c254:	bfa4      	itt	ge
 800c256:	2018      	movge	r0, #24
 800c258:	fb93 f3f0 	sdivge	r3, r3, r0
 800c25c:	fb03 5505 	mla	r5, r3, r5, r5
 800c260:	eba3 040a 	sub.w	r4, r3, sl
 800c264:	4415      	add	r5, r2
 800c266:	460f      	mov	r7, r1
 800c268:	eb09 060a 	add.w	r6, r9, sl
 800c26c:	a81a      	add	r0, sp, #104	@ 0x68
 800c26e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800c272:	2200      	movs	r2, #0
 800c274:	42b2      	cmp	r2, r6
 800c276:	dd0e      	ble.n	800c296 <__kernel_rem_pio2+0x76>
 800c278:	aa1a      	add	r2, sp, #104	@ 0x68
 800c27a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c27e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800c282:	2600      	movs	r6, #0
 800c284:	454e      	cmp	r6, r9
 800c286:	dc25      	bgt.n	800c2d4 <__kernel_rem_pio2+0xb4>
 800c288:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800c508 <__kernel_rem_pio2+0x2e8>
 800c28c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c290:	4614      	mov	r4, r2
 800c292:	2000      	movs	r0, #0
 800c294:	e015      	b.n	800c2c2 <__kernel_rem_pio2+0xa2>
 800c296:	42d4      	cmn	r4, r2
 800c298:	d409      	bmi.n	800c2ae <__kernel_rem_pio2+0x8e>
 800c29a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800c29e:	ee07 1a90 	vmov	s15, r1
 800c2a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c2a6:	eca0 7b02 	vstmia	r0!, {d7}
 800c2aa:	3201      	adds	r2, #1
 800c2ac:	e7e2      	b.n	800c274 <__kernel_rem_pio2+0x54>
 800c2ae:	eeb0 7b46 	vmov.f64	d7, d6
 800c2b2:	e7f8      	b.n	800c2a6 <__kernel_rem_pio2+0x86>
 800c2b4:	ecbc 5b02 	vldmia	ip!, {d5}
 800c2b8:	ed94 6b00 	vldr	d6, [r4]
 800c2bc:	3001      	adds	r0, #1
 800c2be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c2c2:	4550      	cmp	r0, sl
 800c2c4:	f1a4 0408 	sub.w	r4, r4, #8
 800c2c8:	ddf4      	ble.n	800c2b4 <__kernel_rem_pio2+0x94>
 800c2ca:	ecae 7b02 	vstmia	lr!, {d7}
 800c2ce:	3601      	adds	r6, #1
 800c2d0:	3208      	adds	r2, #8
 800c2d2:	e7d7      	b.n	800c284 <__kernel_rem_pio2+0x64>
 800c2d4:	aa06      	add	r2, sp, #24
 800c2d6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800c510 <__kernel_rem_pio2+0x2f0>
 800c2da:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800c518 <__kernel_rem_pio2+0x2f8>
 800c2de:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c2e2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800c2e6:	9203      	str	r2, [sp, #12]
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	464c      	mov	r4, r9
 800c2ec:	00e3      	lsls	r3, r4, #3
 800c2ee:	9304      	str	r3, [sp, #16]
 800c2f0:	ab92      	add	r3, sp, #584	@ 0x248
 800c2f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2f6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800c2fa:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800c2fc:	ab06      	add	r3, sp, #24
 800c2fe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c302:	461e      	mov	r6, r3
 800c304:	4620      	mov	r0, r4
 800c306:	2800      	cmp	r0, #0
 800c308:	f1a2 0208 	sub.w	r2, r2, #8
 800c30c:	dc4a      	bgt.n	800c3a4 <__kernel_rem_pio2+0x184>
 800c30e:	4628      	mov	r0, r5
 800c310:	9305      	str	r3, [sp, #20]
 800c312:	f000 fa01 	bl	800c718 <scalbn>
 800c316:	eeb0 8b40 	vmov.f64	d8, d0
 800c31a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800c31e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c322:	f7ff fbed 	bl	800bb00 <floor>
 800c326:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800c32a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c32e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c332:	2d00      	cmp	r5, #0
 800c334:	ee17 8a90 	vmov	r8, s15
 800c338:	9b05      	ldr	r3, [sp, #20]
 800c33a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c33e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c342:	dd41      	ble.n	800c3c8 <__kernel_rem_pio2+0x1a8>
 800c344:	1e60      	subs	r0, r4, #1
 800c346:	aa06      	add	r2, sp, #24
 800c348:	f1c5 0c18 	rsb	ip, r5, #24
 800c34c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800c350:	fa46 f20c 	asr.w	r2, r6, ip
 800c354:	4490      	add	r8, r2
 800c356:	fa02 f20c 	lsl.w	r2, r2, ip
 800c35a:	1ab6      	subs	r6, r6, r2
 800c35c:	aa06      	add	r2, sp, #24
 800c35e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800c362:	f1c5 0217 	rsb	r2, r5, #23
 800c366:	4116      	asrs	r6, r2
 800c368:	2e00      	cmp	r6, #0
 800c36a:	dd3c      	ble.n	800c3e6 <__kernel_rem_pio2+0x1c6>
 800c36c:	f04f 0c00 	mov.w	ip, #0
 800c370:	f108 0801 	add.w	r8, r8, #1
 800c374:	4660      	mov	r0, ip
 800c376:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800c37a:	4564      	cmp	r4, ip
 800c37c:	dc66      	bgt.n	800c44c <__kernel_rem_pio2+0x22c>
 800c37e:	2d00      	cmp	r5, #0
 800c380:	dd03      	ble.n	800c38a <__kernel_rem_pio2+0x16a>
 800c382:	2d01      	cmp	r5, #1
 800c384:	d072      	beq.n	800c46c <__kernel_rem_pio2+0x24c>
 800c386:	2d02      	cmp	r5, #2
 800c388:	d07a      	beq.n	800c480 <__kernel_rem_pio2+0x260>
 800c38a:	2e02      	cmp	r6, #2
 800c38c:	d12b      	bne.n	800c3e6 <__kernel_rem_pio2+0x1c6>
 800c38e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c392:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c396:	b330      	cbz	r0, 800c3e6 <__kernel_rem_pio2+0x1c6>
 800c398:	4628      	mov	r0, r5
 800c39a:	f000 f9bd 	bl	800c718 <scalbn>
 800c39e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c3a2:	e020      	b.n	800c3e6 <__kernel_rem_pio2+0x1c6>
 800c3a4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c3a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c3ac:	3801      	subs	r0, #1
 800c3ae:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c3b2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c3b6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c3ba:	eca6 0a01 	vstmia	r6!, {s0}
 800c3be:	ed92 0b00 	vldr	d0, [r2]
 800c3c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c3c6:	e79e      	b.n	800c306 <__kernel_rem_pio2+0xe6>
 800c3c8:	d105      	bne.n	800c3d6 <__kernel_rem_pio2+0x1b6>
 800c3ca:	1e62      	subs	r2, r4, #1
 800c3cc:	a906      	add	r1, sp, #24
 800c3ce:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800c3d2:	15f6      	asrs	r6, r6, #23
 800c3d4:	e7c8      	b.n	800c368 <__kernel_rem_pio2+0x148>
 800c3d6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c3da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e2:	da31      	bge.n	800c448 <__kernel_rem_pio2+0x228>
 800c3e4:	2600      	movs	r6, #0
 800c3e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ee:	f040 809b 	bne.w	800c528 <__kernel_rem_pio2+0x308>
 800c3f2:	1e62      	subs	r2, r4, #1
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	454a      	cmp	r2, r9
 800c3f8:	da49      	bge.n	800c48e <__kernel_rem_pio2+0x26e>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d062      	beq.n	800c4c4 <__kernel_rem_pio2+0x2a4>
 800c3fe:	3c01      	subs	r4, #1
 800c400:	ab06      	add	r3, sp, #24
 800c402:	3d18      	subs	r5, #24
 800c404:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d0f8      	beq.n	800c3fe <__kernel_rem_pio2+0x1de>
 800c40c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c410:	4628      	mov	r0, r5
 800c412:	f000 f981 	bl	800c718 <scalbn>
 800c416:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800c510 <__kernel_rem_pio2+0x2f0>
 800c41a:	1c62      	adds	r2, r4, #1
 800c41c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c41e:	00d3      	lsls	r3, r2, #3
 800c420:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c424:	4622      	mov	r2, r4
 800c426:	2a00      	cmp	r2, #0
 800c428:	f280 80a8 	bge.w	800c57c <__kernel_rem_pio2+0x35c>
 800c42c:	4622      	mov	r2, r4
 800c42e:	2a00      	cmp	r2, #0
 800c430:	f2c0 80c6 	blt.w	800c5c0 <__kernel_rem_pio2+0x3a0>
 800c434:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c436:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c43a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800c508 <__kernel_rem_pio2+0x2e8>
 800c43e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800c524 <__kernel_rem_pio2+0x304>
 800c442:	2000      	movs	r0, #0
 800c444:	1aa1      	subs	r1, r4, r2
 800c446:	e0b0      	b.n	800c5aa <__kernel_rem_pio2+0x38a>
 800c448:	2602      	movs	r6, #2
 800c44a:	e78f      	b.n	800c36c <__kernel_rem_pio2+0x14c>
 800c44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c450:	b948      	cbnz	r0, 800c466 <__kernel_rem_pio2+0x246>
 800c452:	b122      	cbz	r2, 800c45e <__kernel_rem_pio2+0x23e>
 800c454:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800c458:	f843 2c04 	str.w	r2, [r3, #-4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f10c 0c01 	add.w	ip, ip, #1
 800c462:	4610      	mov	r0, r2
 800c464:	e789      	b.n	800c37a <__kernel_rem_pio2+0x15a>
 800c466:	ebae 0202 	sub.w	r2, lr, r2
 800c46a:	e7f5      	b.n	800c458 <__kernel_rem_pio2+0x238>
 800c46c:	1e62      	subs	r2, r4, #1
 800c46e:	ab06      	add	r3, sp, #24
 800c470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c474:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c478:	a906      	add	r1, sp, #24
 800c47a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c47e:	e784      	b.n	800c38a <__kernel_rem_pio2+0x16a>
 800c480:	1e62      	subs	r2, r4, #1
 800c482:	ab06      	add	r3, sp, #24
 800c484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c488:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c48c:	e7f4      	b.n	800c478 <__kernel_rem_pio2+0x258>
 800c48e:	ab06      	add	r3, sp, #24
 800c490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c494:	3a01      	subs	r2, #1
 800c496:	4318      	orrs	r0, r3
 800c498:	e7ad      	b.n	800c3f6 <__kernel_rem_pio2+0x1d6>
 800c49a:	3301      	adds	r3, #1
 800c49c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d0fa      	beq.n	800c49a <__kernel_rem_pio2+0x27a>
 800c4a4:	9a04      	ldr	r2, [sp, #16]
 800c4a6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800c4aa:	446a      	add	r2, sp
 800c4ac:	eb04 000b 	add.w	r0, r4, fp
 800c4b0:	a91a      	add	r1, sp, #104	@ 0x68
 800c4b2:	1c66      	adds	r6, r4, #1
 800c4b4:	3a98      	subs	r2, #152	@ 0x98
 800c4b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800c4ba:	4423      	add	r3, r4
 800c4bc:	42b3      	cmp	r3, r6
 800c4be:	da04      	bge.n	800c4ca <__kernel_rem_pio2+0x2aa>
 800c4c0:	461c      	mov	r4, r3
 800c4c2:	e713      	b.n	800c2ec <__kernel_rem_pio2+0xcc>
 800c4c4:	9a03      	ldr	r2, [sp, #12]
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e7e8      	b.n	800c49c <__kernel_rem_pio2+0x27c>
 800c4ca:	9902      	ldr	r1, [sp, #8]
 800c4cc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c4d0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800c4d4:	9104      	str	r1, [sp, #16]
 800c4d6:	ee07 1a90 	vmov	s15, r1
 800c4da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c4de:	2400      	movs	r4, #0
 800c4e0:	eca0 7b02 	vstmia	r0!, {d7}
 800c4e4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800c508 <__kernel_rem_pio2+0x2e8>
 800c4e8:	4686      	mov	lr, r0
 800c4ea:	4554      	cmp	r4, sl
 800c4ec:	dd03      	ble.n	800c4f6 <__kernel_rem_pio2+0x2d6>
 800c4ee:	eca2 7b02 	vstmia	r2!, {d7}
 800c4f2:	3601      	adds	r6, #1
 800c4f4:	e7e2      	b.n	800c4bc <__kernel_rem_pio2+0x29c>
 800c4f6:	ecbc 5b02 	vldmia	ip!, {d5}
 800c4fa:	ed3e 6b02 	vldmdb	lr!, {d6}
 800c4fe:	3401      	adds	r4, #1
 800c500:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c504:	e7f1      	b.n	800c4ea <__kernel_rem_pio2+0x2ca>
 800c506:	bf00      	nop
	...
 800c514:	3e700000 	.word	0x3e700000
 800c518:	00000000 	.word	0x00000000
 800c51c:	41700000 	.word	0x41700000
 800c520:	0800cab8 	.word	0x0800cab8
 800c524:	0800ca78 	.word	0x0800ca78
 800c528:	4268      	negs	r0, r5
 800c52a:	eeb0 0b48 	vmov.f64	d0, d8
 800c52e:	f000 f8f3 	bl	800c718 <scalbn>
 800c532:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800c700 <__kernel_rem_pio2+0x4e0>
 800c536:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53e:	db17      	blt.n	800c570 <__kernel_rem_pio2+0x350>
 800c540:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800c708 <__kernel_rem_pio2+0x4e8>
 800c544:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c548:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c54c:	aa06      	add	r2, sp, #24
 800c54e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c552:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c556:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c55a:	3518      	adds	r5, #24
 800c55c:	ee10 3a10 	vmov	r3, s0
 800c560:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c564:	ee17 3a10 	vmov	r3, s14
 800c568:	3401      	adds	r4, #1
 800c56a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c56e:	e74d      	b.n	800c40c <__kernel_rem_pio2+0x1ec>
 800c570:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c574:	aa06      	add	r2, sp, #24
 800c576:	ee10 3a10 	vmov	r3, s0
 800c57a:	e7f6      	b.n	800c56a <__kernel_rem_pio2+0x34a>
 800c57c:	a806      	add	r0, sp, #24
 800c57e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c582:	9001      	str	r0, [sp, #4]
 800c584:	ee07 0a90 	vmov	s15, r0
 800c588:	3a01      	subs	r2, #1
 800c58a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c58e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c592:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c596:	ed21 7b02 	vstmdb	r1!, {d7}
 800c59a:	e744      	b.n	800c426 <__kernel_rem_pio2+0x206>
 800c59c:	ecbc 5b02 	vldmia	ip!, {d5}
 800c5a0:	ecb5 6b02 	vldmia	r5!, {d6}
 800c5a4:	3001      	adds	r0, #1
 800c5a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c5aa:	4548      	cmp	r0, r9
 800c5ac:	dc01      	bgt.n	800c5b2 <__kernel_rem_pio2+0x392>
 800c5ae:	4281      	cmp	r1, r0
 800c5b0:	daf4      	bge.n	800c59c <__kernel_rem_pio2+0x37c>
 800c5b2:	a842      	add	r0, sp, #264	@ 0x108
 800c5b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c5b8:	ed81 7b00 	vstr	d7, [r1]
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	e736      	b.n	800c42e <__kernel_rem_pio2+0x20e>
 800c5c0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c5c2:	2a02      	cmp	r2, #2
 800c5c4:	dc0a      	bgt.n	800c5dc <__kernel_rem_pio2+0x3bc>
 800c5c6:	2a00      	cmp	r2, #0
 800c5c8:	dc2d      	bgt.n	800c626 <__kernel_rem_pio2+0x406>
 800c5ca:	d046      	beq.n	800c65a <__kernel_rem_pio2+0x43a>
 800c5cc:	f008 0007 	and.w	r0, r8, #7
 800c5d0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800c5d4:	ecbd 8b06 	vpop	{d8-d10}
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5dc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c5de:	2a03      	cmp	r2, #3
 800c5e0:	d1f4      	bne.n	800c5cc <__kernel_rem_pio2+0x3ac>
 800c5e2:	a942      	add	r1, sp, #264	@ 0x108
 800c5e4:	f1a3 0208 	sub.w	r2, r3, #8
 800c5e8:	440a      	add	r2, r1
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f1a1 0108 	sub.w	r1, r1, #8
 800c5f4:	dc52      	bgt.n	800c69c <__kernel_rem_pio2+0x47c>
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	2901      	cmp	r1, #1
 800c5fa:	f1a2 0208 	sub.w	r2, r2, #8
 800c5fe:	dc5d      	bgt.n	800c6bc <__kernel_rem_pio2+0x49c>
 800c600:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800c710 <__kernel_rem_pio2+0x4f0>
 800c604:	aa42      	add	r2, sp, #264	@ 0x108
 800c606:	4413      	add	r3, r2
 800c608:	2c01      	cmp	r4, #1
 800c60a:	dc67      	bgt.n	800c6dc <__kernel_rem_pio2+0x4bc>
 800c60c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800c610:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800c614:	2e00      	cmp	r6, #0
 800c616:	d167      	bne.n	800c6e8 <__kernel_rem_pio2+0x4c8>
 800c618:	ed87 5b00 	vstr	d5, [r7]
 800c61c:	ed87 6b02 	vstr	d6, [r7, #8]
 800c620:	ed87 7b04 	vstr	d7, [r7, #16]
 800c624:	e7d2      	b.n	800c5cc <__kernel_rem_pio2+0x3ac>
 800c626:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800c710 <__kernel_rem_pio2+0x4f0>
 800c62a:	aa42      	add	r2, sp, #264	@ 0x108
 800c62c:	4413      	add	r3, r2
 800c62e:	4622      	mov	r2, r4
 800c630:	2a00      	cmp	r2, #0
 800c632:	da24      	bge.n	800c67e <__kernel_rem_pio2+0x45e>
 800c634:	b34e      	cbz	r6, 800c68a <__kernel_rem_pio2+0x46a>
 800c636:	eeb1 7b46 	vneg.f64	d7, d6
 800c63a:	ed87 7b00 	vstr	d7, [r7]
 800c63e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800c642:	aa44      	add	r2, sp, #272	@ 0x110
 800c644:	2301      	movs	r3, #1
 800c646:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c64a:	429c      	cmp	r4, r3
 800c64c:	da20      	bge.n	800c690 <__kernel_rem_pio2+0x470>
 800c64e:	b10e      	cbz	r6, 800c654 <__kernel_rem_pio2+0x434>
 800c650:	eeb1 7b47 	vneg.f64	d7, d7
 800c654:	ed87 7b02 	vstr	d7, [r7, #8]
 800c658:	e7b8      	b.n	800c5cc <__kernel_rem_pio2+0x3ac>
 800c65a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800c710 <__kernel_rem_pio2+0x4f0>
 800c65e:	aa42      	add	r2, sp, #264	@ 0x108
 800c660:	4413      	add	r3, r2
 800c662:	2c00      	cmp	r4, #0
 800c664:	da05      	bge.n	800c672 <__kernel_rem_pio2+0x452>
 800c666:	b10e      	cbz	r6, 800c66c <__kernel_rem_pio2+0x44c>
 800c668:	eeb1 7b47 	vneg.f64	d7, d7
 800c66c:	ed87 7b00 	vstr	d7, [r7]
 800c670:	e7ac      	b.n	800c5cc <__kernel_rem_pio2+0x3ac>
 800c672:	ed33 6b02 	vldmdb	r3!, {d6}
 800c676:	3c01      	subs	r4, #1
 800c678:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c67c:	e7f1      	b.n	800c662 <__kernel_rem_pio2+0x442>
 800c67e:	ed33 7b02 	vldmdb	r3!, {d7}
 800c682:	3a01      	subs	r2, #1
 800c684:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c688:	e7d2      	b.n	800c630 <__kernel_rem_pio2+0x410>
 800c68a:	eeb0 7b46 	vmov.f64	d7, d6
 800c68e:	e7d4      	b.n	800c63a <__kernel_rem_pio2+0x41a>
 800c690:	ecb2 6b02 	vldmia	r2!, {d6}
 800c694:	3301      	adds	r3, #1
 800c696:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c69a:	e7d6      	b.n	800c64a <__kernel_rem_pio2+0x42a>
 800c69c:	ed91 7b00 	vldr	d7, [r1]
 800c6a0:	ed91 5b02 	vldr	d5, [r1, #8]
 800c6a4:	3801      	subs	r0, #1
 800c6a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c6aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6ae:	ed81 6b00 	vstr	d6, [r1]
 800c6b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c6b6:	ed81 7b02 	vstr	d7, [r1, #8]
 800c6ba:	e798      	b.n	800c5ee <__kernel_rem_pio2+0x3ce>
 800c6bc:	ed92 7b00 	vldr	d7, [r2]
 800c6c0:	ed92 5b02 	vldr	d5, [r2, #8]
 800c6c4:	3901      	subs	r1, #1
 800c6c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c6ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6ce:	ed82 6b00 	vstr	d6, [r2]
 800c6d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c6d6:	ed82 7b02 	vstr	d7, [r2, #8]
 800c6da:	e78d      	b.n	800c5f8 <__kernel_rem_pio2+0x3d8>
 800c6dc:	ed33 6b02 	vldmdb	r3!, {d6}
 800c6e0:	3c01      	subs	r4, #1
 800c6e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c6e6:	e78f      	b.n	800c608 <__kernel_rem_pio2+0x3e8>
 800c6e8:	eeb1 5b45 	vneg.f64	d5, d5
 800c6ec:	eeb1 6b46 	vneg.f64	d6, d6
 800c6f0:	ed87 5b00 	vstr	d5, [r7]
 800c6f4:	eeb1 7b47 	vneg.f64	d7, d7
 800c6f8:	ed87 6b02 	vstr	d6, [r7, #8]
 800c6fc:	e790      	b.n	800c620 <__kernel_rem_pio2+0x400>
 800c6fe:	bf00      	nop
 800c700:	00000000 	.word	0x00000000
 800c704:	41700000 	.word	0x41700000
 800c708:	00000000 	.word	0x00000000
 800c70c:	3e700000 	.word	0x3e700000
	...

0800c718 <scalbn>:
 800c718:	ee10 1a90 	vmov	r1, s1
 800c71c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c720:	b98b      	cbnz	r3, 800c746 <scalbn+0x2e>
 800c722:	ee10 3a10 	vmov	r3, s0
 800c726:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c72a:	4319      	orrs	r1, r3
 800c72c:	d00a      	beq.n	800c744 <scalbn+0x2c>
 800c72e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c7e0 <scalbn+0xc8>
 800c732:	4b37      	ldr	r3, [pc, #220]	@ (800c810 <scalbn+0xf8>)
 800c734:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c738:	4298      	cmp	r0, r3
 800c73a:	da0b      	bge.n	800c754 <scalbn+0x3c>
 800c73c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c7e8 <scalbn+0xd0>
 800c740:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c744:	4770      	bx	lr
 800c746:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d107      	bne.n	800c75e <scalbn+0x46>
 800c74e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c752:	4770      	bx	lr
 800c754:	ee10 1a90 	vmov	r1, s1
 800c758:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c75c:	3b36      	subs	r3, #54	@ 0x36
 800c75e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c762:	4290      	cmp	r0, r2
 800c764:	dd0d      	ble.n	800c782 <scalbn+0x6a>
 800c766:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c7f0 <scalbn+0xd8>
 800c76a:	ee10 3a90 	vmov	r3, s1
 800c76e:	eeb0 6b47 	vmov.f64	d6, d7
 800c772:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800c7f8 <scalbn+0xe0>
 800c776:	2b00      	cmp	r3, #0
 800c778:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c77c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c780:	4770      	bx	lr
 800c782:	4418      	add	r0, r3
 800c784:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800c788:	4298      	cmp	r0, r3
 800c78a:	dcec      	bgt.n	800c766 <scalbn+0x4e>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	dd0a      	ble.n	800c7a6 <scalbn+0x8e>
 800c790:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c794:	ec53 2b10 	vmov	r2, r3, d0
 800c798:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c79c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c7a0:	ec43 2b10 	vmov	d0, r2, r3
 800c7a4:	4770      	bx	lr
 800c7a6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800c7aa:	da09      	bge.n	800c7c0 <scalbn+0xa8>
 800c7ac:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800c7e8 <scalbn+0xd0>
 800c7b0:	ee10 3a90 	vmov	r3, s1
 800c7b4:	eeb0 6b47 	vmov.f64	d6, d7
 800c7b8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800c800 <scalbn+0xe8>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	e7db      	b.n	800c778 <scalbn+0x60>
 800c7c0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c7c4:	ec53 2b10 	vmov	r2, r3, d0
 800c7c8:	3036      	adds	r0, #54	@ 0x36
 800c7ca:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c7ce:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c7d2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c808 <scalbn+0xf0>
 800c7d6:	ec43 2b10 	vmov	d0, r2, r3
 800c7da:	e7b1      	b.n	800c740 <scalbn+0x28>
 800c7dc:	f3af 8000 	nop.w
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	43500000 	.word	0x43500000
 800c7e8:	c2f8f359 	.word	0xc2f8f359
 800c7ec:	01a56e1f 	.word	0x01a56e1f
 800c7f0:	8800759c 	.word	0x8800759c
 800c7f4:	7e37e43c 	.word	0x7e37e43c
 800c7f8:	8800759c 	.word	0x8800759c
 800c7fc:	fe37e43c 	.word	0xfe37e43c
 800c800:	c2f8f359 	.word	0xc2f8f359
 800c804:	81a56e1f 	.word	0x81a56e1f
 800c808:	00000000 	.word	0x00000000
 800c80c:	3c900000 	.word	0x3c900000
 800c810:	ffff3cb0 	.word	0xffff3cb0

0800c814 <_init>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	bf00      	nop
 800c818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81a:	bc08      	pop	{r3}
 800c81c:	469e      	mov	lr, r3
 800c81e:	4770      	bx	lr

0800c820 <_fini>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	bf00      	nop
 800c824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c826:	bc08      	pop	{r3}
 800c828:	469e      	mov	lr, r3
 800c82a:	4770      	bx	lr
