
TPGCI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c66c  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800c940  0800c940  0000d940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cb40  0800cb40  0000db40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800cb44  0800cb44  0000db44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000b8  24000000  0800cb48  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006d8  240000b8  0800cc00  0000e0b8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000790  0800cc00  0000e790  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001544b  00000000  00000000  0000e0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000289a  00000000  00000000  00023531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000012e0  00000000  00000000  00025dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e9b  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034614  00000000  00000000  00027f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017cd3  00000000  00000000  0005c55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d2fc  00000000  00000000  00074232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d152e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000054f8  00000000  00000000  001d1574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  001d6a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000b8 	.word	0x240000b8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c924 	.word	0x0800c924

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000bc 	.word	0x240000bc
 800030c:	0800c924 	.word	0x0800c924

08000310 <applyLowPassFilter>:
#include "butterworth_filter.h"

float applyLowPassFilter(float input, float* inputBuffer, float* outputBuffer) {
 8000310:	b480      	push	{r7}
 8000312:	b087      	sub	sp, #28
 8000314:	af00      	add	r7, sp, #0
 8000316:	ed87 0a03 	vstr	s0, [r7, #12]
 800031a:	60b8      	str	r0, [r7, #8]
 800031c:	6079      	str	r1, [r7, #4]
    // Shift previous inputs and outputs
    inputBuffer[2] = inputBuffer[1];
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	3308      	adds	r3, #8
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	6852      	ldr	r2, [r2, #4]
 8000326:	601a      	str	r2, [r3, #0]
    inputBuffer[1] = inputBuffer[0];
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	3304      	adds	r3, #4
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	6812      	ldr	r2, [r2, #0]
 8000330:	601a      	str	r2, [r3, #0]
    inputBuffer[0] = input;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

    outputBuffer[2] = outputBuffer[1];
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3308      	adds	r3, #8
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	6852      	ldr	r2, [r2, #4]
 8000340:	601a      	str	r2, [r3, #0]
    outputBuffer[1] = outputBuffer[0];
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3304      	adds	r3, #4
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	601a      	str	r2, [r3, #0]

    // Calculate the filtered output
    float output = B0 * inputBuffer[0] + B1 * inputBuffer[1] + B2 * inputBuffer[2]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	edd3 7a00 	vldr	s15, [r3]
 8000352:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80003c8 <applyLowPassFilter+0xb8>
 8000356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3304      	adds	r3, #4
 800035e:	edd3 7a00 	vldr	s15, [r3]
 8000362:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80003cc <applyLowPassFilter+0xbc>
 8000366:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800036a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	3308      	adds	r3, #8
 8000372:	edd3 7a00 	vldr	s15, [r3]
 8000376:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80003c8 <applyLowPassFilter+0xb8>
 800037a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800037e:	ee37 7a27 	vadd.f32	s14, s14, s15
                 - A1 * outputBuffer[1] - A2 * outputBuffer[2];
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3304      	adds	r3, #4
 8000386:	edd3 7a00 	vldr	s15, [r3]
 800038a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80003d0 <applyLowPassFilter+0xc0>
 800038e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3308      	adds	r3, #8
 800039a:	edd3 7a00 	vldr	s15, [r3]
 800039e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80003d4 <applyLowPassFilter+0xc4>
 80003a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float output = B0 * inputBuffer[0] + B1 * inputBuffer[1] + B2 * inputBuffer[2]
 80003a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80003aa:	edc7 7a05 	vstr	s15, [r7, #20]

    outputBuffer[0] = output;  // Store current output for next iteration
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	601a      	str	r2, [r3, #0]

    return output;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	ee07 3a90 	vmov	s15, r3
}
 80003ba:	eeb0 0a67 	vmov.f32	s0, s15
 80003be:	371c      	adds	r7, #28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	3a77a513 	.word	0x3a77a513
 80003cc:	3af7a513 	.word	0x3af7a513
 80003d0:	3ff4a234 	.word	0x3ff4a234
 80003d4:	3f6a3c21 	.word	0x3f6a3c21

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003dc:	f000 ff42 	bl	8001264 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f001 fb3c 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f858 	bl	8000498 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003e8:	f000 f8c4 	bl	8000574 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 fc40 	bl	8000c70 <MX_GPIO_Init>
  MX_DMA_Init();
 80003f0:	f000 fbfe 	bl	8000bf0 <MX_DMA_Init>
  MX_TIM1_Init();
 80003f4:	f000 fa96 	bl	8000924 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003f8:	f000 fb58 	bl	8000aac <MX_TIM2_Init>
  MX_TIM8_Init();
 80003fc:	f000 fba4 	bl	8000b48 <MX_TIM8_Init>
  MX_ADC2_Init();
 8000400:	f000 f984 	bl	800070c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000404:	f000 fa0c 	bl	8000820 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000408:	f000 f8e4 	bl	80005d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Timers starting with interrupts //
  HAL_TIM_Base_Start_IT(&htim1);
 800040c:	4819      	ldr	r0, [pc, #100]	@ (8000474 <main+0x9c>)
 800040e:	f009 f97f 	bl	8009710 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000412:	4819      	ldr	r0, [pc, #100]	@ (8000478 <main+0xa0>)
 8000414:	f009 f97c 	bl	8009710 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 8000418:	4818      	ldr	r0, [pc, #96]	@ (800047c <main+0xa4>)
 800041a:	f009 f979 	bl	8009710 <HAL_TIM_Base_Start_IT>

  // Start the ADC in DMA mode, with 3 channels
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)VoltageadcBuffer, 3);
 800041e:	2203      	movs	r2, #3
 8000420:	4917      	ldr	r1, [pc, #92]	@ (8000480 <main+0xa8>)
 8000422:	4818      	ldr	r0, [pc, #96]	@ (8000484 <main+0xac>)
 8000424:	f002 f8d0 	bl	80025c8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)CurrentadcBuffer, 3);
 8000428:	2203      	movs	r2, #3
 800042a:	4917      	ldr	r1, [pc, #92]	@ (8000488 <main+0xb0>)
 800042c:	4817      	ldr	r0, [pc, #92]	@ (800048c <main+0xb4>)
 800042e:	f002 f8cb 	bl	80025c8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)DCSenseBuffer, 2);
 8000432:	2202      	movs	r2, #2
 8000434:	4916      	ldr	r1, [pc, #88]	@ (8000490 <main+0xb8>)
 8000436:	4817      	ldr	r0, [pc, #92]	@ (8000494 <main+0xbc>)
 8000438:	f002 f8c6 	bl	80025c8 <HAL_ADC_Start_DMA>
  // Timer 1 PWM pulses starting //
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800043c:	2100      	movs	r1, #0
 800043e:	480d      	ldr	r0, [pc, #52]	@ (8000474 <main+0x9c>)
 8000440:	f009 fa4e 	bl	80098e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000444:	2100      	movs	r1, #0
 8000446:	480b      	ldr	r0, [pc, #44]	@ (8000474 <main+0x9c>)
 8000448:	f00a fae8 	bl	800aa1c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800044c:	2104      	movs	r1, #4
 800044e:	4809      	ldr	r0, [pc, #36]	@ (8000474 <main+0x9c>)
 8000450:	f009 fa46 	bl	80098e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000454:	2104      	movs	r1, #4
 8000456:	4807      	ldr	r0, [pc, #28]	@ (8000474 <main+0x9c>)
 8000458:	f00a fae0 	bl	800aa1c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800045c:	2108      	movs	r1, #8
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <main+0x9c>)
 8000460:	f009 fa3e 	bl	80098e0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000464:	2108      	movs	r1, #8
 8000466:	4803      	ldr	r0, [pc, #12]	@ (8000474 <main+0x9c>)
 8000468:	f00a fad8 	bl	800aa1c <HAL_TIMEx_PWMN_Start>
  TPGCI_2_initialize();
 800046c:	f00b fab4 	bl	800b9d8 <TPGCI_2_initialize>
//  TPGCI_STM32_2_initialize();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <main+0x98>
 8000474:	2400038c 	.word	0x2400038c
 8000478:	240003d8 	.word	0x240003d8
 800047c:	24000424 	.word	0x24000424
 8000480:	24000498 	.word	0x24000498
 8000484:	240000d4 	.word	0x240000d4
 8000488:	240004a0 	.word	0x240004a0
 800048c:	24000144 	.word	0x24000144
 8000490:	240004a8 	.word	0x240004a8
 8000494:	240001b4 	.word	0x240001b4

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b09c      	sub	sp, #112	@ 0x70
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a2:	224c      	movs	r2, #76	@ 0x4c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f00b fa9d 	bl	800b9e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f00b fa97 	bl	800b9e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004b8:	2002      	movs	r0, #2
 80004ba:	f005 fd61 	bl	8005f80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004be:	2300      	movs	r3, #0
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000570 <SystemClock_Config+0xd8>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000570 <SystemClock_Config+0xd8>)
 80004c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b28      	ldr	r3, [pc, #160]	@ (8000570 <SystemClock_Config+0xd8>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004da:	bf00      	nop
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <SystemClock_Config+0xd8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004e8:	d1f8      	bne.n	80004dc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ea:	2301      	movs	r3, #1
 80004ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	2302      	movs	r3, #2
 80004f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f8:	2302      	movs	r3, #2
 80004fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8000500:	2344      	movs	r3, #68	@ 0x44
 8000502:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000508:	2304      	movs	r3, #4
 800050a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000510:	230c      	movs	r3, #12
 8000512:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000514:	2300      	movs	r3, #0
 8000516:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000518:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800051c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000522:	4618      	mov	r0, r3
 8000524:	f005 fd66 	bl	8005ff4 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800052e:	f000 fec5 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	233f      	movs	r3, #63	@ 0x3f
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2303      	movs	r3, #3
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800053e:	2308      	movs	r3, #8
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000542:	2340      	movs	r3, #64	@ 0x40
 8000544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000546:	2340      	movs	r3, #64	@ 0x40
 8000548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800054a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000550:	2340      	movs	r3, #64	@ 0x40
 8000552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2103      	movs	r1, #3
 8000558:	4618      	mov	r0, r3
 800055a:	f006 f925 	bl	80067a8 <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000564:	f000 feaa 	bl	80012bc <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3770      	adds	r7, #112	@ 0x70
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58024800 	.word	0x58024800

08000574 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0ae      	sub	sp, #184	@ 0xb8
 8000578:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	22b8      	movs	r2, #184	@ 0xb8
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f00b fa30 	bl	800b9e6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000586:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000596:	2318      	movs	r3, #24
 8000598:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 800059a:	230a      	movs	r3, #10
 800059c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800059e:	2302      	movs	r3, #2
 80005a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80005a6:	23c0      	movs	r3, #192	@ 0xc0
 80005a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 fc6a 	bl	8006e94 <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80005c6:	f000 fe79 	bl	80012bc <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	37b8      	adds	r7, #184	@ 0xb8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2224      	movs	r2, #36	@ 0x24
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f00b f9fa 	bl	800b9e6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f2:	4b41      	ldr	r3, [pc, #260]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80005f4:	4a41      	ldr	r2, [pc, #260]	@ (80006fc <MX_ADC1_Init+0x128>)
 80005f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80005fe:	4b3e      	ldr	r3, [pc, #248]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000604:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000606:	2201      	movs	r2, #1
 8000608:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800060a:	4b3b      	ldr	r3, [pc, #236]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800060c:	2208      	movs	r2, #8
 800060e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000610:	4b39      	ldr	r3, [pc, #228]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000612:	2200      	movs	r2, #0
 8000614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000618:	2200      	movs	r2, #0
 800061a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800061c:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800061e:	2203      	movs	r2, #3
 8000620:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800062a:	4b33      	ldr	r3, [pc, #204]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800062c:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000632:	4b31      	ldr	r3, [pc, #196]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000638:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800063a:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800063c:	2203      	movs	r2, #3
 800063e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b2d      	ldr	r3, [pc, #180]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000642:	2200      	movs	r2, #0
 8000644:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000646:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000648:	2200      	movs	r2, #0
 800064a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000656:	2201      	movs	r2, #1
 8000658:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065a:	4827      	ldr	r0, [pc, #156]	@ (80006f8 <MX_ADC1_Init+0x124>)
 800065c:	f001 fdac 	bl	80021b8 <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000666:	f000 fe29 	bl	80012bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000672:	4619      	mov	r1, r3
 8000674:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_ADC1_Init+0x124>)
 8000676:	f002 ff9d 	bl	80035b4 <HAL_ADCEx_MultiModeConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000680:	f000 fe1c 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MX_ADC1_Init+0x12c>)
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000688:	2306      	movs	r3, #6
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000690:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000694:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000696:	2304      	movs	r3, #4
 8000698:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80006aa:	f002 f87d 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006b4:	f000 fe02 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_ADC1_Init+0x130>)
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006bc:	230c      	movs	r3, #12
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80006c6:	f002 f86f 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006d0:	f000 fdf4 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_ADC1_Init+0x134>)
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006d8:	2312      	movs	r3, #18
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_ADC1_Init+0x124>)
 80006e2:	f002 f861 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80006ec:	f000 fde6 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	240000d4 	.word	0x240000d4
 80006fc:	40022000 	.word	0x40022000
 8000700:	08600004 	.word	0x08600004
 8000704:	0c900008 	.word	0x0c900008
 8000708:	19200040 	.word	0x19200040

0800070c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2224      	movs	r2, #36	@ 0x24
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00b f964 	bl	800b9e6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800071e:	4b3b      	ldr	r3, [pc, #236]	@ (800080c <MX_ADC2_Init+0x100>)
 8000720:	4a3b      	ldr	r2, [pc, #236]	@ (8000810 <MX_ADC2_Init+0x104>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000724:	4b39      	ldr	r3, [pc, #228]	@ (800080c <MX_ADC2_Init+0x100>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800072a:	4b38      	ldr	r3, [pc, #224]	@ (800080c <MX_ADC2_Init+0x100>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000730:	4b36      	ldr	r3, [pc, #216]	@ (800080c <MX_ADC2_Init+0x100>)
 8000732:	2201      	movs	r2, #1
 8000734:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <MX_ADC2_Init+0x100>)
 8000738:	2208      	movs	r2, #8
 800073a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073c:	4b33      	ldr	r3, [pc, #204]	@ (800080c <MX_ADC2_Init+0x100>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_ADC2_Init+0x100>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8000748:	4b30      	ldr	r3, [pc, #192]	@ (800080c <MX_ADC2_Init+0x100>)
 800074a:	2203      	movs	r2, #3
 800074c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800074e:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <MX_ADC2_Init+0x100>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000756:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <MX_ADC2_Init+0x100>)
 8000758:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_ADC2_Init+0x100>)
 8000760:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <MX_ADC2_Init+0x100>)
 8000768:	2203      	movs	r2, #3
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	4b27      	ldr	r3, [pc, #156]	@ (800080c <MX_ADC2_Init+0x100>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000772:	4b26      	ldr	r3, [pc, #152]	@ (800080c <MX_ADC2_Init+0x100>)
 8000774:	2200      	movs	r2, #0
 8000776:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000778:	4b24      	ldr	r3, [pc, #144]	@ (800080c <MX_ADC2_Init+0x100>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <MX_ADC2_Init+0x100>)
 8000782:	2201      	movs	r2, #1
 8000784:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000786:	4821      	ldr	r0, [pc, #132]	@ (800080c <MX_ADC2_Init+0x100>)
 8000788:	f001 fd16 	bl	80021b8 <HAL_ADC_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000792:	f000 fd93 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_ADC2_Init+0x108>)
 8000798:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079a:	2306      	movs	r3, #6
 800079c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a8:	2304      	movs	r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_ADC2_Init+0x100>)
 80007bc:	f001 fff4 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 80007c6:	f000 fd79 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_ADC2_Init+0x10c>)
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ce:	230c      	movs	r3, #12
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_ADC2_Init+0x100>)
 80007d8:	f001 ffe6 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 80007e2:	f000 fd6b 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MX_ADC2_Init+0x110>)
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007ea:	2312      	movs	r3, #18
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_ADC2_Init+0x100>)
 80007f4:	f001 ffd8 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 80007fe:	f000 fd5d 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	@ 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	24000144 	.word	0x24000144
 8000810:	40022100 	.word	0x40022100
 8000814:	08600004 	.word	0x08600004
 8000818:	19200040 	.word	0x19200040
 800081c:	4b840000 	.word	0x4b840000

08000820 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2224      	movs	r2, #36	@ 0x24
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f00b f8da 	bl	800b9e6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000832:	4b38      	ldr	r3, [pc, #224]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000834:	4a38      	ldr	r2, [pc, #224]	@ (8000918 <MX_ADC3_Init+0xf8>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000838:	4b36      	ldr	r3, [pc, #216]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800083e:	4b35      	ldr	r3, [pc, #212]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000840:	2208      	movs	r2, #8
 8000842:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000844:	4b33      	ldr	r3, [pc, #204]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084a:	4b32      	ldr	r3, [pc, #200]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800084c:	2201      	movs	r2, #1
 800084e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000850:	4b30      	ldr	r3, [pc, #192]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000852:	2208      	movs	r2, #8
 8000854:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000858:	2200      	movs	r2, #0
 800085a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800085c:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800085e:	2200      	movs	r2, #0
 8000860:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000862:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000864:	2202      	movs	r2, #2
 8000866:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000870:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000872:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000878:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800087a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000888:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800088e:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000890:	2203      	movs	r2, #3
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_ADC3_Init+0xf4>)
 8000896:	2200      	movs	r2, #0
 8000898:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800089a:	4b1e      	ldr	r3, [pc, #120]	@ (8000914 <MX_ADC3_Init+0xf4>)
 800089c:	2200      	movs	r2, #0
 800089e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_ADC3_Init+0xf4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_ADC3_Init+0xf4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ae:	4819      	ldr	r0, [pc, #100]	@ (8000914 <MX_ADC3_Init+0xf4>)
 80008b0:	f001 fc82 	bl	80021b8 <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 80008ba:	f000 fcff 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <MX_ADC3_Init+0xfc>)
 80008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_ADC3_Init+0xf4>)
 80008e2:	f001 ff61 	bl	80027a8 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80008ec:	f000 fce6 	bl	80012bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_ADC3_Init+0x100>)
 80008f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f4:	230c      	movs	r3, #12
 80008f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_ADC3_Init+0xf4>)
 80008fe:	f001 ff53 	bl	80027a8 <HAL_ADC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8000908:	f000 fcd8 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	240001b4 	.word	0x240001b4
 8000918:	58026000 	.word	0x58026000
 800091c:	04300002 	.word	0x04300002
 8000920:	08600004 	.word	0x08600004

08000924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000938:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000944:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2234      	movs	r2, #52	@ 0x34
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f00b f841 	bl	800b9e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000964:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000966:	4a50      	ldr	r2, [pc, #320]	@ (8000aa8 <MX_TIM1_Init+0x184>)
 8000968:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800096a:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 800096c:	2209      	movs	r2, #9
 800096e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1375;
 8000976:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000978:	f240 525f 	movw	r2, #1375	@ 0x55f
 800097c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000984:	4b47      	ldr	r3, [pc, #284]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000986:	2200      	movs	r2, #0
 8000988:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b46      	ldr	r3, [pc, #280]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000990:	4844      	ldr	r0, [pc, #272]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000992:	f008 fe65 	bl	8009660 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800099c:	f000 fc8e 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009aa:	4619      	mov	r1, r3
 80009ac:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 80009ae:	f009 facf 	bl	8009f50 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009b8:	f000 fc80 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009bc:	4839      	ldr	r0, [pc, #228]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 80009be:	f008 ff2d 	bl	800981c <HAL_TIM_PWM_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009c8:	f000 fc78 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009cc:	2320      	movs	r3, #32
 80009ce:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009dc:	4619      	mov	r1, r3
 80009de:	4831      	ldr	r0, [pc, #196]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 80009e0:	f00a f8ec 	bl	800abbc <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009ea:	f000 fc67 	bl	80012bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	@ 0x60
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	4824      	ldr	r0, [pc, #144]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000a14:	f009 f988 	bl	8009d28 <HAL_TIM_PWM_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a1e:	f000 fc4d 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a26:	2204      	movs	r2, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481e      	ldr	r0, [pc, #120]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000a2c:	f009 f97c 	bl	8009d28 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a36:	f000 fc41 	bl	80012bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a3e:	2208      	movs	r2, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000a44:	f009 f970 	bl	8009d28 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a4e:	f000 fc35 	bl	80012bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 255;
 8000a5e:	23ff      	movs	r3, #255	@ 0xff
 8000a60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000a88:	f00a f934 	bl	800acf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000a92:	f000 fc13 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <MX_TIM1_Init+0x180>)
 8000a98:	f000 fe44 	bl	8001724 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3770      	adds	r7, #112	@ 0x70
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2400038c 	.word	0x2400038c
 8000aa8:	40010000 	.word	0x40010000

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000acc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ad0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6875;
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ae0:	f641 22db 	movw	r2, #6875	@ 0x1adb
 8000ae4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000af4:	f008 fdb4 	bl	8009660 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000afe:	f000 fbdd 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000b10:	f009 fa1e 	bl	8009f50 <HAL_TIM_ConfigClockSource>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b1a:	f000 fbcf 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <MX_TIM2_Init+0x98>)
 8000b2c:	f00a f846 	bl	800abbc <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b36:	f000 fbc1 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	240003d8 	.word	0x240003d8

08000b48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b68:	4a20      	ldr	r2, [pc, #128]	@ (8000bec <MX_TIM8_Init+0xa4>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9;
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b6e:	2209      	movs	r2, #9
 8000b70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 40000;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b7a:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8000b7e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b92:	4815      	ldr	r0, [pc, #84]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000b94:	f008 fd64 	bl	8009660 <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000b9e:	f000 fb8d 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	480e      	ldr	r0, [pc, #56]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000bb0:	f009 f9ce 	bl	8009f50 <HAL_TIM_ConfigClockSource>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000bba:	f000 fb7f 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_TIM8_Init+0xa0>)
 8000bd0:	f009 fff4 	bl	800abbc <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000bda:	f000 fb6f 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3720      	adds	r7, #32
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	24000424 	.word	0x24000424
 8000bec:	40010400 	.word	0x40010400

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c6c <MX_DMA_Init+0x7c>)
 8000bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c6c <MX_DMA_Init+0x7c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c06:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <MX_DMA_Init+0x7c>)
 8000c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <MX_DMA_Init+0x7c>)
 8000c16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c1a:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <MX_DMA_Init+0x7c>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_DMA_Init+0x7c>)
 8000c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	200b      	movs	r0, #11
 8000c38:	f002 fe79 	bl	800392e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c3c:	200b      	movs	r0, #11
 8000c3e:	f002 fe90 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	200c      	movs	r0, #12
 8000c48:	f002 fe71 	bl	800392e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c4c:	200c      	movs	r0, #12
 8000c4e:	f002 fe88 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	203a      	movs	r0, #58	@ 0x3a
 8000c58:	f002 fe69 	bl	800392e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c5c:	203a      	movs	r0, #58	@ 0x3a
 8000c5e:	f002 fe80 	bl	8003962 <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	58024400 	.word	0x58024400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c76:	4b30      	ldr	r3, [pc, #192]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c86:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	f003 0320 	and.w	r3, r3, #32
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c94:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca4:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	4a18      	ldr	r2, [pc, #96]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf4:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d12:	4a09      	ldr	r2, [pc, #36]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_GPIO_Init+0xc8>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	58024400 	.word	0x58024400

08000d3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM1) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a53      	ldr	r2, [pc, #332]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d14f      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0xb2>
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWMch1);
 8000d4e:	4b53      	ldr	r3, [pc, #332]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d50:	ed93 7b00 	vldr	d7, [r3]
 8000d54:	4b52      	ldr	r3, [pc, #328]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d5c:	ee17 2a90 	vmov	r2, s15
 8000d60:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWMch2);
 8000d62:	4b50      	ldr	r3, [pc, #320]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000d64:	ed93 7b00 	vldr	d7, [r3]
 8000d68:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d70:	ee17 2a90 	vmov	r2, s15
 8000d74:	639a      	str	r2, [r3, #56]	@ 0x38
    	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWMch3);
 8000d76:	4b4c      	ldr	r3, [pc, #304]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000d78:	ed93 7b00 	vldr	d7, [r3]
 8000d7c:	4b48      	ldr	r3, [pc, #288]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d84:	ee17 2a90 	vmov	r2, s15
 8000d88:	63da      	str	r2, [r3, #60]	@ 0x3c
    	VDC=VDC_i;
 8000d8a:	4b48      	ldr	r3, [pc, #288]	@ (8000eac <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000d8c:	edd3 7a00 	vldr	s15, [r3]
 8000d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d94:	4b46      	ldr	r3, [pc, #280]	@ (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000d96:	ed83 7b00 	vstr	d7, [r3]
        CCR_max = CCR_max_i;
 8000d9a:	4b46      	ldr	r3, [pc, #280]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da4:	4b44      	ldr	r3, [pc, #272]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000da6:	ed83 7b00 	vstr	d7, [r3]
        Id_ref = Id_ref_i;
 8000daa:	4b44      	ldr	r3, [pc, #272]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db4:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000db6:	ed83 7b00 	vstr	d7, [r3]
        Iq_ref = Iq_ref_i;
 8000dba:	4b42      	ldr	r3, [pc, #264]	@ (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000dbc:	edd3 7a00 	vldr	s15, [r3]
 8000dc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc4:	4b40      	ldr	r3, [pc, #256]	@ (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000dc6:	ed83 7b00 	vstr	d7, [r3]
        phasedelay = phasedelay_i;
 8000dca:	4b40      	ldr	r3, [pc, #256]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000dd6:	ed83 7b00 	vstr	d7, [r3]
    	Tim1_check++;
 8000dda:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ddc:	edd3 7a00 	vldr	s15, [r3]
 8000de0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000de8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dea:	edc3 7a00 	vstr	s15, [r3]
    }
    if (htim->Instance == TIM2) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000df6:	d13b      	bne.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0x134>
    	va_g=VOLTAGE_R_PHASE;
 8000df8:	4b37      	ldr	r3, [pc, #220]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e02:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e04:	ed83 7b00 	vstr	d7, [r3]
    	vb_g=VOLTAGE_Y_PHASE;
 8000e08:	4b35      	ldr	r3, [pc, #212]	@ (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e0a:	edd3 7a00 	vldr	s15, [r3]
 8000e0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e12:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e14:	ed83 7b00 	vstr	d7, [r3]
        vc_g=VOLTAGE_B_PHASE;
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e22:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e24:	ed83 7b00 	vstr	d7, [r3]
        ia_g=CURRENT_R_PHASE; //CURRENT_R_PHASE
 8000e28:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e32:	4b30      	ldr	r3, [pc, #192]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e34:	ed83 7b00 	vstr	d7, [r3]
        ib_g=CURRENT_Y_PHASE; //CURRENT_Y_PHASE
 8000e38:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e42:	4b2e      	ldr	r3, [pc, #184]	@ (8000efc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000e44:	ed83 7b00 	vstr	d7, [r3]
        ic_g=CURRENT_B_PHASE; //CURRENT_B_PHASE
 8000e48:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e52:	4b2c      	ldr	r3, [pc, #176]	@ (8000f04 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000e54:	ed83 7b00 	vstr	d7, [r3]
        TPGCI_2_step();
 8000e58:	f00a f9fa 	bl	800b250 <TPGCI_2_step>
    	Tim2_check++;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e5e:	edd3 7a00 	vldr	s15, [r3]
 8000e62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
    }
    if (htim->Instance == TIM8) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a25      	ldr	r2, [pc, #148]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d109      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x152>

    	Tim8_check++;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000e8a:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	240005b0 	.word	0x240005b0
 8000ea0:	2400038c 	.word	0x2400038c
 8000ea4:	240005b8 	.word	0x240005b8
 8000ea8:	240005c0 	.word	0x240005c0
 8000eac:	24000000 	.word	0x24000000
 8000eb0:	240005c8 	.word	0x240005c8
 8000eb4:	24000004 	.word	0x24000004
 8000eb8:	24000560 	.word	0x24000560
 8000ebc:	24000008 	.word	0x24000008
 8000ec0:	24000580 	.word	0x24000580
 8000ec4:	24000470 	.word	0x24000470
 8000ec8:	24000590 	.word	0x24000590
 8000ecc:	24000474 	.word	0x24000474
 8000ed0:	240005f8 	.word	0x240005f8
 8000ed4:	240004ac 	.word	0x240004ac
 8000ed8:	24000478 	.word	0x24000478
 8000edc:	24000600 	.word	0x24000600
 8000ee0:	2400047c 	.word	0x2400047c
 8000ee4:	24000608 	.word	0x24000608
 8000ee8:	24000480 	.word	0x24000480
 8000eec:	24000610 	.word	0x24000610
 8000ef0:	24000484 	.word	0x24000484
 8000ef4:	240005e0 	.word	0x240005e0
 8000ef8:	24000488 	.word	0x24000488
 8000efc:	240005e8 	.word	0x240005e8
 8000f00:	2400048c 	.word	0x2400048c
 8000f04:	240005f0 	.word	0x240005f0
 8000f08:	240004b0 	.word	0x240004b0
 8000f0c:	40010400 	.word	0x40010400
 8000f10:	240004b4 	.word	0x240004b4

08000f14 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4aa5      	ldr	r2, [pc, #660]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x2a4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	f040 808b 	bne.w	800103e <HAL_ADC_ConvCpltCallback+0x12a>
    {
        // Convert the raw ADC values to voltages (0 to 3.3V scale)
    	float rawR = (((((float)VoltageadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_R_OFFSET)*VOLTAGE_R_GAIN)-4;
 8000f28:	4ba4      	ldr	r3, [pc, #656]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f34:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8000f38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f3c:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 8000f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f48:	4b9f      	ldr	r3, [pc, #636]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8000f4a:	edd3 7a00 	vldr	s15, [r3]
 8000f4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f52:	4b9e      	ldr	r3, [pc, #632]	@ (80011cc <HAL_ADC_ConvCpltCallback+0x2b8>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f64:	edc7 7a07 	vstr	s15, [r7, #28]
    	float rawY = (((((float)VoltageadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_Y_OFFSET)*VOLTAGE_Y_GAIN)-4;
 8000f68:	4b94      	ldr	r3, [pc, #592]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000f6a:	885b      	ldrh	r3, [r3, #2]
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f74:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8000f78:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f7c:	eddf 7a91 	vldr	s15, [pc, #580]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 8000f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f88:	4b91      	ldr	r3, [pc, #580]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f92:	4b90      	ldr	r3, [pc, #576]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000fa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fa4:	edc7 7a06 	vstr	s15, [r7, #24]
    	float rawB = (((((float)VoltageadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-VOLTAGE_B_OFFSET)*VOLTAGE_B_GAIN)-4;
 8000fa8:	4b84      	ldr	r3, [pc, #528]	@ (80011bc <HAL_ADC_ConvCpltCallback+0x2a8>)
 8000faa:	889b      	ldrh	r3, [r3, #4]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb4:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8000fb8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000fbc:	eddf 7a81 	vldr	s15, [pc, #516]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fc8:	4b83      	ldr	r3, [pc, #524]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd2:	4b82      	ldr	r3, [pc, #520]	@ (80011dc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8000fd4:	edd3 7a00 	vldr	s15, [r3]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe4:	edc7 7a05 	vstr	s15, [r7, #20]
        // Apply the filter to each phase voltage
        VOLTAGE_R_PHASE = applyLowPassFilter(rawR, VoltageR_Input, VoltageR_Output);
 8000fe8:	497d      	ldr	r1, [pc, #500]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8000fea:	487e      	ldr	r0, [pc, #504]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8000fec:	ed97 0a07 	vldr	s0, [r7, #28]
 8000ff0:	f7ff f98e 	bl	8000310 <applyLowPassFilter>
 8000ff4:	eef0 7a40 	vmov.f32	s15, s0
 8000ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80011e8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
        VOLTAGE_Y_PHASE = applyLowPassFilter(rawY, VoltageY_Input, VoltageY_Output);
 8000ffe:	497b      	ldr	r1, [pc, #492]	@ (80011ec <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001000:	487b      	ldr	r0, [pc, #492]	@ (80011f0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8001002:	ed97 0a06 	vldr	s0, [r7, #24]
 8001006:	f7ff f983 	bl	8000310 <applyLowPassFilter>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	4b79      	ldr	r3, [pc, #484]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
        VOLTAGE_B_PHASE = applyLowPassFilter(rawB, VoltageB_Input, VoltageB_Output);
 8001014:	4978      	ldr	r1, [pc, #480]	@ (80011f8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 8001016:	4879      	ldr	r0, [pc, #484]	@ (80011fc <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001018:	ed97 0a05 	vldr	s0, [r7, #20]
 800101c:	f7ff f978 	bl	8000310 <applyLowPassFilter>
 8001020:	eef0 7a40 	vmov.f32	s15, s0
 8001024:	4b76      	ldr	r3, [pc, #472]	@ (8001200 <HAL_ADC_ConvCpltCallback+0x2ec>)
 8001026:	edc3 7a00 	vstr	s15, [r3]
    	ADC1_Check++;
 800102a:	4b76      	ldr	r3, [pc, #472]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x2f0>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001038:	4b72      	ldr	r3, [pc, #456]	@ (8001204 <HAL_ADC_ConvCpltCallback+0x2f0>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
    }
    if (hadc->Instance == ADC2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a71      	ldr	r2, [pc, #452]	@ (8001208 <HAL_ADC_ConvCpltCallback+0x2f4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d17e      	bne.n	8001146 <HAL_ADC_ConvCpltCallback+0x232>
    {
    	float rawIR = ((((float)CurrentadcBuffer[0] * VREF) / ADC_16bRESOLUTION)-CURRENT_R_OFFSET)*CURRENT_R_GAIN;
 8001048:	4b70      	ldr	r3, [pc, #448]	@ (800120c <HAL_ADC_ConvCpltCallback+0x2f8>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001054:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8001058:	ee67 6a87 	vmul.f32	s13, s15, s14
 800105c:	eddf 7a59 	vldr	s15, [pc, #356]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001068:	4b69      	ldr	r3, [pc, #420]	@ (8001210 <HAL_ADC_ConvCpltCallback+0x2fc>)
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001072:	4b68      	ldr	r3, [pc, #416]	@ (8001214 <HAL_ADC_ConvCpltCallback+0x300>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	edc7 7a04 	vstr	s15, [r7, #16]
    	float rawIY = ((((float)CurrentadcBuffer[1] * VREF) / ADC_16bRESOLUTION)-CURRENT_Y_OFFSET)*CURRENT_Y_GAIN;
 8001080:	4b62      	ldr	r3, [pc, #392]	@ (800120c <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001082:	885b      	ldrh	r3, [r3, #2]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8001090:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001094:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 8001098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800109c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_ADC_ConvCpltCallback+0x304>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010aa:	4b5c      	ldr	r3, [pc, #368]	@ (800121c <HAL_ADC_ConvCpltCallback+0x308>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b4:	edc7 7a03 	vstr	s15, [r7, #12]
    	float rawIB = ((((float)CurrentadcBuffer[2] * VREF) / ADC_16bRESOLUTION)-CURRENT_B_OFFSET)*CURRENT_B_GAIN;
 80010b8:	4b54      	ldr	r3, [pc, #336]	@ (800120c <HAL_ADC_ConvCpltCallback+0x2f8>)
 80010ba:	889b      	ldrh	r3, [r3, #4]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 80010c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010cc:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 80010d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010d8:	4b51      	ldr	r3, [pc, #324]	@ (8001220 <HAL_ADC_ConvCpltCallback+0x30c>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010e2:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <HAL_ADC_ConvCpltCallback+0x310>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	edc7 7a02 	vstr	s15, [r7, #8]
    	CURRENT_R_PHASE = applyLowPassFilter(rawIR, CurrentR_Input, CurrentR_Output);
 80010f0:	494d      	ldr	r1, [pc, #308]	@ (8001228 <HAL_ADC_ConvCpltCallback+0x314>)
 80010f2:	484e      	ldr	r0, [pc, #312]	@ (800122c <HAL_ADC_ConvCpltCallback+0x318>)
 80010f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80010f8:	f7ff f90a 	bl	8000310 <applyLowPassFilter>
 80010fc:	eef0 7a40 	vmov.f32	s15, s0
 8001100:	4b4b      	ldr	r3, [pc, #300]	@ (8001230 <HAL_ADC_ConvCpltCallback+0x31c>)
 8001102:	edc3 7a00 	vstr	s15, [r3]
    	CURRENT_Y_PHASE = applyLowPassFilter(rawIY, CurrentY_Input, CurrentY_Output);
 8001106:	494b      	ldr	r1, [pc, #300]	@ (8001234 <HAL_ADC_ConvCpltCallback+0x320>)
 8001108:	484b      	ldr	r0, [pc, #300]	@ (8001238 <HAL_ADC_ConvCpltCallback+0x324>)
 800110a:	ed97 0a03 	vldr	s0, [r7, #12]
 800110e:	f7ff f8ff 	bl	8000310 <applyLowPassFilter>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	4b49      	ldr	r3, [pc, #292]	@ (800123c <HAL_ADC_ConvCpltCallback+0x328>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
    	CURRENT_B_PHASE = applyLowPassFilter(rawIB, CurrentB_Input, CurrentB_Output);
 800111c:	4948      	ldr	r1, [pc, #288]	@ (8001240 <HAL_ADC_ConvCpltCallback+0x32c>)
 800111e:	4849      	ldr	r0, [pc, #292]	@ (8001244 <HAL_ADC_ConvCpltCallback+0x330>)
 8001120:	ed97 0a02 	vldr	s0, [r7, #8]
 8001124:	f7ff f8f4 	bl	8000310 <applyLowPassFilter>
 8001128:	eef0 7a40 	vmov.f32	s15, s0
 800112c:	4b46      	ldr	r3, [pc, #280]	@ (8001248 <HAL_ADC_ConvCpltCallback+0x334>)
 800112e:	edc3 7a00 	vstr	s15, [r3]
    	ADC2_Check++;
 8001132:	4b46      	ldr	r3, [pc, #280]	@ (800124c <HAL_ADC_ConvCpltCallback+0x338>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800113c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001140:	4b42      	ldr	r3, [pc, #264]	@ (800124c <HAL_ADC_ConvCpltCallback+0x338>)
 8001142:	edc3 7a00 	vstr	s15, [r3]
    }
    if (hadc->Instance == ADC3)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a41      	ldr	r2, [pc, #260]	@ (8001250 <HAL_ADC_ConvCpltCallback+0x33c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d12f      	bne.n	80011b0 <HAL_ADC_ConvCpltCallback+0x29c>
    {
    	DC_Voltage = (((float)DCSenseBuffer[0] * VREF) / ADC_16bRESOLUTION);
 8001150:	4b40      	ldr	r3, [pc, #256]	@ (8001254 <HAL_ADC_ConvCpltCallback+0x340>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8001160:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001164:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 8001168:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800116c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001170:	4b39      	ldr	r3, [pc, #228]	@ (8001258 <HAL_ADC_ConvCpltCallback+0x344>)
 8001172:	edc3 7a00 	vstr	s15, [r3]
    	DC_Current = (((float)DCSenseBuffer[1] * VREF) / ADC_16bRESOLUTION);
 8001176:	4b37      	ldr	r3, [pc, #220]	@ (8001254 <HAL_ADC_ConvCpltCallback+0x340>)
 8001178:	885b      	ldrh	r3, [r3, #2]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001182:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80011c0 <HAL_ADC_ConvCpltCallback+0x2ac>
 8001186:	ee67 6a87 	vmul.f32	s13, s15, s14
 800118a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80011c4 <HAL_ADC_ConvCpltCallback+0x2b0>
 800118e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001196:	4b31      	ldr	r3, [pc, #196]	@ (800125c <HAL_ADC_ConvCpltCallback+0x348>)
 8001198:	edc3 7a00 	vstr	s15, [r3]
    	ADC3_Check++;
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_ADC_ConvCpltCallback+0x34c>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_ADC_ConvCpltCallback+0x34c>)
 80011ac:	edc3 7a00 	vstr	s15, [r3]
    }

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40022000 	.word	0x40022000
 80011bc:	24000498 	.word	0x24000498
 80011c0:	40533333 	.word	0x40533333
 80011c4:	0000ffff 	.word	0x0000ffff
 80011c8:	2400000c 	.word	0x2400000c
 80011cc:	24000018 	.word	0x24000018
 80011d0:	24000010 	.word	0x24000010
 80011d4:	2400001c 	.word	0x2400001c
 80011d8:	24000014 	.word	0x24000014
 80011dc:	24000020 	.word	0x24000020
 80011e0:	240004d0 	.word	0x240004d0
 80011e4:	240004c4 	.word	0x240004c4
 80011e8:	24000478 	.word	0x24000478
 80011ec:	240004e8 	.word	0x240004e8
 80011f0:	240004dc 	.word	0x240004dc
 80011f4:	2400047c 	.word	0x2400047c
 80011f8:	24000500 	.word	0x24000500
 80011fc:	240004f4 	.word	0x240004f4
 8001200:	24000480 	.word	0x24000480
 8001204:	240004b8 	.word	0x240004b8
 8001208:	40022100 	.word	0x40022100
 800120c:	240004a0 	.word	0x240004a0
 8001210:	24000024 	.word	0x24000024
 8001214:	24000030 	.word	0x24000030
 8001218:	24000028 	.word	0x24000028
 800121c:	24000034 	.word	0x24000034
 8001220:	2400002c 	.word	0x2400002c
 8001224:	24000038 	.word	0x24000038
 8001228:	24000518 	.word	0x24000518
 800122c:	2400050c 	.word	0x2400050c
 8001230:	24000484 	.word	0x24000484
 8001234:	24000530 	.word	0x24000530
 8001238:	24000524 	.word	0x24000524
 800123c:	24000488 	.word	0x24000488
 8001240:	24000548 	.word	0x24000548
 8001244:	2400053c 	.word	0x2400053c
 8001248:	2400048c 	.word	0x2400048c
 800124c:	240004bc 	.word	0x240004bc
 8001250:	58026000 	.word	0x58026000
 8001254:	240004a8 	.word	0x240004a8
 8001258:	24000490 	.word	0x24000490
 800125c:	24000494 	.word	0x24000494
 8001260:	240004c0 	.word	0x240004c0

08001264 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001276:	f002 fb8f 	bl	8003998 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800127a:	2301      	movs	r3, #1
 800127c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800127e:	2300      	movs	r3, #0
 8001280:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001286:	231f      	movs	r3, #31
 8001288:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800128a:	2387      	movs	r3, #135	@ 0x87
 800128c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800128e:	2300      	movs	r3, #0
 8001290:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001292:	2300      	movs	r3, #0
 8001294:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001296:	2301      	movs	r3, #1
 8001298:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800129a:	2301      	movs	r3, #1
 800129c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012a6:	463b      	mov	r3, r7
 80012a8:	4618      	mov	r0, r3
 80012aa:	f002 fbad 	bl	8003a08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012ae:	2004      	movs	r0, #4
 80012b0:	f002 fb8a 	bl	80039c8 <HAL_MPU_Enable>

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <Error_Handler+0x8>

080012c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <HAL_MspInit+0x30>)
 80012d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012d4:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_MspInit+0x30>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_MspInit+0x30>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	58024400 	.word	0x58024400

080012fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	@ 0x40
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a84      	ldr	r2, [pc, #528]	@ (800152c <HAL_ADC_MspInit+0x230>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d17f      	bne.n	800141e <HAL_ADC_MspInit+0x122>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800131e:	4b84      	ldr	r3, [pc, #528]	@ (8001530 <HAL_ADC_MspInit+0x234>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a82      	ldr	r2, [pc, #520]	@ (8001530 <HAL_ADC_MspInit+0x234>)
 8001326:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001328:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <HAL_ADC_MspInit+0x234>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10e      	bne.n	800134e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001330:	4b80      	ldr	r3, [pc, #512]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001332:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001336:	4a7f      	ldr	r2, [pc, #508]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001340:	4b7c      	ldr	r3, [pc, #496]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001346:	f003 0320 	and.w	r3, r3, #32
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b79      	ldr	r3, [pc, #484]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001354:	4a77      	ldr	r2, [pc, #476]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800135e:	4b75      	ldr	r3, [pc, #468]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800136c:	4b71      	ldr	r3, [pc, #452]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001372:	4a70      	ldr	r2, [pc, #448]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137c:	4b6d      	ldr	r3, [pc, #436]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138a:	2340      	movs	r3, #64	@ 0x40
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800139a:	4619      	mov	r1, r3
 800139c:	4866      	ldr	r0, [pc, #408]	@ (8001538 <HAL_ADC_MspInit+0x23c>)
 800139e:	f004 fc47 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b4:	4619      	mov	r1, r3
 80013b6:	4861      	ldr	r0, [pc, #388]	@ (800153c <HAL_ADC_MspInit+0x240>)
 80013b8:	f004 fc3a 	bl	8005c30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80013bc:	4b60      	ldr	r3, [pc, #384]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013be:	4a61      	ldr	r2, [pc, #388]	@ (8001544 <HAL_ADC_MspInit+0x248>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013c4:	2209      	movs	r2, #9
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013d4:	4b5a      	ldr	r3, [pc, #360]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013dc:	4b58      	ldr	r3, [pc, #352]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013e4:	4b56      	ldr	r3, [pc, #344]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013ec:	4b54      	ldr	r3, [pc, #336]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013f4:	4b52      	ldr	r3, [pc, #328]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fa:	4b51      	ldr	r3, [pc, #324]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001400:	484f      	ldr	r0, [pc, #316]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 8001402:	f002 fb41 	bl	8003a88 <HAL_DMA_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 800140c:	f7ff ff56 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a4b      	ldr	r2, [pc, #300]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 8001414:	659a      	str	r2, [r3, #88]	@ 0x58
 8001416:	4a4a      	ldr	r2, [pc, #296]	@ (8001540 <HAL_ADC_MspInit+0x244>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800141c:	e10f      	b.n	800163e <HAL_ADC_MspInit+0x342>
  else if(hadc->Instance==ADC2)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a49      	ldr	r2, [pc, #292]	@ (8001548 <HAL_ADC_MspInit+0x24c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	f040 8095 	bne.w	8001554 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_ADC_MspInit+0x234>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a3f      	ldr	r2, [pc, #252]	@ (8001530 <HAL_ADC_MspInit+0x234>)
 8001432:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <HAL_ADC_MspInit+0x234>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10e      	bne.n	800145a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800143e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001442:	4a3c      	ldr	r2, [pc, #240]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800144c:	4b39      	ldr	r3, [pc, #228]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800144e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b36      	ldr	r3, [pc, #216]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001460:	4a34      	ldr	r2, [pc, #208]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146a:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001478:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147e:	4a2d      	ldr	r2, [pc, #180]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001488:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <HAL_ADC_MspInit+0x238>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001496:	2310      	movs	r3, #16
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014a6:	4619      	mov	r1, r3
 80014a8:	4823      	ldr	r0, [pc, #140]	@ (8001538 <HAL_ADC_MspInit+0x23c>)
 80014aa:	f004 fbc1 	bl	8005c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014ae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b4:	2303      	movs	r3, #3
 80014b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	481e      	ldr	r0, [pc, #120]	@ (800153c <HAL_ADC_MspInit+0x240>)
 80014c4:	f004 fbb4 	bl	8005c30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014ca:	4a21      	ldr	r2, [pc, #132]	@ (8001550 <HAL_ADC_MspInit+0x254>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014d0:	220a      	movs	r2, #10
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014f6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014f8:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_ADC_MspInit+0x250>)
 80014fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_ADC_MspInit+0x250>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_ADC_MspInit+0x250>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800150c:	480f      	ldr	r0, [pc, #60]	@ (800154c <HAL_ADC_MspInit+0x250>)
 800150e:	f002 fabb 	bl	8003a88 <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_ADC_MspInit+0x220>
      Error_Handler();
 8001518:	f7ff fed0 	bl	80012bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <HAL_ADC_MspInit+0x250>)
 8001520:	659a      	str	r2, [r3, #88]	@ 0x58
 8001522:	4a0a      	ldr	r2, [pc, #40]	@ (800154c <HAL_ADC_MspInit+0x250>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001528:	e089      	b.n	800163e <HAL_ADC_MspInit+0x342>
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000
 8001530:	24000554 	.word	0x24000554
 8001534:	58024400 	.word	0x58024400
 8001538:	58020000 	.word	0x58020000
 800153c:	58021400 	.word	0x58021400
 8001540:	24000224 	.word	0x24000224
 8001544:	40020010 	.word	0x40020010
 8001548:	40022100 	.word	0x40022100
 800154c:	2400029c 	.word	0x2400029c
 8001550:	40020028 	.word	0x40020028
  else if(hadc->Instance==ADC3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a3b      	ldr	r2, [pc, #236]	@ (8001648 <HAL_ADC_MspInit+0x34c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d16f      	bne.n	800163e <HAL_ADC_MspInit+0x342>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800155e:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <HAL_ADC_MspInit+0x350>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001564:	4a39      	ldr	r2, [pc, #228]	@ (800164c <HAL_ADC_MspInit+0x350>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <HAL_ADC_MspInit+0x350>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800157c:	4b33      	ldr	r3, [pc, #204]	@ (800164c <HAL_ADC_MspInit+0x350>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001582:	4a32      	ldr	r2, [pc, #200]	@ (800164c <HAL_ADC_MspInit+0x350>)
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <HAL_ADC_MspInit+0x350>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <HAL_ADC_MspInit+0x350>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	4a2a      	ldr	r2, [pc, #168]	@ (800164c <HAL_ADC_MspInit+0x350>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <HAL_ADC_MspInit+0x350>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015be:	2303      	movs	r3, #3
 80015c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4820      	ldr	r0, [pc, #128]	@ (8001650 <HAL_ADC_MspInit+0x354>)
 80015ce:	f004 fb2f 	bl	8005c30 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80015d2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80015d6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80015da:	f000 fad1 	bl	8001b80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream2;
 80015de:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_ADC_MspInit+0x35c>)
 80015e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 80015e6:	2273      	movs	r2, #115	@ 0x73
 80015e8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 80015f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015fc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 8001600:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001604:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 8001608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800160c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 8001610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001614:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161c:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001622:	480c      	ldr	r0, [pc, #48]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 8001624:	f002 fa30 	bl	8003a88 <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_ADC_MspInit+0x336>
      Error_Handler();
 800162e:	f7ff fe45 	bl	80012bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 8001636:	659a      	str	r2, [r3, #88]	@ 0x58
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_ADC_MspInit+0x358>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800163e:	bf00      	nop
 8001640:	3740      	adds	r7, #64	@ 0x40
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	58026000 	.word	0x58026000
 800164c:	58024400 	.word	0x58024400
 8001650:	58021400 	.word	0x58021400
 8001654:	24000314 	.word	0x24000314
 8001658:	40020440 	.word	0x40020440

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2b      	ldr	r2, [pc, #172]	@ (8001718 <HAL_TIM_Base_MspInit+0xbc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d117      	bne.n	800169e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 8001670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001674:	4a29      	ldr	r2, [pc, #164]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800167e:	4b27      	ldr	r3, [pc, #156]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 8001680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2019      	movs	r0, #25
 8001692:	f002 f94c 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001696:	2019      	movs	r0, #25
 8001698:	f002 f963 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800169c:	e038      	b.n	8001710 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a6:	d117      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a8:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 80016aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ae:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 80016ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	201c      	movs	r0, #28
 80016cc:	f002 f92f 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d0:	201c      	movs	r0, #28
 80016d2:	f002 f946 	bl	8003962 <HAL_NVIC_EnableIRQ>
}
 80016d6:	e01b      	b.n	8001710 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM8)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a10      	ldr	r2, [pc, #64]	@ (8001720 <HAL_TIM_Base_MspInit+0xc4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d116      	bne.n	8001710 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 80016e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016e8:	4a0c      	ldr	r2, [pc, #48]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_TIM_Base_MspInit+0xc0>)
 80016f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	202c      	movs	r0, #44	@ 0x2c
 8001706:	f002 f912 	bl	800392e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800170a:	202c      	movs	r0, #44	@ 0x2c
 800170c:	f002 f929 	bl	8003962 <HAL_NVIC_EnableIRQ>
}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40010000 	.word	0x40010000
 800171c:	58024400 	.word	0x58024400
 8001720:	40010400 	.word	0x40010400

08001724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a22      	ldr	r2, [pc, #136]	@ (80017cc <HAL_TIM_MspPostInit+0xa8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d13e      	bne.n	80017c4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <HAL_TIM_MspPostInit+0xac>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	4a20      	ldr	r2, [pc, #128]	@ (80017d0 <HAL_TIM_MspPostInit+0xac>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <HAL_TIM_MspPostInit+0xac>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <HAL_TIM_MspPostInit+0xac>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	4a19      	ldr	r2, [pc, #100]	@ (80017d0 <HAL_TIM_MspPostInit+0xac>)
 800176c:	f043 0310 	orr.w	r3, r3, #16
 8001770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_TIM_MspPostInit+0xac>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001782:	2303      	movs	r3, #3
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001792:	2301      	movs	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <HAL_TIM_MspPostInit+0xb0>)
 800179e:	f004 fa47 	bl	8005c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80017a2:	f44f 532c 	mov.w	r3, #11008	@ 0x2b00
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 80017c0:	f004 fa36 	bl	8005c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	@ 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40010000 	.word	0x40010000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58020400 	.word	0x58020400
 80017d8:	58021000 	.word	0x58021000

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f985 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DMA1_Stream0_IRQHandler+0x10>)
 8001842:	f002 fee3 	bl	800460c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000224 	.word	0x24000224

08001850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <DMA1_Stream1_IRQHandler+0x10>)
 8001856:	f002 fed9 	bl	800460c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2400029c 	.word	0x2400029c

08001864 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001868:	4802      	ldr	r0, [pc, #8]	@ (8001874 <TIM1_UP_IRQHandler+0x10>)
 800186a:	f008 f955 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2400038c 	.word	0x2400038c

08001878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM2_IRQHandler+0x10>)
 800187e:	f008 f94b 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	240003d8 	.word	0x240003d8

0800188c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001892:	f008 f941 	bl	8009b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24000424 	.word	0x24000424

080018a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <DMA2_Stream2_IRQHandler+0x10>)
 80018a6:	f002 feb1 	bl	800460c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000314 	.word	0x24000314

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018b8:	4b3e      	ldr	r3, [pc, #248]	@ (80019b4 <SystemInit+0x100>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a3d      	ldr	r2, [pc, #244]	@ (80019b4 <SystemInit+0x100>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018c8:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <SystemInit+0x104>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	2b06      	cmp	r3, #6
 80018d2:	d807      	bhi.n	80018e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018d4:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <SystemInit+0x104>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 030f 	bic.w	r3, r3, #15
 80018dc:	4a36      	ldr	r2, [pc, #216]	@ (80019b8 <SystemInit+0x104>)
 80018de:	f043 0307 	orr.w	r3, r3, #7
 80018e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018e4:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <SystemInit+0x108>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a34      	ldr	r2, [pc, #208]	@ (80019bc <SystemInit+0x108>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018f0:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <SystemInit+0x108>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018f6:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <SystemInit+0x108>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4930      	ldr	r1, [pc, #192]	@ (80019bc <SystemInit+0x108>)
 80018fc:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <SystemInit+0x10c>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001902:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <SystemInit+0x104>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <SystemInit+0x104>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 030f 	bic.w	r3, r3, #15
 8001916:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <SystemInit+0x104>)
 8001918:	f043 0307 	orr.w	r3, r3, #7
 800191c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800191e:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <SystemInit+0x108>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001924:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <SystemInit+0x108>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <SystemInit+0x108>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <SystemInit+0x108>)
 8001932:	4a24      	ldr	r2, [pc, #144]	@ (80019c4 <SystemInit+0x110>)
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <SystemInit+0x108>)
 8001938:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <SystemInit+0x114>)
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <SystemInit+0x108>)
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <SystemInit+0x118>)
 8001940:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <SystemInit+0x108>)
 8001944:	2200      	movs	r2, #0
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <SystemInit+0x108>)
 800194a:	4a20      	ldr	r2, [pc, #128]	@ (80019cc <SystemInit+0x118>)
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <SystemInit+0x108>)
 8001950:	2200      	movs	r2, #0
 8001952:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <SystemInit+0x108>)
 8001956:	4a1d      	ldr	r2, [pc, #116]	@ (80019cc <SystemInit+0x118>)
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <SystemInit+0x108>)
 800195c:	2200      	movs	r2, #0
 800195e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <SystemInit+0x108>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <SystemInit+0x108>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <SystemInit+0x108>)
 800196e:	2200      	movs	r2, #0
 8001970:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <SystemInit+0x108>)
 8001974:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d113      	bne.n	80019a8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <SystemInit+0x108>)
 8001982:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001986:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <SystemInit+0x108>)
 8001988:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800198c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <SystemInit+0x11c>)
 8001992:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001996:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <SystemInit+0x108>)
 800199a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800199e:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <SystemInit+0x108>)
 80019a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019a4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	52002000 	.word	0x52002000
 80019bc:	58024400 	.word	0x58024400
 80019c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80019c4:	02020200 	.word	0x02020200
 80019c8:	01ff0000 	.word	0x01ff0000
 80019cc:	01010280 	.word	0x01010280
 80019d0:	52004000 	.word	0x52004000

080019d4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <ExitRun0Mode+0x2c>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <ExitRun0Mode+0x2c>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019e4:	bf00      	nop
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <ExitRun0Mode+0x2c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f9      	beq.n	80019e6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	58024800 	.word	0x58024800

08001a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a40 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001a08:	f7ff ffe4 	bl	80019d4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a0c:	f7ff ff52 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f009 ffe5 	bl	800ba04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7fe fccd 	bl	80003d8 <main>
  bx  lr
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a48:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 8001a4c:	0800cb48 	.word	0x0800cb48
  ldr r2, =_sbss
 8001a50:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8001a54:	24000790 	.word	0x24000790

08001a58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC3_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f001 ff58 	bl	8003918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a68:	f005 f854 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <HAL_Init+0x68>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	4913      	ldr	r1, [pc, #76]	@ (8001ac8 <HAL_Init+0x6c>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_Init+0x68>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <HAL_Init+0x6c>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <HAL_Init+0x70>)
 8001a9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <HAL_Init+0x74>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 f814 	bl	8001ad4 <HAL_InitTick>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e002      	b.n	8001abc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab6:	f7ff fc07 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	0800c940 	.word	0x0800c940
 8001acc:	24000040 	.word	0x24000040
 8001ad0:	2400003c 	.word	0x2400003c

08001ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001adc:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_InitTick+0x60>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e021      	b.n	8001b2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <HAL_InitTick+0x64>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_InitTick+0x60>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 ff3d 	bl	800397e <HAL_SYSTICK_Config>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00e      	b.n	8001b2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0f      	cmp	r3, #15
 8001b12:	d80a      	bhi.n	8001b2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b14:	2200      	movs	r2, #0
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f001 ff07 	bl	800392e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b20:	4a06      	ldr	r2, [pc, #24]	@ (8001b3c <HAL_InitTick+0x68>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	24000048 	.word	0x24000048
 8001b38:	2400003c 	.word	0x2400003c
 8001b3c:	24000044 	.word	0x24000044

08001b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_IncTick+0x24>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <HAL_IncTick+0x24>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	24000048 	.word	0x24000048
 8001b64:	24000558 	.word	0x24000558

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	24000558 	.word	0x24000558

08001b80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	401a      	ands	r2, r3
 8001b94:	4904      	ldr	r1, [pc, #16]	@ (8001ba8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	58000400 	.word	0x58000400

08001bac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <LL_ADC_SetChannelPreselection+0x70>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d027      	beq.n	8001c76 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <LL_ADC_SetChannelPreselection+0x2c>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	0e9b      	lsrs	r3, r3, #26
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2201      	movs	r2, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	e015      	b.n	8001c6c <LL_ADC_SetChannelPreselection+0x58>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e003      	b.n	8001c62 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2201      	movs	r2, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	69d2      	ldr	r2, [r2, #28]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8001c76:	bf00      	nop
 8001c78:	371c      	adds	r7, #28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	58026000 	.word	0x58026000

08001c88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3360      	adds	r3, #96	@ 0x60
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <LL_ADC_SetOffset+0x60>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d10b      	bne.n	8001cc4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cc2:	e00b      	b.n	8001cdc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	58026000 	.word	0x58026000

08001cec <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3360      	adds	r3, #96	@ 0x60
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	611a      	str	r2, [r3, #16]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d8c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00e      	beq.n	8001d7e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3360      	adds	r3, #96	@ 0x60
 8001d64:	461a      	mov	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	601a      	str	r2, [r3, #0]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	58026000 	.word	0x58026000

08001d90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd0 <LL_ADC_SetOffsetSaturation+0x40>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d10e      	bne.n	8001dc2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3360      	adds	r3, #96	@ 0x60
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	58026000 	.word	0x58026000

08001dd4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <LL_ADC_SetOffsetSign+0x40>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d10e      	bne.n	8001e06 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3360      	adds	r3, #96	@ 0x60
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001e06:	bf00      	nop
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	58026000 	.word	0x58026000

08001e18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3360      	adds	r3, #96	@ 0x60
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <LL_ADC_SetOffsetState+0x50>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d108      	bne.n	8001e4c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001e4a:	e007      	b.n	8001e5c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	58026000 	.word	0x58026000

08001e6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3330      	adds	r3, #48	@ 0x30
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	211f      	movs	r1, #31
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	0e9b      	lsrs	r3, r3, #26
 8001eca:	f003 011f 	and.w	r1, r3, #31
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f023 0203 	bic.w	r2, r3, #3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d107      	bne.n	8001f52 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60da      	str	r2, [r3, #12]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	58026000 	.word	0x58026000

08001f64 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3314      	adds	r3, #20
 8001f74:	461a      	mov	r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	0e5b      	lsrs	r3, r3, #25
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	0d1b      	lsrs	r3, r3, #20
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	2107      	movs	r1, #7
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	401a      	ands	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	0d1b      	lsrs	r3, r3, #20
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a1a      	ldr	r2, [pc, #104]	@ (8002034 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d115      	bne.n	8001ffc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f003 0318 	and.w	r3, r3, #24
 8001fe6:	4914      	ldr	r1, [pc, #80]	@ (8002038 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001fe8:	40d9      	lsrs	r1, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	400b      	ands	r3, r1
 8001fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ffa:	e014      	b.n	8002026 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002008:	43db      	mvns	r3, r3
 800200a:	401a      	ands	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0318 	and.w	r3, r3, #24
 8002012:	4909      	ldr	r1, [pc, #36]	@ (8002038 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002014:	40d9      	lsrs	r1, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	400b      	ands	r3, r1
 800201a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800201e:	431a      	orrs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	58026000 	.word	0x58026000
 8002038:	000fffff 	.word	0x000fffff

0800203c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 031f 	and.w	r3, r3, #31
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6093      	str	r3, [r2, #8]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	5fffffc0 	.word	0x5fffffc0

0800207c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800208c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002090:	d101      	bne.n	8002096 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	6fffffc0 	.word	0x6fffffc0

080020cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <LL_ADC_Enable+0x24>)
 8002102:	4013      	ands	r3, r2
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	7fffffc0 	.word	0x7fffffc0

0800211c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <LL_ADC_IsEnabled+0x18>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <LL_ADC_IsEnabled+0x1a>
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <LL_ADC_REG_StartConversion+0x24>)
 8002152:	4013      	ands	r3, r2
 8002154:	f043 0204 	orr.w	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	7fffffc0 	.word	0x7fffffc0

0800216c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b04      	cmp	r3, #4
 800217e:	d101      	bne.n	8002184 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d101      	bne.n	80021aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1ee      	b.n	80025b0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff f88b 	bl	80012fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff3f 	bl	800207c <LL_ADC_IsDeepPowerDownEnabled>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff25 	bl	8002058 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff5a 	bl	80020cc <LL_ADC_IsInternalRegulatorEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d114      	bne.n	8002248 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff3e 	bl	80020a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002228:	4b8e      	ldr	r3, [pc, #568]	@ (8002464 <HAL_ADC_Init+0x2ac>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	4a8e      	ldr	r2, [pc, #568]	@ (8002468 <HAL_ADC_Init+0x2b0>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	3301      	adds	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800223a:	e002      	b.n	8002242 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3b01      	subs	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f9      	bne.n	800223c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff3d 	bl	80020cc <LL_ADC_IsInternalRegulatorEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10d      	bne.n	8002274 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800225c:	f043 0210 	orr.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff77 	bl	800216c <LL_ADC_REG_IsConversionOngoing>
 800227e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 8188 	bne.w	800259e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f040 8184 	bne.w	800259e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800229e:	f043 0202 	orr.w	r2, r3, #2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff36 	bl	800211c <LL_ADC_IsEnabled>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d136      	bne.n	8002324 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a6c      	ldr	r2, [pc, #432]	@ (800246c <HAL_ADC_Init+0x2b4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_Init+0x112>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002470 <HAL_ADC_Init+0x2b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10e      	bne.n	80022e8 <HAL_ADC_Init+0x130>
 80022ca:	4868      	ldr	r0, [pc, #416]	@ (800246c <HAL_ADC_Init+0x2b4>)
 80022cc:	f7ff ff26 	bl	800211c <LL_ADC_IsEnabled>
 80022d0:	4604      	mov	r4, r0
 80022d2:	4867      	ldr	r0, [pc, #412]	@ (8002470 <HAL_ADC_Init+0x2b8>)
 80022d4:	f7ff ff22 	bl	800211c <LL_ADC_IsEnabled>
 80022d8:	4603      	mov	r3, r0
 80022da:	4323      	orrs	r3, r4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e008      	b.n	80022fa <HAL_ADC_Init+0x142>
 80022e8:	4862      	ldr	r0, [pc, #392]	@ (8002474 <HAL_ADC_Init+0x2bc>)
 80022ea:	f7ff ff17 	bl	800211c <LL_ADC_IsEnabled>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5a      	ldr	r2, [pc, #360]	@ (800246c <HAL_ADC_Init+0x2b4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_ADC_Init+0x15a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_ADC_Init+0x2b8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x15e>
 8002312:	4a59      	ldr	r2, [pc, #356]	@ (8002478 <HAL_ADC_Init+0x2c0>)
 8002314:	e000      	b.n	8002318 <HAL_ADC_Init+0x160>
 8002316:	4a59      	ldr	r2, [pc, #356]	@ (800247c <HAL_ADC_Init+0x2c4>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f7ff fc44 	bl	8001bac <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a52      	ldr	r2, [pc, #328]	@ (8002474 <HAL_ADC_Init+0x2bc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d129      	bne.n	8002382 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	7e5b      	ldrb	r3, [r3, #25]
 8002332:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002338:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800233e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d013      	beq.n	8002370 <HAL_ADC_Init+0x1b8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b0c      	cmp	r3, #12
 800234e:	d00d      	beq.n	800236c <HAL_ADC_Init+0x1b4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b1c      	cmp	r3, #28
 8002356:	d007      	beq.n	8002368 <HAL_ADC_Init+0x1b0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b18      	cmp	r3, #24
 800235e:	d101      	bne.n	8002364 <HAL_ADC_Init+0x1ac>
 8002360:	2318      	movs	r3, #24
 8002362:	e006      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 8002364:	2300      	movs	r3, #0
 8002366:	e004      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 8002368:	2310      	movs	r3, #16
 800236a:	e002      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 800236c:	2308      	movs	r3, #8
 800236e:	e000      	b.n	8002372 <HAL_ADC_Init+0x1ba>
 8002370:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002372:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e00e      	b.n	80023a0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7e5b      	ldrb	r3, [r3, #25]
 8002386:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800238c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002392:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	3b01      	subs	r3, #1
 80023b0:	045b      	lsls	r3, r3, #17
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a26      	ldr	r2, [pc, #152]	@ (8002474 <HAL_ADC_Init+0x2bc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d115      	bne.n	800240a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b26      	ldr	r3, [pc, #152]	@ (8002480 <HAL_ADC_Init+0x2c8>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	69b9      	ldr	r1, [r7, #24]
 80023ee:	430b      	orrs	r3, r1
 80023f0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	e009      	b.n	800241e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <HAL_ADC_Init+0x2cc>)
 8002412:	4013      	ands	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	69b9      	ldr	r1, [r7, #24]
 800241a:	430b      	orrs	r3, r1
 800241c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fea2 	bl	800216c <LL_ADC_REG_IsConversionOngoing>
 8002428:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff feaf 	bl	8002192 <LL_ADC_INJ_IsConversionOngoing>
 8002434:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 808e 	bne.w	800255a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 808a 	bne.w	800255a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <HAL_ADC_Init+0x2bc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d11b      	bne.n	8002488 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
 8002454:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800245c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	e018      	b.n	8002496 <HAL_ADC_Init+0x2de>
 8002464:	2400003c 	.word	0x2400003c
 8002468:	053e2d63 	.word	0x053e2d63
 800246c:	40022000 	.word	0x40022000
 8002470:	40022100 	.word	0x40022100
 8002474:	58026000 	.word	0x58026000
 8002478:	40022300 	.word	0x40022300
 800247c:	58026300 	.word	0x58026300
 8002480:	fff04007 	.word	0xfff04007
 8002484:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7e1b      	ldrb	r3, [r3, #24]
 800248c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <HAL_ADC_Init+0x400>)
 800249e:	4013      	ands	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	430b      	orrs	r3, r1
 80024a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d137      	bne.n	8002524 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a3f      	ldr	r2, [pc, #252]	@ (80025bc <HAL_ADC_Init+0x404>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d116      	bne.n	80024f2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	4b3d      	ldr	r3, [pc, #244]	@ (80025c0 <HAL_ADC_Init+0x408>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024dc:	4311      	orrs	r1, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80024e2:	430a      	orrs	r2, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	611a      	str	r2, [r3, #16]
 80024f0:	e020      	b.n	8002534 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <HAL_ADC_Init+0x40c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002500:	3a01      	subs	r2, #1
 8002502:	0411      	lsls	r1, r2, #16
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002514:	430a      	orrs	r2, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	611a      	str	r2, [r3, #16]
 8002522:	e007      	b.n	8002534 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_ADC_Init+0x404>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 ff19 	bl	800338c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d10c      	bne.n	800257c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	f023 010f 	bic.w	r1, r3, #15
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
 800257a:	e007      	b.n	800258c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 020f 	bic.w	r2, r2, #15
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002590:	f023 0303 	bic.w	r3, r3, #3
 8002594:	f043 0201 	orr.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	661a      	str	r2, [r3, #96]	@ 0x60
 800259c:	e007      	b.n	80025ae <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a2:	f043 0210 	orr.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3724      	adds	r7, #36	@ 0x24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd90      	pop	{r4, r7, pc}
 80025b8:	ffffbffc 	.word	0xffffbffc
 80025bc:	58026000 	.word	0x58026000
 80025c0:	fc00f81f 	.word	0xfc00f81f
 80025c4:	fc00f81e 	.word	0xfc00f81e

080025c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a60      	ldr	r2, [pc, #384]	@ (800275c <HAL_ADC_Start_DMA+0x194>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_ADC_Start_DMA+0x20>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002760 <HAL_ADC_Start_DMA+0x198>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_Start_DMA+0x24>
 80025e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002764 <HAL_ADC_Start_DMA+0x19c>)
 80025ea:	e000      	b.n	80025ee <HAL_ADC_Start_DMA+0x26>
 80025ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002768 <HAL_ADC_Start_DMA+0x1a0>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fd24 	bl	800203c <LL_ADC_GetMultimode>
 80025f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fdb6 	bl	800216c <LL_ADC_REG_IsConversionOngoing>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 80a2 	bne.w	800274c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Start_DMA+0x4e>
 8002612:	2302      	movs	r3, #2
 8002614:	e09d      	b.n	8002752 <HAL_ADC_Start_DMA+0x18a>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d003      	beq.n	8002632 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b09      	cmp	r3, #9
 800262e:	f040 8086 	bne.w	800273e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fd8c 	bl	8003150 <ADC_Enable>
 8002638:	4603      	mov	r3, r0
 800263a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d178      	bne.n	8002734 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002646:	4b49      	ldr	r3, [pc, #292]	@ (800276c <HAL_ADC_Start_DMA+0x1a4>)
 8002648:	4013      	ands	r3, r2
 800264a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a42      	ldr	r2, [pc, #264]	@ (8002760 <HAL_ADC_Start_DMA+0x198>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d002      	beq.n	8002662 <HAL_ADC_Start_DMA+0x9a>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	e000      	b.n	8002664 <HAL_ADC_Start_DMA+0x9c>
 8002662:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <HAL_ADC_Start_DMA+0x194>)
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4293      	cmp	r3, r2
 800266a:	d002      	beq.n	8002672 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002676:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d006      	beq.n	8002698 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800268e:	f023 0206 	bic.w	r2, r3, #6
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	665a      	str	r2, [r3, #100]	@ 0x64
 8002696:	e002      	b.n	800269e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	4a33      	ldr	r2, [pc, #204]	@ (8002770 <HAL_ADC_Start_DMA+0x1a8>)
 80026a4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	4a32      	ldr	r2, [pc, #200]	@ (8002774 <HAL_ADC_Start_DMA+0x1ac>)
 80026ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	4a31      	ldr	r2, [pc, #196]	@ (8002778 <HAL_ADC_Start_DMA+0x1b0>)
 80026b4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	221c      	movs	r2, #28
 80026bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0210 	orr.w	r2, r2, #16
 80026d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a28      	ldr	r2, [pc, #160]	@ (800277c <HAL_ADC_Start_DMA+0x1b4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10f      	bne.n	8002700 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f7ff fc1e 	bl	8001f30 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fc09 	bl	8001f10 <LL_ADC_EnableDMAReq>
 80026fe:	e007      	b.n	8002710 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7ff fbed 	bl	8001eea <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3340      	adds	r3, #64	@ 0x40
 800271a:	4619      	mov	r1, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f001 fd0a 	bl	8004138 <HAL_DMA_Start_IT>
 8002724:	4603      	mov	r3, r0
 8002726:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fd09 	bl	8002144 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002732:	e00d      	b.n	8002750 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800273c:	e008      	b.n	8002750 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800274a:	e001      	b.n	8002750 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800274c:	2302      	movs	r3, #2
 800274e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002750:	7dfb      	ldrb	r3, [r7, #23]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000
 8002760:	40022100 	.word	0x40022100
 8002764:	40022300 	.word	0x40022300
 8002768:	58026300 	.word	0x58026300
 800276c:	fffff0fe 	.word	0xfffff0fe
 8002770:	08003265 	.word	0x08003265
 8002774:	0800333d 	.word	0x0800333d
 8002778:	08003359 	.word	0x08003359
 800277c:	58026000 	.word	0x58026000

08002780 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b0a5      	sub	sp, #148	@ 0x94
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027c2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4aa4      	ldr	r2, [pc, #656]	@ (8002a5c <HAL_ADC_ConfigChannel+0x2b4>)
 80027ca:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d102      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x34>
 80027d6:	2302      	movs	r3, #2
 80027d8:	f000 bca2 	b.w	8003120 <HAL_ADC_ConfigChannel+0x978>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fcbf 	bl	800216c <LL_ADC_REG_IsConversionOngoing>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 8486 	bne.w	8003102 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db31      	blt.n	8002862 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a97      	ldr	r2, [pc, #604]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2b8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d02c      	beq.n	8002862 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002810:	2b00      	cmp	r3, #0
 8002812:	d108      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x7e>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	2201      	movs	r2, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	e016      	b.n	8002854 <HAL_ADC_ConfigChannel+0xac>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002834:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002836:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800283e:	2320      	movs	r3, #32
 8002840:	e003      	b.n	800284a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8002842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2201      	movs	r2, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	69d1      	ldr	r1, [r2, #28]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	430b      	orrs	r3, r1
 8002860:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	f7ff fb0f 	bl	8001e92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fc77 	bl	800216c <LL_ADC_REG_IsConversionOngoing>
 800287e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fc83 	bl	8002192 <LL_ADC_INJ_IsConversionOngoing>
 800288c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 824a 	bne.w	8002d2e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800289a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 8245 	bne.w	8002d2e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f7ff fb57 	bl	8001f64 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a69      	ldr	r2, [pc, #420]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2b8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10d      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	08db      	lsrs	r3, r3, #3
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028da:	e032      	b.n	8002942 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028dc:	4b61      	ldr	r3, [pc, #388]	@ (8002a64 <HAL_ADC_ConfigChannel+0x2bc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80028e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028e8:	d10b      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x15a>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	e01d      	b.n	800293e <HAL_ADC_ConfigChannel+0x196>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10b      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x180>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	e00a      	b.n	800293e <HAL_ADC_ConfigChannel+0x196>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b04      	cmp	r3, #4
 8002948:	d048      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6919      	ldr	r1, [r3, #16]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800295a:	f7ff f995 	bl	8001c88 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a3f      	ldr	r2, [pc, #252]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2b8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d119      	bne.n	800299c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6919      	ldr	r1, [r3, #16]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	461a      	mov	r2, r3
 8002976:	f7ff fa2d 	bl	8001dd4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x1ea>
 800298c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002990:	e000      	b.n	8002994 <HAL_ADC_ConfigChannel+0x1ec>
 8002992:	2300      	movs	r3, #0
 8002994:	461a      	mov	r2, r3
 8002996:	f7ff f9fb 	bl	8001d90 <LL_ADC_SetOffsetSaturation>
 800299a:	e1c8      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6919      	ldr	r1, [r3, #16]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x20c>
 80029ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80029b2:	e000      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x20e>
 80029b4:	2300      	movs	r3, #0
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7ff f9c8 	bl	8001d4c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6919      	ldr	r1, [r3, #16]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	7e1b      	ldrb	r3, [r3, #24]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d102      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x22a>
 80029cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029d0:	e000      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x22c>
 80029d2:	2300      	movs	r3, #0
 80029d4:	461a      	mov	r2, r3
 80029d6:	f7ff f99f 	bl	8001d18 <LL_ADC_SetDataRightShift>
 80029da:	e1a8      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_ADC_ConfigChannel+0x2b8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	f040 815b 	bne.w	8002c9e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f97c 	bl	8001cec <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x26c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff f971 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	e017      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x29c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f966 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8002a3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x2c0>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e017      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x2e4>
 8002a5c:	47ff0000 	.word	0x47ff0000
 8002a60:	58026000 	.word	0x58026000
 8002a64:	5c001000 	.word	0x5c001000
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e003      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002a84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d106      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f9bd 	bl	8001e18 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f921 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x322>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f916 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	f003 021f 	and.w	r2, r3, #31
 8002ac8:	e017      	b.n	8002afa <HAL_ADC_ConfigChannel+0x352>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f90b 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e003      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x36a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0e9b      	lsrs	r3, r3, #26
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	e011      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x38e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f968 	bl	8001e18 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f8cc 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x3cc>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f8c1 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	e017      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x3fc>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f8b6 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x414>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	e011      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x438>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e003      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d106      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2102      	movs	r1, #2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f913 	bl	8001e18 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f877 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10a      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x476>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f86c 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	0e9b      	lsrs	r3, r3, #26
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	e017      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x4a6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2103      	movs	r1, #3
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f861 	bl	8001cec <LL_ADC_GetOffsetChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	61fb      	str	r3, [r7, #28]
  return result;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x4be>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	e011      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x4e2>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	613b      	str	r3, [r7, #16]
  return result;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002c7e:	2320      	movs	r3, #32
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d14f      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2103      	movs	r1, #3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f8be 	bl	8001e18 <LL_ADC_SetOffsetState>
 8002c9c:	e047      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cc0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	069b      	lsls	r3, r3, #26
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002ce4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	069b      	lsls	r3, r3, #26
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d107      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d08:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	069b      	lsls	r3, r3, #26
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d107      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d2c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f9f2 	bl	800211c <LL_ADC_IsEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 81ea 	bne.w	8003114 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f7ff f935 	bl	8001fbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	@ (8002f40 <HAL_ADC_ConfigChannel+0x798>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	f040 80e0 	bne.w	8002f1e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4977      	ldr	r1, [pc, #476]	@ (8002f44 <HAL_ADC_ConfigChannel+0x79c>)
 8002d68:	428b      	cmp	r3, r1
 8002d6a:	d147      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x654>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4975      	ldr	r1, [pc, #468]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7a0>)
 8002d72:	428b      	cmp	r3, r1
 8002d74:	d040      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x650>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4974      	ldr	r1, [pc, #464]	@ (8002f4c <HAL_ADC_ConfigChannel+0x7a4>)
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	d039      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x64c>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4972      	ldr	r1, [pc, #456]	@ (8002f50 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d86:	428b      	cmp	r3, r1
 8002d88:	d032      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x648>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4971      	ldr	r1, [pc, #452]	@ (8002f54 <HAL_ADC_ConfigChannel+0x7ac>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d02b      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x644>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	496f      	ldr	r1, [pc, #444]	@ (8002f58 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	d024      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x640>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	496e      	ldr	r1, [pc, #440]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002da4:	428b      	cmp	r3, r1
 8002da6:	d01d      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x63c>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	496c      	ldr	r1, [pc, #432]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002dae:	428b      	cmp	r3, r1
 8002db0:	d016      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x638>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	496b      	ldr	r1, [pc, #428]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d00f      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x634>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4969      	ldr	r1, [pc, #420]	@ (8002f68 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d008      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x630>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4968      	ldr	r1, [pc, #416]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x62c>
 8002dd0:	4b67      	ldr	r3, [pc, #412]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002dd2:	e0a0      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e09e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002dd8:	4b66      	ldr	r3, [pc, #408]	@ (8002f74 <HAL_ADC_ConfigChannel+0x7cc>)
 8002dda:	e09c      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002ddc:	4b66      	ldr	r3, [pc, #408]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dde:	e09a      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002de0:	4b60      	ldr	r3, [pc, #384]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002de2:	e098      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002de4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002de6:	e096      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002de8:	4b64      	ldr	r3, [pc, #400]	@ (8002f7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002dea:	e094      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002dec:	4b64      	ldr	r3, [pc, #400]	@ (8002f80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dee:	e092      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002df0:	4b64      	ldr	r3, [pc, #400]	@ (8002f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002df2:	e090      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002df4:	4b64      	ldr	r3, [pc, #400]	@ (8002f88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002df6:	e08e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e08c      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4962      	ldr	r1, [pc, #392]	@ (8002f8c <HAL_ADC_ConfigChannel+0x7e4>)
 8002e02:	428b      	cmp	r3, r1
 8002e04:	d140      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x6e0>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	494f      	ldr	r1, [pc, #316]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7a0>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d039      	beq.n	8002e84 <HAL_ADC_ConfigChannel+0x6dc>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	494d      	ldr	r1, [pc, #308]	@ (8002f4c <HAL_ADC_ConfigChannel+0x7a4>)
 8002e16:	428b      	cmp	r3, r1
 8002e18:	d032      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x6d8>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	494c      	ldr	r1, [pc, #304]	@ (8002f50 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e20:	428b      	cmp	r3, r1
 8002e22:	d02b      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x6d4>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	494a      	ldr	r1, [pc, #296]	@ (8002f54 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e2a:	428b      	cmp	r3, r1
 8002e2c:	d024      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x6d0>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4949      	ldr	r1, [pc, #292]	@ (8002f58 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e34:	428b      	cmp	r3, r1
 8002e36:	d01d      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0x6cc>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4947      	ldr	r1, [pc, #284]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002e3e:	428b      	cmp	r3, r1
 8002e40:	d016      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x6c8>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4946      	ldr	r1, [pc, #280]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d00f      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x6c4>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4944      	ldr	r1, [pc, #272]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e52:	428b      	cmp	r3, r1
 8002e54:	d008      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x6c0>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4944      	ldr	r1, [pc, #272]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7c4>)
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x6bc>
 8002e60:	4b43      	ldr	r3, [pc, #268]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e62:	e058      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e64:	2300      	movs	r3, #0
 8002e66:	e056      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e68:	4b43      	ldr	r3, [pc, #268]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e6a:	e054      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e6e:	e052      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e72:	e050      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e74:	4b41      	ldr	r3, [pc, #260]	@ (8002f7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002e76:	e04e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e78:	4b41      	ldr	r3, [pc, #260]	@ (8002f80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e7a:	e04c      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e7c:	4b41      	ldr	r3, [pc, #260]	@ (8002f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e7e:	e04a      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e80:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002e82:	e048      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e046      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4940      	ldr	r1, [pc, #256]	@ (8002f90 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e8e:	428b      	cmp	r3, r1
 8002e90:	d140      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x76c>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	492c      	ldr	r1, [pc, #176]	@ (8002f48 <HAL_ADC_ConfigChannel+0x7a0>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d039      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x768>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	492a      	ldr	r1, [pc, #168]	@ (8002f4c <HAL_ADC_ConfigChannel+0x7a4>)
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d032      	beq.n	8002f0c <HAL_ADC_ConfigChannel+0x764>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4929      	ldr	r1, [pc, #164]	@ (8002f50 <HAL_ADC_ConfigChannel+0x7a8>)
 8002eac:	428b      	cmp	r3, r1
 8002eae:	d02b      	beq.n	8002f08 <HAL_ADC_ConfigChannel+0x760>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4927      	ldr	r1, [pc, #156]	@ (8002f54 <HAL_ADC_ConfigChannel+0x7ac>)
 8002eb6:	428b      	cmp	r3, r1
 8002eb8:	d024      	beq.n	8002f04 <HAL_ADC_ConfigChannel+0x75c>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4926      	ldr	r1, [pc, #152]	@ (8002f58 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d01d      	beq.n	8002f00 <HAL_ADC_ConfigChannel+0x758>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4924      	ldr	r1, [pc, #144]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7b4>)
 8002eca:	428b      	cmp	r3, r1
 8002ecc:	d016      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x754>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4923      	ldr	r1, [pc, #140]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d00f      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0x750>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4926      	ldr	r1, [pc, #152]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ede:	428b      	cmp	r3, r1
 8002ee0:	d008      	beq.n	8002ef4 <HAL_ADC_ConfigChannel+0x74c>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	492b      	ldr	r1, [pc, #172]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7ec>)
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x748>
 8002eec:	4b2a      	ldr	r3, [pc, #168]	@ (8002f98 <HAL_ADC_ConfigChannel+0x7f0>)
 8002eee:	e012      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e010      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002ef4:	4b27      	ldr	r3, [pc, #156]	@ (8002f94 <HAL_ADC_ConfigChannel+0x7ec>)
 8002ef6:	e00e      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7bc>)
 8002efa:	e00c      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002efc:	4b18      	ldr	r3, [pc, #96]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7b8>)
 8002efe:	e00a      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002f00:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <HAL_ADC_ConfigChannel+0x7d4>)
 8002f02:	e008      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002f04:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f06:	e006      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002f08:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f0a:	e004      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f0e:	e002      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x76e>
 8002f14:	2300      	movs	r3, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f7fe fe7b 	bl	8001c14 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f280 80f6 	bge.w	8003114 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a05      	ldr	r2, [pc, #20]	@ (8002f44 <HAL_ADC_ConfigChannel+0x79c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x794>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a15      	ldr	r2, [pc, #84]	@ (8002f8c <HAL_ADC_ConfigChannel+0x7e4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d131      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x7f8>
 8002f3c:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <HAL_ADC_ConfigChannel+0x7f4>)
 8002f3e:	e030      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x7fa>
 8002f40:	47ff0000 	.word	0x47ff0000
 8002f44:	40022000 	.word	0x40022000
 8002f48:	04300002 	.word	0x04300002
 8002f4c:	08600004 	.word	0x08600004
 8002f50:	0c900008 	.word	0x0c900008
 8002f54:	10c00010 	.word	0x10c00010
 8002f58:	14f00020 	.word	0x14f00020
 8002f5c:	2a000400 	.word	0x2a000400
 8002f60:	2e300800 	.word	0x2e300800
 8002f64:	32601000 	.word	0x32601000
 8002f68:	43210000 	.word	0x43210000
 8002f6c:	4b840000 	.word	0x4b840000
 8002f70:	4fb80000 	.word	0x4fb80000
 8002f74:	47520000 	.word	0x47520000
 8002f78:	36902000 	.word	0x36902000
 8002f7c:	25b00200 	.word	0x25b00200
 8002f80:	21800100 	.word	0x21800100
 8002f84:	1d500080 	.word	0x1d500080
 8002f88:	19200040 	.word	0x19200040
 8002f8c:	40022100 	.word	0x40022100
 8002f90:	58026000 	.word	0x58026000
 8002f94:	3ac04000 	.word	0x3ac04000
 8002f98:	3ef08000 	.word	0x3ef08000
 8002f9c:	40022300 	.word	0x40022300
 8002fa0:	4b61      	ldr	r3, [pc, #388]	@ (8003128 <HAL_ADC_ConfigChannel+0x980>)
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fe28 	bl	8001bf8 <LL_ADC_GetCommonPathInternalCh>
 8002fa8:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5f      	ldr	r2, [pc, #380]	@ (800312c <HAL_ADC_ConfigChannel+0x984>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x816>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8003130 <HAL_ADC_ConfigChannel+0x988>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10e      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x834>
 8002fbe:	485b      	ldr	r0, [pc, #364]	@ (800312c <HAL_ADC_ConfigChannel+0x984>)
 8002fc0:	f7ff f8ac 	bl	800211c <LL_ADC_IsEnabled>
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	485a      	ldr	r0, [pc, #360]	@ (8003130 <HAL_ADC_ConfigChannel+0x988>)
 8002fc8:	f7ff f8a8 	bl	800211c <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4323      	orrs	r3, r4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e008      	b.n	8002fee <HAL_ADC_ConfigChannel+0x846>
 8002fdc:	4855      	ldr	r0, [pc, #340]	@ (8003134 <HAL_ADC_ConfigChannel+0x98c>)
 8002fde:	f7ff f89d 	bl	800211c <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d07d      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a50      	ldr	r2, [pc, #320]	@ (8003138 <HAL_ADC_ConfigChannel+0x990>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d130      	bne.n	800305e <HAL_ADC_ConfigChannel+0x8b6>
 8002ffc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d12b      	bne.n	800305e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a4a      	ldr	r2, [pc, #296]	@ (8003134 <HAL_ADC_ConfigChannel+0x98c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	f040 8081 	bne.w	8003114 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a45      	ldr	r2, [pc, #276]	@ (800312c <HAL_ADC_ConfigChannel+0x984>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_ADC_ConfigChannel+0x87e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a43      	ldr	r2, [pc, #268]	@ (8003130 <HAL_ADC_ConfigChannel+0x988>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x882>
 8003026:	4a45      	ldr	r2, [pc, #276]	@ (800313c <HAL_ADC_ConfigChannel+0x994>)
 8003028:	e000      	b.n	800302c <HAL_ADC_ConfigChannel+0x884>
 800302a:	4a3f      	ldr	r2, [pc, #252]	@ (8003128 <HAL_ADC_ConfigChannel+0x980>)
 800302c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800302e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003032:	4619      	mov	r1, r3
 8003034:	4610      	mov	r0, r2
 8003036:	f7fe fdcc 	bl	8001bd2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800303a:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_ADC_ConfigChannel+0x998>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	4a40      	ldr	r2, [pc, #256]	@ (8003144 <HAL_ADC_ConfigChannel+0x99c>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	3301      	adds	r3, #1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800304e:	e002      	b.n	8003056 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3b01      	subs	r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f9      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800305c:	e05a      	b.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a39      	ldr	r2, [pc, #228]	@ (8003148 <HAL_ADC_ConfigChannel+0x9a0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d11e      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x8fe>
 8003068:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800306a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2f      	ldr	r2, [pc, #188]	@ (8003134 <HAL_ADC_ConfigChannel+0x98c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d14b      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	@ (800312c <HAL_ADC_ConfigChannel+0x984>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x8e8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a29      	ldr	r2, [pc, #164]	@ (8003130 <HAL_ADC_ConfigChannel+0x988>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x8ec>
 8003090:	4a2a      	ldr	r2, [pc, #168]	@ (800313c <HAL_ADC_ConfigChannel+0x994>)
 8003092:	e000      	b.n	8003096 <HAL_ADC_ConfigChannel+0x8ee>
 8003094:	4a24      	ldr	r2, [pc, #144]	@ (8003128 <HAL_ADC_ConfigChannel+0x980>)
 8003096:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003098:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fe fd97 	bl	8001bd2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a4:	e036      	b.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a28      	ldr	r2, [pc, #160]	@ (800314c <HAL_ADC_ConfigChannel+0x9a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d131      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
 80030b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d12c      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1d      	ldr	r2, [pc, #116]	@ (8003134 <HAL_ADC_ConfigChannel+0x98c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d127      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	@ (800312c <HAL_ADC_ConfigChannel+0x984>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <HAL_ADC_ConfigChannel+0x930>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <HAL_ADC_ConfigChannel+0x988>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x934>
 80030d8:	4a18      	ldr	r2, [pc, #96]	@ (800313c <HAL_ADC_ConfigChannel+0x994>)
 80030da:	e000      	b.n	80030de <HAL_ADC_ConfigChannel+0x936>
 80030dc:	4a12      	ldr	r2, [pc, #72]	@ (8003128 <HAL_ADC_ConfigChannel+0x980>)
 80030de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7fe fd73 	bl	8001bd2 <LL_ADC_SetCommonPathInternalCh>
 80030ec:	e012      	b.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003100:	e008      	b.n	8003114 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800311c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003120:	4618      	mov	r0, r3
 8003122:	3794      	adds	r7, #148	@ 0x94
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	58026300 	.word	0x58026300
 800312c:	40022000 	.word	0x40022000
 8003130:	40022100 	.word	0x40022100
 8003134:	58026000 	.word	0x58026000
 8003138:	c7520000 	.word	0xc7520000
 800313c:	40022300 	.word	0x40022300
 8003140:	2400003c 	.word	0x2400003c
 8003144:	053e2d63 	.word	0x053e2d63
 8003148:	c3210000 	.word	0xc3210000
 800314c:	cb840000 	.word	0xcb840000

08003150 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe ffdd 	bl	800211c <LL_ADC_IsEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d16e      	bne.n	8003246 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	4b38      	ldr	r3, [pc, #224]	@ (8003250 <ADC_Enable+0x100>)
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e05a      	b.n	8003248 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe ffac 	bl	80020f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800319c:	f7fe fce4 	bl	8001b68 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003254 <ADC_Enable+0x104>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <ADC_Enable+0x66>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <ADC_Enable+0x108>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <ADC_Enable+0x6a>
 80031b6:	4b29      	ldr	r3, [pc, #164]	@ (800325c <ADC_Enable+0x10c>)
 80031b8:	e000      	b.n	80031bc <ADC_Enable+0x6c>
 80031ba:	4b29      	ldr	r3, [pc, #164]	@ (8003260 <ADC_Enable+0x110>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe ff3d 	bl	800203c <LL_ADC_GetMultimode>
 80031c2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <ADC_Enable+0x108>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d002      	beq.n	80031d4 <ADC_Enable+0x84>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e000      	b.n	80031d6 <ADC_Enable+0x86>
 80031d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003254 <ADC_Enable+0x104>)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02c      	beq.n	8003238 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d130      	bne.n	8003246 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031e4:	e028      	b.n	8003238 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe ff96 	bl	800211c <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe ff7a 	bl	80020f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003200:	f7fe fcb2 	bl	8001b68 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d914      	bls.n	8003238 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d00d      	beq.n	8003238 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e007      	b.n	8003248 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d1cf      	bne.n	80031e6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	8000003f 	.word	0x8000003f
 8003254:	40022000 	.word	0x40022000
 8003258:	40022100 	.word	0x40022100
 800325c:	40022300 	.word	0x40022300
 8003260:	58026300 	.word	0x58026300

08003264 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003276:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800327a:	2b00      	cmp	r3, #0
 800327c:	d14b      	bne.n	8003316 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d021      	beq.n	80032dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fde5 	bl	8001e6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d032      	beq.n	800330e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d12b      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11f      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80032da:	e018      	b.n	800330e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d111      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f7fd fe00 	bl	8000f14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003314:	e00e      	b.n	8003334 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fa36 	bl	8002794 <HAL_ADC_ErrorCallback>
}
 8003328:	e004      	b.n	8003334 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fa18 	bl	8002780 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003376:	f043 0204 	orr.w	r2, r3, #4
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fa08 	bl	8002794 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6c      	ldr	r2, [pc, #432]	@ (800354c <ADC_ConfigureBoostMode+0x1c0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <ADC_ConfigureBoostMode+0x1c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6b      	ldr	r2, [pc, #428]	@ (8003550 <ADC_ConfigureBoostMode+0x1c4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d109      	bne.n	80033bc <ADC_ConfigureBoostMode+0x30>
 80033a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <ADC_ConfigureBoostMode+0x1c8>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e008      	b.n	80033ce <ADC_ConfigureBoostMode+0x42>
 80033bc:	4b66      	ldr	r3, [pc, #408]	@ (8003558 <ADC_ConfigureBoostMode+0x1cc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01c      	beq.n	800340c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033d2:	f003 fd19 	bl	8006e08 <HAL_RCC_GetHCLKFreq>
 80033d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033e0:	d010      	beq.n	8003404 <ADC_ConfigureBoostMode+0x78>
 80033e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033e6:	d873      	bhi.n	80034d0 <ADC_ConfigureBoostMode+0x144>
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d002      	beq.n	80033f4 <ADC_ConfigureBoostMode+0x68>
 80033ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033f2:	d16d      	bne.n	80034d0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0c1b      	lsrs	r3, r3, #16
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	60fb      	str	r3, [r7, #12]
        break;
 8003402:	e068      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	60fb      	str	r3, [r7, #12]
        break;
 800340a:	e064      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800340c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	f004 fede 	bl	80081d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003418:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003422:	d051      	beq.n	80034c8 <ADC_ConfigureBoostMode+0x13c>
 8003424:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003428:	d854      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 800342a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800342e:	d047      	beq.n	80034c0 <ADC_ConfigureBoostMode+0x134>
 8003430:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003434:	d84e      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 8003436:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800343a:	d03d      	beq.n	80034b8 <ADC_ConfigureBoostMode+0x12c>
 800343c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003440:	d848      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 8003442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003446:	d033      	beq.n	80034b0 <ADC_ConfigureBoostMode+0x124>
 8003448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800344c:	d842      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 800344e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003452:	d029      	beq.n	80034a8 <ADC_ConfigureBoostMode+0x11c>
 8003454:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003458:	d83c      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 800345a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800345e:	d01a      	beq.n	8003496 <ADC_ConfigureBoostMode+0x10a>
 8003460:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003464:	d836      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 8003466:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800346a:	d014      	beq.n	8003496 <ADC_ConfigureBoostMode+0x10a>
 800346c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003470:	d830      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 8003472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003476:	d00e      	beq.n	8003496 <ADC_ConfigureBoostMode+0x10a>
 8003478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800347c:	d82a      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 800347e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003482:	d008      	beq.n	8003496 <ADC_ConfigureBoostMode+0x10a>
 8003484:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003488:	d824      	bhi.n	80034d4 <ADC_ConfigureBoostMode+0x148>
 800348a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800348e:	d002      	beq.n	8003496 <ADC_ConfigureBoostMode+0x10a>
 8003490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003494:	d11e      	bne.n	80034d4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	60fb      	str	r3, [r7, #12]
        break;
 80034a6:	e016      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
        break;
 80034ae:	e012      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	60fb      	str	r3, [r7, #12]
        break;
 80034b6:	e00e      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	60fb      	str	r3, [r7, #12]
        break;
 80034be:	e00a      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	09db      	lsrs	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
        break;
 80034c6:	e006      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	60fb      	str	r3, [r7, #12]
        break;
 80034ce:	e002      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80034d4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <ADC_ConfigureBoostMode+0x1d0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d808      	bhi.n	80034f6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034f4:	e025      	b.n	8003542 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a19      	ldr	r2, [pc, #100]	@ (8003560 <ADC_ConfigureBoostMode+0x1d4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d80a      	bhi.n	8003514 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003510:	609a      	str	r2, [r3, #8]
}
 8003512:	e016      	b.n	8003542 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a13      	ldr	r2, [pc, #76]	@ (8003564 <ADC_ConfigureBoostMode+0x1d8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d80a      	bhi.n	8003532 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800352e:	609a      	str	r2, [r3, #8]
}
 8003530:	e007      	b.n	8003542 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003540:	609a      	str	r2, [r3, #8]
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40022000 	.word	0x40022000
 8003550:	40022100 	.word	0x40022100
 8003554:	40022300 	.word	0x40022300
 8003558:	58026300 	.word	0x58026300
 800355c:	005f5e10 	.word	0x005f5e10
 8003560:	00bebc20 	.word	0x00bebc20
 8003564:	017d7840 	.word	0x017d7840

08003568 <LL_ADC_IsEnabled>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <LL_ADC_IsEnabled+0x18>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <LL_ADC_IsEnabled+0x1a>
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_ADC_REG_IsConversionOngoing>:
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d101      	bne.n	80035a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b0a3      	sub	sp, #140	@ 0x8c
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e0c1      	b.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035de:	2300      	movs	r3, #0
 80035e0:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d102      	bne.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e001      	b.n	80035f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0a0      	b.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ffb9 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 800361c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ffb2 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 8081 	bne.w	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d17c      	bne.n	8003734 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a48      	ldr	r2, [pc, #288]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d004      	beq.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a46      	ldr	r2, [pc, #280]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800364e:	4b46      	ldr	r3, [pc, #280]	@ (8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003650:	e000      	b.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003652:	4b46      	ldr	r3, [pc, #280]	@ (800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003654:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d039      	beq.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800365e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	431a      	orrs	r2, r3
 800366c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800366e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a3a      	ldr	r2, [pc, #232]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a39      	ldr	r2, [pc, #228]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10e      	bne.n	80036a2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003684:	4836      	ldr	r0, [pc, #216]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003686:	f7ff ff6f 	bl	8003568 <LL_ADC_IsEnabled>
 800368a:	4604      	mov	r4, r0
 800368c:	4835      	ldr	r0, [pc, #212]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800368e:	f7ff ff6b 	bl	8003568 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	4323      	orrs	r3, r4
 8003696:	2b00      	cmp	r3, #0
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e008      	b.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80036a2:	4833      	ldr	r0, [pc, #204]	@ (8003770 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80036a4:	f7ff ff60 	bl	8003568 <LL_ADC_IsEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d047      	beq.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80036be:	4013      	ands	r3, r2
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	6811      	ldr	r1, [r2, #0]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	6892      	ldr	r2, [r2, #8]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036d0:	e03a      	b.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10e      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80036f2:	481b      	ldr	r0, [pc, #108]	@ (8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80036f4:	f7ff ff38 	bl	8003568 <LL_ADC_IsEnabled>
 80036f8:	4604      	mov	r4, r0
 80036fa:	481a      	ldr	r0, [pc, #104]	@ (8003764 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80036fc:	f7ff ff34 	bl	8003568 <LL_ADC_IsEnabled>
 8003700:	4603      	mov	r3, r0
 8003702:	4323      	orrs	r3, r4
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e008      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003710:	4817      	ldr	r0, [pc, #92]	@ (8003770 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003712:	f7ff ff29 	bl	8003568 <LL_ADC_IsEnabled>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800372c:	4013      	ands	r3, r2
 800372e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003730:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003732:	e009      	b.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003746:	e000      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003748:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003752:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003756:	4618      	mov	r0, r3
 8003758:	378c      	adds	r7, #140	@ 0x8c
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	bf00      	nop
 8003760:	40022000 	.word	0x40022000
 8003764:	40022100 	.word	0x40022100
 8003768:	40022300 	.word	0x40022300
 800376c:	58026300 	.word	0x58026300
 8003770:	58026000 	.word	0x58026000
 8003774:	fffff0e0 	.word	0xfffff0e0

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <__NVIC_SetPriorityGrouping+0x40>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037a6:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <__NVIC_SetPriorityGrouping+0x40>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	60d3      	str	r3, [r2, #12]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00
 80037bc:	05fa0000 	.word	0x05fa0000

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db0b      	blt.n	8003806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4907      	ldr	r1, [pc, #28]	@ (8003814 <__NVIC_EnableIRQ+0x38>)
 80037f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	e000e100 	.word	0xe000e100

08003818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	6039      	str	r1, [r7, #0]
 8003822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db0a      	blt.n	8003842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	490c      	ldr	r1, [pc, #48]	@ (8003864 <__NVIC_SetPriority+0x4c>)
 8003832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	440b      	add	r3, r1
 800383c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003840:	e00a      	b.n	8003858 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4908      	ldr	r1, [pc, #32]	@ (8003868 <__NVIC_SetPriority+0x50>)
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	3b04      	subs	r3, #4
 8003850:	0112      	lsls	r2, r2, #4
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	440b      	add	r3, r1
 8003856:	761a      	strb	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386c:	b480      	push	{r7}
 800386e:	b089      	sub	sp, #36	@ 0x24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f1c3 0307 	rsb	r3, r3, #7
 8003886:	2b04      	cmp	r3, #4
 8003888:	bf28      	it	cs
 800388a:	2304      	movcs	r3, #4
 800388c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3304      	adds	r3, #4
 8003892:	2b06      	cmp	r3, #6
 8003894:	d902      	bls.n	800389c <NVIC_EncodePriority+0x30>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3b03      	subs	r3, #3
 800389a:	e000      	b.n	800389e <NVIC_EncodePriority+0x32>
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	401a      	ands	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	43d9      	mvns	r1, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	4313      	orrs	r3, r2
         );
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3724      	adds	r7, #36	@ 0x24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038e4:	d301      	bcc.n	80038ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038e6:	2301      	movs	r3, #1
 80038e8:	e00f      	b.n	800390a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003914 <SysTick_Config+0x40>)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f2:	210f      	movs	r1, #15
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	f7ff ff8e 	bl	8003818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <SysTick_Config+0x40>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003902:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <SysTick_Config+0x40>)
 8003904:	2207      	movs	r2, #7
 8003906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000e010 	.word	0xe000e010

08003918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff29 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800393c:	f7ff ff40 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 8003940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7ff ff90 	bl	800386c <NVIC_EncodePriority>
 800394c:	4602      	mov	r2, r0
 800394e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff5f 	bl	8003818 <__NVIC_SetPriority>
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	4603      	mov	r3, r0
 800396a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff33 	bl	80037dc <__NVIC_EnableIRQ>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff ffa4 	bl	80038d4 <SysTick_Config>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800399c:	f3bf 8f5f 	dmb	sy
}
 80039a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80039a2:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <HAL_MPU_Disable+0x28>)
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a6:	4a06      	ldr	r2, [pc, #24]	@ (80039c0 <HAL_MPU_Disable+0x28>)
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80039ae:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <HAL_MPU_Disable+0x2c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00
 80039c4:	e000ed90 	.word	0xe000ed90

080039c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80039d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a00 <HAL_MPU_Enable+0x38>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <HAL_MPU_Enable+0x3c>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <HAL_MPU_Enable+0x3c>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80039e6:	f3bf 8f4f 	dsb	sy
}
 80039ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039ec:	f3bf 8f6f 	isb	sy
}
 80039f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000ed90 	.word	0xe000ed90
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	785a      	ldrb	r2, [r3, #1]
 8003a14:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_MPU_ConfigRegion+0x7c>)
 8003a16:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003a18:	4b1a      	ldr	r3, [pc, #104]	@ (8003a84 <HAL_MPU_ConfigRegion+0x7c>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_MPU_ConfigRegion+0x7c>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003a24:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <HAL_MPU_ConfigRegion+0x7c>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7b1b      	ldrb	r3, [r3, #12]
 8003a30:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7adb      	ldrb	r3, [r3, #11]
 8003a36:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7a9b      	ldrb	r3, [r3, #10]
 8003a3e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7b5b      	ldrb	r3, [r3, #13]
 8003a46:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7b9b      	ldrb	r3, [r3, #14]
 8003a4e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7bdb      	ldrb	r3, [r3, #15]
 8003a56:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	7a5b      	ldrb	r3, [r3, #9]
 8003a5e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7a1b      	ldrb	r3, [r3, #8]
 8003a66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a74:	6113      	str	r3, [r2, #16]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed90 	.word	0xe000ed90

08003a88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003a90:	f7fe f86a 	bl	8001b68 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e312      	b.n	80040c6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a66      	ldr	r2, [pc, #408]	@ (8003c40 <HAL_DMA_Init+0x1b8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04a      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a65      	ldr	r2, [pc, #404]	@ (8003c44 <HAL_DMA_Init+0x1bc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d045      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a63      	ldr	r2, [pc, #396]	@ (8003c48 <HAL_DMA_Init+0x1c0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d040      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a62      	ldr	r2, [pc, #392]	@ (8003c4c <HAL_DMA_Init+0x1c4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d03b      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a60      	ldr	r2, [pc, #384]	@ (8003c50 <HAL_DMA_Init+0x1c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d036      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5f      	ldr	r2, [pc, #380]	@ (8003c54 <HAL_DMA_Init+0x1cc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d031      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c58 <HAL_DMA_Init+0x1d0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5c      	ldr	r2, [pc, #368]	@ (8003c5c <HAL_DMA_Init+0x1d4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d027      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c60 <HAL_DMA_Init+0x1d8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a59      	ldr	r2, [pc, #356]	@ (8003c64 <HAL_DMA_Init+0x1dc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d01d      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a57      	ldr	r2, [pc, #348]	@ (8003c68 <HAL_DMA_Init+0x1e0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a56      	ldr	r2, [pc, #344]	@ (8003c6c <HAL_DMA_Init+0x1e4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a54      	ldr	r2, [pc, #336]	@ (8003c70 <HAL_DMA_Init+0x1e8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00e      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a53      	ldr	r2, [pc, #332]	@ (8003c74 <HAL_DMA_Init+0x1ec>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d009      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a51      	ldr	r2, [pc, #324]	@ (8003c78 <HAL_DMA_Init+0x1f0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_DMA_Init+0xb8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a50      	ldr	r2, [pc, #320]	@ (8003c7c <HAL_DMA_Init+0x1f4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_DMA_Init+0xbc>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_DMA_Init+0xbe>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 813c 	beq.w	8003dc4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a37      	ldr	r2, [pc, #220]	@ (8003c40 <HAL_DMA_Init+0x1b8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d04a      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a36      	ldr	r2, [pc, #216]	@ (8003c44 <HAL_DMA_Init+0x1bc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d045      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a34      	ldr	r2, [pc, #208]	@ (8003c48 <HAL_DMA_Init+0x1c0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d040      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a33      	ldr	r2, [pc, #204]	@ (8003c4c <HAL_DMA_Init+0x1c4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d03b      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <HAL_DMA_Init+0x1c8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d036      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a30      	ldr	r2, [pc, #192]	@ (8003c54 <HAL_DMA_Init+0x1cc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d031      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c58 <HAL_DMA_Init+0x1d0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02c      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c5c <HAL_DMA_Init+0x1d4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d027      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c60 <HAL_DMA_Init+0x1d8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2a      	ldr	r2, [pc, #168]	@ (8003c64 <HAL_DMA_Init+0x1dc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <HAL_DMA_Init+0x1e0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <HAL_DMA_Init+0x1e4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	@ (8003c70 <HAL_DMA_Init+0x1e8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a24      	ldr	r2, [pc, #144]	@ (8003c74 <HAL_DMA_Init+0x1ec>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a22      	ldr	r2, [pc, #136]	@ (8003c78 <HAL_DMA_Init+0x1f0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_DMA_Init+0x174>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a21      	ldr	r2, [pc, #132]	@ (8003c7c <HAL_DMA_Init+0x1f4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d108      	bne.n	8003c0e <HAL_DMA_Init+0x186>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e007      	b.n	8003c1e <HAL_DMA_Init+0x196>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c1e:	e02f      	b.n	8003c80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c20:	f7fd ffa2 	bl	8001b68 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d928      	bls.n	8003c80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e242      	b.n	80040c6 <HAL_DMA_Init+0x63e>
 8003c40:	40020010 	.word	0x40020010
 8003c44:	40020028 	.word	0x40020028
 8003c48:	40020040 	.word	0x40020040
 8003c4c:	40020058 	.word	0x40020058
 8003c50:	40020070 	.word	0x40020070
 8003c54:	40020088 	.word	0x40020088
 8003c58:	400200a0 	.word	0x400200a0
 8003c5c:	400200b8 	.word	0x400200b8
 8003c60:	40020410 	.word	0x40020410
 8003c64:	40020428 	.word	0x40020428
 8003c68:	40020440 	.word	0x40020440
 8003c6c:	40020458 	.word	0x40020458
 8003c70:	40020470 	.word	0x40020470
 8003c74:	40020488 	.word	0x40020488
 8003c78:	400204a0 	.word	0x400204a0
 8003c7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1c8      	bne.n	8003c20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4b83      	ldr	r3, [pc, #524]	@ (8003ea8 <HAL_DMA_Init+0x420>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ca6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cbe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d107      	bne.n	8003ce4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b28      	cmp	r3, #40	@ 0x28
 8003cea:	d903      	bls.n	8003cf4 <HAL_DMA_Init+0x26c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cf2:	d91f      	bls.n	8003d34 <HAL_DMA_Init+0x2ac>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cfa:	d903      	bls.n	8003d04 <HAL_DMA_Init+0x27c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b42      	cmp	r3, #66	@ 0x42
 8003d02:	d917      	bls.n	8003d34 <HAL_DMA_Init+0x2ac>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b46      	cmp	r3, #70	@ 0x46
 8003d0a:	d903      	bls.n	8003d14 <HAL_DMA_Init+0x28c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b48      	cmp	r3, #72	@ 0x48
 8003d12:	d90f      	bls.n	8003d34 <HAL_DMA_Init+0x2ac>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b4e      	cmp	r3, #78	@ 0x4e
 8003d1a:	d903      	bls.n	8003d24 <HAL_DMA_Init+0x29c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b52      	cmp	r3, #82	@ 0x52
 8003d22:	d907      	bls.n	8003d34 <HAL_DMA_Init+0x2ac>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b73      	cmp	r3, #115	@ 0x73
 8003d2a:	d905      	bls.n	8003d38 <HAL_DMA_Init+0x2b0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b77      	cmp	r3, #119	@ 0x77
 8003d32:	d801      	bhi.n	8003d38 <HAL_DMA_Init+0x2b0>
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_DMA_Init+0x2b2>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d44:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0307 	bic.w	r3, r3, #7
 8003d5c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d117      	bne.n	8003da0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 fdca 	bl	800591c <DMA_CheckFifoParam>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2240      	movs	r2, #64	@ 0x40
 8003d92:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e192      	b.n	80040c6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f001 fd05 	bl	80057b8 <DMA_CalcBaseAndBitshift>
 8003dae:	4603      	mov	r3, r0
 8003db0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	223f      	movs	r2, #63	@ 0x3f
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	e0c8      	b.n	8003f56 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a38      	ldr	r2, [pc, #224]	@ (8003eac <HAL_DMA_Init+0x424>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d022      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a37      	ldr	r2, [pc, #220]	@ (8003eb0 <HAL_DMA_Init+0x428>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d01d      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a35      	ldr	r2, [pc, #212]	@ (8003eb4 <HAL_DMA_Init+0x42c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d018      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a34      	ldr	r2, [pc, #208]	@ (8003eb8 <HAL_DMA_Init+0x430>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a32      	ldr	r2, [pc, #200]	@ (8003ebc <HAL_DMA_Init+0x434>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00e      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a31      	ldr	r2, [pc, #196]	@ (8003ec0 <HAL_DMA_Init+0x438>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2f      	ldr	r2, [pc, #188]	@ (8003ec4 <HAL_DMA_Init+0x43c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_Init+0x38c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec8 <HAL_DMA_Init+0x440>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_DMA_Init+0x390>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_DMA_Init+0x392>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8092 	beq.w	8003f44 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a21      	ldr	r2, [pc, #132]	@ (8003eac <HAL_DMA_Init+0x424>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d021      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <HAL_DMA_Init+0x428>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d01c      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb4 <HAL_DMA_Init+0x42c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d017      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb8 <HAL_DMA_Init+0x430>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d012      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <HAL_DMA_Init+0x434>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00d      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec0 <HAL_DMA_Init+0x438>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d008      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_DMA_Init+0x43c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <HAL_DMA_Init+0x3e6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ec8 <HAL_DMA_Init+0x440>)
 8003e6c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <HAL_DMA_Init+0x444>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d01c      	beq.n	8003ed0 <HAL_DMA_Init+0x448>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d102      	bne.n	8003ea4 <HAL_DMA_Init+0x41c>
 8003e9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ea2:	e016      	b.n	8003ed2 <HAL_DMA_Init+0x44a>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e014      	b.n	8003ed2 <HAL_DMA_Init+0x44a>
 8003ea8:	fe10803f 	.word	0xfe10803f
 8003eac:	58025408 	.word	0x58025408
 8003eb0:	5802541c 	.word	0x5802541c
 8003eb4:	58025430 	.word	0x58025430
 8003eb8:	58025444 	.word	0x58025444
 8003ebc:	58025458 	.word	0x58025458
 8003ec0:	5802546c 	.word	0x5802546c
 8003ec4:	58025480 	.word	0x58025480
 8003ec8:	58025494 	.word	0x58025494
 8003ecc:	fffe000f 	.word	0xfffe000f
 8003ed0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ef8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b6e      	ldr	r3, [pc, #440]	@ (80040d0 <HAL_DMA_Init+0x648>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80040d4 <HAL_DMA_Init+0x64c>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	009a      	lsls	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f001 fc45 	bl	80057b8 <DMA_CalcBaseAndBitshift>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	e008      	b.n	8003f56 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2240      	movs	r2, #64	@ 0x40
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0b7      	b.n	80040c6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80040d8 <HAL_DMA_Init+0x650>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d072      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5d      	ldr	r2, [pc, #372]	@ (80040dc <HAL_DMA_Init+0x654>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d06d      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80040e0 <HAL_DMA_Init+0x658>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d068      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5a      	ldr	r2, [pc, #360]	@ (80040e4 <HAL_DMA_Init+0x65c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d063      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a59      	ldr	r2, [pc, #356]	@ (80040e8 <HAL_DMA_Init+0x660>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d05e      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a57      	ldr	r2, [pc, #348]	@ (80040ec <HAL_DMA_Init+0x664>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d059      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a56      	ldr	r2, [pc, #344]	@ (80040f0 <HAL_DMA_Init+0x668>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d054      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a54      	ldr	r2, [pc, #336]	@ (80040f4 <HAL_DMA_Init+0x66c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04f      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a53      	ldr	r2, [pc, #332]	@ (80040f8 <HAL_DMA_Init+0x670>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a51      	ldr	r2, [pc, #324]	@ (80040fc <HAL_DMA_Init+0x674>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a50      	ldr	r2, [pc, #320]	@ (8004100 <HAL_DMA_Init+0x678>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	@ (8004104 <HAL_DMA_Init+0x67c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4d      	ldr	r2, [pc, #308]	@ (8004108 <HAL_DMA_Init+0x680>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800410c <HAL_DMA_Init+0x684>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8004110 <HAL_DMA_Init+0x688>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a48      	ldr	r2, [pc, #288]	@ (8004114 <HAL_DMA_Init+0x68c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a47      	ldr	r2, [pc, #284]	@ (8004118 <HAL_DMA_Init+0x690>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a45      	ldr	r2, [pc, #276]	@ (800411c <HAL_DMA_Init+0x694>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a44      	ldr	r2, [pc, #272]	@ (8004120 <HAL_DMA_Init+0x698>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a42      	ldr	r2, [pc, #264]	@ (8004124 <HAL_DMA_Init+0x69c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a41      	ldr	r2, [pc, #260]	@ (8004128 <HAL_DMA_Init+0x6a0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3f      	ldr	r2, [pc, #252]	@ (800412c <HAL_DMA_Init+0x6a4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a3e      	ldr	r2, [pc, #248]	@ (8004130 <HAL_DMA_Init+0x6a8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_Init+0x5be>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a3c      	ldr	r2, [pc, #240]	@ (8004134 <HAL_DMA_Init+0x6ac>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_DMA_Init+0x5c2>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_DMA_Init+0x5c4>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d032      	beq.n	80040b6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 fcdf 	bl	8005a14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d102      	bne.n	8004064 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004078:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d010      	beq.n	80040a4 <HAL_DMA_Init+0x61c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b08      	cmp	r3, #8
 8004088:	d80c      	bhi.n	80040a4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 fd5c 	bl	8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e008      	b.n	80040b6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	a7fdabf8 	.word	0xa7fdabf8
 80040d4:	cccccccd 	.word	0xcccccccd
 80040d8:	40020010 	.word	0x40020010
 80040dc:	40020028 	.word	0x40020028
 80040e0:	40020040 	.word	0x40020040
 80040e4:	40020058 	.word	0x40020058
 80040e8:	40020070 	.word	0x40020070
 80040ec:	40020088 	.word	0x40020088
 80040f0:	400200a0 	.word	0x400200a0
 80040f4:	400200b8 	.word	0x400200b8
 80040f8:	40020410 	.word	0x40020410
 80040fc:	40020428 	.word	0x40020428
 8004100:	40020440 	.word	0x40020440
 8004104:	40020458 	.word	0x40020458
 8004108:	40020470 	.word	0x40020470
 800410c:	40020488 	.word	0x40020488
 8004110:	400204a0 	.word	0x400204a0
 8004114:	400204b8 	.word	0x400204b8
 8004118:	58025408 	.word	0x58025408
 800411c:	5802541c 	.word	0x5802541c
 8004120:	58025430 	.word	0x58025430
 8004124:	58025444 	.word	0x58025444
 8004128:	58025458 	.word	0x58025458
 800412c:	5802546c 	.word	0x5802546c
 8004130:	58025480 	.word	0x58025480
 8004134:	58025494 	.word	0x58025494

08004138 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e226      	b.n	80045a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_DMA_Start_IT+0x2a>
 800415e:	2302      	movs	r3, #2
 8004160:	e21f      	b.n	80045a2 <HAL_DMA_Start_IT+0x46a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	f040 820a 	bne.w	800458c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a68      	ldr	r2, [pc, #416]	@ (800432c <HAL_DMA_Start_IT+0x1f4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a66      	ldr	r2, [pc, #408]	@ (8004330 <HAL_DMA_Start_IT+0x1f8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_DMA_Start_IT+0x1fc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a63      	ldr	r2, [pc, #396]	@ (8004338 <HAL_DMA_Start_IT+0x200>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a62      	ldr	r2, [pc, #392]	@ (800433c <HAL_DMA_Start_IT+0x204>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a60      	ldr	r2, [pc, #384]	@ (8004340 <HAL_DMA_Start_IT+0x208>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004344 <HAL_DMA_Start_IT+0x20c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004348 <HAL_DMA_Start_IT+0x210>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a5c      	ldr	r2, [pc, #368]	@ (800434c <HAL_DMA_Start_IT+0x214>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004350 <HAL_DMA_Start_IT+0x218>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a59      	ldr	r2, [pc, #356]	@ (8004354 <HAL_DMA_Start_IT+0x21c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a57      	ldr	r2, [pc, #348]	@ (8004358 <HAL_DMA_Start_IT+0x220>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a56      	ldr	r2, [pc, #344]	@ (800435c <HAL_DMA_Start_IT+0x224>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a54      	ldr	r2, [pc, #336]	@ (8004360 <HAL_DMA_Start_IT+0x228>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a53      	ldr	r2, [pc, #332]	@ (8004364 <HAL_DMA_Start_IT+0x22c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMA_Start_IT+0xee>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a51      	ldr	r2, [pc, #324]	@ (8004368 <HAL_DMA_Start_IT+0x230>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <HAL_DMA_Start_IT+0x100>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e007      	b.n	8004248 <HAL_DMA_Start_IT+0x110>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f001 f906 	bl	8005460 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a34      	ldr	r2, [pc, #208]	@ (800432c <HAL_DMA_Start_IT+0x1f4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d04a      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a33      	ldr	r2, [pc, #204]	@ (8004330 <HAL_DMA_Start_IT+0x1f8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d045      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a31      	ldr	r2, [pc, #196]	@ (8004334 <HAL_DMA_Start_IT+0x1fc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d040      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a30      	ldr	r2, [pc, #192]	@ (8004338 <HAL_DMA_Start_IT+0x200>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d03b      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2e      	ldr	r2, [pc, #184]	@ (800433c <HAL_DMA_Start_IT+0x204>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d036      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2d      	ldr	r2, [pc, #180]	@ (8004340 <HAL_DMA_Start_IT+0x208>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d031      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2b      	ldr	r2, [pc, #172]	@ (8004344 <HAL_DMA_Start_IT+0x20c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02c      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2a      	ldr	r2, [pc, #168]	@ (8004348 <HAL_DMA_Start_IT+0x210>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d027      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a28      	ldr	r2, [pc, #160]	@ (800434c <HAL_DMA_Start_IT+0x214>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	@ (8004350 <HAL_DMA_Start_IT+0x218>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d01d      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	@ (8004354 <HAL_DMA_Start_IT+0x21c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	@ (8004358 <HAL_DMA_Start_IT+0x220>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	@ (800435c <HAL_DMA_Start_IT+0x224>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	@ (8004360 <HAL_DMA_Start_IT+0x228>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <HAL_DMA_Start_IT+0x22c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_DMA_Start_IT+0x1bc>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <HAL_DMA_Start_IT+0x230>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Start_IT+0x1c0>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <HAL_DMA_Start_IT+0x1c2>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d036      	beq.n	800436c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 021e 	bic.w	r2, r3, #30
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0216 	orr.w	r2, r2, #22
 8004310:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03e      	beq.n	8004398 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e035      	b.n	8004398 <HAL_DMA_Start_IT+0x260>
 800432c:	40020010 	.word	0x40020010
 8004330:	40020028 	.word	0x40020028
 8004334:	40020040 	.word	0x40020040
 8004338:	40020058 	.word	0x40020058
 800433c:	40020070 	.word	0x40020070
 8004340:	40020088 	.word	0x40020088
 8004344:	400200a0 	.word	0x400200a0
 8004348:	400200b8 	.word	0x400200b8
 800434c:	40020410 	.word	0x40020410
 8004350:	40020428 	.word	0x40020428
 8004354:	40020440 	.word	0x40020440
 8004358:	40020458 	.word	0x40020458
 800435c:	40020470 	.word	0x40020470
 8004360:	40020488 	.word	0x40020488
 8004364:	400204a0 	.word	0x400204a0
 8004368:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 020e 	bic.w	r2, r3, #14
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 020a 	orr.w	r2, r2, #10
 800437e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0204 	orr.w	r2, r2, #4
 8004396:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a83      	ldr	r2, [pc, #524]	@ (80045ac <HAL_DMA_Start_IT+0x474>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d072      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a82      	ldr	r2, [pc, #520]	@ (80045b0 <HAL_DMA_Start_IT+0x478>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d06d      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a80      	ldr	r2, [pc, #512]	@ (80045b4 <HAL_DMA_Start_IT+0x47c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d068      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7f      	ldr	r2, [pc, #508]	@ (80045b8 <HAL_DMA_Start_IT+0x480>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d063      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a7d      	ldr	r2, [pc, #500]	@ (80045bc <HAL_DMA_Start_IT+0x484>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d05e      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7c      	ldr	r2, [pc, #496]	@ (80045c0 <HAL_DMA_Start_IT+0x488>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d059      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a7a      	ldr	r2, [pc, #488]	@ (80045c4 <HAL_DMA_Start_IT+0x48c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d054      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a79      	ldr	r2, [pc, #484]	@ (80045c8 <HAL_DMA_Start_IT+0x490>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04f      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a77      	ldr	r2, [pc, #476]	@ (80045cc <HAL_DMA_Start_IT+0x494>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d04a      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a76      	ldr	r2, [pc, #472]	@ (80045d0 <HAL_DMA_Start_IT+0x498>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d045      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a74      	ldr	r2, [pc, #464]	@ (80045d4 <HAL_DMA_Start_IT+0x49c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d040      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a73      	ldr	r2, [pc, #460]	@ (80045d8 <HAL_DMA_Start_IT+0x4a0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d03b      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a71      	ldr	r2, [pc, #452]	@ (80045dc <HAL_DMA_Start_IT+0x4a4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d036      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a70      	ldr	r2, [pc, #448]	@ (80045e0 <HAL_DMA_Start_IT+0x4a8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d031      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6e      	ldr	r2, [pc, #440]	@ (80045e4 <HAL_DMA_Start_IT+0x4ac>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d02c      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6d      	ldr	r2, [pc, #436]	@ (80045e8 <HAL_DMA_Start_IT+0x4b0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d027      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a6b      	ldr	r2, [pc, #428]	@ (80045ec <HAL_DMA_Start_IT+0x4b4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a6a      	ldr	r2, [pc, #424]	@ (80045f0 <HAL_DMA_Start_IT+0x4b8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01d      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a68      	ldr	r2, [pc, #416]	@ (80045f4 <HAL_DMA_Start_IT+0x4bc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a67      	ldr	r2, [pc, #412]	@ (80045f8 <HAL_DMA_Start_IT+0x4c0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a65      	ldr	r2, [pc, #404]	@ (80045fc <HAL_DMA_Start_IT+0x4c4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a64      	ldr	r2, [pc, #400]	@ (8004600 <HAL_DMA_Start_IT+0x4c8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a62      	ldr	r2, [pc, #392]	@ (8004604 <HAL_DMA_Start_IT+0x4cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_DMA_Start_IT+0x350>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a61      	ldr	r2, [pc, #388]	@ (8004608 <HAL_DMA_Start_IT+0x4d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_DMA_Start_IT+0x354>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_DMA_Start_IT+0x356>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01a      	beq.n	80044c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a37      	ldr	r2, [pc, #220]	@ (80045ac <HAL_DMA_Start_IT+0x474>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d04a      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a36      	ldr	r2, [pc, #216]	@ (80045b0 <HAL_DMA_Start_IT+0x478>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d045      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a34      	ldr	r2, [pc, #208]	@ (80045b4 <HAL_DMA_Start_IT+0x47c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d040      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a33      	ldr	r2, [pc, #204]	@ (80045b8 <HAL_DMA_Start_IT+0x480>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d03b      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a31      	ldr	r2, [pc, #196]	@ (80045bc <HAL_DMA_Start_IT+0x484>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d036      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a30      	ldr	r2, [pc, #192]	@ (80045c0 <HAL_DMA_Start_IT+0x488>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d031      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2e      	ldr	r2, [pc, #184]	@ (80045c4 <HAL_DMA_Start_IT+0x48c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02c      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2d      	ldr	r2, [pc, #180]	@ (80045c8 <HAL_DMA_Start_IT+0x490>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d027      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2b      	ldr	r2, [pc, #172]	@ (80045cc <HAL_DMA_Start_IT+0x494>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d022      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2a      	ldr	r2, [pc, #168]	@ (80045d0 <HAL_DMA_Start_IT+0x498>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d01d      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a28      	ldr	r2, [pc, #160]	@ (80045d4 <HAL_DMA_Start_IT+0x49c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d018      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a27      	ldr	r2, [pc, #156]	@ (80045d8 <HAL_DMA_Start_IT+0x4a0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a25      	ldr	r2, [pc, #148]	@ (80045dc <HAL_DMA_Start_IT+0x4a4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00e      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <HAL_DMA_Start_IT+0x4a8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_DMA_Start_IT+0x4ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_DMA_Start_IT+0x430>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a21      	ldr	r2, [pc, #132]	@ (80045e8 <HAL_DMA_Start_IT+0x4b0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <HAL_DMA_Start_IT+0x442>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e012      	b.n	80045a0 <HAL_DMA_Start_IT+0x468>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e009      	b.n	80045a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004592:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40020010 	.word	0x40020010
 80045b0:	40020028 	.word	0x40020028
 80045b4:	40020040 	.word	0x40020040
 80045b8:	40020058 	.word	0x40020058
 80045bc:	40020070 	.word	0x40020070
 80045c0:	40020088 	.word	0x40020088
 80045c4:	400200a0 	.word	0x400200a0
 80045c8:	400200b8 	.word	0x400200b8
 80045cc:	40020410 	.word	0x40020410
 80045d0:	40020428 	.word	0x40020428
 80045d4:	40020440 	.word	0x40020440
 80045d8:	40020458 	.word	0x40020458
 80045dc:	40020470 	.word	0x40020470
 80045e0:	40020488 	.word	0x40020488
 80045e4:	400204a0 	.word	0x400204a0
 80045e8:	400204b8 	.word	0x400204b8
 80045ec:	58025408 	.word	0x58025408
 80045f0:	5802541c 	.word	0x5802541c
 80045f4:	58025430 	.word	0x58025430
 80045f8:	58025444 	.word	0x58025444
 80045fc:	58025458 	.word	0x58025458
 8004600:	5802546c 	.word	0x5802546c
 8004604:	58025480 	.word	0x58025480
 8004608:	58025494 	.word	0x58025494

0800460c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004618:	4b67      	ldr	r3, [pc, #412]	@ (80047b8 <HAL_DMA_IRQHandler+0x1ac>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a67      	ldr	r2, [pc, #412]	@ (80047bc <HAL_DMA_IRQHandler+0x1b0>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	0a9b      	lsrs	r3, r3, #10
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a5f      	ldr	r2, [pc, #380]	@ (80047c0 <HAL_DMA_IRQHandler+0x1b4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d04a      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a5d      	ldr	r2, [pc, #372]	@ (80047c4 <HAL_DMA_IRQHandler+0x1b8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d045      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5c      	ldr	r2, [pc, #368]	@ (80047c8 <HAL_DMA_IRQHandler+0x1bc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d040      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a5a      	ldr	r2, [pc, #360]	@ (80047cc <HAL_DMA_IRQHandler+0x1c0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d03b      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a59      	ldr	r2, [pc, #356]	@ (80047d0 <HAL_DMA_IRQHandler+0x1c4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d036      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a57      	ldr	r2, [pc, #348]	@ (80047d4 <HAL_DMA_IRQHandler+0x1c8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a56      	ldr	r2, [pc, #344]	@ (80047d8 <HAL_DMA_IRQHandler+0x1cc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d02c      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a54      	ldr	r2, [pc, #336]	@ (80047dc <HAL_DMA_IRQHandler+0x1d0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d027      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a53      	ldr	r2, [pc, #332]	@ (80047e0 <HAL_DMA_IRQHandler+0x1d4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a51      	ldr	r2, [pc, #324]	@ (80047e4 <HAL_DMA_IRQHandler+0x1d8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a50      	ldr	r2, [pc, #320]	@ (80047e8 <HAL_DMA_IRQHandler+0x1dc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d018      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a4e      	ldr	r2, [pc, #312]	@ (80047ec <HAL_DMA_IRQHandler+0x1e0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a4d      	ldr	r2, [pc, #308]	@ (80047f0 <HAL_DMA_IRQHandler+0x1e4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00e      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a4b      	ldr	r2, [pc, #300]	@ (80047f4 <HAL_DMA_IRQHandler+0x1e8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d009      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4a      	ldr	r2, [pc, #296]	@ (80047f8 <HAL_DMA_IRQHandler+0x1ec>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_DMA_IRQHandler+0xd2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a48      	ldr	r2, [pc, #288]	@ (80047fc <HAL_DMA_IRQHandler+0x1f0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_DMA_IRQHandler+0xd6>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_DMA_IRQHandler+0xd8>
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 842b 	beq.w	8004f40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ee:	f003 031f 	and.w	r3, r3, #31
 80046f2:	2208      	movs	r2, #8
 80046f4:	409a      	lsls	r2, r3
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80a2 	beq.w	8004844 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2e      	ldr	r2, [pc, #184]	@ (80047c0 <HAL_DMA_IRQHandler+0x1b4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d04a      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <HAL_DMA_IRQHandler+0x1b8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d045      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <HAL_DMA_IRQHandler+0x1bc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d040      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_DMA_IRQHandler+0x1c0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d03b      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <HAL_DMA_IRQHandler+0x1c4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d036      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a27      	ldr	r2, [pc, #156]	@ (80047d4 <HAL_DMA_IRQHandler+0x1c8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d031      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	@ (80047d8 <HAL_DMA_IRQHandler+0x1cc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d02c      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a24      	ldr	r2, [pc, #144]	@ (80047dc <HAL_DMA_IRQHandler+0x1d0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d027      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_DMA_IRQHandler+0x1d4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d022      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_DMA_IRQHandler+0x1d8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d01d      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <HAL_DMA_IRQHandler+0x1dc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d018      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1e      	ldr	r2, [pc, #120]	@ (80047ec <HAL_DMA_IRQHandler+0x1e0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <HAL_DMA_IRQHandler+0x1e4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00e      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <HAL_DMA_IRQHandler+0x1e8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a19      	ldr	r2, [pc, #100]	@ (80047f8 <HAL_DMA_IRQHandler+0x1ec>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d004      	beq.n	80047a0 <HAL_DMA_IRQHandler+0x194>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_DMA_IRQHandler+0x1f0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d12f      	bne.n	8004800 <HAL_DMA_IRQHandler+0x1f4>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf14      	ite	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	2300      	moveq	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e02e      	b.n	8004814 <HAL_DMA_IRQHandler+0x208>
 80047b6:	bf00      	nop
 80047b8:	2400003c 	.word	0x2400003c
 80047bc:	1b4e81b5 	.word	0x1b4e81b5
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d015      	beq.n	8004844 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0204 	bic.w	r2, r2, #4
 8004826:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2208      	movs	r2, #8
 8004832:	409a      	lsls	r2, r3
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f043 0201 	orr.w	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d06e      	beq.n	8004938 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a69      	ldr	r2, [pc, #420]	@ (8004a04 <HAL_DMA_IRQHandler+0x3f8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04a      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a67      	ldr	r2, [pc, #412]	@ (8004a08 <HAL_DMA_IRQHandler+0x3fc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d045      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a66      	ldr	r2, [pc, #408]	@ (8004a0c <HAL_DMA_IRQHandler+0x400>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a64      	ldr	r2, [pc, #400]	@ (8004a10 <HAL_DMA_IRQHandler+0x404>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03b      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a63      	ldr	r2, [pc, #396]	@ (8004a14 <HAL_DMA_IRQHandler+0x408>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d036      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a61      	ldr	r2, [pc, #388]	@ (8004a18 <HAL_DMA_IRQHandler+0x40c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a60      	ldr	r2, [pc, #384]	@ (8004a1c <HAL_DMA_IRQHandler+0x410>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d02c      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a20 <HAL_DMA_IRQHandler+0x414>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004a24 <HAL_DMA_IRQHandler+0x418>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a5b      	ldr	r2, [pc, #364]	@ (8004a28 <HAL_DMA_IRQHandler+0x41c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a5a      	ldr	r2, [pc, #360]	@ (8004a2c <HAL_DMA_IRQHandler+0x420>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a58      	ldr	r2, [pc, #352]	@ (8004a30 <HAL_DMA_IRQHandler+0x424>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a57      	ldr	r2, [pc, #348]	@ (8004a34 <HAL_DMA_IRQHandler+0x428>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a55      	ldr	r2, [pc, #340]	@ (8004a38 <HAL_DMA_IRQHandler+0x42c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a54      	ldr	r2, [pc, #336]	@ (8004a3c <HAL_DMA_IRQHandler+0x430>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2ee>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a52      	ldr	r2, [pc, #328]	@ (8004a40 <HAL_DMA_IRQHandler+0x434>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10a      	bne.n	8004910 <HAL_DMA_IRQHandler+0x304>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e003      	b.n	8004918 <HAL_DMA_IRQHandler+0x30c>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2201      	movs	r2, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004930:	f043 0202 	orr.w	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2204      	movs	r2, #4
 8004942:	409a      	lsls	r2, r3
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 808f 	beq.w	8004a6c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2c      	ldr	r2, [pc, #176]	@ (8004a04 <HAL_DMA_IRQHandler+0x3f8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04a      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a08 <HAL_DMA_IRQHandler+0x3fc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d045      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a29      	ldr	r2, [pc, #164]	@ (8004a0c <HAL_DMA_IRQHandler+0x400>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d040      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a27      	ldr	r2, [pc, #156]	@ (8004a10 <HAL_DMA_IRQHandler+0x404>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d03b      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a26      	ldr	r2, [pc, #152]	@ (8004a14 <HAL_DMA_IRQHandler+0x408>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d036      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a24      	ldr	r2, [pc, #144]	@ (8004a18 <HAL_DMA_IRQHandler+0x40c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d031      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a23      	ldr	r2, [pc, #140]	@ (8004a1c <HAL_DMA_IRQHandler+0x410>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d02c      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a21      	ldr	r2, [pc, #132]	@ (8004a20 <HAL_DMA_IRQHandler+0x414>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d027      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a20      	ldr	r2, [pc, #128]	@ (8004a24 <HAL_DMA_IRQHandler+0x418>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d022      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004a28 <HAL_DMA_IRQHandler+0x41c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a2c <HAL_DMA_IRQHandler+0x420>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a30 <HAL_DMA_IRQHandler+0x424>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004a34 <HAL_DMA_IRQHandler+0x428>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a18      	ldr	r2, [pc, #96]	@ (8004a38 <HAL_DMA_IRQHandler+0x42c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a17      	ldr	r2, [pc, #92]	@ (8004a3c <HAL_DMA_IRQHandler+0x430>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_DMA_IRQHandler+0x3e2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <HAL_DMA_IRQHandler+0x434>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d12a      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x438>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e023      	b.n	8004a4c <HAL_DMA_IRQHandler+0x440>
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2204      	movs	r2, #4
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	f043 0204 	orr.w	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2210      	movs	r2, #16
 8004a76:	409a      	lsls	r2, r3
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a6 	beq.w	8004bce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a85      	ldr	r2, [pc, #532]	@ (8004c9c <HAL_DMA_IRQHandler+0x690>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d04a      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a83      	ldr	r2, [pc, #524]	@ (8004ca0 <HAL_DMA_IRQHandler+0x694>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d045      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a82      	ldr	r2, [pc, #520]	@ (8004ca4 <HAL_DMA_IRQHandler+0x698>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d040      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a80      	ldr	r2, [pc, #512]	@ (8004ca8 <HAL_DMA_IRQHandler+0x69c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d03b      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7f      	ldr	r2, [pc, #508]	@ (8004cac <HAL_DMA_IRQHandler+0x6a0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d036      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7d      	ldr	r2, [pc, #500]	@ (8004cb0 <HAL_DMA_IRQHandler+0x6a4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d031      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb4 <HAL_DMA_IRQHandler+0x6a8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d02c      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7a      	ldr	r2, [pc, #488]	@ (8004cb8 <HAL_DMA_IRQHandler+0x6ac>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d027      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a79      	ldr	r2, [pc, #484]	@ (8004cbc <HAL_DMA_IRQHandler+0x6b0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a77      	ldr	r2, [pc, #476]	@ (8004cc0 <HAL_DMA_IRQHandler+0x6b4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01d      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a76      	ldr	r2, [pc, #472]	@ (8004cc4 <HAL_DMA_IRQHandler+0x6b8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d018      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a74      	ldr	r2, [pc, #464]	@ (8004cc8 <HAL_DMA_IRQHandler+0x6bc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d013      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a73      	ldr	r2, [pc, #460]	@ (8004ccc <HAL_DMA_IRQHandler+0x6c0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00e      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a71      	ldr	r2, [pc, #452]	@ (8004cd0 <HAL_DMA_IRQHandler+0x6c4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d009      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a70      	ldr	r2, [pc, #448]	@ (8004cd4 <HAL_DMA_IRQHandler+0x6c8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d004      	beq.n	8004b22 <HAL_DMA_IRQHandler+0x516>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004cd8 <HAL_DMA_IRQHandler+0x6cc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10a      	bne.n	8004b38 <HAL_DMA_IRQHandler+0x52c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e009      	b.n	8004b4c <HAL_DMA_IRQHandler+0x540>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d03e      	beq.n	8004bce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2210      	movs	r2, #16
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d018      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d108      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d024      	beq.n	8004bce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
 8004b8c:	e01f      	b.n	8004bce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01b      	beq.n	8004bce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
 8004b9e:	e016      	b.n	8004bce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d107      	bne.n	8004bbe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0208 	bic.w	r2, r2, #8
 8004bbc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8110 	beq.w	8004e04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <HAL_DMA_IRQHandler+0x690>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d04a      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca0 <HAL_DMA_IRQHandler+0x694>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d045      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <HAL_DMA_IRQHandler+0x698>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d040      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a28      	ldr	r2, [pc, #160]	@ (8004ca8 <HAL_DMA_IRQHandler+0x69c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d03b      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <HAL_DMA_IRQHandler+0x6a0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <HAL_DMA_IRQHandler+0x6a4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <HAL_DMA_IRQHandler+0x6a8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02c      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	@ (8004cb8 <HAL_DMA_IRQHandler+0x6ac>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d027      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a20      	ldr	r2, [pc, #128]	@ (8004cbc <HAL_DMA_IRQHandler+0x6b0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc0 <HAL_DMA_IRQHandler+0x6b4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cc4 <HAL_DMA_IRQHandler+0x6b8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <HAL_DMA_IRQHandler+0x6bc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <HAL_DMA_IRQHandler+0x6c0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	@ (8004cd0 <HAL_DMA_IRQHandler+0x6c4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <HAL_DMA_IRQHandler+0x6c8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_DMA_IRQHandler+0x678>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <HAL_DMA_IRQHandler+0x6cc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d12b      	bne.n	8004cdc <HAL_DMA_IRQHandler+0x6d0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	e02a      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x6e4>
 8004c9a:	bf00      	nop
 8004c9c:	40020010 	.word	0x40020010
 8004ca0:	40020028 	.word	0x40020028
 8004ca4:	40020040 	.word	0x40020040
 8004ca8:	40020058 	.word	0x40020058
 8004cac:	40020070 	.word	0x40020070
 8004cb0:	40020088 	.word	0x40020088
 8004cb4:	400200a0 	.word	0x400200a0
 8004cb8:	400200b8 	.word	0x400200b8
 8004cbc:	40020410 	.word	0x40020410
 8004cc0:	40020428 	.word	0x40020428
 8004cc4:	40020440 	.word	0x40020440
 8004cc8:	40020458 	.word	0x40020458
 8004ccc:	40020470 	.word	0x40020470
 8004cd0:	40020488 	.word	0x40020488
 8004cd4:	400204a0 	.word	0x400204a0
 8004cd8:	400204b8 	.word	0x400204b8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf14      	ite	ne
 8004cea:	2301      	movne	r3, #1
 8004cec:	2300      	moveq	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8087 	beq.w	8004e04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	f003 031f 	and.w	r3, r3, #31
 8004cfe:	2220      	movs	r2, #32
 8004d00:	409a      	lsls	r2, r3
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d139      	bne.n	8004d86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0216 	bic.w	r2, r2, #22
 8004d20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695a      	ldr	r2, [r3, #20]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <HAL_DMA_IRQHandler+0x736>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0208 	bic.w	r2, r2, #8
 8004d50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	223f      	movs	r2, #63	@ 0x3f
 8004d5c:	409a      	lsls	r2, r3
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 834a 	beq.w	8005410 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4798      	blx	r3
          }
          return;
 8004d84:	e344      	b.n	8005410 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d018      	beq.n	8004dc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02c      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	e027      	b.n	8004e04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d023      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
 8004dc4:	e01e      	b.n	8004e04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0210 	bic.w	r2, r2, #16
 8004de2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8306 	beq.w	800541a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 8088 	beq.w	8004f2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a7a      	ldr	r2, [pc, #488]	@ (8005014 <HAL_DMA_IRQHandler+0xa08>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d04a      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a79      	ldr	r2, [pc, #484]	@ (8005018 <HAL_DMA_IRQHandler+0xa0c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d045      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a77      	ldr	r2, [pc, #476]	@ (800501c <HAL_DMA_IRQHandler+0xa10>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d040      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a76      	ldr	r2, [pc, #472]	@ (8005020 <HAL_DMA_IRQHandler+0xa14>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d03b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a74      	ldr	r2, [pc, #464]	@ (8005024 <HAL_DMA_IRQHandler+0xa18>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d036      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a73      	ldr	r2, [pc, #460]	@ (8005028 <HAL_DMA_IRQHandler+0xa1c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d031      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a71      	ldr	r2, [pc, #452]	@ (800502c <HAL_DMA_IRQHandler+0xa20>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d02c      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a70      	ldr	r2, [pc, #448]	@ (8005030 <HAL_DMA_IRQHandler+0xa24>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d027      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a6e      	ldr	r2, [pc, #440]	@ (8005034 <HAL_DMA_IRQHandler+0xa28>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d022      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6d      	ldr	r2, [pc, #436]	@ (8005038 <HAL_DMA_IRQHandler+0xa2c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d01d      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a6b      	ldr	r2, [pc, #428]	@ (800503c <HAL_DMA_IRQHandler+0xa30>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6a      	ldr	r2, [pc, #424]	@ (8005040 <HAL_DMA_IRQHandler+0xa34>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a68      	ldr	r2, [pc, #416]	@ (8005044 <HAL_DMA_IRQHandler+0xa38>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00e      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a67      	ldr	r2, [pc, #412]	@ (8005048 <HAL_DMA_IRQHandler+0xa3c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a65      	ldr	r2, [pc, #404]	@ (800504c <HAL_DMA_IRQHandler+0xa40>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x8b8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a64      	ldr	r2, [pc, #400]	@ (8005050 <HAL_DMA_IRQHandler+0xa44>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d108      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x8ca>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e007      	b.n	8004ee6 <HAL_DMA_IRQHandler+0x8da>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d307      	bcc.n	8004f02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f2      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0x8da>
 8004f00:	e000      	b.n	8004f04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004f02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2203      	movs	r2, #3
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004f1a:	e003      	b.n	8004f24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8272 	beq.w	800541a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	4798      	blx	r3
 8004f3e:	e26c      	b.n	800541a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a43      	ldr	r2, [pc, #268]	@ (8005054 <HAL_DMA_IRQHandler+0xa48>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d022      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a42      	ldr	r2, [pc, #264]	@ (8005058 <HAL_DMA_IRQHandler+0xa4c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a40      	ldr	r2, [pc, #256]	@ (800505c <HAL_DMA_IRQHandler+0xa50>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a3f      	ldr	r2, [pc, #252]	@ (8005060 <HAL_DMA_IRQHandler+0xa54>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8005064 <HAL_DMA_IRQHandler+0xa58>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3c      	ldr	r2, [pc, #240]	@ (8005068 <HAL_DMA_IRQHandler+0xa5c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a3a      	ldr	r2, [pc, #232]	@ (800506c <HAL_DMA_IRQHandler+0xa60>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x984>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a39      	ldr	r2, [pc, #228]	@ (8005070 <HAL_DMA_IRQHandler+0xa64>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x988>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <HAL_DMA_IRQHandler+0x98a>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 823f 	beq.w	800541a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2204      	movs	r2, #4
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80cd 	beq.w	8005154 <HAL_DMA_IRQHandler+0xb48>
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 80c7 	beq.w	8005154 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2204      	movs	r2, #4
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d049      	beq.n	8005074 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8210 	beq.w	8005414 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ffc:	e20a      	b.n	8005414 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8206 	beq.w	8005414 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005010:	e200      	b.n	8005414 <HAL_DMA_IRQHandler+0xe08>
 8005012:	bf00      	nop
 8005014:	40020010 	.word	0x40020010
 8005018:	40020028 	.word	0x40020028
 800501c:	40020040 	.word	0x40020040
 8005020:	40020058 	.word	0x40020058
 8005024:	40020070 	.word	0x40020070
 8005028:	40020088 	.word	0x40020088
 800502c:	400200a0 	.word	0x400200a0
 8005030:	400200b8 	.word	0x400200b8
 8005034:	40020410 	.word	0x40020410
 8005038:	40020428 	.word	0x40020428
 800503c:	40020440 	.word	0x40020440
 8005040:	40020458 	.word	0x40020458
 8005044:	40020470 	.word	0x40020470
 8005048:	40020488 	.word	0x40020488
 800504c:	400204a0 	.word	0x400204a0
 8005050:	400204b8 	.word	0x400204b8
 8005054:	58025408 	.word	0x58025408
 8005058:	5802541c 	.word	0x5802541c
 800505c:	58025430 	.word	0x58025430
 8005060:	58025444 	.word	0x58025444
 8005064:	58025458 	.word	0x58025458
 8005068:	5802546c 	.word	0x5802546c
 800506c:	58025480 	.word	0x58025480
 8005070:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d160      	bne.n	8005140 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a7f      	ldr	r2, [pc, #508]	@ (8005280 <HAL_DMA_IRQHandler+0xc74>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d04a      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a7d      	ldr	r2, [pc, #500]	@ (8005284 <HAL_DMA_IRQHandler+0xc78>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d045      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a7c      	ldr	r2, [pc, #496]	@ (8005288 <HAL_DMA_IRQHandler+0xc7c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d040      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a7a      	ldr	r2, [pc, #488]	@ (800528c <HAL_DMA_IRQHandler+0xc80>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d03b      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a79      	ldr	r2, [pc, #484]	@ (8005290 <HAL_DMA_IRQHandler+0xc84>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d036      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a77      	ldr	r2, [pc, #476]	@ (8005294 <HAL_DMA_IRQHandler+0xc88>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d031      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a76      	ldr	r2, [pc, #472]	@ (8005298 <HAL_DMA_IRQHandler+0xc8c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d02c      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a74      	ldr	r2, [pc, #464]	@ (800529c <HAL_DMA_IRQHandler+0xc90>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d027      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a73      	ldr	r2, [pc, #460]	@ (80052a0 <HAL_DMA_IRQHandler+0xc94>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d022      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a71      	ldr	r2, [pc, #452]	@ (80052a4 <HAL_DMA_IRQHandler+0xc98>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01d      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a70      	ldr	r2, [pc, #448]	@ (80052a8 <HAL_DMA_IRQHandler+0xc9c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6e      	ldr	r2, [pc, #440]	@ (80052ac <HAL_DMA_IRQHandler+0xca0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6d      	ldr	r2, [pc, #436]	@ (80052b0 <HAL_DMA_IRQHandler+0xca4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6b      	ldr	r2, [pc, #428]	@ (80052b4 <HAL_DMA_IRQHandler+0xca8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6a      	ldr	r2, [pc, #424]	@ (80052b8 <HAL_DMA_IRQHandler+0xcac>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_DMA_IRQHandler+0xb12>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a68      	ldr	r2, [pc, #416]	@ (80052bc <HAL_DMA_IRQHandler+0xcb0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d108      	bne.n	8005130 <HAL_DMA_IRQHandler+0xb24>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0208 	bic.w	r2, r2, #8
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e007      	b.n	8005140 <HAL_DMA_IRQHandler+0xb34>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0204 	bic.w	r2, r2, #4
 800513e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8165 	beq.w	8005414 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005152:	e15f      	b.n	8005414 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2202      	movs	r2, #2
 800515e:	409a      	lsls	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80c5 	beq.w	80052f4 <HAL_DMA_IRQHandler+0xce8>
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80bf 	beq.w	80052f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	2202      	movs	r2, #2
 8005180:	409a      	lsls	r2, r3
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d018      	beq.n	80051c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 813a 	beq.w	8005418 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ac:	e134      	b.n	8005418 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8130 	beq.w	8005418 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c0:	e12a      	b.n	8005418 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 8089 	bne.w	80052e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005280 <HAL_DMA_IRQHandler+0xc74>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04a      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a29      	ldr	r2, [pc, #164]	@ (8005284 <HAL_DMA_IRQHandler+0xc78>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d045      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a28      	ldr	r2, [pc, #160]	@ (8005288 <HAL_DMA_IRQHandler+0xc7c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d040      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a26      	ldr	r2, [pc, #152]	@ (800528c <HAL_DMA_IRQHandler+0xc80>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d03b      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a25      	ldr	r2, [pc, #148]	@ (8005290 <HAL_DMA_IRQHandler+0xc84>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d036      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a23      	ldr	r2, [pc, #140]	@ (8005294 <HAL_DMA_IRQHandler+0xc88>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a22      	ldr	r2, [pc, #136]	@ (8005298 <HAL_DMA_IRQHandler+0xc8c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d02c      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a20      	ldr	r2, [pc, #128]	@ (800529c <HAL_DMA_IRQHandler+0xc90>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1f      	ldr	r2, [pc, #124]	@ (80052a0 <HAL_DMA_IRQHandler+0xc94>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1d      	ldr	r2, [pc, #116]	@ (80052a4 <HAL_DMA_IRQHandler+0xc98>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1c      	ldr	r2, [pc, #112]	@ (80052a8 <HAL_DMA_IRQHandler+0xc9c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <HAL_DMA_IRQHandler+0xca0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a19      	ldr	r2, [pc, #100]	@ (80052b0 <HAL_DMA_IRQHandler+0xca4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a17      	ldr	r2, [pc, #92]	@ (80052b4 <HAL_DMA_IRQHandler+0xca8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a16      	ldr	r2, [pc, #88]	@ (80052b8 <HAL_DMA_IRQHandler+0xcac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_DMA_IRQHandler+0xc62>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a14      	ldr	r2, [pc, #80]	@ (80052bc <HAL_DMA_IRQHandler+0xcb0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d128      	bne.n	80052c0 <HAL_DMA_IRQHandler+0xcb4>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0214 	bic.w	r2, r2, #20
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e027      	b.n	80052d0 <HAL_DMA_IRQHandler+0xcc4>
 8005280:	40020010 	.word	0x40020010
 8005284:	40020028 	.word	0x40020028
 8005288:	40020040 	.word	0x40020040
 800528c:	40020058 	.word	0x40020058
 8005290:	40020070 	.word	0x40020070
 8005294:	40020088 	.word	0x40020088
 8005298:	400200a0 	.word	0x400200a0
 800529c:	400200b8 	.word	0x400200b8
 80052a0:	40020410 	.word	0x40020410
 80052a4:	40020428 	.word	0x40020428
 80052a8:	40020440 	.word	0x40020440
 80052ac:	40020458 	.word	0x40020458
 80052b0:	40020470 	.word	0x40020470
 80052b4:	40020488 	.word	0x40020488
 80052b8:	400204a0 	.word	0x400204a0
 80052bc:	400204b8 	.word	0x400204b8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 020a 	bic.w	r2, r2, #10
 80052ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8097 	beq.w	8005418 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052f2:	e091      	b.n	8005418 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2208      	movs	r2, #8
 80052fe:	409a      	lsls	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8088 	beq.w	800541a <HAL_DMA_IRQHandler+0xe0e>
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8082 	beq.w	800541a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a41      	ldr	r2, [pc, #260]	@ (8005420 <HAL_DMA_IRQHandler+0xe14>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d04a      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a3f      	ldr	r2, [pc, #252]	@ (8005424 <HAL_DMA_IRQHandler+0xe18>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d045      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a3e      	ldr	r2, [pc, #248]	@ (8005428 <HAL_DMA_IRQHandler+0xe1c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d040      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a3c      	ldr	r2, [pc, #240]	@ (800542c <HAL_DMA_IRQHandler+0xe20>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d03b      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a3b      	ldr	r2, [pc, #236]	@ (8005430 <HAL_DMA_IRQHandler+0xe24>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d036      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a39      	ldr	r2, [pc, #228]	@ (8005434 <HAL_DMA_IRQHandler+0xe28>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d031      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a38      	ldr	r2, [pc, #224]	@ (8005438 <HAL_DMA_IRQHandler+0xe2c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d02c      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a36      	ldr	r2, [pc, #216]	@ (800543c <HAL_DMA_IRQHandler+0xe30>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d027      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a35      	ldr	r2, [pc, #212]	@ (8005440 <HAL_DMA_IRQHandler+0xe34>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d022      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a33      	ldr	r2, [pc, #204]	@ (8005444 <HAL_DMA_IRQHandler+0xe38>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01d      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a32      	ldr	r2, [pc, #200]	@ (8005448 <HAL_DMA_IRQHandler+0xe3c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a30      	ldr	r2, [pc, #192]	@ (800544c <HAL_DMA_IRQHandler+0xe40>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2f      	ldr	r2, [pc, #188]	@ (8005450 <HAL_DMA_IRQHandler+0xe44>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2d      	ldr	r2, [pc, #180]	@ (8005454 <HAL_DMA_IRQHandler+0xe48>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005458 <HAL_DMA_IRQHandler+0xe4c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_DMA_IRQHandler+0xdaa>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	@ (800545c <HAL_DMA_IRQHandler+0xe50>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d108      	bne.n	80053c8 <HAL_DMA_IRQHandler+0xdbc>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 021c 	bic.w	r2, r2, #28
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e007      	b.n	80053d8 <HAL_DMA_IRQHandler+0xdcc>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 020e 	bic.w	r2, r2, #14
 80053d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2201      	movs	r2, #1
 80053e2:	409a      	lsls	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
 800540e:	e004      	b.n	800541a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005410:	bf00      	nop
 8005412:	e002      	b.n	800541a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005414:	bf00      	nop
 8005416:	e000      	b.n	800541a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005418:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800541a:	3728      	adds	r7, #40	@ 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8

08005460 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005472:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005478:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7f      	ldr	r2, [pc, #508]	@ (800567c <DMA_SetConfig+0x21c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d072      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a7d      	ldr	r2, [pc, #500]	@ (8005680 <DMA_SetConfig+0x220>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d06d      	beq.n	800556a <DMA_SetConfig+0x10a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a7c      	ldr	r2, [pc, #496]	@ (8005684 <DMA_SetConfig+0x224>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d068      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a7a      	ldr	r2, [pc, #488]	@ (8005688 <DMA_SetConfig+0x228>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d063      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a79      	ldr	r2, [pc, #484]	@ (800568c <DMA_SetConfig+0x22c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d05e      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a77      	ldr	r2, [pc, #476]	@ (8005690 <DMA_SetConfig+0x230>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d059      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a76      	ldr	r2, [pc, #472]	@ (8005694 <DMA_SetConfig+0x234>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d054      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a74      	ldr	r2, [pc, #464]	@ (8005698 <DMA_SetConfig+0x238>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04f      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a73      	ldr	r2, [pc, #460]	@ (800569c <DMA_SetConfig+0x23c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d04a      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a71      	ldr	r2, [pc, #452]	@ (80056a0 <DMA_SetConfig+0x240>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d045      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a70      	ldr	r2, [pc, #448]	@ (80056a4 <DMA_SetConfig+0x244>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d040      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a6e      	ldr	r2, [pc, #440]	@ (80056a8 <DMA_SetConfig+0x248>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d03b      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a6d      	ldr	r2, [pc, #436]	@ (80056ac <DMA_SetConfig+0x24c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d036      	beq.n	800556a <DMA_SetConfig+0x10a>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6b      	ldr	r2, [pc, #428]	@ (80056b0 <DMA_SetConfig+0x250>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d031      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a6a      	ldr	r2, [pc, #424]	@ (80056b4 <DMA_SetConfig+0x254>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d02c      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a68      	ldr	r2, [pc, #416]	@ (80056b8 <DMA_SetConfig+0x258>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d027      	beq.n	800556a <DMA_SetConfig+0x10a>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a67      	ldr	r2, [pc, #412]	@ (80056bc <DMA_SetConfig+0x25c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a65      	ldr	r2, [pc, #404]	@ (80056c0 <DMA_SetConfig+0x260>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d01d      	beq.n	800556a <DMA_SetConfig+0x10a>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a64      	ldr	r2, [pc, #400]	@ (80056c4 <DMA_SetConfig+0x264>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a62      	ldr	r2, [pc, #392]	@ (80056c8 <DMA_SetConfig+0x268>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a61      	ldr	r2, [pc, #388]	@ (80056cc <DMA_SetConfig+0x26c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <DMA_SetConfig+0x10a>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a5f      	ldr	r2, [pc, #380]	@ (80056d0 <DMA_SetConfig+0x270>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a5e      	ldr	r2, [pc, #376]	@ (80056d4 <DMA_SetConfig+0x274>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <DMA_SetConfig+0x10a>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a5c      	ldr	r2, [pc, #368]	@ (80056d8 <DMA_SetConfig+0x278>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d101      	bne.n	800556e <DMA_SetConfig+0x10e>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <DMA_SetConfig+0x110>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00d      	beq.n	8005590 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800557c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800558e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a39      	ldr	r2, [pc, #228]	@ (800567c <DMA_SetConfig+0x21c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d04a      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a38      	ldr	r2, [pc, #224]	@ (8005680 <DMA_SetConfig+0x220>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d045      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a36      	ldr	r2, [pc, #216]	@ (8005684 <DMA_SetConfig+0x224>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d040      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a35      	ldr	r2, [pc, #212]	@ (8005688 <DMA_SetConfig+0x228>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d03b      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a33      	ldr	r2, [pc, #204]	@ (800568c <DMA_SetConfig+0x22c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d036      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a32      	ldr	r2, [pc, #200]	@ (8005690 <DMA_SetConfig+0x230>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d031      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a30      	ldr	r2, [pc, #192]	@ (8005694 <DMA_SetConfig+0x234>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02c      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2f      	ldr	r2, [pc, #188]	@ (8005698 <DMA_SetConfig+0x238>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d027      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2d      	ldr	r2, [pc, #180]	@ (800569c <DMA_SetConfig+0x23c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2c      	ldr	r2, [pc, #176]	@ (80056a0 <DMA_SetConfig+0x240>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01d      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2a      	ldr	r2, [pc, #168]	@ (80056a4 <DMA_SetConfig+0x244>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a29      	ldr	r2, [pc, #164]	@ (80056a8 <DMA_SetConfig+0x248>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a27      	ldr	r2, [pc, #156]	@ (80056ac <DMA_SetConfig+0x24c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a26      	ldr	r2, [pc, #152]	@ (80056b0 <DMA_SetConfig+0x250>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a24      	ldr	r2, [pc, #144]	@ (80056b4 <DMA_SetConfig+0x254>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <DMA_SetConfig+0x1d0>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a23      	ldr	r2, [pc, #140]	@ (80056b8 <DMA_SetConfig+0x258>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <DMA_SetConfig+0x1d4>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <DMA_SetConfig+0x1d6>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d059      	beq.n	80056ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	223f      	movs	r2, #63	@ 0x3f
 8005644:	409a      	lsls	r2, r3
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005658:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b40      	cmp	r3, #64	@ 0x40
 8005668:	d138      	bne.n	80056dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800567a:	e086      	b.n	800578a <DMA_SetConfig+0x32a>
 800567c:	40020010 	.word	0x40020010
 8005680:	40020028 	.word	0x40020028
 8005684:	40020040 	.word	0x40020040
 8005688:	40020058 	.word	0x40020058
 800568c:	40020070 	.word	0x40020070
 8005690:	40020088 	.word	0x40020088
 8005694:	400200a0 	.word	0x400200a0
 8005698:	400200b8 	.word	0x400200b8
 800569c:	40020410 	.word	0x40020410
 80056a0:	40020428 	.word	0x40020428
 80056a4:	40020440 	.word	0x40020440
 80056a8:	40020458 	.word	0x40020458
 80056ac:	40020470 	.word	0x40020470
 80056b0:	40020488 	.word	0x40020488
 80056b4:	400204a0 	.word	0x400204a0
 80056b8:	400204b8 	.word	0x400204b8
 80056bc:	58025408 	.word	0x58025408
 80056c0:	5802541c 	.word	0x5802541c
 80056c4:	58025430 	.word	0x58025430
 80056c8:	58025444 	.word	0x58025444
 80056cc:	58025458 	.word	0x58025458
 80056d0:	5802546c 	.word	0x5802546c
 80056d4:	58025480 	.word	0x58025480
 80056d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	60da      	str	r2, [r3, #12]
}
 80056ec:	e04d      	b.n	800578a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a29      	ldr	r2, [pc, #164]	@ (8005798 <DMA_SetConfig+0x338>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <DMA_SetConfig+0x2de>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a27      	ldr	r2, [pc, #156]	@ (800579c <DMA_SetConfig+0x33c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01d      	beq.n	800573e <DMA_SetConfig+0x2de>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a26      	ldr	r2, [pc, #152]	@ (80057a0 <DMA_SetConfig+0x340>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <DMA_SetConfig+0x2de>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <DMA_SetConfig+0x344>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <DMA_SetConfig+0x2de>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a23      	ldr	r2, [pc, #140]	@ (80057a8 <DMA_SetConfig+0x348>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <DMA_SetConfig+0x2de>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <DMA_SetConfig+0x34c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <DMA_SetConfig+0x2de>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a20      	ldr	r2, [pc, #128]	@ (80057b0 <DMA_SetConfig+0x350>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <DMA_SetConfig+0x2de>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1e      	ldr	r2, [pc, #120]	@ (80057b4 <DMA_SetConfig+0x354>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <DMA_SetConfig+0x2e2>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <DMA_SetConfig+0x2e4>
 8005742:	2300      	movs	r3, #0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d020      	beq.n	800578a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2201      	movs	r2, #1
 8005752:	409a      	lsls	r2, r3
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b40      	cmp	r3, #64	@ 0x40
 8005766:	d108      	bne.n	800577a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	60da      	str	r2, [r3, #12]
}
 8005778:	e007      	b.n	800578a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	60da      	str	r2, [r3, #12]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	58025408 	.word	0x58025408
 800579c:	5802541c 	.word	0x5802541c
 80057a0:	58025430 	.word	0x58025430
 80057a4:	58025444 	.word	0x58025444
 80057a8:	58025458 	.word	0x58025458
 80057ac:	5802546c 	.word	0x5802546c
 80057b0:	58025480 	.word	0x58025480
 80057b4:	58025494 	.word	0x58025494

080057b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a42      	ldr	r2, [pc, #264]	@ (80058d0 <DMA_CalcBaseAndBitshift+0x118>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d04a      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a41      	ldr	r2, [pc, #260]	@ (80058d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d045      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3f      	ldr	r2, [pc, #252]	@ (80058d8 <DMA_CalcBaseAndBitshift+0x120>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d040      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3e      	ldr	r2, [pc, #248]	@ (80058dc <DMA_CalcBaseAndBitshift+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d03b      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3c      	ldr	r2, [pc, #240]	@ (80058e0 <DMA_CalcBaseAndBitshift+0x128>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d036      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a3b      	ldr	r2, [pc, #236]	@ (80058e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d031      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a39      	ldr	r2, [pc, #228]	@ (80058e8 <DMA_CalcBaseAndBitshift+0x130>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02c      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a38      	ldr	r2, [pc, #224]	@ (80058ec <DMA_CalcBaseAndBitshift+0x134>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d027      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a36      	ldr	r2, [pc, #216]	@ (80058f0 <DMA_CalcBaseAndBitshift+0x138>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d022      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a35      	ldr	r2, [pc, #212]	@ (80058f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d01d      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a33      	ldr	r2, [pc, #204]	@ (80058f8 <DMA_CalcBaseAndBitshift+0x140>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d018      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a32      	ldr	r2, [pc, #200]	@ (80058fc <DMA_CalcBaseAndBitshift+0x144>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a30      	ldr	r2, [pc, #192]	@ (8005900 <DMA_CalcBaseAndBitshift+0x148>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2f      	ldr	r2, [pc, #188]	@ (8005904 <DMA_CalcBaseAndBitshift+0x14c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2d      	ldr	r2, [pc, #180]	@ (8005908 <DMA_CalcBaseAndBitshift+0x150>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <DMA_CalcBaseAndBitshift+0xa8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2c      	ldr	r2, [pc, #176]	@ (800590c <DMA_CalcBaseAndBitshift+0x154>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <DMA_CalcBaseAndBitshift+0xac>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <DMA_CalcBaseAndBitshift+0xae>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d024      	beq.n	80058b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	3b10      	subs	r3, #16
 8005872:	4a27      	ldr	r2, [pc, #156]	@ (8005910 <DMA_CalcBaseAndBitshift+0x158>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	4a24      	ldr	r2, [pc, #144]	@ (8005914 <DMA_CalcBaseAndBitshift+0x15c>)
 8005884:	5cd3      	ldrb	r3, [r2, r3]
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d908      	bls.n	80058a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	4b1f      	ldr	r3, [pc, #124]	@ (8005918 <DMA_CalcBaseAndBitshift+0x160>)
 800589a:	4013      	ands	r3, r2
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80058a2:	e00d      	b.n	80058c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005918 <DMA_CalcBaseAndBitshift+0x160>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b2:	e005      	b.n	80058c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40020010 	.word	0x40020010
 80058d4:	40020028 	.word	0x40020028
 80058d8:	40020040 	.word	0x40020040
 80058dc:	40020058 	.word	0x40020058
 80058e0:	40020070 	.word	0x40020070
 80058e4:	40020088 	.word	0x40020088
 80058e8:	400200a0 	.word	0x400200a0
 80058ec:	400200b8 	.word	0x400200b8
 80058f0:	40020410 	.word	0x40020410
 80058f4:	40020428 	.word	0x40020428
 80058f8:	40020440 	.word	0x40020440
 80058fc:	40020458 	.word	0x40020458
 8005900:	40020470 	.word	0x40020470
 8005904:	40020488 	.word	0x40020488
 8005908:	400204a0 	.word	0x400204a0
 800590c:	400204b8 	.word	0x400204b8
 8005910:	aaaaaaab 	.word	0xaaaaaaab
 8005914:	0800c950 	.word	0x0800c950
 8005918:	fffffc00 	.word	0xfffffc00

0800591c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d120      	bne.n	8005972 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	2b03      	cmp	r3, #3
 8005936:	d858      	bhi.n	80059ea <DMA_CheckFifoParam+0xce>
 8005938:	a201      	add	r2, pc, #4	@ (adr r2, 8005940 <DMA_CheckFifoParam+0x24>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005951 	.word	0x08005951
 8005944:	08005963 	.word	0x08005963
 8005948:	08005951 	.word	0x08005951
 800594c:	080059eb 	.word	0x080059eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d048      	beq.n	80059ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005960:	e045      	b.n	80059ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800596a:	d142      	bne.n	80059f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005970:	e03f      	b.n	80059f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800597a:	d123      	bne.n	80059c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005980:	2b03      	cmp	r3, #3
 8005982:	d838      	bhi.n	80059f6 <DMA_CheckFifoParam+0xda>
 8005984:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <DMA_CheckFifoParam+0x70>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	0800599d 	.word	0x0800599d
 8005990:	080059a3 	.word	0x080059a3
 8005994:	0800599d 	.word	0x0800599d
 8005998:	080059b5 	.word	0x080059b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
        break;
 80059a0:	e030      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d025      	beq.n	80059fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059b2:	e022      	b.n	80059fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059bc:	d11f      	bne.n	80059fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059c2:	e01c      	b.n	80059fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d902      	bls.n	80059d2 <DMA_CheckFifoParam+0xb6>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d003      	beq.n	80059d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80059d0:	e018      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
        break;
 80059d6:	e015      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00e      	beq.n	8005a02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	73fb      	strb	r3, [r7, #15]
    break;
 80059e8:	e00b      	b.n	8005a02 <DMA_CheckFifoParam+0xe6>
        break;
 80059ea:	bf00      	nop
 80059ec:	e00a      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        break;
 80059ee:	bf00      	nop
 80059f0:	e008      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        break;
 80059f2:	bf00      	nop
 80059f4:	e006      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        break;
 80059f6:	bf00      	nop
 80059f8:	e004      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        break;
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
        break;
 80059fe:	bf00      	nop
 8005a00:	e000      	b.n	8005a04 <DMA_CheckFifoParam+0xe8>
    break;
 8005a02:	bf00      	nop
    }
  }

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a38      	ldr	r2, [pc, #224]	@ (8005b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d022      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a36      	ldr	r2, [pc, #216]	@ (8005b0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01d      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a35      	ldr	r2, [pc, #212]	@ (8005b10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d018      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a33      	ldr	r2, [pc, #204]	@ (8005b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a32      	ldr	r2, [pc, #200]	@ (8005b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a30      	ldr	r2, [pc, #192]	@ (8005b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2f      	ldr	r2, [pc, #188]	@ (8005b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d101      	bne.n	8005a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01a      	beq.n	8005ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	3b08      	subs	r3, #8
 8005a84:	4a28      	ldr	r2, [pc, #160]	@ (8005b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	091b      	lsrs	r3, r3, #4
 8005a8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4b26      	ldr	r3, [pc, #152]	@ (8005b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	461a      	mov	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a24      	ldr	r2, [pc, #144]	@ (8005b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005aa0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ab0:	e024      	b.n	8005afc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	3b10      	subs	r3, #16
 8005aba:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d806      	bhi.n	8005ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d902      	bls.n	8005ada <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a16      	ldr	r2, [pc, #88]	@ (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	58025408 	.word	0x58025408
 8005b0c:	5802541c 	.word	0x5802541c
 8005b10:	58025430 	.word	0x58025430
 8005b14:	58025444 	.word	0x58025444
 8005b18:	58025458 	.word	0x58025458
 8005b1c:	5802546c 	.word	0x5802546c
 8005b20:	58025480 	.word	0x58025480
 8005b24:	58025494 	.word	0x58025494
 8005b28:	cccccccd 	.word	0xcccccccd
 8005b2c:	16009600 	.word	0x16009600
 8005b30:	58025880 	.word	0x58025880
 8005b34:	aaaaaaab 	.word	0xaaaaaaab
 8005b38:	400204b8 	.word	0x400204b8
 8005b3c:	4002040f 	.word	0x4002040f
 8005b40:	10008200 	.word	0x10008200
 8005b44:	40020880 	.word	0x40020880

08005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d04a      	beq.n	8005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d847      	bhi.n	8005bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a25      	ldr	r2, [pc, #148]	@ (8005c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d022      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a24      	ldr	r2, [pc, #144]	@ (8005c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d01d      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a22      	ldr	r2, [pc, #136]	@ (8005c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a21      	ldr	r2, [pc, #132]	@ (8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4b17      	ldr	r3, [pc, #92]	@ (8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005bd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8005bd2:	e009      	b.n	8005be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4b14      	ldr	r3, [pc, #80]	@ (8005c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a11      	ldr	r2, [pc, #68]	@ (8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005be6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	58025408 	.word	0x58025408
 8005c04:	5802541c 	.word	0x5802541c
 8005c08:	58025430 	.word	0x58025430
 8005c0c:	58025444 	.word	0x58025444
 8005c10:	58025458 	.word	0x58025458
 8005c14:	5802546c 	.word	0x5802546c
 8005c18:	58025480 	.word	0x58025480
 8005c1c:	58025494 	.word	0x58025494
 8005c20:	1600963f 	.word	0x1600963f
 8005c24:	58025940 	.word	0x58025940
 8005c28:	1000823f 	.word	0x1000823f
 8005c2c:	40020940 	.word	0x40020940

08005c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	@ 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c3e:	4b86      	ldr	r3, [pc, #536]	@ (8005e58 <HAL_GPIO_Init+0x228>)
 8005c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c42:	e18c      	b.n	8005f5e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 817e 	beq.w	8005f58 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d005      	beq.n	8005c74 <HAL_GPIO_Init+0x44>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f003 0303 	and.w	r3, r3, #3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d130      	bne.n	8005cd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2203      	movs	r2, #3
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005caa:	2201      	movs	r2, #1
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f003 0201 	and.w	r2, r3, #1
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d017      	beq.n	8005d12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	2203      	movs	r2, #3
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d123      	bne.n	8005d66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	08da      	lsrs	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3208      	adds	r2, #8
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	220f      	movs	r2, #15
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	08da      	lsrs	r2, r3, #3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3208      	adds	r2, #8
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	2203      	movs	r2, #3
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 0203 	and.w	r2, r3, #3
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80d8 	beq.w	8005f58 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da8:	4b2c      	ldr	r3, [pc, #176]	@ (8005e5c <HAL_GPIO_Init+0x22c>)
 8005daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dae:	4a2b      	ldr	r2, [pc, #172]	@ (8005e5c <HAL_GPIO_Init+0x22c>)
 8005db0:	f043 0302 	orr.w	r3, r3, #2
 8005db4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005db8:	4b28      	ldr	r3, [pc, #160]	@ (8005e5c <HAL_GPIO_Init+0x22c>)
 8005dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dc6:	4a26      	ldr	r2, [pc, #152]	@ (8005e60 <HAL_GPIO_Init+0x230>)
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	089b      	lsrs	r3, r3, #2
 8005dcc:	3302      	adds	r3, #2
 8005dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	220f      	movs	r2, #15
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <HAL_GPIO_Init+0x234>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d04a      	beq.n	8005e88 <HAL_GPIO_Init+0x258>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e68 <HAL_GPIO_Init+0x238>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02b      	beq.n	8005e52 <HAL_GPIO_Init+0x222>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e6c <HAL_GPIO_Init+0x23c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d025      	beq.n	8005e4e <HAL_GPIO_Init+0x21e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <HAL_GPIO_Init+0x240>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01f      	beq.n	8005e4a <HAL_GPIO_Init+0x21a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <HAL_GPIO_Init+0x244>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d019      	beq.n	8005e46 <HAL_GPIO_Init+0x216>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <HAL_GPIO_Init+0x248>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_GPIO_Init+0x212>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <HAL_GPIO_Init+0x24c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00d      	beq.n	8005e3e <HAL_GPIO_Init+0x20e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <HAL_GPIO_Init+0x250>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <HAL_GPIO_Init+0x20a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <HAL_GPIO_Init+0x254>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <HAL_GPIO_Init+0x206>
 8005e32:	2309      	movs	r3, #9
 8005e34:	e029      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e36:	230a      	movs	r3, #10
 8005e38:	e027      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e3a:	2307      	movs	r3, #7
 8005e3c:	e025      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e3e:	2306      	movs	r3, #6
 8005e40:	e023      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e42:	2305      	movs	r3, #5
 8005e44:	e021      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e46:	2304      	movs	r3, #4
 8005e48:	e01f      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e01d      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e01b      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e019      	b.n	8005e8a <HAL_GPIO_Init+0x25a>
 8005e56:	bf00      	nop
 8005e58:	58000080 	.word	0x58000080
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	58000400 	.word	0x58000400
 8005e64:	58020000 	.word	0x58020000
 8005e68:	58020400 	.word	0x58020400
 8005e6c:	58020800 	.word	0x58020800
 8005e70:	58020c00 	.word	0x58020c00
 8005e74:	58021000 	.word	0x58021000
 8005e78:	58021400 	.word	0x58021400
 8005e7c:	58021800 	.word	0x58021800
 8005e80:	58021c00 	.word	0x58021c00
 8005e84:	58022400 	.word	0x58022400
 8005e88:	2300      	movs	r3, #0
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	f002 0203 	and.w	r2, r2, #3
 8005e90:	0092      	lsls	r2, r2, #2
 8005e92:	4093      	lsls	r3, r2
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e9a:	4938      	ldr	r1, [pc, #224]	@ (8005f7c <HAL_GPIO_Init+0x34c>)
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	089b      	lsrs	r3, r3, #2
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d003      	beq.n	8005f28 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	43db      	mvns	r3, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f ae6b 	bne.w	8005c44 <HAL_GPIO_Init+0x14>
  }
}
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	3724      	adds	r7, #36	@ 0x24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	58000400 	.word	0x58000400

08005f80 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005f88:	4b19      	ldr	r3, [pc, #100]	@ (8005ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d00a      	beq.n	8005faa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f94:	4b16      	ldr	r3, [pc, #88]	@ (8005ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d001      	beq.n	8005fa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e01f      	b.n	8005fe6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e01d      	b.n	8005fe6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005faa:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f023 0207 	bic.w	r2, r3, #7
 8005fb2:	490f      	ldr	r1, [pc, #60]	@ (8005ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005fba:	f7fb fdd5 	bl	8001b68 <HAL_GetTick>
 8005fbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fc0:	e009      	b.n	8005fd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fc2:	f7fb fdd1 	bl	8001b68 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fd0:	d901      	bls.n	8005fd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e007      	b.n	8005fe6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fd6:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <HAL_PWREx_ConfigSupply+0x70>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe2:	d1ee      	bne.n	8005fc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	58024800 	.word	0x58024800

08005ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08c      	sub	sp, #48	@ 0x30
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e3c8      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8087 	beq.w	8006122 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006014:	4b88      	ldr	r3, [pc, #544]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800601c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800601e:	4b86      	ldr	r3, [pc, #536]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006026:	2b10      	cmp	r3, #16
 8006028:	d007      	beq.n	800603a <HAL_RCC_OscConfig+0x46>
 800602a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602c:	2b18      	cmp	r3, #24
 800602e:	d110      	bne.n	8006052 <HAL_RCC_OscConfig+0x5e>
 8006030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d10b      	bne.n	8006052 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603a:	4b7f      	ldr	r3, [pc, #508]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d06c      	beq.n	8006120 <HAL_RCC_OscConfig+0x12c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d168      	bne.n	8006120 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e3a2      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605a:	d106      	bne.n	800606a <HAL_RCC_OscConfig+0x76>
 800605c:	4b76      	ldr	r3, [pc, #472]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a75      	ldr	r2, [pc, #468]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e02e      	b.n	80060c8 <HAL_RCC_OscConfig+0xd4>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10c      	bne.n	800608c <HAL_RCC_OscConfig+0x98>
 8006072:	4b71      	ldr	r3, [pc, #452]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a70      	ldr	r2, [pc, #448]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b6e      	ldr	r3, [pc, #440]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6d      	ldr	r2, [pc, #436]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006084:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e01d      	b.n	80060c8 <HAL_RCC_OscConfig+0xd4>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006094:	d10c      	bne.n	80060b0 <HAL_RCC_OscConfig+0xbc>
 8006096:	4b68      	ldr	r3, [pc, #416]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a67      	ldr	r2, [pc, #412]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800609c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b65      	ldr	r3, [pc, #404]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a64      	ldr	r2, [pc, #400]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e00b      	b.n	80060c8 <HAL_RCC_OscConfig+0xd4>
 80060b0:	4b61      	ldr	r3, [pc, #388]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a60      	ldr	r2, [pc, #384]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fb fd4a 	bl	8001b68 <HAL_GetTick>
 80060d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d8:	f7fb fd46 	bl	8001b68 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b64      	cmp	r3, #100	@ 0x64
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e356      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060ea:	4b53      	ldr	r3, [pc, #332]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe4>
 80060f6:	e014      	b.n	8006122 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fd36 	bl	8001b68 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fb fd32 	bl	8001b68 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e342      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006112:	4b49      	ldr	r3, [pc, #292]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x10c>
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 808c 	beq.w	8006248 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006130:	4b41      	ldr	r3, [pc, #260]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006138:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800613a:	4b3f      	ldr	r3, [pc, #252]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800613c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <HAL_RCC_OscConfig+0x162>
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	2b18      	cmp	r3, #24
 800614a:	d137      	bne.n	80061bc <HAL_RCC_OscConfig+0x1c8>
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d132      	bne.n	80061bc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006156:	4b38      	ldr	r3, [pc, #224]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_RCC_OscConfig+0x17a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e314      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800616e:	4b32      	ldr	r3, [pc, #200]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 0219 	bic.w	r2, r3, #25
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	492f      	ldr	r1, [pc, #188]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fb fcf2 	bl	8001b68 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006188:	f7fb fcee 	bl	8001b68 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e2fe      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800619a:	4b27      	ldr	r3, [pc, #156]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a6:	4b24      	ldr	r3, [pc, #144]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	4920      	ldr	r1, [pc, #128]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ba:	e045      	b.n	8006248 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d026      	beq.n	8006212 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 0219 	bic.w	r2, r3, #25
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4919      	ldr	r1, [pc, #100]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d6:	f7fb fcc7 	bl	8001b68 <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061de:	f7fb fcc3 	bl	8001b68 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e2d3      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061f0:	4b11      	ldr	r3, [pc, #68]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0f0      	beq.n	80061de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	061b      	lsls	r3, r3, #24
 800620a:	490b      	ldr	r1, [pc, #44]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 800620c:	4313      	orrs	r3, r2
 800620e:	604b      	str	r3, [r1, #4]
 8006210:	e01a      	b.n	8006248 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006212:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a08      	ldr	r2, [pc, #32]	@ (8006238 <HAL_RCC_OscConfig+0x244>)
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621e:	f7fb fca3 	bl	8001b68 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006224:	e00a      	b.n	800623c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006226:	f7fb fc9f 	bl	8001b68 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	2b02      	cmp	r3, #2
 8006232:	d903      	bls.n	800623c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e2af      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
 8006238:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800623c:	4b96      	ldr	r3, [pc, #600]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1ee      	bne.n	8006226 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d06a      	beq.n	800632a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006254:	4b90      	ldr	r3, [pc, #576]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800625c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800625e:	4b8e      	ldr	r3, [pc, #568]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b08      	cmp	r3, #8
 8006268:	d007      	beq.n	800627a <HAL_RCC_OscConfig+0x286>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b18      	cmp	r3, #24
 800626e:	d11b      	bne.n	80062a8 <HAL_RCC_OscConfig+0x2b4>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d116      	bne.n	80062a8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800627a:	4b87      	ldr	r3, [pc, #540]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <HAL_RCC_OscConfig+0x29e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b80      	cmp	r3, #128	@ 0x80
 800628c:	d001      	beq.n	8006292 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e282      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006292:	4b81      	ldr	r3, [pc, #516]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	061b      	lsls	r3, r3, #24
 80062a0:	497d      	ldr	r1, [pc, #500]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062a6:	e040      	b.n	800632a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d023      	beq.n	80062f8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062b0:	4b79      	ldr	r3, [pc, #484]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a78      	ldr	r2, [pc, #480]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062bc:	f7fb fc54 	bl	8001b68 <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062c4:	f7fb fc50 	bl	8001b68 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e260      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062d6:	4b70      	ldr	r3, [pc, #448]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	4969      	ldr	r1, [pc, #420]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60cb      	str	r3, [r1, #12]
 80062f6:	e018      	b.n	800632a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062f8:	4b67      	ldr	r3, [pc, #412]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a66      	ldr	r2, [pc, #408]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80062fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006304:	f7fb fc30 	bl	8001b68 <HAL_GetTick>
 8006308:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800630c:	f7fb fc2c 	bl	8001b68 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e23c      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800631e:	4b5e      	ldr	r3, [pc, #376]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	d036      	beq.n	80063a4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d019      	beq.n	8006372 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800633e:	4b56      	ldr	r3, [pc, #344]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006342:	4a55      	ldr	r2, [pc, #340]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800634a:	f7fb fc0d 	bl	8001b68 <HAL_GetTick>
 800634e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006352:	f7fb fc09 	bl	8001b68 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e219      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006364:	4b4c      	ldr	r3, [pc, #304]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x35e>
 8006370:	e018      	b.n	80063a4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006372:	4b49      	ldr	r3, [pc, #292]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006376:	4a48      	ldr	r2, [pc, #288]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637e:	f7fb fbf3 	bl	8001b68 <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006386:	f7fb fbef 	bl	8001b68 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e1ff      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006398:	4b3f      	ldr	r3, [pc, #252]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800639a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d036      	beq.n	800641e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d019      	beq.n	80063ec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063b8:	4b37      	ldr	r3, [pc, #220]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a36      	ldr	r2, [pc, #216]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80063be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80063c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063c4:	f7fb fbd0 	bl	8001b68 <HAL_GetTick>
 80063c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063cc:	f7fb fbcc 	bl	8001b68 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e1dc      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063de:	4b2e      	ldr	r3, [pc, #184]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x3d8>
 80063ea:	e018      	b.n	800641e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a29      	ldr	r2, [pc, #164]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 80063f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063f8:	f7fb fbb6 	bl	8001b68 <HAL_GetTick>
 80063fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006400:	f7fb fbb2 	bl	8001b68 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e1c2      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006412:	4b21      	ldr	r3, [pc, #132]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8086 	beq.w	8006538 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800642c:	4b1b      	ldr	r3, [pc, #108]	@ (800649c <HAL_RCC_OscConfig+0x4a8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1a      	ldr	r2, [pc, #104]	@ (800649c <HAL_RCC_OscConfig+0x4a8>)
 8006432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006438:	f7fb fb96 	bl	8001b68 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006440:	f7fb fb92 	bl	8001b68 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	@ 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1a2      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <HAL_RCC_OscConfig+0x4a8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f0      	beq.n	8006440 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x480>
 8006466:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646a:	4a0b      	ldr	r2, [pc, #44]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	6713      	str	r3, [r2, #112]	@ 0x70
 8006472:	e032      	b.n	80064da <HAL_RCC_OscConfig+0x4e6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d111      	bne.n	80064a0 <HAL_RCC_OscConfig+0x4ac>
 800647c:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006480:	4a05      	ldr	r2, [pc, #20]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	6713      	str	r3, [r2, #112]	@ 0x70
 8006488:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648c:	4a02      	ldr	r2, [pc, #8]	@ (8006498 <HAL_RCC_OscConfig+0x4a4>)
 800648e:	f023 0304 	bic.w	r3, r3, #4
 8006492:	6713      	str	r3, [r2, #112]	@ 0x70
 8006494:	e021      	b.n	80064da <HAL_RCC_OscConfig+0x4e6>
 8006496:	bf00      	nop
 8006498:	58024400 	.word	0x58024400
 800649c:	58024800 	.word	0x58024800
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d10c      	bne.n	80064c2 <HAL_RCC_OscConfig+0x4ce>
 80064a8:	4b83      	ldr	r3, [pc, #524]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ac:	4a82      	ldr	r2, [pc, #520]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064ae:	f043 0304 	orr.w	r3, r3, #4
 80064b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b4:	4b80      	ldr	r3, [pc, #512]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b8:	4a7f      	ldr	r2, [pc, #508]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c0:	e00b      	b.n	80064da <HAL_RCC_OscConfig+0x4e6>
 80064c2:	4b7d      	ldr	r3, [pc, #500]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c6:	4a7c      	ldr	r2, [pc, #496]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ce:	4b7a      	ldr	r3, [pc, #488]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d2:	4a79      	ldr	r2, [pc, #484]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80064d4:	f023 0304 	bic.w	r3, r3, #4
 80064d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d015      	beq.n	800650e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e2:	f7fb fb41 	bl	8001b68 <HAL_GetTick>
 80064e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e8:	e00a      	b.n	8006500 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ea:	f7fb fb3d 	bl	8001b68 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e14b      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006500:	4b6d      	ldr	r3, [pc, #436]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0ee      	beq.n	80064ea <HAL_RCC_OscConfig+0x4f6>
 800650c:	e014      	b.n	8006538 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650e:	f7fb fb2b 	bl	8001b68 <HAL_GetTick>
 8006512:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006514:	e00a      	b.n	800652c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006516:	f7fb fb27 	bl	8001b68 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006524:	4293      	cmp	r3, r2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e135      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800652c:	4b62      	ldr	r3, [pc, #392]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ee      	bne.n	8006516 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 812a 	beq.w	8006796 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006542:	4b5d      	ldr	r3, [pc, #372]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800654a:	2b18      	cmp	r3, #24
 800654c:	f000 80ba 	beq.w	80066c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006554:	2b02      	cmp	r3, #2
 8006556:	f040 8095 	bne.w	8006684 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655a:	4b57      	ldr	r3, [pc, #348]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a56      	ldr	r2, [pc, #344]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006560:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006566:	f7fb faff 	bl	8001b68 <HAL_GetTick>
 800656a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800656e:	f7fb fafb 	bl	8001b68 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e10b      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006580:	4b4d      	ldr	r3, [pc, #308]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800658c:	4b4a      	ldr	r3, [pc, #296]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800658e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006590:	4b4a      	ldr	r3, [pc, #296]	@ (80066bc <HAL_RCC_OscConfig+0x6c8>)
 8006592:	4013      	ands	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800659c:	0112      	lsls	r2, r2, #4
 800659e:	430a      	orrs	r2, r1
 80065a0:	4945      	ldr	r1, [pc, #276]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065aa:	3b01      	subs	r3, #1
 80065ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b4:	3b01      	subs	r3, #1
 80065b6:	025b      	lsls	r3, r3, #9
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c0:	3b01      	subs	r3, #1
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ce:	3b01      	subs	r3, #1
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065d6:	4938      	ldr	r1, [pc, #224]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80065dc:	4b36      	ldr	r3, [pc, #216]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	4a35      	ldr	r2, [pc, #212]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065e8:	4b33      	ldr	r3, [pc, #204]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ec:	4b34      	ldr	r3, [pc, #208]	@ (80066c0 <HAL_RCC_OscConfig+0x6cc>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065f4:	00d2      	lsls	r2, r2, #3
 80065f6:	4930      	ldr	r1, [pc, #192]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065fc:	4b2e      	ldr	r3, [pc, #184]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	f023 020c 	bic.w	r2, r3, #12
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	492b      	ldr	r1, [pc, #172]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800660a:	4313      	orrs	r3, r2
 800660c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800660e:	4b2a      	ldr	r3, [pc, #168]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006612:	f023 0202 	bic.w	r2, r3, #2
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	4927      	ldr	r1, [pc, #156]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800661c:	4313      	orrs	r3, r2
 800661e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006620:	4b25      	ldr	r3, [pc, #148]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006624:	4a24      	ldr	r2, [pc, #144]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800662a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662c:	4b22      	ldr	r3, [pc, #136]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	4a21      	ldr	r2, [pc, #132]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006638:	4b1f      	ldr	r3, [pc, #124]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800663a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663c:	4a1e      	ldr	r2, [pc, #120]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800663e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006644:	4b1c      	ldr	r3, [pc, #112]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006648:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006650:	4b19      	ldr	r3, [pc, #100]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a18      	ldr	r2, [pc, #96]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800665a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fb fa84 	bl	8001b68 <HAL_GetTick>
 8006660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006664:	f7fb fa80 	bl	8001b68 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e090      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006676:	4b10      	ldr	r3, [pc, #64]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0f0      	beq.n	8006664 <HAL_RCC_OscConfig+0x670>
 8006682:	e088      	b.n	8006796 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006684:	4b0c      	ldr	r3, [pc, #48]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a0b      	ldr	r2, [pc, #44]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 800668a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800668e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fb fa6a 	bl	8001b68 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fb fa66 	bl	8001b68 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e076      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066aa:	4b03      	ldr	r3, [pc, #12]	@ (80066b8 <HAL_RCC_OscConfig+0x6c4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x6a4>
 80066b6:	e06e      	b.n	8006796 <HAL_RCC_OscConfig+0x7a2>
 80066b8:	58024400 	.word	0x58024400
 80066bc:	fffffc0c 	.word	0xfffffc0c
 80066c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066c4:	4b36      	ldr	r3, [pc, #216]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 80066c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066ca:	4b35      	ldr	r3, [pc, #212]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d031      	beq.n	800673c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f003 0203 	and.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d12a      	bne.n	800673c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	091b      	lsrs	r3, r3, #4
 80066ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d122      	bne.n	800673c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006700:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006702:	429a      	cmp	r2, r3
 8006704:	d11a      	bne.n	800673c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	0a5b      	lsrs	r3, r3, #9
 800670a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006712:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d111      	bne.n	800673c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006724:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006726:	429a      	cmp	r2, r3
 8006728:	d108      	bne.n	800673c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	0e1b      	lsrs	r3, r3, #24
 800672e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006736:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e02b      	b.n	8006798 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006740:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 8006742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006744:	08db      	lsrs	r3, r3, #3
 8006746:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800674a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	429a      	cmp	r2, r3
 8006754:	d01f      	beq.n	8006796 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006756:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 8006758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675a:	4a11      	ldr	r2, [pc, #68]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 800675c:	f023 0301 	bic.w	r3, r3, #1
 8006760:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006762:	f7fb fa01 	bl	8001b68 <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006768:	bf00      	nop
 800676a:	f7fb f9fd 	bl	8001b68 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	4293      	cmp	r3, r2
 8006774:	d0f9      	beq.n	800676a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006776:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 8006778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800677a:	4b0a      	ldr	r3, [pc, #40]	@ (80067a4 <HAL_RCC_OscConfig+0x7b0>)
 800677c:	4013      	ands	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006782:	00d2      	lsls	r2, r2, #3
 8006784:	4906      	ldr	r1, [pc, #24]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 8006786:	4313      	orrs	r3, r2
 8006788:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800678a:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	4a04      	ldr	r2, [pc, #16]	@ (80067a0 <HAL_RCC_OscConfig+0x7ac>)
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3730      	adds	r7, #48	@ 0x30
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	58024400 	.word	0x58024400
 80067a4:	ffff0007 	.word	0xffff0007

080067a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e19c      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067bc:	4b8a      	ldr	r3, [pc, #552]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d910      	bls.n	80067ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b87      	ldr	r3, [pc, #540]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f023 020f 	bic.w	r2, r3, #15
 80067d2:	4985      	ldr	r1, [pc, #532]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b83      	ldr	r3, [pc, #524]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e184      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d010      	beq.n	800681a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	4b7b      	ldr	r3, [pc, #492]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006804:	429a      	cmp	r2, r3
 8006806:	d908      	bls.n	800681a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006808:	4b78      	ldr	r3, [pc, #480]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	4975      	ldr	r1, [pc, #468]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006816:	4313      	orrs	r3, r2
 8006818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d010      	beq.n	8006848 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695a      	ldr	r2, [r3, #20]
 800682a:	4b70      	ldr	r3, [pc, #448]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006832:	429a      	cmp	r2, r3
 8006834:	d908      	bls.n	8006848 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006836:	4b6d      	ldr	r3, [pc, #436]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	496a      	ldr	r1, [pc, #424]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006844:	4313      	orrs	r3, r2
 8006846:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	4b64      	ldr	r3, [pc, #400]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006860:	429a      	cmp	r2, r3
 8006862:	d908      	bls.n	8006876 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006864:	4b61      	ldr	r3, [pc, #388]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	495e      	ldr	r1, [pc, #376]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006872:	4313      	orrs	r3, r2
 8006874:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d010      	beq.n	80068a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69da      	ldr	r2, [r3, #28]
 8006886:	4b59      	ldr	r3, [pc, #356]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800688e:	429a      	cmp	r2, r3
 8006890:	d908      	bls.n	80068a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006892:	4b56      	ldr	r3, [pc, #344]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	4953      	ldr	r1, [pc, #332]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	4b4d      	ldr	r3, [pc, #308]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	429a      	cmp	r2, r3
 80068be:	d908      	bls.n	80068d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c0:	4b4a      	ldr	r3, [pc, #296]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f023 020f 	bic.w	r2, r3, #15
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	4947      	ldr	r1, [pc, #284]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d055      	beq.n	800698a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068de:	4b43      	ldr	r3, [pc, #268]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4940      	ldr	r1, [pc, #256]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d107      	bne.n	8006908 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068f8:	4b3c      	ldr	r3, [pc, #240]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d121      	bne.n	8006948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0f6      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d107      	bne.n	8006920 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006910:	4b36      	ldr	r3, [pc, #216]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d115      	bne.n	8006948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0ea      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d107      	bne.n	8006938 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006928:	4b30      	ldr	r3, [pc, #192]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e0de      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006938:	4b2c      	ldr	r3, [pc, #176]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0d6      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006948:	4b28      	ldr	r3, [pc, #160]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f023 0207 	bic.w	r2, r3, #7
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4925      	ldr	r1, [pc, #148]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 8006956:	4313      	orrs	r3, r2
 8006958:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695a:	f7fb f905 	bl	8001b68 <HAL_GetTick>
 800695e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006960:	e00a      	b.n	8006978 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006962:	f7fb f901 	bl	8001b68 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e0be      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006978:	4b1c      	ldr	r3, [pc, #112]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	429a      	cmp	r2, r3
 8006988:	d1eb      	bne.n	8006962 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	4b14      	ldr	r3, [pc, #80]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d208      	bcs.n	80069b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a6:	4b11      	ldr	r3, [pc, #68]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f023 020f 	bic.w	r2, r3, #15
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	490e      	ldr	r1, [pc, #56]	@ (80069ec <HAL_RCC_ClockConfig+0x244>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b8:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d214      	bcs.n	80069f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c6:	4b08      	ldr	r3, [pc, #32]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f023 020f 	bic.w	r2, r3, #15
 80069ce:	4906      	ldr	r1, [pc, #24]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d6:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <HAL_RCC_ClockConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d005      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e086      	b.n	8006af6 <HAL_RCC_ClockConfig+0x34e>
 80069e8:	52002000 	.word	0x52002000
 80069ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	4b3f      	ldr	r3, [pc, #252]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d208      	bcs.n	8006a1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	4939      	ldr	r1, [pc, #228]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d010      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	4b34      	ldr	r3, [pc, #208]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d208      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a3a:	4b31      	ldr	r3, [pc, #196]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	492e      	ldr	r1, [pc, #184]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d010      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	4b28      	ldr	r3, [pc, #160]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d208      	bcs.n	8006a7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	4922      	ldr	r1, [pc, #136]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d010      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69da      	ldr	r2, [r3, #28]
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d208      	bcs.n	8006aa8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a96:	4b1a      	ldr	r3, [pc, #104]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	4917      	ldr	r1, [pc, #92]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006aa8:	f000 f834 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	4912      	ldr	r1, [pc, #72]	@ (8006b04 <HAL_RCC_ClockConfig+0x35c>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b00 <HAL_RCC_ClockConfig+0x358>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	4a0d      	ldr	r2, [pc, #52]	@ (8006b04 <HAL_RCC_ClockConfig+0x35c>)
 8006ad0:	5cd3      	ldrb	r3, [r2, r3]
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	4a0a      	ldr	r2, [pc, #40]	@ (8006b08 <HAL_RCC_ClockConfig+0x360>)
 8006ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8006b0c <HAL_RCC_ClockConfig+0x364>)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <HAL_RCC_ClockConfig+0x368>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fa fff2 	bl	8001ad4 <HAL_InitTick>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	58024400 	.word	0x58024400
 8006b04:	0800c940 	.word	0x0800c940
 8006b08:	24000040 	.word	0x24000040
 8006b0c:	2400003c 	.word	0x2400003c
 8006b10:	24000044 	.word	0x24000044

08006b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b089      	sub	sp, #36	@ 0x24
 8006b18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b1a:	4bb3      	ldr	r3, [pc, #716]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b22:	2b18      	cmp	r3, #24
 8006b24:	f200 8155 	bhi.w	8006dd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006b28:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006dd3 	.word	0x08006dd3
 8006b38:	08006dd3 	.word	0x08006dd3
 8006b3c:	08006dd3 	.word	0x08006dd3
 8006b40:	08006dd3 	.word	0x08006dd3
 8006b44:	08006dd3 	.word	0x08006dd3
 8006b48:	08006dd3 	.word	0x08006dd3
 8006b4c:	08006dd3 	.word	0x08006dd3
 8006b50:	08006bbb 	.word	0x08006bbb
 8006b54:	08006dd3 	.word	0x08006dd3
 8006b58:	08006dd3 	.word	0x08006dd3
 8006b5c:	08006dd3 	.word	0x08006dd3
 8006b60:	08006dd3 	.word	0x08006dd3
 8006b64:	08006dd3 	.word	0x08006dd3
 8006b68:	08006dd3 	.word	0x08006dd3
 8006b6c:	08006dd3 	.word	0x08006dd3
 8006b70:	08006bc1 	.word	0x08006bc1
 8006b74:	08006dd3 	.word	0x08006dd3
 8006b78:	08006dd3 	.word	0x08006dd3
 8006b7c:	08006dd3 	.word	0x08006dd3
 8006b80:	08006dd3 	.word	0x08006dd3
 8006b84:	08006dd3 	.word	0x08006dd3
 8006b88:	08006dd3 	.word	0x08006dd3
 8006b8c:	08006dd3 	.word	0x08006dd3
 8006b90:	08006bc7 	.word	0x08006bc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b94:	4b94      	ldr	r3, [pc, #592]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0320 	and.w	r3, r3, #32
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ba0:	4b91      	ldr	r3, [pc, #580]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	08db      	lsrs	r3, r3, #3
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	4a90      	ldr	r2, [pc, #576]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006bb2:	e111      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bb6:	61bb      	str	r3, [r7, #24]
      break;
 8006bb8:	e10e      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006bba:	4b8d      	ldr	r3, [pc, #564]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bbc:	61bb      	str	r3, [r7, #24]
      break;
 8006bbe:	e10b      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006bc0:	4b8c      	ldr	r3, [pc, #560]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bc2:	61bb      	str	r3, [r7, #24]
      break;
 8006bc4:	e108      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bc6:	4b88      	ldr	r3, [pc, #544]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006bd0:	4b85      	ldr	r3, [pc, #532]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	091b      	lsrs	r3, r3, #4
 8006bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006bdc:	4b82      	ldr	r3, [pc, #520]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006be6:	4b80      	ldr	r3, [pc, #512]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bea:	08db      	lsrs	r3, r3, #3
 8006bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	fb02 f303 	mul.w	r3, r2, r3
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80e1 	beq.w	8006dcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	f000 8083 	beq.w	8006d18 <HAL_RCC_GetSysClockFreq+0x204>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	f200 80a1 	bhi.w	8006d5c <HAL_RCC_GetSysClockFreq+0x248>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_RCC_GetSysClockFreq+0x114>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d056      	beq.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c26:	e099      	b.n	8006d5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c28:	4b6f      	ldr	r3, [pc, #444]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02d      	beq.n	8006c90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c34:	4b6c      	ldr	r3, [pc, #432]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0303 	and.w	r3, r3, #3
 8006c3e:	4a6b      	ldr	r2, [pc, #428]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
 8006c44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5e:	4b62      	ldr	r3, [pc, #392]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c72:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c8e:	e087      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006dfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca2:	4b51      	ldr	r3, [pc, #324]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cb6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cd2:	e065      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b40      	ldr	r3, [pc, #256]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cfa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d16:	e043      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d3e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d5a:	e021      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d82:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006da0:	4b11      	ldr	r3, [pc, #68]	@ (8006de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da4:	0a5b      	lsrs	r3, r3, #9
 8006da6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006daa:	3301      	adds	r3, #1
 8006dac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc4:	ee17 3a90 	vmov	r3, s15
 8006dc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006dca:	e005      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	61bb      	str	r3, [r7, #24]
      break;
 8006dd0:	e002      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006dd2:	4b07      	ldr	r3, [pc, #28]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006dd4:	61bb      	str	r3, [r7, #24]
      break;
 8006dd6:	bf00      	nop
  }

  return sysclockfreq;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3724      	adds	r7, #36	@ 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	58024400 	.word	0x58024400
 8006dec:	03d09000 	.word	0x03d09000
 8006df0:	003d0900 	.word	0x003d0900
 8006df4:	007a1200 	.word	0x007a1200
 8006df8:	46000000 	.word	0x46000000
 8006dfc:	4c742400 	.word	0x4c742400
 8006e00:	4a742400 	.word	0x4a742400
 8006e04:	4af42400 	.word	0x4af42400

08006e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006e0e:	f7ff fe81 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b10      	ldr	r3, [pc, #64]	@ (8006e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	490f      	ldr	r1, [pc, #60]	@ (8006e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8006e20:	5ccb      	ldrb	r3, [r1, r3]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	4a09      	ldr	r2, [pc, #36]	@ (8006e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8006e36:	5cd3      	ldrb	r3, [r2, r3]
 8006e38:	f003 031f 	and.w	r3, r3, #31
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e42:	4a07      	ldr	r2, [pc, #28]	@ (8006e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e46:	4a07      	ldr	r2, [pc, #28]	@ (8006e64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	0800c940 	.word	0x0800c940
 8006e60:	24000040 	.word	0x24000040
 8006e64:	2400003c 	.word	0x2400003c

08006e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e6c:	f7ff ffcc 	bl	8006e08 <HAL_RCC_GetHCLKFreq>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	091b      	lsrs	r3, r3, #4
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	4904      	ldr	r1, [pc, #16]	@ (8006e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e7e:	5ccb      	ldrb	r3, [r1, r3]
 8006e80:	f003 031f 	and.w	r3, r3, #31
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	0800c940 	.word	0x0800c940

08006e94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e98:	b0c6      	sub	sp, #280	@ 0x118
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006eb8:	2500      	movs	r5, #0
 8006eba:	ea54 0305 	orrs.w	r3, r4, r5
 8006ebe:	d049      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ec6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eca:	d02f      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ecc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ed0:	d828      	bhi.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ed6:	d01a      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ed8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006edc:	d822      	bhi.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee6:	d007      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ee8:	e01c      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eea:	4bab      	ldr	r3, [pc, #684]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	4aaa      	ldr	r2, [pc, #680]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ef6:	e01a      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efc:	3308      	adds	r3, #8
 8006efe:	2102      	movs	r1, #2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f002 fa49 	bl	8009398 <RCCEx_PLL2_Config>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f0c:	e00f      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f12:	3328      	adds	r3, #40	@ 0x28
 8006f14:	2102      	movs	r1, #2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f002 faf0 	bl	80094fc <RCCEx_PLL3_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006f22:	e004      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f2a:	e000      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f36:	4b98      	ldr	r3, [pc, #608]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f44:	4a94      	ldr	r2, [pc, #592]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f46:	430b      	orrs	r3, r1
 8006f48:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f4a:	e003      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f60:	f04f 0900 	mov.w	r9, #0
 8006f64:	ea58 0309 	orrs.w	r3, r8, r9
 8006f68:	d047      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d82a      	bhi.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f74:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006f91 	.word	0x08006f91
 8006f80:	08006f9f 	.word	0x08006f9f
 8006f84:	08006fb5 	.word	0x08006fb5
 8006f88:	08006fd3 	.word	0x08006fd3
 8006f8c:	08006fd3 	.word	0x08006fd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4b81      	ldr	r3, [pc, #516]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	4a80      	ldr	r2, [pc, #512]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f9c:	e01a      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f002 f9f6 	bl	8009398 <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fb2:	e00f      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	3328      	adds	r3, #40	@ 0x28
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 fa9d 	bl	80094fc <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fc8:	e004      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fdc:	4b6e      	ldr	r3, [pc, #440]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe0:	f023 0107 	bic.w	r1, r3, #7
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fea:	4a6b      	ldr	r2, [pc, #428]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ff0:	e003      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ff6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007006:	f04f 0b00 	mov.w	fp, #0
 800700a:	ea5a 030b 	orrs.w	r3, sl, fp
 800700e:	d05b      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007018:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800701c:	d03b      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800701e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007022:	d834      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007024:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007028:	d037      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800702a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800702e:	d82e      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007030:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007034:	d033      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007036:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800703a:	d828      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800703c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007040:	d01a      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007046:	d822      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800704c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007050:	d007      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007052:	e01c      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007054:	4b50      	ldr	r3, [pc, #320]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4a4f      	ldr	r2, [pc, #316]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800705a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007060:	e01e      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007066:	3308      	adds	r3, #8
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f002 f994 	bl	8009398 <RCCEx_PLL2_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007076:	e013      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	3328      	adds	r3, #40	@ 0x28
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f002 fa3b 	bl	80094fc <RCCEx_PLL3_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800708c:	e008      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007094:	e004      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007096:	bf00      	nop
 8007098:	e002      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800709e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80070a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80070b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070b8:	4a37      	ldr	r2, [pc, #220]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80070be:	e003      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d05d      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070f4:	d03b      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80070f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80070fa:	d834      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80070fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007100:	d037      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007106:	d82e      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007108:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800710c:	d033      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800710e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007112:	d828      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007118:	d01a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800711a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800711e:	d822      	bhi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007128:	d007      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800712a:	e01c      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4b1a      	ldr	r3, [pc, #104]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800712e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007130:	4a19      	ldr	r2, [pc, #100]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007138:	e01e      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	3308      	adds	r3, #8
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f002 f928 	bl	8009398 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800714e:	e013      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007154:	3328      	adds	r3, #40	@ 0x28
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f002 f9cf 	bl	80094fc <RCCEx_PLL3_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007164:	e008      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800716c:	e004      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007184:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007190:	4a01      	ldr	r2, [pc, #4]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007192:	430b      	orrs	r3, r1
 8007194:	6593      	str	r3, [r2, #88]	@ 0x58
 8007196:	e005      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80071a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80071b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80071ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80071be:	460b      	mov	r3, r1
 80071c0:	4313      	orrs	r3, r2
 80071c2:	d03a      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80071c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ca:	2b30      	cmp	r3, #48	@ 0x30
 80071cc:	d01f      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80071ce:	2b30      	cmp	r3, #48	@ 0x30
 80071d0:	d819      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d00c      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d815      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d019      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d111      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e2:	4baa      	ldr	r3, [pc, #680]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4aa9      	ldr	r2, [pc, #676]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80071ee:	e011      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f4:	3308      	adds	r3, #8
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f002 f8cd 	bl	8009398 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007204:	e006      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8007212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800721c:	4b9b      	ldr	r3, [pc, #620]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800721e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007220:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722a:	4a98      	ldr	r2, [pc, #608]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800722c:	430b      	orrs	r3, r1
 800722e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007230:	e003      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007232:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007236:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800723a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007250:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007254:	460b      	mov	r3, r1
 8007256:	4313      	orrs	r3, r2
 8007258:	d051      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007264:	d035      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8007266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800726a:	d82e      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800726c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007270:	d031      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007272:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007276:	d828      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800727c:	d01a      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800727e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007282:	d822      	bhi.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800728c:	d007      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800728e:	e01c      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007290:	4b7e      	ldr	r3, [pc, #504]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	4a7d      	ldr	r2, [pc, #500]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800729a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800729c:	e01c      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a2:	3308      	adds	r3, #8
 80072a4:	2100      	movs	r1, #0
 80072a6:	4618      	mov	r0, r3
 80072a8:	f002 f876 	bl	8009398 <RCCEx_PLL2_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072b2:	e011      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	3328      	adds	r3, #40	@ 0x28
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f002 f91d 	bl	80094fc <RCCEx_PLL3_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80072c8:	e006      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072d0:	e002      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80072d2:	bf00      	nop
 80072d4:	e000      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80072d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80072e0:	4b6a      	ldr	r3, [pc, #424]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ee:	4a67      	ldr	r2, [pc, #412]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80072f0:	430b      	orrs	r3, r1
 80072f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80072f4:	e003      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800730a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800730e:	2300      	movs	r3, #0
 8007310:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007314:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007318:	460b      	mov	r3, r1
 800731a:	4313      	orrs	r3, r2
 800731c:	d053      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800731e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007328:	d033      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800732a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800732e:	d82c      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007330:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007334:	d02f      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007336:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800733a:	d826      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800733c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007340:	d02b      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007342:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007346:	d820      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800734c:	d012      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800734e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007352:	d81a      	bhi.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d022      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d115      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800735e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007362:	3308      	adds	r3, #8
 8007364:	2101      	movs	r1, #1
 8007366:	4618      	mov	r0, r3
 8007368:	f002 f816 	bl	8009398 <RCCEx_PLL2_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007372:	e015      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007378:	3328      	adds	r3, #40	@ 0x28
 800737a:	2101      	movs	r1, #1
 800737c:	4618      	mov	r0, r3
 800737e:	f002 f8bd 	bl	80094fc <RCCEx_PLL3_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007388:	e00a      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800739e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073a8:	4b38      	ldr	r3, [pc, #224]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073b6:	4a35      	ldr	r2, [pc, #212]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80073bc:	e003      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80073d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073d6:	2300      	movs	r3, #0
 80073d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d058      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80073e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073f2:	d033      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80073f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073f8:	d82c      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fe:	d02f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007404:	d826      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800740a:	d02b      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800740c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007410:	d820      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007416:	d012      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800741c:	d81a      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d022      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007426:	d115      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742c:	3308      	adds	r3, #8
 800742e:	2101      	movs	r1, #1
 8007430:	4618      	mov	r0, r3
 8007432:	f001 ffb1 	bl	8009398 <RCCEx_PLL2_Config>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800743c:	e015      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	3328      	adds	r3, #40	@ 0x28
 8007444:	2101      	movs	r1, #1
 8007446:	4618      	mov	r0, r3
 8007448:	f002 f858 	bl	80094fc <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007452:	e00a      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800745a:	e006      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800745c:	bf00      	nop
 800745e:	e004      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007460:	bf00      	nop
 8007462:	e002      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10e      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007472:	4b06      	ldr	r3, [pc, #24]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007476:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007482:	4a02      	ldr	r2, [pc, #8]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007484:	430b      	orrs	r3, r1
 8007486:	6593      	str	r3, [r2, #88]	@ 0x58
 8007488:	e006      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800748a:	bf00      	nop
 800748c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80074a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	d037      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80074b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c2:	d00e      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80074c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074c8:	d816      	bhi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d018      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80074ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074d2:	d111      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d4:	4bc4      	ldr	r3, [pc, #784]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d8:	4ac3      	ldr	r2, [pc, #780]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80074da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074e0:	e00f      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e6:	3308      	adds	r3, #8
 80074e8:	2101      	movs	r1, #1
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 ff54 	bl	8009398 <RCCEx_PLL2_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80074f6:	e004      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074fe:	e000      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800750a:	4bb7      	ldr	r3, [pc, #732]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800750c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007518:	4ab3      	ldr	r2, [pc, #716]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800751a:	430b      	orrs	r3, r1
 800751c:	6513      	str	r3, [r2, #80]	@ 0x50
 800751e:	e003      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800753e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007542:	460b      	mov	r3, r1
 8007544:	4313      	orrs	r3, r2
 8007546:	d039      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800754e:	2b03      	cmp	r3, #3
 8007550:	d81c      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	08007595 	.word	0x08007595
 800755c:	08007569 	.word	0x08007569
 8007560:	08007577 	.word	0x08007577
 8007564:	08007595 	.word	0x08007595
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007568:	4b9f      	ldr	r3, [pc, #636]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	4a9e      	ldr	r2, [pc, #632]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800756e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007574:	e00f      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757a:	3308      	adds	r3, #8
 800757c:	2102      	movs	r1, #2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 ff0a 	bl	8009398 <RCCEx_PLL2_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800758a:	e004      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800759e:	4b92      	ldr	r3, [pc, #584]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a2:	f023 0103 	bic.w	r1, r3, #3
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ac:	4a8e      	ldr	r2, [pc, #568]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80075b2:	e003      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80075c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	f000 8099 	beq.w	8007710 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075de:	4b83      	ldr	r3, [pc, #524]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a82      	ldr	r2, [pc, #520]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80075e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075ea:	f7fa fabd 	bl	8001b68 <HAL_GetTick>
 80075ee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075f2:	e00b      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075f4:	f7fa fab8 	bl	8001b68 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	@ 0x64
 8007602:	d903      	bls.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800760a:	e005      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800760c:	4b77      	ldr	r3, [pc, #476]	@ (80077ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d0ed      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800761c:	2b00      	cmp	r3, #0
 800761e:	d173      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007620:	4b71      	ldr	r3, [pc, #452]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007622:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800762c:	4053      	eors	r3, r2
 800762e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007632:	2b00      	cmp	r3, #0
 8007634:	d015      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007636:	4b6c      	ldr	r3, [pc, #432]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800763e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007642:	4b69      	ldr	r3, [pc, #420]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007646:	4a68      	ldr	r2, [pc, #416]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800764c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800764e:	4b66      	ldr	r3, [pc, #408]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007652:	4a65      	ldr	r2, [pc, #404]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007658:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800765a:	4a63      	ldr	r2, [pc, #396]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800765c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007660:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800766a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766e:	d118      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007670:	f7fa fa7a 	bl	8001b68 <HAL_GetTick>
 8007674:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007678:	e00d      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767a:	f7fa fa75 	bl	8001b68 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	f241 3388 	movw	r3, #5000	@ 0x1388
 800768a:	429a      	cmp	r2, r3
 800768c:	d903      	bls.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007694:	e005      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007696:	4b54      	ldr	r3, [pc, #336]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0eb      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80076a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d129      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ba:	d10e      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80076bc:	4b4a      	ldr	r3, [pc, #296]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076cc:	091a      	lsrs	r2, r3, #4
 80076ce:	4b48      	ldr	r3, [pc, #288]	@ (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	4a45      	ldr	r2, [pc, #276]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6113      	str	r3, [r2, #16]
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80076da:	4b43      	ldr	r3, [pc, #268]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	4a42      	ldr	r2, [pc, #264]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80076e4:	6113      	str	r3, [r2, #16]
 80076e6:	4b40      	ldr	r3, [pc, #256]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80076f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f6:	4a3c      	ldr	r2, [pc, #240]	@ (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80076fc:	e008      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007702:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800770c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f002 0301 	and.w	r3, r2, #1
 800771c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007720:	2300      	movs	r3, #0
 8007722:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007726:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	f000 808f 	beq.w	8007850 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007738:	2b28      	cmp	r3, #40	@ 0x28
 800773a:	d871      	bhi.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007829 	.word	0x08007829
 8007748:	08007821 	.word	0x08007821
 800774c:	08007821 	.word	0x08007821
 8007750:	08007821 	.word	0x08007821
 8007754:	08007821 	.word	0x08007821
 8007758:	08007821 	.word	0x08007821
 800775c:	08007821 	.word	0x08007821
 8007760:	08007821 	.word	0x08007821
 8007764:	080077f5 	.word	0x080077f5
 8007768:	08007821 	.word	0x08007821
 800776c:	08007821 	.word	0x08007821
 8007770:	08007821 	.word	0x08007821
 8007774:	08007821 	.word	0x08007821
 8007778:	08007821 	.word	0x08007821
 800777c:	08007821 	.word	0x08007821
 8007780:	08007821 	.word	0x08007821
 8007784:	0800780b 	.word	0x0800780b
 8007788:	08007821 	.word	0x08007821
 800778c:	08007821 	.word	0x08007821
 8007790:	08007821 	.word	0x08007821
 8007794:	08007821 	.word	0x08007821
 8007798:	08007821 	.word	0x08007821
 800779c:	08007821 	.word	0x08007821
 80077a0:	08007821 	.word	0x08007821
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007821 	.word	0x08007821
 80077ac:	08007821 	.word	0x08007821
 80077b0:	08007821 	.word	0x08007821
 80077b4:	08007821 	.word	0x08007821
 80077b8:	08007821 	.word	0x08007821
 80077bc:	08007821 	.word	0x08007821
 80077c0:	08007821 	.word	0x08007821
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007821 	.word	0x08007821
 80077cc:	08007821 	.word	0x08007821
 80077d0:	08007821 	.word	0x08007821
 80077d4:	08007821 	.word	0x08007821
 80077d8:	08007821 	.word	0x08007821
 80077dc:	08007821 	.word	0x08007821
 80077e0:	08007821 	.word	0x08007821
 80077e4:	08007829 	.word	0x08007829
 80077e8:	58024400 	.word	0x58024400
 80077ec:	58024800 	.word	0x58024800
 80077f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f8:	3308      	adds	r3, #8
 80077fa:	2101      	movs	r1, #1
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fdcb 	bl	8009398 <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007808:	e00f      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780e:	3328      	adds	r3, #40	@ 0x28
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f001 fe72 	bl	80094fc <RCCEx_PLL3_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800781e:	e004      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007826:	e000      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800782a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007832:	4bbf      	ldr	r3, [pc, #764]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007836:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800783a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800783e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007840:	4abb      	ldr	r2, [pc, #748]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007842:	430b      	orrs	r3, r1
 8007844:	6553      	str	r3, [r2, #84]	@ 0x54
 8007846:	e003      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800784c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f002 0302 	and.w	r3, r2, #2
 800785c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007860:	2300      	movs	r3, #0
 8007862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007866:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800786a:	460b      	mov	r3, r1
 800786c:	4313      	orrs	r3, r2
 800786e:	d041      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	2b05      	cmp	r3, #5
 8007878:	d824      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800787a:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	080078cd 	.word	0x080078cd
 8007884:	08007899 	.word	0x08007899
 8007888:	080078af 	.word	0x080078af
 800788c:	080078cd 	.word	0x080078cd
 8007890:	080078cd 	.word	0x080078cd
 8007894:	080078cd 	.word	0x080078cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789c:	3308      	adds	r3, #8
 800789e:	2101      	movs	r1, #1
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 fd79 	bl	8009398 <RCCEx_PLL2_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078ac:	e00f      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	3328      	adds	r3, #40	@ 0x28
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 fe20 	bl	80094fc <RCCEx_PLL3_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80078c2:	e004      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078ca:	e000      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80078cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80078d6:	4b96      	ldr	r3, [pc, #600]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078da:	f023 0107 	bic.w	r1, r3, #7
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e4:	4a92      	ldr	r2, [pc, #584]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80078e6:	430b      	orrs	r3, r1
 80078e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078ea:	e003      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f002 0304 	and.w	r3, r2, #4
 8007900:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007904:	2300      	movs	r3, #0
 8007906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800790a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d044      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800791c:	2b05      	cmp	r3, #5
 800791e:	d825      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	08007975 	.word	0x08007975
 800792c:	08007941 	.word	0x08007941
 8007930:	08007957 	.word	0x08007957
 8007934:	08007975 	.word	0x08007975
 8007938:	08007975 	.word	0x08007975
 800793c:	08007975 	.word	0x08007975
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	3308      	adds	r3, #8
 8007946:	2101      	movs	r1, #1
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fd25 	bl	8009398 <RCCEx_PLL2_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007954:	e00f      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	3328      	adds	r3, #40	@ 0x28
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fdcc 	bl	80094fc <RCCEx_PLL3_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800796a:	e004      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007972:	e000      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800797e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	f023 0107 	bic.w	r1, r3, #7
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798e:	4a68      	ldr	r2, [pc, #416]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007990:	430b      	orrs	r3, r1
 8007992:	6593      	str	r3, [r2, #88]	@ 0x58
 8007994:	e003      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800799a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f002 0320 	and.w	r3, r2, #32
 80079aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079ae:	2300      	movs	r3, #0
 80079b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d055      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80079be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ca:	d033      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80079cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079d0:	d82c      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d6:	d02f      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079dc:	d826      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e2:	d02b      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80079e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80079e8:	d820      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079ee:	d012      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80079f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079f4:	d81a      	bhi.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d022      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80079fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fe:	d115      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a04:	3308      	adds	r3, #8
 8007a06:	2100      	movs	r1, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f001 fcc5 	bl	8009398 <RCCEx_PLL2_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a14:	e015      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1a:	3328      	adds	r3, #40	@ 0x28
 8007a1c:	2102      	movs	r1, #2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 fd6c 	bl	80094fc <RCCEx_PLL3_Config>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a2a:	e00a      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a32:	e006      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a34:	bf00      	nop
 8007a36:	e004      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a38:	bf00      	nop
 8007a3a:	e002      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a3c:	bf00      	nop
 8007a3e:	e000      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a4a:	4b39      	ldr	r3, [pc, #228]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a5a:	4a35      	ldr	r2, [pc, #212]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a60:	e003      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007a76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a80:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d058      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a96:	d033      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007a98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a9c:	d82c      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa2:	d02f      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa8:	d826      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007aaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007aae:	d02b      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ab0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ab4:	d820      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007aba:	d012      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ac0:	d81a      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d022      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aca:	d115      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 fc5f 	bl	8009398 <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ae0:	e015      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	3328      	adds	r3, #40	@ 0x28
 8007ae8:	2102      	movs	r1, #2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f001 fd06 	bl	80094fc <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007af6:	e00a      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007afe:	e006      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10e      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b16:	4b06      	ldr	r3, [pc, #24]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b26:	4a02      	ldr	r2, [pc, #8]	@ (8007b30 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b2c:	e006      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007b2e:	bf00      	nop
 8007b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d055      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b64:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b68:	d033      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007b6a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007b6e:	d82c      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b74:	d02f      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b7a:	d826      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b7c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b80:	d02b      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007b82:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007b86:	d820      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b8c:	d012      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8007b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b92:	d81a      	bhi.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d022      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b9c:	d115      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 fbf6 	bl	8009398 <RCCEx_PLL2_Config>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bb2:	e015      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb8:	3328      	adds	r3, #40	@ 0x28
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fc9d 	bl	80094fc <RCCEx_PLL3_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007bc8:	e00a      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007bd0:	e006      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e004      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bd6:	bf00      	nop
 8007bd8:	e002      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bda:	bf00      	nop
 8007bdc:	e000      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007be8:	4ba0      	ldr	r3, [pc, #640]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bf8:	4a9c      	ldr	r2, [pc, #624]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bfe:	e003      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f002 0308 	and.w	r3, r2, #8
 8007c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007c1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007c22:	460b      	mov	r3, r1
 8007c24:	4313      	orrs	r3, r2
 8007c26:	d01e      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c34:	d10c      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c3a:	3328      	adds	r3, #40	@ 0x28
 8007c3c:	2102      	movs	r1, #2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 fc5c 	bl	80094fc <RCCEx_PLL3_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007c50:	4b86      	ldr	r3, [pc, #536]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c60:	4a82      	ldr	r2, [pc, #520]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007c62:	430b      	orrs	r3, r1
 8007c64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f002 0310 	and.w	r3, r2, #16
 8007c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c76:	2300      	movs	r3, #0
 8007c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007c80:	460b      	mov	r3, r1
 8007c82:	4313      	orrs	r3, r2
 8007c84:	d01e      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c92:	d10c      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c98:	3328      	adds	r3, #40	@ 0x28
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 fc2d 	bl	80094fc <RCCEx_PLL3_Config>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cae:	4b6f      	ldr	r3, [pc, #444]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cd6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	d03e      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cec:	d022      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cf2:	d81b      	bhi.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cfc:	d00b      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007cfe:	e015      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d04:	3308      	adds	r3, #8
 8007d06:	2100      	movs	r1, #0
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 fb45 	bl	8009398 <RCCEx_PLL2_Config>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d14:	e00f      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d1a:	3328      	adds	r3, #40	@ 0x28
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 fbec 	bl	80094fc <RCCEx_PLL3_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d2a:	e004      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d32:	e000      	b.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007d4e:	4a47      	ldr	r2, [pc, #284]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d50:	430b      	orrs	r3, r1
 8007d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d54:	e003      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007d6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d74:	460b      	mov	r3, r1
 8007d76:	4313      	orrs	r3, r2
 8007d78:	d03b      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d86:	d01f      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d8c:	d818      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d92:	d003      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d98:	d007      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007d9a:	e011      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9c:	4b33      	ldr	r3, [pc, #204]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da0:	4a32      	ldr	r2, [pc, #200]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007da8:	e00f      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dae:	3328      	adds	r3, #40	@ 0x28
 8007db0:	2101      	movs	r1, #1
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 fba2 	bl	80094fc <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dd2:	4b26      	ldr	r3, [pc, #152]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007de2:	4a22      	ldr	r2, [pc, #136]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007de8:	e003      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e00:	2300      	movs	r3, #0
 8007e02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d034      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e1c:	d007      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007e1e:	e011      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e20:	4b12      	ldr	r3, [pc, #72]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e24:	4a11      	ldr	r2, [pc, #68]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e2c:	e00e      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e32:	3308      	adds	r3, #8
 8007e34:	2102      	movs	r1, #2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 faae 	bl	8009398 <RCCEx_PLL2_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e42:	e003      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10d      	bne.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e54:	4b05      	ldr	r3, [pc, #20]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e62:	4a02      	ldr	r2, [pc, #8]	@ (8007e6c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007e64:	430b      	orrs	r3, r1
 8007e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007e68:	e006      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007e6a:	bf00      	nop
 8007e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e86:	2300      	movs	r3, #0
 8007e88:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e8a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4313      	orrs	r3, r2
 8007e92:	d00c      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e98:	3328      	adds	r3, #40	@ 0x28
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fb2d 	bl	80094fc <RCCEx_PLL3_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007eba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ec0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	d036      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ed4:	d018      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007ed6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007eda:	d811      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee0:	d014      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ee6:	d80b      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d011      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef0:	d106      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef2:	4bb7      	ldr	r3, [pc, #732]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	4ab6      	ldr	r2, [pc, #728]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007efe:	e008      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007f06:	e004      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f1a:	4bad      	ldr	r3, [pc, #692]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f28:	4aa9      	ldr	r2, [pc, #676]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f2e:	e003      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007f44:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f46:	2300      	movs	r3, #0
 8007f48:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4313      	orrs	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f54:	4b9e      	ldr	r3, [pc, #632]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f62:	4a9b      	ldr	r2, [pc, #620]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f76:	2300      	movs	r3, #0
 8007f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4313      	orrs	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f84:	4b92      	ldr	r3, [pc, #584]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f88:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f92:	4a8f      	ldr	r2, [pc, #572]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007faa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fb4:	4b86      	ldr	r3, [pc, #536]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	4a85      	ldr	r2, [pc, #532]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fbe:	6113      	str	r3, [r2, #16]
 8007fc0:	4b83      	ldr	r3, [pc, #524]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fc2:	6919      	ldr	r1, [r3, #16]
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fcc:	4a80      	ldr	r2, [pc, #512]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fe4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4313      	orrs	r3, r2
 8007fec:	d009      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fee:	4b78      	ldr	r3, [pc, #480]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffc:	4a74      	ldr	r2, [pc, #464]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ffe:	430b      	orrs	r3, r1
 8008000:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800800e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008010:	2300      	movs	r3, #0
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
 8008014:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008018:	460b      	mov	r3, r1
 800801a:	4313      	orrs	r3, r2
 800801c:	d00a      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800801e:	4b6c      	ldr	r3, [pc, #432]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008022:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802e:	4a68      	ldr	r2, [pc, #416]	@ (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008030:	430b      	orrs	r3, r1
 8008032:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	2100      	movs	r1, #0
 800803e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008046:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800804a:	460b      	mov	r3, r1
 800804c:	4313      	orrs	r3, r2
 800804e:	d011      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008054:	3308      	adds	r3, #8
 8008056:	2100      	movs	r1, #0
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f99d 	bl	8009398 <RCCEx_PLL2_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008070:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	2100      	movs	r1, #0
 800807e:	6239      	str	r1, [r7, #32]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	627b      	str	r3, [r7, #36]	@ 0x24
 8008086:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800808a:	460b      	mov	r3, r1
 800808c:	4313      	orrs	r3, r2
 800808e:	d011      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008094:	3308      	adds	r3, #8
 8008096:	2101      	movs	r1, #1
 8008098:	4618      	mov	r0, r3
 800809a:	f001 f97d 	bl	8009398 <RCCEx_PLL2_Config>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80080b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	2100      	movs	r1, #0
 80080be:	61b9      	str	r1, [r7, #24]
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	61fb      	str	r3, [r7, #28]
 80080c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80080ca:	460b      	mov	r3, r1
 80080cc:	4313      	orrs	r3, r2
 80080ce:	d011      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d4:	3308      	adds	r3, #8
 80080d6:	2102      	movs	r1, #2
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 f95d 	bl	8009398 <RCCEx_PLL2_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80080e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80080f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fc:	2100      	movs	r1, #0
 80080fe:	6139      	str	r1, [r7, #16]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800810a:	460b      	mov	r3, r1
 800810c:	4313      	orrs	r3, r2
 800810e:	d011      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008114:	3328      	adds	r3, #40	@ 0x28
 8008116:	2100      	movs	r1, #0
 8008118:	4618      	mov	r0, r3
 800811a:	f001 f9ef 	bl	80094fc <RCCEx_PLL3_Config>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008128:	2b00      	cmp	r3, #0
 800812a:	d003      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800812c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	2100      	movs	r1, #0
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800814a:	460b      	mov	r3, r1
 800814c:	4313      	orrs	r3, r2
 800814e:	d011      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	3328      	adds	r3, #40	@ 0x28
 8008156:	2101      	movs	r1, #1
 8008158:	4618      	mov	r0, r3
 800815a:	f001 f9cf 	bl	80094fc <RCCEx_PLL3_Config>
 800815e:	4603      	mov	r3, r0
 8008160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	2100      	movs	r1, #0
 800817e:	6039      	str	r1, [r7, #0]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	607b      	str	r3, [r7, #4]
 8008186:	e9d7 1200 	ldrd	r1, r2, [r7]
 800818a:	460b      	mov	r3, r1
 800818c:	4313      	orrs	r3, r2
 800818e:	d011      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	3328      	adds	r3, #40	@ 0x28
 8008196:	2102      	movs	r1, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 f9af 	bl	80094fc <RCCEx_PLL3_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80081a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80081b4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	e000      	b.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80081c8:	46bd      	mov	sp, r7
 80081ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400

080081d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b090      	sub	sp, #64	@ 0x40
 80081d8:	af00      	add	r7, sp, #0
 80081da:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80081e6:	430b      	orrs	r3, r1
 80081e8:	f040 8094 	bne.w	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80081ec:	4b9b      	ldr	r3, [pc, #620]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80081ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	f200 8087 	bhi.w	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80081fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008219 	.word	0x08008219
 8008208:	08008241 	.word	0x08008241
 800820c:	08008269 	.word	0x08008269
 8008210:	08008305 	.word	0x08008305
 8008214:	08008291 	.word	0x08008291
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008218:	4b90      	ldr	r3, [pc, #576]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008224:	d108      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800822a:	4618      	mov	r0, r3
 800822c:	f000 ff62 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008234:	f000 bc93 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800823c:	f000 bc8f 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008240:	4b86      	ldr	r3, [pc, #536]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800824c:	d108      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824e:	f107 0318 	add.w	r3, r7, #24
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fca6 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800825c:	f000 bc7f 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008264:	f000 bc7b 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008268:	4b7c      	ldr	r3, [pc, #496]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008274:	d108      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008276:	f107 030c 	add.w	r3, r7, #12
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fde6 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008284:	f000 bc6b 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828c:	f000 bc67 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008290:	4b72      	ldr	r3, [pc, #456]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008294:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008298:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800829a:	4b70      	ldr	r3, [pc, #448]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80082a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082ac:	4b6b      	ldr	r3, [pc, #428]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	08db      	lsrs	r3, r3, #3
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	4a6a      	ldr	r2, [pc, #424]	@ (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
 80082bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082be:	e01f      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082c0:	4b66      	ldr	r3, [pc, #408]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082cc:	d106      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082d4:	d102      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082d6:	4b63      	ldr	r3, [pc, #396]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80082d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082da:	e011      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082dc:	4b5f      	ldr	r3, [pc, #380]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082e8:	d106      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80082ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082f0:	d102      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082f2:	4b5d      	ldr	r3, [pc, #372]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f6:	e003      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082fc:	f000 bc2f 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008300:	f000 bc2d 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008304:	4b59      	ldr	r3, [pc, #356]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008308:	f000 bc29 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008310:	f000 bc25 	b.w	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008318:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800831c:	430b      	orrs	r3, r1
 800831e:	f040 80a7 	bne.w	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008322:	4b4e      	ldr	r3, [pc, #312]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008326:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800832a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008332:	d054      	beq.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800833a:	f200 808b 	bhi.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008344:	f000 8083 	beq.w	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800834e:	f200 8081 	bhi.w	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008358:	d02f      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800835a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008360:	d878      	bhi.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800836e:	d012      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8008370:	e070      	b.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008372:	4b3a      	ldr	r3, [pc, #232]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800837a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800837e:	d107      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008384:	4618      	mov	r0, r3
 8008386:	f000 feb5 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838e:	e3e6      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008394:	e3e3      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008396:	4b31      	ldr	r3, [pc, #196]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800839e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083a2:	d107      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083a4:	f107 0318 	add.w	r3, r7, #24
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fbfb 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b2:	e3d4      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b8:	e3d1      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ba:	4b28      	ldr	r3, [pc, #160]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083c6:	d107      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c8:	f107 030c 	add.w	r3, r7, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fd3d 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083d6:	e3c2      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083dc:	e3bf      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083de:	4b1f      	ldr	r3, [pc, #124]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083e8:	4b1c      	ldr	r3, [pc, #112]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d10c      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80083f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083fa:	4b18      	ldr	r3, [pc, #96]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	08db      	lsrs	r3, r3, #3
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	4a16      	ldr	r2, [pc, #88]	@ (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008406:	fa22 f303 	lsr.w	r3, r2, r3
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800840c:	e01e      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800840e:	4b13      	ldr	r3, [pc, #76]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841a:	d106      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800841c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008422:	d102      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008424:	4b0f      	ldr	r3, [pc, #60]	@ (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008428:	e010      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800842a:	4b0c      	ldr	r3, [pc, #48]	@ (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008436:	d106      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843e:	d102      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008440:	4b09      	ldr	r3, [pc, #36]	@ (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008444:	e002      	b.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800844a:	e388      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800844c:	e387      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800844e:	4b07      	ldr	r3, [pc, #28]	@ (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008452:	e384      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e381      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800845a:	bf00      	nop
 800845c:	58024400 	.word	0x58024400
 8008460:	03d09000 	.word	0x03d09000
 8008464:	003d0900 	.word	0x003d0900
 8008468:	007a1200 	.word	0x007a1200
 800846c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008474:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008478:	430b      	orrs	r3, r1
 800847a:	f040 809c 	bne.w	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800847e:	4b9e      	ldr	r3, [pc, #632]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008482:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008486:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800848e:	d054      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008496:	f200 808b 	bhi.w	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80084a0:	f000 8083 	beq.w	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80084aa:	f200 8081 	bhi.w	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084b4:	d02f      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084bc:	d878      	bhi.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084ca:	d012      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80084cc:	e070      	b.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084ce:	4b8a      	ldr	r3, [pc, #552]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084da:	d107      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fe07 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ea:	e338      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e335      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084f2:	4b81      	ldr	r3, [pc, #516]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084fe:	d107      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008500:	f107 0318 	add.w	r3, r7, #24
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fb4d 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800850e:	e326      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008514:	e323      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008516:	4b78      	ldr	r3, [pc, #480]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800851e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008522:	d107      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008524:	f107 030c 	add.w	r3, r7, #12
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fc8f 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008532:	e314      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008538:	e311      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800853a:	4b6f      	ldr	r3, [pc, #444]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800853c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800853e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008542:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008544:	4b6c      	ldr	r3, [pc, #432]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b04      	cmp	r3, #4
 800854e:	d10c      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8008550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008556:	4b68      	ldr	r3, [pc, #416]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	08db      	lsrs	r3, r3, #3
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	4a66      	ldr	r2, [pc, #408]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008562:	fa22 f303 	lsr.w	r3, r2, r3
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008568:	e01e      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800856a:	4b63      	ldr	r3, [pc, #396]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008576:	d106      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800857e:	d102      	bne.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008580:	4b5f      	ldr	r3, [pc, #380]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008584:	e010      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008586:	4b5c      	ldr	r3, [pc, #368]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800858e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008592:	d106      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800859a:	d102      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800859c:	4b59      	ldr	r3, [pc, #356]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a0:	e002      	b.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085a6:	e2da      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085a8:	e2d9      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085aa:	4b57      	ldr	r3, [pc, #348]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ae:	e2d6      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b4:	e2d3      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80085b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80085be:	430b      	orrs	r3, r1
 80085c0:	f040 80a7 	bne.w	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80085c4:	4b4c      	ldr	r3, [pc, #304]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80085c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80085ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085d4:	d055      	beq.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085dc:	f200 8096 	bhi.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085e6:	f000 8084 	beq.w	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085f0:	f200 808c 	bhi.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80085f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085fa:	d030      	beq.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008602:	f200 8083 	bhi.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008612:	d012      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008614:	e07a      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008616:	4b38      	ldr	r3, [pc, #224]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800861e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008622:	d107      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008624:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fd63 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008632:	e294      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008638:	e291      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863a:	4b2f      	ldr	r3, [pc, #188]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008646:	d107      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008648:	f107 0318 	add.w	r3, r7, #24
 800864c:	4618      	mov	r0, r3
 800864e:	f000 faa9 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008656:	e282      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800865c:	e27f      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800865e:	4b26      	ldr	r3, [pc, #152]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008666:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800866a:	d107      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800866c:	f107 030c 	add.w	r3, r7, #12
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fbeb 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800867a:	e270      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	e26d      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008682:	4b1d      	ldr	r3, [pc, #116]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008686:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800868a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800868c:	4b1a      	ldr	r3, [pc, #104]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b04      	cmp	r3, #4
 8008696:	d10c      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800869e:	4b16      	ldr	r3, [pc, #88]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	08db      	lsrs	r3, r3, #3
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	4a14      	ldr	r2, [pc, #80]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80086aa:	fa22 f303 	lsr.w	r3, r2, r3
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086b0:	e01e      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086b2:	4b11      	ldr	r3, [pc, #68]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086be:	d106      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c6:	d102      	bne.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086cc:	e010      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086ce:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086da:	d106      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80086dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086e2:	d102      	bne.n	80086ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086e4:	4b07      	ldr	r3, [pc, #28]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e8:	e002      	b.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80086ee:	e236      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086f0:	e235      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80086f2:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f6:	e232      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086f8:	58024400 	.word	0x58024400
 80086fc:	03d09000 	.word	0x03d09000
 8008700:	003d0900 	.word	0x003d0900
 8008704:	007a1200 	.word	0x007a1200
 8008708:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008710:	e225      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008716:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800871a:	430b      	orrs	r3, r1
 800871c:	f040 8085 	bne.w	800882a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008720:	4b9c      	ldr	r3, [pc, #624]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008724:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008728:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008730:	d06b      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008738:	d874      	bhi.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008740:	d056      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8008742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008748:	d86c      	bhi.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008750:	d03b      	beq.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008758:	d864      	bhi.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008760:	d021      	beq.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008764:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008768:	d85c      	bhi.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008776:	d004      	beq.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008778:	e054      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800877a:	f7fe fb75 	bl	8006e68 <HAL_RCC_GetPCLK1Freq>
 800877e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008780:	e1ed      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008782:	4b84      	ldr	r3, [pc, #528]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800878a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800878e:	d107      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008790:	f107 0318 	add.w	r3, r7, #24
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fa05 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800879e:	e1de      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a4:	e1db      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087a6:	4b7b      	ldr	r3, [pc, #492]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b2:	d107      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fb47 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c2:	e1cc      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087c8:	e1c9      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087ca:	4b72      	ldr	r3, [pc, #456]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d109      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087d6:	4b6f      	ldr	r3, [pc, #444]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	08db      	lsrs	r3, r3, #3
 80087dc:	f003 0303 	and.w	r3, r3, #3
 80087e0:	4a6d      	ldr	r2, [pc, #436]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80087e2:	fa22 f303 	lsr.w	r3, r2, r3
 80087e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e8:	e1b9      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087ea:	2300      	movs	r3, #0
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ee:	e1b6      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087f0:	4b68      	ldr	r3, [pc, #416]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087fc:	d102      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80087fe:	4b67      	ldr	r3, [pc, #412]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e1ac      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008808:	e1a9      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800880a:	4b62      	ldr	r3, [pc, #392]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008816:	d102      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008818:	4b61      	ldr	r3, [pc, #388]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881c:	e19f      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008822:	e19c      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008828:	e199      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800882a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008832:	430b      	orrs	r3, r1
 8008834:	d173      	bne.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008836:	4b57      	ldr	r3, [pc, #348]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800883e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008846:	d02f      	beq.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884e:	d863      	bhi.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800885c:	d012      	beq.n	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800885e:	e05b      	b.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008860:	4b4c      	ldr	r3, [pc, #304]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800886c:	d107      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886e:	f107 0318 	add.w	r3, r7, #24
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f996 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800887c:	e16f      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008882:	e16c      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008884:	4b43      	ldr	r3, [pc, #268]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800888c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008890:	d107      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008892:	f107 030c 	add.w	r3, r7, #12
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fad8 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088a0:	e15d      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a6:	e15a      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088b2:	4b38      	ldr	r3, [pc, #224]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0304 	and.w	r3, r3, #4
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	d10c      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80088be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088c4:	4b33      	ldr	r3, [pc, #204]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	08db      	lsrs	r3, r3, #3
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	4a32      	ldr	r2, [pc, #200]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
 80088d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d6:	e01e      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e4:	d106      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088ec:	d102      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088ee:	4b2b      	ldr	r3, [pc, #172]	@ (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80088f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088f2:	e010      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088f4:	4b27      	ldr	r3, [pc, #156]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008900:	d106      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8008902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008908:	d102      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800890a:	4b25      	ldr	r3, [pc, #148]	@ (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800890e:	e002      	b.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008914:	e123      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008916:	e122      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800891c:	e11f      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800891e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008922:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008926:	430b      	orrs	r3, r1
 8008928:	d13c      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800892a:	4b1a      	ldr	r3, [pc, #104]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800892c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800892e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008932:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008940:	d012      	beq.n	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008942:	e023      	b.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008944:	4b13      	ldr	r3, [pc, #76]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800894c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008950:	d107      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fbcc 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008960:	e0fd      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008966:	e0fa      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008968:	4b0a      	ldr	r3, [pc, #40]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008974:	d107      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008976:	f107 0318 	add.w	r3, r7, #24
 800897a:	4618      	mov	r0, r3
 800897c:	f000 f912 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008984:	e0eb      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800898a:	e0e8      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	e0e5      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008992:	bf00      	nop
 8008994:	58024400 	.word	0x58024400
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80089a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80089ac:	430b      	orrs	r3, r1
 80089ae:	f040 8085 	bne.w	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80089b2:	4b6d      	ldr	r3, [pc, #436]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80089b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80089ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089c2:	d06b      	beq.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089ca:	d874      	bhi.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d2:	d056      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089da:	d86c      	bhi.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089e2:	d03b      	beq.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80089e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089ea:	d864      	bhi.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f2:	d021      	beq.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089fa:	d85c      	bhi.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80089fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a08:	d004      	beq.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008a0a:	e054      	b.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a0c:	f000 f8b4 	bl	8008b78 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a10:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a12:	e0a4      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a14:	4b54      	ldr	r3, [pc, #336]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a20:	d107      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a22:	f107 0318 	add.w	r3, r7, #24
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 f8bc 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a30:	e095      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a36:	e092      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a38:	4b4b      	ldr	r3, [pc, #300]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a44:	d107      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a46:	f107 030c 	add.w	r3, r7, #12
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f9fe 	bl	8008e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a54:	e083      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5a:	e080      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a5c:	4b42      	ldr	r3, [pc, #264]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d109      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a68:	4b3f      	ldr	r3, [pc, #252]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	08db      	lsrs	r3, r3, #3
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	4a3e      	ldr	r2, [pc, #248]	@ (8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008a74:	fa22 f303 	lsr.w	r3, r2, r3
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7a:	e070      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a80:	e06d      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a82:	4b39      	ldr	r3, [pc, #228]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a8e:	d102      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008a90:	4b37      	ldr	r3, [pc, #220]	@ (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a94:	e063      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9a:	e060      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a9c:	4b32      	ldr	r3, [pc, #200]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa8:	d102      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008aaa:	4b32      	ldr	r3, [pc, #200]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aae:	e056      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab4:	e053      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aba:	e050      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008ac4:	430b      	orrs	r3, r1
 8008ac6:	d148      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ac8:	4b27      	ldr	r3, [pc, #156]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008acc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ad0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ad8:	d02a      	beq.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ae0:	d838      	bhi.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aee:	d00d      	beq.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008af0:	e030      	b.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008af2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008afe:	d102      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008b00:	4b1c      	ldr	r3, [pc, #112]	@ (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b04:	e02b      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b0a:	e028      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b0c:	4b16      	ldr	r3, [pc, #88]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b18:	d107      	bne.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fae8 	bl	80090f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b28:	e019      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b2e:	e016      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b30:	4b0d      	ldr	r3, [pc, #52]	@ (8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b3e:	f107 0318 	add.w	r3, r7, #24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f82e 	bl	8008ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b4c:	e007      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b52:	e004      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b58:	e001      	b.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3740      	adds	r7, #64	@ 0x40
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	58024400 	.word	0x58024400
 8008b6c:	03d09000 	.word	0x03d09000
 8008b70:	003d0900 	.word	0x003d0900
 8008b74:	007a1200 	.word	0x007a1200

08008b78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008b7c:	f7fe f944 	bl	8006e08 <HAL_RCC_GetHCLKFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	091b      	lsrs	r3, r3, #4
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	4904      	ldr	r1, [pc, #16]	@ (8008ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	58024400 	.word	0x58024400
 8008ba0:	0800c940 	.word	0x0800c940

08008ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b089      	sub	sp, #36	@ 0x24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bac:	4ba1      	ldr	r3, [pc, #644]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bba:	0b1b      	lsrs	r3, r3, #12
 8008bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008bce:	4b99      	ldr	r3, [pc, #612]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd2:	08db      	lsrs	r3, r3, #3
 8008bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	fb02 f303 	mul.w	r3, r2, r3
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8111 	beq.w	8008e14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	f000 8083 	beq.w	8008d00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	f200 80a1 	bhi.w	8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d056      	beq.n	8008cbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c0e:	e099      	b.n	8008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c10:	4b88      	ldr	r3, [pc, #544]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02d      	beq.n	8008c78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c1c:	4b85      	ldr	r3, [pc, #532]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	08db      	lsrs	r3, r3, #3
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	4a84      	ldr	r2, [pc, #528]	@ (8008e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c46:	4b7b      	ldr	r3, [pc, #492]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c76:	e087      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cba:	e065      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cce:	4b59      	ldr	r3, [pc, #356]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cfe:	e043      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d12:	4b48      	ldr	r3, [pc, #288]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d42:	e021      	b.n	8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d56:	4b37      	ldr	r3, [pc, #220]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008d88:	4b2a      	ldr	r3, [pc, #168]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dae:	ee17 2a90 	vmov	r2, s15
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008db6:	4b1f      	ldr	r3, [pc, #124]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dba:	0c1b      	lsrs	r3, r3, #16
 8008dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ddc:	ee17 2a90 	vmov	r2, s15
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008de4:	4b13      	ldr	r3, [pc, #76]	@ (8008e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de8:	0e1b      	lsrs	r3, r3, #24
 8008dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dee:	ee07 3a90 	vmov	s15, r3
 8008df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0a:	ee17 2a90 	vmov	r2, s15
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e12:	e008      	b.n	8008e26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	609a      	str	r2, [r3, #8]
}
 8008e26:	bf00      	nop
 8008e28:	3724      	adds	r7, #36	@ 0x24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	58024400 	.word	0x58024400
 8008e38:	03d09000 	.word	0x03d09000
 8008e3c:	46000000 	.word	0x46000000
 8008e40:	4c742400 	.word	0x4c742400
 8008e44:	4a742400 	.word	0x4a742400
 8008e48:	4af42400 	.word	0x4af42400

08008e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b089      	sub	sp, #36	@ 0x24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e54:	4ba1      	ldr	r3, [pc, #644]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008e5e:	4b9f      	ldr	r3, [pc, #636]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e62:	0d1b      	lsrs	r3, r3, #20
 8008e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008e76:	4b99      	ldr	r3, [pc, #612]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e7a:	08db      	lsrs	r3, r3, #3
 8008e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8111 	beq.w	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	f000 8083 	beq.w	8008fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	f200 80a1 	bhi.w	8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d056      	beq.n	8008f64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008eb6:	e099      	b.n	8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eb8:	4b88      	ldr	r3, [pc, #544]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02d      	beq.n	8008f20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ec4:	4b85      	ldr	r3, [pc, #532]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	08db      	lsrs	r3, r3, #3
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	4a84      	ldr	r2, [pc, #528]	@ (80090e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ed4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eee:	4b7b      	ldr	r3, [pc, #492]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f1e:	e087      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80090e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f32:	4b6a      	ldr	r3, [pc, #424]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f62:	e065      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f76:	4b59      	ldr	r3, [pc, #356]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fa6:	e043      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fba:	4b48      	ldr	r3, [pc, #288]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fea:	e021      	b.n	8009030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80090ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ffe:	4b37      	ldr	r3, [pc, #220]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800900e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80090e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800901a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800901e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800902a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800902e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009030:	4b2a      	ldr	r3, [pc, #168]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009034:	0a5b      	lsrs	r3, r3, #9
 8009036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800904a:	edd7 6a07 	vldr	s13, [r7, #28]
 800904e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009056:	ee17 2a90 	vmov	r2, s15
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800905e:	4b1f      	ldr	r3, [pc, #124]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009062:	0c1b      	lsrs	r3, r3, #16
 8009064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009078:	edd7 6a07 	vldr	s13, [r7, #28]
 800907c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009084:	ee17 2a90 	vmov	r2, s15
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800908c:	4b13      	ldr	r3, [pc, #76]	@ (80090dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009090:	0e1b      	lsrs	r3, r3, #24
 8009092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80090aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b2:	ee17 2a90 	vmov	r2, s15
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80090ba:	e008      	b.n	80090ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	609a      	str	r2, [r3, #8]
}
 80090ce:	bf00      	nop
 80090d0:	3724      	adds	r7, #36	@ 0x24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	58024400 	.word	0x58024400
 80090e0:	03d09000 	.word	0x03d09000
 80090e4:	46000000 	.word	0x46000000
 80090e8:	4c742400 	.word	0x4c742400
 80090ec:	4a742400 	.word	0x4a742400
 80090f0:	4af42400 	.word	0x4af42400

080090f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b089      	sub	sp, #36	@ 0x24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090fc:	4ba0      	ldr	r3, [pc, #640]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009100:	f003 0303 	and.w	r3, r3, #3
 8009104:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009106:	4b9e      	ldr	r3, [pc, #632]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	091b      	lsrs	r3, r3, #4
 800910c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009110:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009112:	4b9b      	ldr	r3, [pc, #620]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800911c:	4b98      	ldr	r3, [pc, #608]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800911e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	fb02 f303 	mul.w	r3, r2, r3
 800912c:	ee07 3a90 	vmov	s15, r3
 8009130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009134:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 8111 	beq.w	8009362 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	2b02      	cmp	r3, #2
 8009144:	f000 8083 	beq.w	800924e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b02      	cmp	r3, #2
 800914c:	f200 80a1 	bhi.w	8009292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d056      	beq.n	800920a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800915c:	e099      	b.n	8009292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800915e:	4b88      	ldr	r3, [pc, #544]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	d02d      	beq.n	80091c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800916a:	4b85      	ldr	r3, [pc, #532]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	08db      	lsrs	r3, r3, #3
 8009170:	f003 0303 	and.w	r3, r3, #3
 8009174:	4a83      	ldr	r2, [pc, #524]	@ (8009384 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009176:	fa22 f303 	lsr.w	r3, r2, r3
 800917a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009194:	4b7a      	ldr	r3, [pc, #488]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091c4:	e087      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800938c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80091d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d8:	4b69      	ldr	r3, [pc, #420]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80091f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009208:	e065      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	ee07 3a90 	vmov	s15, r3
 8009210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009214:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009390 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921c:	4b58      	ldr	r3, [pc, #352]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009224:	ee07 3a90 	vmov	s15, r3
 8009228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009230:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924c:	e043      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	ee07 3a90 	vmov	s15, r3
 8009254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009258:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009394 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800925c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009260:	4b47      	ldr	r3, [pc, #284]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009268:	ee07 3a90 	vmov	s15, r3
 800926c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009270:	ed97 6a03 	vldr	s12, [r7, #12]
 8009274:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009290:	e021      	b.n	80092d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800938c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a4:	4b36      	ldr	r3, [pc, #216]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ac:	ee07 3a90 	vmov	s15, r3
 80092b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80092d6:	4b2a      	ldr	r3, [pc, #168]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092da:	0a5b      	lsrs	r3, r3, #9
 80092dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fc:	ee17 2a90 	vmov	r2, s15
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009304:	4b1e      	ldr	r3, [pc, #120]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009308:	0c1b      	lsrs	r3, r3, #16
 800930a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800931a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800931e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800932a:	ee17 2a90 	vmov	r2, s15
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009332:	4b13      	ldr	r3, [pc, #76]	@ (8009380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	0e1b      	lsrs	r3, r3, #24
 8009338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800934c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009358:	ee17 2a90 	vmov	r2, s15
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009360:	e008      	b.n	8009374 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	609a      	str	r2, [r3, #8]
}
 8009374:	bf00      	nop
 8009376:	3724      	adds	r7, #36	@ 0x24
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	58024400 	.word	0x58024400
 8009384:	03d09000 	.word	0x03d09000
 8009388:	46000000 	.word	0x46000000
 800938c:	4c742400 	.word	0x4c742400
 8009390:	4a742400 	.word	0x4a742400
 8009394:	4af42400 	.word	0x4af42400

08009398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093a6:	4b53      	ldr	r3, [pc, #332]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093aa:	f003 0303 	and.w	r3, r3, #3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d101      	bne.n	80093b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e099      	b.n	80094ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80093b6:	4b4f      	ldr	r3, [pc, #316]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a4e      	ldr	r2, [pc, #312]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093c2:	f7f8 fbd1 	bl	8001b68 <HAL_GetTick>
 80093c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093c8:	e008      	b.n	80093dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093ca:	f7f8 fbcd 	bl	8001b68 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d901      	bls.n	80093dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e086      	b.n	80094ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093dc:	4b45      	ldr	r3, [pc, #276]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f0      	bne.n	80093ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80093e8:	4b42      	ldr	r3, [pc, #264]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	493f      	ldr	r1, [pc, #252]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	3b01      	subs	r3, #1
 800940c:	025b      	lsls	r3, r3, #9
 800940e:	b29b      	uxth	r3, r3
 8009410:	431a      	orrs	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	3b01      	subs	r3, #1
 8009418:	041b      	lsls	r3, r3, #16
 800941a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	3b01      	subs	r3, #1
 8009426:	061b      	lsls	r3, r3, #24
 8009428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800942c:	4931      	ldr	r1, [pc, #196]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800942e:	4313      	orrs	r3, r2
 8009430:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009432:	4b30      	ldr	r3, [pc, #192]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009436:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	492d      	ldr	r1, [pc, #180]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009440:	4313      	orrs	r3, r2
 8009442:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009444:	4b2b      	ldr	r3, [pc, #172]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	f023 0220 	bic.w	r2, r3, #32
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	4928      	ldr	r1, [pc, #160]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009452:	4313      	orrs	r3, r2
 8009454:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009456:	4b27      	ldr	r3, [pc, #156]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945a:	4a26      	ldr	r2, [pc, #152]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800945c:	f023 0310 	bic.w	r3, r3, #16
 8009460:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009462:	4b24      	ldr	r3, [pc, #144]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009464:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009466:	4b24      	ldr	r3, [pc, #144]	@ (80094f8 <RCCEx_PLL2_Config+0x160>)
 8009468:	4013      	ands	r3, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	69d2      	ldr	r2, [r2, #28]
 800946e:	00d2      	lsls	r2, r2, #3
 8009470:	4920      	ldr	r1, [pc, #128]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009472:	4313      	orrs	r3, r2
 8009474:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009476:	4b1f      	ldr	r3, [pc, #124]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	4a1e      	ldr	r2, [pc, #120]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800947c:	f043 0310 	orr.w	r3, r3, #16
 8009480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009488:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	4a19      	ldr	r2, [pc, #100]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800948e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009492:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009494:	e00f      	b.n	80094b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d106      	bne.n	80094aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800949c:	4b15      	ldr	r3, [pc, #84]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 800949e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a0:	4a14      	ldr	r2, [pc, #80]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094a8:	e005      	b.n	80094b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80094aa:	4b12      	ldr	r3, [pc, #72]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ae:	4a11      	ldr	r2, [pc, #68]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80094b6:	4b0f      	ldr	r3, [pc, #60]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a0e      	ldr	r2, [pc, #56]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094c2:	f7f8 fb51 	bl	8001b68 <HAL_GetTick>
 80094c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094c8:	e008      	b.n	80094dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80094ca:	f7f8 fb4d 	bl	8001b68 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d901      	bls.n	80094dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094d8:	2303      	movs	r3, #3
 80094da:	e006      	b.n	80094ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094dc:	4b05      	ldr	r3, [pc, #20]	@ (80094f4 <RCCEx_PLL2_Config+0x15c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0f0      	beq.n	80094ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	58024400 	.word	0x58024400
 80094f8:	ffff0007 	.word	0xffff0007

080094fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800950a:	4b53      	ldr	r3, [pc, #332]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b03      	cmp	r3, #3
 8009514:	d101      	bne.n	800951a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e099      	b.n	800964e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800951a:	4b4f      	ldr	r3, [pc, #316]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a4e      	ldr	r2, [pc, #312]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009526:	f7f8 fb1f 	bl	8001b68 <HAL_GetTick>
 800952a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800952c:	e008      	b.n	8009540 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800952e:	f7f8 fb1b 	bl	8001b68 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d901      	bls.n	8009540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e086      	b.n	800964e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009540:	4b45      	ldr	r3, [pc, #276]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1f0      	bne.n	800952e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800954c:	4b42      	ldr	r3, [pc, #264]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009550:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	051b      	lsls	r3, r3, #20
 800955a:	493f      	ldr	r1, [pc, #252]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800955c:	4313      	orrs	r3, r2
 800955e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	3b01      	subs	r3, #1
 8009566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	3b01      	subs	r3, #1
 8009570:	025b      	lsls	r3, r3, #9
 8009572:	b29b      	uxth	r3, r3
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	3b01      	subs	r3, #1
 800957c:	041b      	lsls	r3, r3, #16
 800957e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	3b01      	subs	r3, #1
 800958a:	061b      	lsls	r3, r3, #24
 800958c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009590:	4931      	ldr	r1, [pc, #196]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009592:	4313      	orrs	r3, r2
 8009594:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009596:	4b30      	ldr	r3, [pc, #192]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	492d      	ldr	r1, [pc, #180]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80095a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	4928      	ldr	r1, [pc, #160]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095b6:	4313      	orrs	r3, r2
 80095b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80095ba:	4b27      	ldr	r3, [pc, #156]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095be:	4a26      	ldr	r2, [pc, #152]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80095c6:	4b24      	ldr	r3, [pc, #144]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ca:	4b24      	ldr	r3, [pc, #144]	@ (800965c <RCCEx_PLL3_Config+0x160>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	69d2      	ldr	r2, [r2, #28]
 80095d2:	00d2      	lsls	r2, r2, #3
 80095d4:	4920      	ldr	r1, [pc, #128]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80095da:	4b1f      	ldr	r3, [pc, #124]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	4a1e      	ldr	r2, [pc, #120]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d106      	bne.n	80095fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80095ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095f0:	4a19      	ldr	r2, [pc, #100]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 80095f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80095f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80095f8:	e00f      	b.n	800961a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d106      	bne.n	800960e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009600:	4b15      	ldr	r3, [pc, #84]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	4a14      	ldr	r2, [pc, #80]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800960a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800960c:	e005      	b.n	800961a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800960e:	4b12      	ldr	r3, [pc, #72]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	4a11      	ldr	r2, [pc, #68]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009618:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800961a:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a0e      	ldr	r2, [pc, #56]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009626:	f7f8 fa9f 	bl	8001b68 <HAL_GetTick>
 800962a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800962c:	e008      	b.n	8009640 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800962e:	f7f8 fa9b 	bl	8001b68 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	2b02      	cmp	r3, #2
 800963a:	d901      	bls.n	8009640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800963c:	2303      	movs	r3, #3
 800963e:	e006      	b.n	800964e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009640:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <RCCEx_PLL3_Config+0x15c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0f0      	beq.n	800962e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	58024400 	.word	0x58024400
 800965c:	ffff0007 	.word	0xffff0007

08009660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d101      	bne.n	8009672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e049      	b.n	8009706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7f7 ffe8 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3304      	adds	r3, #4
 800969c:	4619      	mov	r1, r3
 800969e:	4610      	mov	r0, r2
 80096a0:	f000 fd76 	bl	800a190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b01      	cmp	r3, #1
 8009722:	d001      	beq.n	8009728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e05e      	b.n	80097e6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68da      	ldr	r2, [r3, #12]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a2b      	ldr	r2, [pc, #172]	@ (80097f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d02c      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009752:	d027      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a27      	ldr	r2, [pc, #156]	@ (80097f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d022      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a26      	ldr	r2, [pc, #152]	@ (80097fc <HAL_TIM_Base_Start_IT+0xec>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d01d      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a24      	ldr	r2, [pc, #144]	@ (8009800 <HAL_TIM_Base_Start_IT+0xf0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d018      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a23      	ldr	r2, [pc, #140]	@ (8009804 <HAL_TIM_Base_Start_IT+0xf4>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a21      	ldr	r2, [pc, #132]	@ (8009808 <HAL_TIM_Base_Start_IT+0xf8>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00e      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a20      	ldr	r2, [pc, #128]	@ (800980c <HAL_TIM_Base_Start_IT+0xfc>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d009      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1e      	ldr	r2, [pc, #120]	@ (8009810 <HAL_TIM_Base_Start_IT+0x100>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d004      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x94>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1d      	ldr	r2, [pc, #116]	@ (8009814 <HAL_TIM_Base_Start_IT+0x104>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d115      	bne.n	80097d0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <HAL_TIM_Base_Start_IT+0x108>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b06      	cmp	r3, #6
 80097b4:	d015      	beq.n	80097e2 <HAL_TIM_Base_Start_IT+0xd2>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097bc:	d011      	beq.n	80097e2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ce:	e008      	b.n	80097e2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0201 	orr.w	r2, r2, #1
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	e000      	b.n	80097e4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800
 8009800:	40000c00 	.word	0x40000c00
 8009804:	40010400 	.word	0x40010400
 8009808:	40001800 	.word	0x40001800
 800980c:	40014000 	.word	0x40014000
 8009810:	4000e000 	.word	0x4000e000
 8009814:	4000e400 	.word	0x4000e400
 8009818:	00010007 	.word	0x00010007

0800981c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e049      	b.n	80098c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f841 	bl	80098ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f000 fc98 	bl	800a190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098ca:	b480      	push	{r7}
 80098cc:	b083      	sub	sp, #12
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
	...

080098e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <HAL_TIM_PWM_Start+0x24>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	bf14      	ite	ne
 80098fc:	2301      	movne	r3, #1
 80098fe:	2300      	moveq	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e03c      	b.n	800997e <HAL_TIM_PWM_Start+0x9e>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b04      	cmp	r3, #4
 8009908:	d109      	bne.n	800991e <HAL_TIM_PWM_Start+0x3e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b01      	cmp	r3, #1
 8009914:	bf14      	ite	ne
 8009916:	2301      	movne	r3, #1
 8009918:	2300      	moveq	r3, #0
 800991a:	b2db      	uxtb	r3, r3
 800991c:	e02f      	b.n	800997e <HAL_TIM_PWM_Start+0x9e>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b08      	cmp	r3, #8
 8009922:	d109      	bne.n	8009938 <HAL_TIM_PWM_Start+0x58>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	e022      	b.n	800997e <HAL_TIM_PWM_Start+0x9e>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b0c      	cmp	r3, #12
 800993c:	d109      	bne.n	8009952 <HAL_TIM_PWM_Start+0x72>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b01      	cmp	r3, #1
 8009948:	bf14      	ite	ne
 800994a:	2301      	movne	r3, #1
 800994c:	2300      	moveq	r3, #0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	e015      	b.n	800997e <HAL_TIM_PWM_Start+0x9e>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b10      	cmp	r3, #16
 8009956:	d109      	bne.n	800996c <HAL_TIM_PWM_Start+0x8c>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	bf14      	ite	ne
 8009964:	2301      	movne	r3, #1
 8009966:	2300      	moveq	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	e008      	b.n	800997e <HAL_TIM_PWM_Start+0x9e>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	bf14      	ite	ne
 8009978:	2301      	movne	r3, #1
 800997a:	2300      	moveq	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e0ab      	b.n	8009ade <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <HAL_TIM_PWM_Start+0xb6>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009994:	e023      	b.n	80099de <HAL_TIM_PWM_Start+0xfe>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b04      	cmp	r3, #4
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_PWM_Start+0xc6>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099a4:	e01b      	b.n	80099de <HAL_TIM_PWM_Start+0xfe>
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d104      	bne.n	80099b6 <HAL_TIM_PWM_Start+0xd6>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099b4:	e013      	b.n	80099de <HAL_TIM_PWM_Start+0xfe>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b0c      	cmp	r3, #12
 80099ba:	d104      	bne.n	80099c6 <HAL_TIM_PWM_Start+0xe6>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099c4:	e00b      	b.n	80099de <HAL_TIM_PWM_Start+0xfe>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d104      	bne.n	80099d6 <HAL_TIM_PWM_Start+0xf6>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099d4:	e003      	b.n	80099de <HAL_TIM_PWM_Start+0xfe>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2202      	movs	r2, #2
 80099da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2201      	movs	r2, #1
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fff2 	bl	800a9d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a3d      	ldr	r2, [pc, #244]	@ (8009ae8 <HAL_TIM_PWM_Start+0x208>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <HAL_TIM_PWM_Start+0x13e>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a3c      	ldr	r2, [pc, #240]	@ (8009aec <HAL_TIM_PWM_Start+0x20c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d00e      	beq.n	8009a1e <HAL_TIM_PWM_Start+0x13e>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a3a      	ldr	r2, [pc, #232]	@ (8009af0 <HAL_TIM_PWM_Start+0x210>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d009      	beq.n	8009a1e <HAL_TIM_PWM_Start+0x13e>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a39      	ldr	r2, [pc, #228]	@ (8009af4 <HAL_TIM_PWM_Start+0x214>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d004      	beq.n	8009a1e <HAL_TIM_PWM_Start+0x13e>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a37      	ldr	r2, [pc, #220]	@ (8009af8 <HAL_TIM_PWM_Start+0x218>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d101      	bne.n	8009a22 <HAL_TIM_PWM_Start+0x142>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <HAL_TIM_PWM_Start+0x144>
 8009a22:	2300      	movs	r3, #0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d007      	beq.n	8009a38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8009ae8 <HAL_TIM_PWM_Start+0x208>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d02c      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d027      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a2a      	ldr	r2, [pc, #168]	@ (8009afc <HAL_TIM_PWM_Start+0x21c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d022      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a29      	ldr	r2, [pc, #164]	@ (8009b00 <HAL_TIM_PWM_Start+0x220>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d01d      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a27      	ldr	r2, [pc, #156]	@ (8009b04 <HAL_TIM_PWM_Start+0x224>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d018      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8009aec <HAL_TIM_PWM_Start+0x20c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d013      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a23      	ldr	r2, [pc, #140]	@ (8009b08 <HAL_TIM_PWM_Start+0x228>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00e      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1b      	ldr	r2, [pc, #108]	@ (8009af0 <HAL_TIM_PWM_Start+0x210>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d009      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8009b0c <HAL_TIM_PWM_Start+0x22c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d004      	beq.n	8009a9c <HAL_TIM_PWM_Start+0x1bc>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a1e      	ldr	r2, [pc, #120]	@ (8009b10 <HAL_TIM_PWM_Start+0x230>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d115      	bne.n	8009ac8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8009b14 <HAL_TIM_PWM_Start+0x234>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b06      	cmp	r3, #6
 8009aac:	d015      	beq.n	8009ada <HAL_TIM_PWM_Start+0x1fa>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab4:	d011      	beq.n	8009ada <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0201 	orr.w	r2, r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac6:	e008      	b.n	8009ada <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e000      	b.n	8009adc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	40010000 	.word	0x40010000
 8009aec:	40010400 	.word	0x40010400
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40014400 	.word	0x40014400
 8009af8:	40014800 	.word	0x40014800
 8009afc:	40000400 	.word	0x40000400
 8009b00:	40000800 	.word	0x40000800
 8009b04:	40000c00 	.word	0x40000c00
 8009b08:	40001800 	.word	0x40001800
 8009b0c:	4000e000 	.word	0x4000e000
 8009b10:	4000e400 	.word	0x4000e400
 8009b14:	00010007 	.word	0x00010007

08009b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d020      	beq.n	8009b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f003 0302 	and.w	r3, r3, #2
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d01b      	beq.n	8009b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f06f 0202 	mvn.w	r2, #2
 8009b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 faf6 	bl	800a154 <HAL_TIM_IC_CaptureCallback>
 8009b68:	e005      	b.n	8009b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fae8 	bl	800a140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 faf9 	bl	800a168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d020      	beq.n	8009bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01b      	beq.n	8009bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f06f 0204 	mvn.w	r2, #4
 8009b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fad0 	bl	800a154 <HAL_TIM_IC_CaptureCallback>
 8009bb4:	e005      	b.n	8009bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fac2 	bl	800a140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fad3 	bl	800a168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	f003 0308 	and.w	r3, r3, #8
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d020      	beq.n	8009c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01b      	beq.n	8009c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f06f 0208 	mvn.w	r2, #8
 8009be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2204      	movs	r2, #4
 8009bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 faaa 	bl	800a154 <HAL_TIM_IC_CaptureCallback>
 8009c00:	e005      	b.n	8009c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa9c 	bl	800a140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 faad 	bl	800a168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f003 0310 	and.w	r3, r3, #16
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d020      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01b      	beq.n	8009c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0210 	mvn.w	r2, #16
 8009c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2208      	movs	r2, #8
 8009c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa84 	bl	800a154 <HAL_TIM_IC_CaptureCallback>
 8009c4c:	e005      	b.n	8009c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa76 	bl	800a140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa87 	bl	800a168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f06f 0201 	mvn.w	r2, #1
 8009c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7f7 f85c 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00c      	beq.n	8009cb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d007      	beq.n	8009cb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 f8b7 	bl	800ae20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00c      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d007      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 f8af 	bl	800ae34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00c      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d007      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fa41 	bl	800a17c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00c      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0220 	mvn.w	r2, #32
 8009d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 f877 	bl	800ae0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e0ff      	b.n	8009f46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b14      	cmp	r3, #20
 8009d52:	f200 80f0 	bhi.w	8009f36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d56:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009db1 	.word	0x08009db1
 8009d60:	08009f37 	.word	0x08009f37
 8009d64:	08009f37 	.word	0x08009f37
 8009d68:	08009f37 	.word	0x08009f37
 8009d6c:	08009df1 	.word	0x08009df1
 8009d70:	08009f37 	.word	0x08009f37
 8009d74:	08009f37 	.word	0x08009f37
 8009d78:	08009f37 	.word	0x08009f37
 8009d7c:	08009e33 	.word	0x08009e33
 8009d80:	08009f37 	.word	0x08009f37
 8009d84:	08009f37 	.word	0x08009f37
 8009d88:	08009f37 	.word	0x08009f37
 8009d8c:	08009e73 	.word	0x08009e73
 8009d90:	08009f37 	.word	0x08009f37
 8009d94:	08009f37 	.word	0x08009f37
 8009d98:	08009f37 	.word	0x08009f37
 8009d9c:	08009eb5 	.word	0x08009eb5
 8009da0:	08009f37 	.word	0x08009f37
 8009da4:	08009f37 	.word	0x08009f37
 8009da8:	08009f37 	.word	0x08009f37
 8009dac:	08009ef5 	.word	0x08009ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fa96 	bl	800a2e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699a      	ldr	r2, [r3, #24]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0208 	orr.w	r2, r2, #8
 8009dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699a      	ldr	r2, [r3, #24]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f022 0204 	bic.w	r2, r2, #4
 8009dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6999      	ldr	r1, [r3, #24]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	691a      	ldr	r2, [r3, #16]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	619a      	str	r2, [r3, #24]
      break;
 8009dee:	e0a5      	b.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68b9      	ldr	r1, [r7, #8]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fb06 	bl	800a408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	699a      	ldr	r2, [r3, #24]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	6999      	ldr	r1, [r3, #24]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	021a      	lsls	r2, r3, #8
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	619a      	str	r2, [r3, #24]
      break;
 8009e30:	e084      	b.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fb6f 	bl	800a51c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69da      	ldr	r2, [r3, #28]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0208 	orr.w	r2, r2, #8
 8009e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69da      	ldr	r2, [r3, #28]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0204 	bic.w	r2, r2, #4
 8009e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69d9      	ldr	r1, [r3, #28]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	61da      	str	r2, [r3, #28]
      break;
 8009e70:	e064      	b.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 fbd7 	bl	800a62c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69da      	ldr	r2, [r3, #28]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69d9      	ldr	r1, [r3, #28]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	021a      	lsls	r2, r3, #8
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	61da      	str	r2, [r3, #28]
      break;
 8009eb2:	e043      	b.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68b9      	ldr	r1, [r7, #8]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fc20 	bl	800a700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0208 	orr.w	r2, r2, #8
 8009ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f022 0204 	bic.w	r2, r2, #4
 8009ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	691a      	ldr	r2, [r3, #16]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009ef2:	e023      	b.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fc64 	bl	800a7c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	021a      	lsls	r2, r3, #8
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009f34:	e002      	b.n	8009f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75fb      	strb	r3, [r7, #23]
      break;
 8009f3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop

08009f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d101      	bne.n	8009f6c <HAL_TIM_ConfigClockSource+0x1c>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e0dc      	b.n	800a126 <HAL_TIM_ConfigClockSource+0x1d6>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	4b6a      	ldr	r3, [pc, #424]	@ (800a130 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a64      	ldr	r2, [pc, #400]	@ (800a134 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	f000 80a9 	beq.w	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fa8:	4a62      	ldr	r2, [pc, #392]	@ (800a134 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	f200 80ae 	bhi.w	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 8009fb0:	4a61      	ldr	r2, [pc, #388]	@ (800a138 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	f000 80a1 	beq.w	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fb8:	4a5f      	ldr	r2, [pc, #380]	@ (800a138 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	f200 80a6 	bhi.w	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800a13c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	f000 8099 	beq.w	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fc8:	4a5c      	ldr	r2, [pc, #368]	@ (800a13c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	f200 809e 	bhi.w	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fd4:	f000 8091 	beq.w	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fdc:	f200 8096 	bhi.w	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fe4:	f000 8089 	beq.w	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 8009fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fec:	f200 808e 	bhi.w	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ff4:	d03e      	beq.n	800a074 <HAL_TIM_ConfigClockSource+0x124>
 8009ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ffa:	f200 8087 	bhi.w	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 8009ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a002:	f000 8086 	beq.w	800a112 <HAL_TIM_ConfigClockSource+0x1c2>
 800a006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a00a:	d87f      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a00c:	2b70      	cmp	r3, #112	@ 0x70
 800a00e:	d01a      	beq.n	800a046 <HAL_TIM_ConfigClockSource+0xf6>
 800a010:	2b70      	cmp	r3, #112	@ 0x70
 800a012:	d87b      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a014:	2b60      	cmp	r3, #96	@ 0x60
 800a016:	d050      	beq.n	800a0ba <HAL_TIM_ConfigClockSource+0x16a>
 800a018:	2b60      	cmp	r3, #96	@ 0x60
 800a01a:	d877      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a01c:	2b50      	cmp	r3, #80	@ 0x50
 800a01e:	d03c      	beq.n	800a09a <HAL_TIM_ConfigClockSource+0x14a>
 800a020:	2b50      	cmp	r3, #80	@ 0x50
 800a022:	d873      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a024:	2b40      	cmp	r3, #64	@ 0x40
 800a026:	d058      	beq.n	800a0da <HAL_TIM_ConfigClockSource+0x18a>
 800a028:	2b40      	cmp	r3, #64	@ 0x40
 800a02a:	d86f      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a02c:	2b30      	cmp	r3, #48	@ 0x30
 800a02e:	d064      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a030:	2b30      	cmp	r3, #48	@ 0x30
 800a032:	d86b      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a034:	2b20      	cmp	r3, #32
 800a036:	d060      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d867      	bhi.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d05c      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a040:	2b10      	cmp	r3, #16
 800a042:	d05a      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0x1aa>
 800a044:	e062      	b.n	800a10c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a056:	f000 fc9b 	bl	800a990 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	609a      	str	r2, [r3, #8]
      break;
 800a072:	e04f      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a084:	f000 fc84 	bl	800a990 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a096:	609a      	str	r2, [r3, #8]
      break;
 800a098:	e03c      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f000 fbf4 	bl	800a894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2150      	movs	r1, #80	@ 0x50
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fc4e 	bl	800a954 <TIM_ITRx_SetConfig>
      break;
 800a0b8:	e02c      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f000 fc13 	bl	800a8f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2160      	movs	r1, #96	@ 0x60
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f000 fc3e 	bl	800a954 <TIM_ITRx_SetConfig>
      break;
 800a0d8:	e01c      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f000 fbd4 	bl	800a894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2140      	movs	r1, #64	@ 0x40
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fc2e 	bl	800a954 <TIM_ITRx_SetConfig>
      break;
 800a0f8:	e00c      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f000 fc25 	bl	800a954 <TIM_ITRx_SetConfig>
      break;
 800a10a:	e003      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	73fb      	strb	r3, [r7, #15]
      break;
 800a110:	e000      	b.n	800a114 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a124:	7bfb      	ldrb	r3, [r7, #15]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	ffceff88 	.word	0xffceff88
 800a134:	00100040 	.word	0x00100040
 800a138:	00100030 	.word	0x00100030
 800a13c:	00100020 	.word	0x00100020

0800a140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a47      	ldr	r2, [pc, #284]	@ (800a2c0 <TIM_Base_SetConfig+0x130>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d013      	beq.n	800a1d0 <TIM_Base_SetConfig+0x40>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ae:	d00f      	beq.n	800a1d0 <TIM_Base_SetConfig+0x40>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a44      	ldr	r2, [pc, #272]	@ (800a2c4 <TIM_Base_SetConfig+0x134>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d00b      	beq.n	800a1d0 <TIM_Base_SetConfig+0x40>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	4a43      	ldr	r2, [pc, #268]	@ (800a2c8 <TIM_Base_SetConfig+0x138>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d007      	beq.n	800a1d0 <TIM_Base_SetConfig+0x40>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a42      	ldr	r2, [pc, #264]	@ (800a2cc <TIM_Base_SetConfig+0x13c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d003      	beq.n	800a1d0 <TIM_Base_SetConfig+0x40>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a41      	ldr	r2, [pc, #260]	@ (800a2d0 <TIM_Base_SetConfig+0x140>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d108      	bne.n	800a1e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a36      	ldr	r2, [pc, #216]	@ (800a2c0 <TIM_Base_SetConfig+0x130>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d027      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1f0:	d023      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a33      	ldr	r2, [pc, #204]	@ (800a2c4 <TIM_Base_SetConfig+0x134>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d01f      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a32      	ldr	r2, [pc, #200]	@ (800a2c8 <TIM_Base_SetConfig+0x138>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d01b      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a31      	ldr	r2, [pc, #196]	@ (800a2cc <TIM_Base_SetConfig+0x13c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d017      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a30      	ldr	r2, [pc, #192]	@ (800a2d0 <TIM_Base_SetConfig+0x140>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a2f      	ldr	r2, [pc, #188]	@ (800a2d4 <TIM_Base_SetConfig+0x144>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00f      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a2e      	ldr	r2, [pc, #184]	@ (800a2d8 <TIM_Base_SetConfig+0x148>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00b      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a2d      	ldr	r2, [pc, #180]	@ (800a2dc <TIM_Base_SetConfig+0x14c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d007      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a2c      	ldr	r2, [pc, #176]	@ (800a2e0 <TIM_Base_SetConfig+0x150>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d003      	beq.n	800a23a <TIM_Base_SetConfig+0xaa>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a2b      	ldr	r2, [pc, #172]	@ (800a2e4 <TIM_Base_SetConfig+0x154>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d108      	bne.n	800a24c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4313      	orrs	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	695b      	ldr	r3, [r3, #20]
 800a256:	4313      	orrs	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a14      	ldr	r2, [pc, #80]	@ (800a2c0 <TIM_Base_SetConfig+0x130>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00f      	beq.n	800a292 <TIM_Base_SetConfig+0x102>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a16      	ldr	r2, [pc, #88]	@ (800a2d0 <TIM_Base_SetConfig+0x140>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d00b      	beq.n	800a292 <TIM_Base_SetConfig+0x102>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <TIM_Base_SetConfig+0x144>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d007      	beq.n	800a292 <TIM_Base_SetConfig+0x102>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a14      	ldr	r2, [pc, #80]	@ (800a2d8 <TIM_Base_SetConfig+0x148>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_Base_SetConfig+0x102>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a13      	ldr	r2, [pc, #76]	@ (800a2dc <TIM_Base_SetConfig+0x14c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d103      	bne.n	800a29a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	691a      	ldr	r2, [r3, #16]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f043 0204 	orr.w	r2, r3, #4
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	601a      	str	r2, [r3, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40000400 	.word	0x40000400
 800a2c8:	40000800 	.word	0x40000800
 800a2cc:	40000c00 	.word	0x40000c00
 800a2d0:	40010400 	.word	0x40010400
 800a2d4:	40014000 	.word	0x40014000
 800a2d8:	40014400 	.word	0x40014400
 800a2dc:	40014800 	.word	0x40014800
 800a2e0:	4000e000 	.word	0x4000e000
 800a2e4:	4000e400 	.word	0x4000e400

0800a2e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	f023 0201 	bic.w	r2, r3, #1
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	4b37      	ldr	r3, [pc, #220]	@ (800a3f0 <TIM_OC1_SetConfig+0x108>)
 800a314:	4013      	ands	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0303 	bic.w	r3, r3, #3
 800a31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f023 0302 	bic.w	r3, r3, #2
 800a330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	4313      	orrs	r3, r2
 800a33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a2d      	ldr	r2, [pc, #180]	@ (800a3f4 <TIM_OC1_SetConfig+0x10c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00f      	beq.n	800a364 <TIM_OC1_SetConfig+0x7c>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a2c      	ldr	r2, [pc, #176]	@ (800a3f8 <TIM_OC1_SetConfig+0x110>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d00b      	beq.n	800a364 <TIM_OC1_SetConfig+0x7c>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a2b      	ldr	r2, [pc, #172]	@ (800a3fc <TIM_OC1_SetConfig+0x114>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d007      	beq.n	800a364 <TIM_OC1_SetConfig+0x7c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a2a      	ldr	r2, [pc, #168]	@ (800a400 <TIM_OC1_SetConfig+0x118>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d003      	beq.n	800a364 <TIM_OC1_SetConfig+0x7c>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a29      	ldr	r2, [pc, #164]	@ (800a404 <TIM_OC1_SetConfig+0x11c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d10c      	bne.n	800a37e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f023 0308 	bic.w	r3, r3, #8
 800a36a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f023 0304 	bic.w	r3, r3, #4
 800a37c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a1c      	ldr	r2, [pc, #112]	@ (800a3f4 <TIM_OC1_SetConfig+0x10c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00f      	beq.n	800a3a6 <TIM_OC1_SetConfig+0xbe>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f8 <TIM_OC1_SetConfig+0x110>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d00b      	beq.n	800a3a6 <TIM_OC1_SetConfig+0xbe>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a1a      	ldr	r2, [pc, #104]	@ (800a3fc <TIM_OC1_SetConfig+0x114>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d007      	beq.n	800a3a6 <TIM_OC1_SetConfig+0xbe>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a19      	ldr	r2, [pc, #100]	@ (800a400 <TIM_OC1_SetConfig+0x118>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d003      	beq.n	800a3a6 <TIM_OC1_SetConfig+0xbe>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a18      	ldr	r2, [pc, #96]	@ (800a404 <TIM_OC1_SetConfig+0x11c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d111      	bne.n	800a3ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	621a      	str	r2, [r3, #32]
}
 800a3e4:	bf00      	nop
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	fffeff8f 	.word	0xfffeff8f
 800a3f4:	40010000 	.word	0x40010000
 800a3f8:	40010400 	.word	0x40010400
 800a3fc:	40014000 	.word	0x40014000
 800a400:	40014400 	.word	0x40014400
 800a404:	40014800 	.word	0x40014800

0800a408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	f023 0210 	bic.w	r2, r3, #16
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4b34      	ldr	r3, [pc, #208]	@ (800a504 <TIM_OC2_SetConfig+0xfc>)
 800a434:	4013      	ands	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f023 0320 	bic.w	r3, r3, #32
 800a452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	011b      	lsls	r3, r3, #4
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a29      	ldr	r2, [pc, #164]	@ (800a508 <TIM_OC2_SetConfig+0x100>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d003      	beq.n	800a470 <TIM_OC2_SetConfig+0x68>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a28      	ldr	r2, [pc, #160]	@ (800a50c <TIM_OC2_SetConfig+0x104>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d10d      	bne.n	800a48c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	011b      	lsls	r3, r3, #4
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	4313      	orrs	r3, r2
 800a482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a48a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a1e      	ldr	r2, [pc, #120]	@ (800a508 <TIM_OC2_SetConfig+0x100>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d00f      	beq.n	800a4b4 <TIM_OC2_SetConfig+0xac>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a1d      	ldr	r2, [pc, #116]	@ (800a50c <TIM_OC2_SetConfig+0x104>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00b      	beq.n	800a4b4 <TIM_OC2_SetConfig+0xac>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a1c      	ldr	r2, [pc, #112]	@ (800a510 <TIM_OC2_SetConfig+0x108>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d007      	beq.n	800a4b4 <TIM_OC2_SetConfig+0xac>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a514 <TIM_OC2_SetConfig+0x10c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d003      	beq.n	800a4b4 <TIM_OC2_SetConfig+0xac>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a518 <TIM_OC2_SetConfig+0x110>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d113      	bne.n	800a4dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	feff8fff 	.word	0xfeff8fff
 800a508:	40010000 	.word	0x40010000
 800a50c:	40010400 	.word	0x40010400
 800a510:	40014000 	.word	0x40014000
 800a514:	40014400 	.word	0x40014400
 800a518:	40014800 	.word	0x40014800

0800a51c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a1b      	ldr	r3, [r3, #32]
 800a530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4b33      	ldr	r3, [pc, #204]	@ (800a614 <TIM_OC3_SetConfig+0xf8>)
 800a548:	4013      	ands	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0303 	bic.w	r3, r3, #3
 800a552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a28      	ldr	r2, [pc, #160]	@ (800a618 <TIM_OC3_SetConfig+0xfc>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d003      	beq.n	800a582 <TIM_OC3_SetConfig+0x66>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a27      	ldr	r2, [pc, #156]	@ (800a61c <TIM_OC3_SetConfig+0x100>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d10d      	bne.n	800a59e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	4313      	orrs	r3, r2
 800a594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a59c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a618 <TIM_OC3_SetConfig+0xfc>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00f      	beq.n	800a5c6 <TIM_OC3_SetConfig+0xaa>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a61c <TIM_OC3_SetConfig+0x100>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d00b      	beq.n	800a5c6 <TIM_OC3_SetConfig+0xaa>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a1b      	ldr	r2, [pc, #108]	@ (800a620 <TIM_OC3_SetConfig+0x104>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d007      	beq.n	800a5c6 <TIM_OC3_SetConfig+0xaa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a624 <TIM_OC3_SetConfig+0x108>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d003      	beq.n	800a5c6 <TIM_OC3_SetConfig+0xaa>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a19      	ldr	r2, [pc, #100]	@ (800a628 <TIM_OC3_SetConfig+0x10c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d113      	bne.n	800a5ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	621a      	str	r2, [r3, #32]
}
 800a608:	bf00      	nop
 800a60a:	371c      	adds	r7, #28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	fffeff8f 	.word	0xfffeff8f
 800a618:	40010000 	.word	0x40010000
 800a61c:	40010400 	.word	0x40010400
 800a620:	40014000 	.word	0x40014000
 800a624:	40014400 	.word	0x40014400
 800a628:	40014800 	.word	0x40014800

0800a62c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4b24      	ldr	r3, [pc, #144]	@ (800a6e8 <TIM_OC4_SetConfig+0xbc>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	021b      	lsls	r3, r3, #8
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	031b      	lsls	r3, r3, #12
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	4313      	orrs	r3, r2
 800a682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a19      	ldr	r2, [pc, #100]	@ (800a6ec <TIM_OC4_SetConfig+0xc0>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00f      	beq.n	800a6ac <TIM_OC4_SetConfig+0x80>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a18      	ldr	r2, [pc, #96]	@ (800a6f0 <TIM_OC4_SetConfig+0xc4>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00b      	beq.n	800a6ac <TIM_OC4_SetConfig+0x80>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a17      	ldr	r2, [pc, #92]	@ (800a6f4 <TIM_OC4_SetConfig+0xc8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d007      	beq.n	800a6ac <TIM_OC4_SetConfig+0x80>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a16      	ldr	r2, [pc, #88]	@ (800a6f8 <TIM_OC4_SetConfig+0xcc>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d003      	beq.n	800a6ac <TIM_OC4_SetConfig+0x80>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a15      	ldr	r2, [pc, #84]	@ (800a6fc <TIM_OC4_SetConfig+0xd0>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d109      	bne.n	800a6c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	019b      	lsls	r3, r3, #6
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	621a      	str	r2, [r3, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	feff8fff 	.word	0xfeff8fff
 800a6ec:	40010000 	.word	0x40010000
 800a6f0:	40010400 	.word	0x40010400
 800a6f4:	40014000 	.word	0x40014000
 800a6f8:	40014400 	.word	0x40014400
 800a6fc:	40014800 	.word	0x40014800

0800a700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	4b21      	ldr	r3, [pc, #132]	@ (800a7b0 <TIM_OC5_SetConfig+0xb0>)
 800a72c:	4013      	ands	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	041b      	lsls	r3, r3, #16
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a18      	ldr	r2, [pc, #96]	@ (800a7b4 <TIM_OC5_SetConfig+0xb4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00f      	beq.n	800a776 <TIM_OC5_SetConfig+0x76>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a17      	ldr	r2, [pc, #92]	@ (800a7b8 <TIM_OC5_SetConfig+0xb8>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00b      	beq.n	800a776 <TIM_OC5_SetConfig+0x76>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a16      	ldr	r2, [pc, #88]	@ (800a7bc <TIM_OC5_SetConfig+0xbc>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d007      	beq.n	800a776 <TIM_OC5_SetConfig+0x76>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a15      	ldr	r2, [pc, #84]	@ (800a7c0 <TIM_OC5_SetConfig+0xc0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d003      	beq.n	800a776 <TIM_OC5_SetConfig+0x76>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a14      	ldr	r2, [pc, #80]	@ (800a7c4 <TIM_OC5_SetConfig+0xc4>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d109      	bne.n	800a78a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a77c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	021b      	lsls	r3, r3, #8
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	4313      	orrs	r3, r2
 800a788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	621a      	str	r2, [r3, #32]
}
 800a7a4:	bf00      	nop
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	fffeff8f 	.word	0xfffeff8f
 800a7b4:	40010000 	.word	0x40010000
 800a7b8:	40010400 	.word	0x40010400
 800a7bc:	40014000 	.word	0x40014000
 800a7c0:	40014400 	.word	0x40014400
 800a7c4:	40014800 	.word	0x40014800

0800a7c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4b22      	ldr	r3, [pc, #136]	@ (800a87c <TIM_OC6_SetConfig+0xb4>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	021b      	lsls	r3, r3, #8
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4313      	orrs	r3, r2
 800a802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a80a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	051b      	lsls	r3, r3, #20
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	4313      	orrs	r3, r2
 800a816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a19      	ldr	r2, [pc, #100]	@ (800a880 <TIM_OC6_SetConfig+0xb8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d00f      	beq.n	800a840 <TIM_OC6_SetConfig+0x78>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a18      	ldr	r2, [pc, #96]	@ (800a884 <TIM_OC6_SetConfig+0xbc>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d00b      	beq.n	800a840 <TIM_OC6_SetConfig+0x78>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a17      	ldr	r2, [pc, #92]	@ (800a888 <TIM_OC6_SetConfig+0xc0>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d007      	beq.n	800a840 <TIM_OC6_SetConfig+0x78>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a16      	ldr	r2, [pc, #88]	@ (800a88c <TIM_OC6_SetConfig+0xc4>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d003      	beq.n	800a840 <TIM_OC6_SetConfig+0x78>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a15      	ldr	r2, [pc, #84]	@ (800a890 <TIM_OC6_SetConfig+0xc8>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d109      	bne.n	800a854 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	029b      	lsls	r3, r3, #10
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	4313      	orrs	r3, r2
 800a852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	621a      	str	r2, [r3, #32]
}
 800a86e:	bf00      	nop
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	feff8fff 	.word	0xfeff8fff
 800a880:	40010000 	.word	0x40010000
 800a884:	40010400 	.word	0x40010400
 800a888:	40014000 	.word	0x40014000
 800a88c:	40014400 	.word	0x40014400
 800a890:	40014800 	.word	0x40014800

0800a894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	f023 0201 	bic.w	r2, r3, #1
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f023 030a 	bic.w	r3, r3, #10
 800a8d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	621a      	str	r2, [r3, #32]
}
 800a8e6:	bf00      	nop
 800a8e8:	371c      	adds	r7, #28
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b087      	sub	sp, #28
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6a1b      	ldr	r3, [r3, #32]
 800a908:	f023 0210 	bic.w	r2, r3, #16
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a91c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	031b      	lsls	r3, r3, #12
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a92e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	621a      	str	r2, [r3, #32]
}
 800a946:	bf00      	nop
 800a948:	371c      	adds	r7, #28
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
	...

0800a954 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	4b09      	ldr	r3, [pc, #36]	@ (800a98c <TIM_ITRx_SetConfig+0x38>)
 800a968:	4013      	ands	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4313      	orrs	r3, r2
 800a972:	f043 0307 	orr.w	r3, r3, #7
 800a976:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	609a      	str	r2, [r3, #8]
}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	ffcfff8f 	.word	0xffcfff8f

0800a990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	021a      	lsls	r2, r3, #8
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	609a      	str	r2, [r3, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	371c      	adds	r7, #28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f003 031f 	and.w	r3, r3, #31
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a1a      	ldr	r2, [r3, #32]
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	401a      	ands	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a1a      	ldr	r2, [r3, #32]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 031f 	and.w	r3, r3, #31
 800aa02:	6879      	ldr	r1, [r7, #4]
 800aa04:	fa01 f303 	lsl.w	r3, r1, r3
 800aa08:	431a      	orrs	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	621a      	str	r2, [r3, #32]
}
 800aa0e:	bf00      	nop
 800aa10:	371c      	adds	r7, #28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
	...

0800aa1c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d109      	bne.n	800aa40 <HAL_TIMEx_PWMN_Start+0x24>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	bf14      	ite	ne
 800aa38:	2301      	movne	r3, #1
 800aa3a:	2300      	moveq	r3, #0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	e022      	b.n	800aa86 <HAL_TIMEx_PWMN_Start+0x6a>
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	d109      	bne.n	800aa5a <HAL_TIMEx_PWMN_Start+0x3e>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	bf14      	ite	ne
 800aa52:	2301      	movne	r3, #1
 800aa54:	2300      	moveq	r3, #0
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	e015      	b.n	800aa86 <HAL_TIMEx_PWMN_Start+0x6a>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b08      	cmp	r3, #8
 800aa5e:	d109      	bne.n	800aa74 <HAL_TIMEx_PWMN_Start+0x58>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	bf14      	ite	ne
 800aa6c:	2301      	movne	r3, #1
 800aa6e:	2300      	moveq	r3, #0
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	e008      	b.n	800aa86 <HAL_TIMEx_PWMN_Start+0x6a>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	bf14      	ite	ne
 800aa80:	2301      	movne	r3, #1
 800aa82:	2300      	moveq	r3, #0
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e07d      	b.n	800ab8a <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <HAL_TIMEx_PWMN_Start+0x82>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa9c:	e013      	b.n	800aac6 <HAL_TIMEx_PWMN_Start+0xaa>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d104      	bne.n	800aaae <HAL_TIMEx_PWMN_Start+0x92>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaac:	e00b      	b.n	800aac6 <HAL_TIMEx_PWMN_Start+0xaa>
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b08      	cmp	r3, #8
 800aab2:	d104      	bne.n	800aabe <HAL_TIMEx_PWMN_Start+0xa2>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aabc:	e003      	b.n	800aac6 <HAL_TIMEx_PWMN_Start+0xaa>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2202      	movs	r2, #2
 800aac2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2204      	movs	r2, #4
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f9ba 	bl	800ae48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aae2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a2a      	ldr	r2, [pc, #168]	@ (800ab94 <HAL_TIMEx_PWMN_Start+0x178>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d02c      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaf6:	d027      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a26      	ldr	r2, [pc, #152]	@ (800ab98 <HAL_TIMEx_PWMN_Start+0x17c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d022      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a25      	ldr	r2, [pc, #148]	@ (800ab9c <HAL_TIMEx_PWMN_Start+0x180>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d01d      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a23      	ldr	r2, [pc, #140]	@ (800aba0 <HAL_TIMEx_PWMN_Start+0x184>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d018      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a22      	ldr	r2, [pc, #136]	@ (800aba4 <HAL_TIMEx_PWMN_Start+0x188>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d013      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a20      	ldr	r2, [pc, #128]	@ (800aba8 <HAL_TIMEx_PWMN_Start+0x18c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d00e      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a1f      	ldr	r2, [pc, #124]	@ (800abac <HAL_TIMEx_PWMN_Start+0x190>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d009      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a1d      	ldr	r2, [pc, #116]	@ (800abb0 <HAL_TIMEx_PWMN_Start+0x194>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d004      	beq.n	800ab48 <HAL_TIMEx_PWMN_Start+0x12c>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a1c      	ldr	r2, [pc, #112]	@ (800abb4 <HAL_TIMEx_PWMN_Start+0x198>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d115      	bne.n	800ab74 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689a      	ldr	r2, [r3, #8]
 800ab4e:	4b1a      	ldr	r3, [pc, #104]	@ (800abb8 <HAL_TIMEx_PWMN_Start+0x19c>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b06      	cmp	r3, #6
 800ab58:	d015      	beq.n	800ab86 <HAL_TIMEx_PWMN_Start+0x16a>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab60:	d011      	beq.n	800ab86 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f042 0201 	orr.w	r2, r2, #1
 800ab70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab72:	e008      	b.n	800ab86 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0201 	orr.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	e000      	b.n	800ab88 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	40010000 	.word	0x40010000
 800ab98:	40000400 	.word	0x40000400
 800ab9c:	40000800 	.word	0x40000800
 800aba0:	40000c00 	.word	0x40000c00
 800aba4:	40010400 	.word	0x40010400
 800aba8:	40001800 	.word	0x40001800
 800abac:	40014000 	.word	0x40014000
 800abb0:	4000e000 	.word	0x4000e000
 800abb4:	4000e400 	.word	0x4000e400
 800abb8:	00010007 	.word	0x00010007

0800abbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abd0:	2302      	movs	r3, #2
 800abd2:	e077      	b.n	800acc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a35      	ldr	r2, [pc, #212]	@ (800acd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d004      	beq.n	800ac08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a34      	ldr	r2, [pc, #208]	@ (800acd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d108      	bne.n	800ac1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ac0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a25      	ldr	r2, [pc, #148]	@ (800acd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d02c      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac46:	d027      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a22      	ldr	r2, [pc, #136]	@ (800acd8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d022      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a21      	ldr	r2, [pc, #132]	@ (800acdc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d01d      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a1f      	ldr	r2, [pc, #124]	@ (800ace0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d018      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a1a      	ldr	r2, [pc, #104]	@ (800acd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d013      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a1b      	ldr	r2, [pc, #108]	@ (800ace4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00e      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a1a      	ldr	r2, [pc, #104]	@ (800ace8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d009      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a18      	ldr	r2, [pc, #96]	@ (800acec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d004      	beq.n	800ac98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a17      	ldr	r2, [pc, #92]	@ (800acf0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d10c      	bne.n	800acb2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	40010000 	.word	0x40010000
 800acd4:	40010400 	.word	0x40010400
 800acd8:	40000400 	.word	0x40000400
 800acdc:	40000800 	.word	0x40000800
 800ace0:	40000c00 	.word	0x40000c00
 800ace4:	40001800 	.word	0x40001800
 800ace8:	40014000 	.word	0x40014000
 800acec:	4000e000 	.word	0x4000e000
 800acf0:	4000e400 	.word	0x4000e400

0800acf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d101      	bne.n	800ad10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e073      	b.n	800adf8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	041b      	lsls	r3, r3, #16
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a19      	ldr	r2, [pc, #100]	@ (800ae04 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d004      	beq.n	800adac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a18      	ldr	r2, [pc, #96]	@ (800ae08 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d11c      	bne.n	800ade6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb6:	051b      	lsls	r3, r3, #20
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add4:	4313      	orrs	r3, r2
 800add6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade2:	4313      	orrs	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f003 030f 	and.w	r3, r3, #15
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a1a      	ldr	r2, [r3, #32]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	43db      	mvns	r3, r3
 800ae6a:	401a      	ands	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6a1a      	ldr	r2, [r3, #32]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae80:	431a      	orrs	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	621a      	str	r2, [r3, #32]
}
 800ae86:	bf00      	nop
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <rtIsInf>:
  return rtNaNF;
}

/* Test if value is infinite */
static bool rtIsInf(double value)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	ed87 0b00 	vstr	d0, [r7]
  return (bool)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	@ (800aed8 <rtIsInf+0x44>)
 800aea0:	ed93 7b00 	vldr	d7, [r3]
 800aea4:	ed97 6b00 	vldr	d6, [r7]
 800aea8:	eeb4 6b47 	vcmp.f64	d6, d7
 800aeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb0:	d009      	beq.n	800aec6 <rtIsInf+0x32>
 800aeb2:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <rtIsInf+0x48>)
 800aeb4:	ed93 7b00 	vldr	d7, [r3]
 800aeb8:	ed97 6b00 	vldr	d6, [r7]
 800aebc:	eeb4 6b47 	vcmp.f64	d6, d7
 800aec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec4:	d101      	bne.n	800aeca <rtIsInf+0x36>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e000      	b.n	800aecc <rtIsInf+0x38>
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	24000058 	.word	0x24000058
 800aedc:	24000060 	.word	0x24000060

0800aee0 <rtIsNaN>:
  return (bool)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
static bool rtIsNaN(double value)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	ed87 0b00 	vstr	d0, [r7]
  return (bool)(isnan(value) != 0);
 800aeea:	ed97 6b00 	vldr	d6, [r7]
 800aeee:	ed97 7b00 	vldr	d7, [r7]
 800aef2:	eeb4 6b47 	vcmp.f64	d6, d7
 800aef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefa:	d701      	bvc.n	800af00 <rtIsNaN+0x20>
 800aefc:	2301      	movs	r3, #1
 800aefe:	e000      	b.n	800af02 <rtIsNaN+0x22>
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	370c      	adds	r7, #12
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
	...

0800af10 <abcto>:
 *    '<S1>/abc to &#x3B1;&#x3B2;'
 *    '<S2>/abc to &#x3B1;&#x3B2;'
 */
static void abcto(double rtu_r, double rtu_y, double rtu_b, double *rty_alpha,
                  double *rty_beta, double *rty_zero)
{
 800af10:	b480      	push	{r7}
 800af12:	b08b      	sub	sp, #44	@ 0x2c
 800af14:	af00      	add	r7, sp, #0
 800af16:	ed87 0b08 	vstr	d0, [r7, #32]
 800af1a:	ed87 1b06 	vstr	d1, [r7, #24]
 800af1e:	ed87 2b04 	vstr	d2, [r7, #16]
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
  *rty_alpha = (0.66666666667 * rtu_r - 0.33333333333 * rtu_y) - 0.33333333333 *
 800af28:	ed97 7b08 	vldr	d7, [r7, #32]
 800af2c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 800afa8 <abcto+0x98>
 800af30:	ee27 6b06 	vmul.f64	d6, d7, d6
 800af34:	ed97 7b06 	vldr	d7, [r7, #24]
 800af38:	ed9f 5b1d 	vldr	d5, [pc, #116]	@ 800afb0 <abcto+0xa0>
 800af3c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800af40:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af44:	ed97 7b04 	vldr	d7, [r7, #16]
 800af48:	ed9f 5b19 	vldr	d5, [pc, #100]	@ 800afb0 <abcto+0xa0>
 800af4c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800af50:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	ed83 7b00 	vstr	d7, [r3]
    rtu_b;
  *rty_beta = (rtu_y - rtu_b) * 0.57735026919;
 800af5a:	ed97 6b06 	vldr	d6, [r7, #24]
 800af5e:	ed97 7b04 	vldr	d7, [r7, #16]
 800af62:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af66:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 800afb8 <abcto+0xa8>
 800af6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	ed83 7b00 	vstr	d7, [r3]
  *rty_zero = ((rtu_r + rtu_y) + rtu_b) * 0.33333333333;
 800af74:	ed97 6b08 	vldr	d6, [r7, #32]
 800af78:	ed97 7b06 	vldr	d7, [r7, #24]
 800af7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800af80:	ed97 7b04 	vldr	d7, [r7, #16]
 800af84:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af88:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 800afb0 <abcto+0xa0>
 800af8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	ed83 7b00 	vstr	d7, [r3]
}
 800af96:	bf00      	nop
 800af98:	372c      	adds	r7, #44	@ 0x2c
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	f3af 8000 	nop.w
 800afa8:	5555ca9d 	.word	0x5555ca9d
 800afac:	3fe55555 	.word	0x3fe55555
 800afb0:	55546ac5 	.word	0x55546ac5
 800afb4:	3fd55555 	.word	0x3fd55555
 800afb8:	45904047 	.word	0x45904047
 800afbc:	3fe279a7 	.word	0x3fe279a7

0800afc0 <todq>:
 *    '<S1>/&#x3B1;&#x3B2; to dq'
 *    '<S2>/&#x3B1;&#x3B2; to dq'
 */
static void todq(double rtu_alpha, double rtu_beta, double rtu_theta, double
                 *rty_d, double *rty_q)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	@ 0x30
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	ed87 0b06 	vstr	d0, [r7, #24]
 800afca:	ed87 1b04 	vstr	d1, [r7, #16]
 800afce:	ed87 2b02 	vstr	d2, [r7, #8]
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  double cos_theta;
  double sin_theta;
  cos_theta = cos(rtu_theta);
 800afd6:	ed97 0b02 	vldr	d0, [r7, #8]
 800afda:	f000 fd7d 	bl	800bad8 <cos>
 800afde:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
  sin_theta = sin(rtu_theta);
 800afe2:	ed97 0b02 	vldr	d0, [r7, #8]
 800afe6:	f000 fdc3 	bl	800bb70 <sin>
 800afea:	ed87 0b08 	vstr	d0, [r7, #32]
  *rty_d = rtu_alpha * cos_theta + rtu_beta * sin_theta;
 800afee:	ed97 6b06 	vldr	d6, [r7, #24]
 800aff2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800aff6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800affa:	ed97 5b04 	vldr	d5, [r7, #16]
 800affe:	ed97 7b08 	vldr	d7, [r7, #32]
 800b002:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b006:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	ed83 7b00 	vstr	d7, [r3]
  *rty_q = -rtu_alpha * sin_theta + rtu_beta * cos_theta;
 800b010:	ed97 7b06 	vldr	d7, [r7, #24]
 800b014:	eeb1 6b47 	vneg.f64	d6, d7
 800b018:	ed97 7b08 	vldr	d7, [r7, #32]
 800b01c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b020:	ed97 5b04 	vldr	d5, [r7, #16]
 800b024:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b028:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b02c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	ed83 7b00 	vstr	d7, [r3]
}
 800b036:	bf00      	nop
 800b038:	3730      	adds	r7, #48	@ 0x30
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <rt_modd_snf>:

double rt_modd_snf(double u0, double u1)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08a      	sub	sp, #40	@ 0x28
 800b044:	af00      	add	r7, sp, #0
 800b046:	ed87 0b02 	vstr	d0, [r7, #8]
 800b04a:	ed87 1b00 	vstr	d1, [r7]
  double y;
  y = u0;
 800b04e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b052:	e9c7 2308 	strd	r2, r3, [r7, #32]
  if (u1 == 0.0) {
 800b056:	ed97 7b00 	vldr	d7, [r7]
 800b05a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b062:	d10c      	bne.n	800b07e <rt_modd_snf+0x3e>
    if (u0 == 0.0) {
 800b064:	ed97 7b02 	vldr	d7, [r7, #8]
 800b068:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b070:	f040 80d8 	bne.w	800b224 <rt_modd_snf+0x1e4>
      y = u1;
 800b074:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b078:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b07c:	e0d2      	b.n	800b224 <rt_modd_snf+0x1e4>
    }
  } else if (rtIsNaN(u0) || rtIsNaN(u1) || rtIsInf(u0)) {
 800b07e:	ed97 0b02 	vldr	d0, [r7, #8]
 800b082:	f7ff ff2d 	bl	800aee0 <rtIsNaN>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10d      	bne.n	800b0a8 <rt_modd_snf+0x68>
 800b08c:	ed97 0b00 	vldr	d0, [r7]
 800b090:	f7ff ff26 	bl	800aee0 <rtIsNaN>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <rt_modd_snf+0x68>
 800b09a:	ed97 0b02 	vldr	d0, [r7, #8]
 800b09e:	f7ff fef9 	bl	800ae94 <rtIsInf>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d005      	beq.n	800b0b4 <rt_modd_snf+0x74>
    y = (rtNaN);
 800b0a8:	4b67      	ldr	r3, [pc, #412]	@ (800b248 <rt_modd_snf+0x208>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b0b2:	e0b7      	b.n	800b224 <rt_modd_snf+0x1e4>
  } else if (u0 == 0.0) {
 800b0b4:	ed97 7b02 	vldr	d7, [r7, #8]
 800b0b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	d108      	bne.n	800b0d4 <rt_modd_snf+0x94>
    y = 0.0 / u1;
 800b0c2:	ed9f 5b5d 	vldr	d5, [pc, #372]	@ 800b238 <rt_modd_snf+0x1f8>
 800b0c6:	ed97 6b00 	vldr	d6, [r7]
 800b0ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b0ce:	ed87 7b08 	vstr	d7, [r7, #32]
 800b0d2:	e0a7      	b.n	800b224 <rt_modd_snf+0x1e4>
  } else if (rtIsInf(u1)) {
 800b0d4:	ed97 0b00 	vldr	d0, [r7]
 800b0d8:	f7ff fedc 	bl	800ae94 <rtIsInf>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d01d      	beq.n	800b11e <rt_modd_snf+0xde>
    if ((u1 < 0.0) != (u0 < 0.0)) {
 800b0e2:	ed97 7b00 	vldr	d7, [r7]
 800b0e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ee:	bf4c      	ite	mi
 800b0f0:	2301      	movmi	r3, #1
 800b0f2:	2300      	movpl	r3, #0
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	ed97 7b02 	vldr	d7, [r7, #8]
 800b0fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b102:	bf4c      	ite	mi
 800b104:	2301      	movmi	r3, #1
 800b106:	2300      	movpl	r3, #0
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	4053      	eors	r3, r2
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 8088 	beq.w	800b224 <rt_modd_snf+0x1e4>
      y = u1;
 800b114:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b118:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b11c:	e082      	b.n	800b224 <rt_modd_snf+0x1e4>
    }
  } else {
    bool yEq;
    y = fmod(u0, u1);
 800b11e:	ed97 1b00 	vldr	d1, [r7]
 800b122:	ed97 0b02 	vldr	d0, [r7, #8]
 800b126:	f000 fc93 	bl	800ba50 <fmod>
 800b12a:	ed87 0b08 	vstr	d0, [r7, #32]
    yEq = (y == 0.0);
 800b12e:	ed97 7b08 	vldr	d7, [r7, #32]
 800b132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13a:	bf0c      	ite	eq
 800b13c:	2301      	moveq	r3, #1
 800b13e:	2300      	movne	r3, #0
 800b140:	77fb      	strb	r3, [r7, #31]
    if ((!yEq) && (u1 > floor(u1))) {
 800b142:	7ffb      	ldrb	r3, [r7, #31]
 800b144:	f083 0301 	eor.w	r3, r3, #1
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d03e      	beq.n	800b1cc <rt_modd_snf+0x18c>
 800b14e:	ed97 0b00 	vldr	d0, [r7]
 800b152:	f000 fd5d 	bl	800bc10 <floor>
 800b156:	eeb0 6b40 	vmov.f64	d6, d0
 800b15a:	ed97 7b00 	vldr	d7, [r7]
 800b15e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b166:	dd31      	ble.n	800b1cc <rt_modd_snf+0x18c>
      double q;
      q = fabs(u0 / u1);
 800b168:	ed97 5b02 	vldr	d5, [r7, #8]
 800b16c:	ed97 6b00 	vldr	d6, [r7]
 800b170:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b174:	eeb0 7bc7 	vabs.f64	d7, d7
 800b178:	ed87 7b04 	vstr	d7, [r7, #16]
      yEq = !(fabs(q - floor(q + 0.5)) > DBL_EPSILON * q);
 800b17c:	ed97 7b04 	vldr	d7, [r7, #16]
 800b180:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800b184:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b188:	eeb0 0b47 	vmov.f64	d0, d7
 800b18c:	f000 fd40 	bl	800bc10 <floor>
 800b190:	eeb0 6b40 	vmov.f64	d6, d0
 800b194:	ed97 7b04 	vldr	d7, [r7, #16]
 800b198:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b19c:	eeb0 6bc7 	vabs.f64	d6, d7
 800b1a0:	ed97 7b04 	vldr	d7, [r7, #16]
 800b1a4:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 800b240 <rt_modd_snf+0x200>
 800b1a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	bfcc      	ite	gt
 800b1b6:	2301      	movgt	r3, #1
 800b1b8:	2300      	movle	r3, #0
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	f083 0301 	eor.w	r3, r3, #1
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	77fb      	strb	r3, [r7, #31]
 800b1c4:	7ffb      	ldrb	r3, [r7, #31]
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	77fb      	strb	r3, [r7, #31]
    }

    if (yEq) {
 800b1cc:	7ffb      	ldrb	r3, [r7, #31]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d008      	beq.n	800b1e4 <rt_modd_snf+0x1a4>
      y = u1 * 0.0;
 800b1d2:	ed97 7b00 	vldr	d7, [r7]
 800b1d6:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 800b238 <rt_modd_snf+0x1f8>
 800b1da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1de:	ed87 7b08 	vstr	d7, [r7, #32]
 800b1e2:	e01f      	b.n	800b224 <rt_modd_snf+0x1e4>
    } else if ((u0 < 0.0) != (u1 < 0.0)) {
 800b1e4:	ed97 7b02 	vldr	d7, [r7, #8]
 800b1e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1f0:	bf4c      	ite	mi
 800b1f2:	2301      	movmi	r3, #1
 800b1f4:	2300      	movpl	r3, #0
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	ed97 7b00 	vldr	d7, [r7]
 800b1fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b204:	bf4c      	ite	mi
 800b206:	2301      	movmi	r3, #1
 800b208:	2300      	movpl	r3, #0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	4053      	eors	r3, r2
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d007      	beq.n	800b224 <rt_modd_snf+0x1e4>
      y += u1;
 800b214:	ed97 6b08 	vldr	d6, [r7, #32]
 800b218:	ed97 7b00 	vldr	d7, [r7]
 800b21c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b220:	ed87 7b08 	vstr	d7, [r7, #32]
    }
  }

  return y;
 800b224:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b228:	ec43 2b17 	vmov	d7, r2, r3
}
 800b22c:	eeb0 0b47 	vmov.f64	d0, d7
 800b230:	3728      	adds	r7, #40	@ 0x28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
	...
 800b244:	3cb00000 	.word	0x3cb00000
 800b248:	24000050 	.word	0x24000050
 800b24c:	00000000 	.word	0x00000000

0800b250 <TPGCI_2_step>:

/* Model step function */
void TPGCI_2_step(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	ed2d 8b02 	vpush	{d8}
 800b256:	b098      	sub	sp, #96	@ 0x60
 800b258:	af00      	add	r7, sp, #0
  /* MATLAB Function: '<S1>/abc to &#x3B1;&#x3B2;' incorporates:
   *  Inport: '<Root>/va_g'
   *  Inport: '<Root>/vb_g'
   *  Inport: '<Root>/vc_g'
   */
  abcto(va_g, vb_g, vc_g, &rtb_Filter, &rtb_Integrator_p, &rtb_zero_au);
 800b25a:	4bd7      	ldr	r3, [pc, #860]	@ (800b5b8 <TPGCI_2_step+0x368>)
 800b25c:	ed93 7b00 	vldr	d7, [r3]
 800b260:	4bd6      	ldr	r3, [pc, #856]	@ (800b5bc <TPGCI_2_step+0x36c>)
 800b262:	ed93 6b00 	vldr	d6, [r3]
 800b266:	4bd6      	ldr	r3, [pc, #856]	@ (800b5c0 <TPGCI_2_step+0x370>)
 800b268:	ed93 5b00 	vldr	d5, [r3]
 800b26c:	463a      	mov	r2, r7
 800b26e:	f107 0110 	add.w	r1, r7, #16
 800b272:	f107 0318 	add.w	r3, r7, #24
 800b276:	4618      	mov	r0, r3
 800b278:	eeb0 2b45 	vmov.f64	d2, d5
 800b27c:	eeb0 1b46 	vmov.f64	d1, d6
 800b280:	eeb0 0b47 	vmov.f64	d0, d7
 800b284:	f7ff fe44 	bl	800af10 <abcto>

  /* Math: '<S1>/Mod' incorporates:
   *  Constant: '<S1>/Constant1'
   *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
   */
  rtb_Mod = rt_modd_snf(rtDW.DiscreteTimeIntegrator_DSTATE, -6.2831853071795862);
 800b288:	4bce      	ldr	r3, [pc, #824]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b28a:	ed93 7b00 	vldr	d7, [r3]
 800b28e:	ed9f 1bbe 	vldr	d1, [pc, #760]	@ 800b588 <TPGCI_2_step+0x338>
 800b292:	eeb0 0b47 	vmov.f64	d0, d7
 800b296:	f7ff fed3 	bl	800b040 <rt_modd_snf>
 800b29a:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50

  /* MATLAB Function: '<S1>/&#x3B1;&#x3B2; to dq' */
  todq(rtb_Filter, rtb_Integrator_p, rtb_Mod, &rtb_Add_h, &rtb_q_o);
 800b29e:	ed97 7b06 	vldr	d7, [r7, #24]
 800b2a2:	ed97 6b04 	vldr	d6, [r7, #16]
 800b2a6:	f107 0208 	add.w	r2, r7, #8
 800b2aa:	f107 0320 	add.w	r3, r7, #32
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	ed97 2b14 	vldr	d2, [r7, #80]	@ 0x50
 800b2b6:	eeb0 1b46 	vmov.f64	d1, d6
 800b2ba:	eeb0 0b47 	vmov.f64	d0, d7
 800b2be:	f7ff fe7f 	bl	800afc0 <todq>

  /* MATLAB Function: '<S1>/Moving RMS Exp' */
  if (!rtDW.rmsSquared_not_empty_e) {
 800b2c2:	4bc0      	ldr	r3, [pc, #768]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b2c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800b2c8:	f083 0301 	eor.w	r3, r3, #1
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d00c      	beq.n	800b2ec <TPGCI_2_step+0x9c>
    rtDW.rmsSquared_n = rtb_Add_h * rtb_Add_h;
 800b2d2:	ed97 6b08 	vldr	d6, [r7, #32]
 800b2d6:	ed97 7b08 	vldr	d7, [r7, #32]
 800b2da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b2de:	4bb9      	ldr	r3, [pc, #740]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b2e0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
    rtDW.rmsSquared_not_empty_e = true;
 800b2e4:	4bb7      	ldr	r3, [pc, #732]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  rtDW.rmsSquared_n = rtb_Add_h * rtb_Add_h * 0.001 + 0.999 * rtDW.rmsSquared_n;
 800b2ec:	ed97 6b08 	vldr	d6, [r7, #32]
 800b2f0:	ed97 7b08 	vldr	d7, [r7, #32]
 800b2f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b2f8:	ed9f 6ba5 	vldr	d6, [pc, #660]	@ 800b590 <TPGCI_2_step+0x340>
 800b2fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b300:	4bb0      	ldr	r3, [pc, #704]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b302:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800b306:	ed9f 5ba4 	vldr	d5, [pc, #656]	@ 800b598 <TPGCI_2_step+0x348>
 800b30a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b30e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b312:	4bac      	ldr	r3, [pc, #688]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b314:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  rtb_y_d = sqrt(rtDW.rmsSquared_n);
 800b318:	4baa      	ldr	r3, [pc, #680]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b31a:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800b31e:	eeb0 0b47 	vmov.f64	d0, d7
 800b322:	f000 fbb9 	bl	800ba98 <sqrt>
 800b326:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  /* End of MATLAB Function: '<S1>/Moving RMS Exp' */

  /* Outport: '<Root>/Vd_g' */
  Vd_g = rtb_y_d;
 800b32a:	49a7      	ldr	r1, [pc, #668]	@ (800b5c8 <TPGCI_2_step+0x378>)
 800b32c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b330:	e9c1 2300 	strd	r2, r3, [r1]
  /* MATLAB Function: '<S2>/abc to &#x3B1;&#x3B2;' incorporates:
   *  Inport: '<Root>/ia_g'
   *  Inport: '<Root>/ib_g'
   *  Inport: '<Root>/ic_g'
   */
  abcto(ia_g, ib_g, ic_g, &rtb_Filter, &rtb_Integrator_p, &rtb_zero_au);
 800b334:	4ba5      	ldr	r3, [pc, #660]	@ (800b5cc <TPGCI_2_step+0x37c>)
 800b336:	ed93 7b00 	vldr	d7, [r3]
 800b33a:	4ba5      	ldr	r3, [pc, #660]	@ (800b5d0 <TPGCI_2_step+0x380>)
 800b33c:	ed93 6b00 	vldr	d6, [r3]
 800b340:	4ba4      	ldr	r3, [pc, #656]	@ (800b5d4 <TPGCI_2_step+0x384>)
 800b342:	ed93 5b00 	vldr	d5, [r3]
 800b346:	463a      	mov	r2, r7
 800b348:	f107 0110 	add.w	r1, r7, #16
 800b34c:	f107 0318 	add.w	r3, r7, #24
 800b350:	4618      	mov	r0, r3
 800b352:	eeb0 2b45 	vmov.f64	d2, d5
 800b356:	eeb0 1b46 	vmov.f64	d1, d6
 800b35a:	eeb0 0b47 	vmov.f64	d0, d7
 800b35e:	f7ff fdd7 	bl	800af10 <abcto>

  /* MATLAB Function: '<S2>/&#x3B1;&#x3B2; to dq' incorporates:
   *  Outport: '<Root>/Iq'
   */
  todq(rtb_Filter, rtb_Integrator_p, rtb_Mod, &rtb_Add_h, (double *)&Iq);
 800b362:	ed97 7b06 	vldr	d7, [r7, #24]
 800b366:	ed97 6b04 	vldr	d6, [r7, #16]
 800b36a:	f107 0320 	add.w	r3, r7, #32
 800b36e:	499a      	ldr	r1, [pc, #616]	@ (800b5d8 <TPGCI_2_step+0x388>)
 800b370:	4618      	mov	r0, r3
 800b372:	ed97 2b14 	vldr	d2, [r7, #80]	@ 0x50
 800b376:	eeb0 1b46 	vmov.f64	d1, d6
 800b37a:	eeb0 0b47 	vmov.f64	d0, d7
 800b37e:	f7ff fe1f 	bl	800afc0 <todq>

  /* MATLAB Function: '<S2>/Moving RMS Exp' */
  if (!rtDW.rmsSquared_not_empty) {
 800b382:	4b90      	ldr	r3, [pc, #576]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b384:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b388:	f083 0301 	eor.w	r3, r3, #1
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00c      	beq.n	800b3ac <TPGCI_2_step+0x15c>
    rtDW.rmsSquared = rtb_Add_h * rtb_Add_h;
 800b392:	ed97 6b08 	vldr	d6, [r7, #32]
 800b396:	ed97 7b08 	vldr	d7, [r7, #32]
 800b39a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b39e:	4b89      	ldr	r3, [pc, #548]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b3a0:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
    rtDW.rmsSquared_not_empty = true;
 800b3a4:	4b87      	ldr	r3, [pc, #540]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  }

  rtDW.rmsSquared = rtb_Add_h * rtb_Add_h * 0.001 + 0.999 * rtDW.rmsSquared;
 800b3ac:	ed97 6b08 	vldr	d6, [r7, #32]
 800b3b0:	ed97 7b08 	vldr	d7, [r7, #32]
 800b3b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3b8:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 800b590 <TPGCI_2_step+0x340>
 800b3bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b3c0:	4b80      	ldr	r3, [pc, #512]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b3c2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800b3c6:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 800b598 <TPGCI_2_step+0x348>
 800b3ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b3ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b3d2:	4b7c      	ldr	r3, [pc, #496]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b3d4:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  rtb_zero_au = sqrt(rtDW.rmsSquared);
 800b3d8:	4b7a      	ldr	r3, [pc, #488]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b3da:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800b3de:	eeb0 0b47 	vmov.f64	d0, d7
 800b3e2:	f000 fb59 	bl	800ba98 <sqrt>
 800b3e6:	eeb0 7b40 	vmov.f64	d7, d0
 800b3ea:	ed87 7b00 	vstr	d7, [r7]
  /* End of MATLAB Function: '<S2>/Moving RMS Exp' */

  /* Sum: '<S3>/Sum1' incorporates:
   *  Inport: '<Root>/Id_ref'
   */
  rtb_Integrator_p = Id_ref - rtb_zero_au;
 800b3ee:	4b7b      	ldr	r3, [pc, #492]	@ (800b5dc <TPGCI_2_step+0x38c>)
 800b3f0:	ed93 6b00 	vldr	d6, [r3]
 800b3f4:	ed97 7b00 	vldr	d7, [r7]
 800b3f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b3fc:	ed87 7b04 	vstr	d7, [r7, #16]

  /* Sum: '<S106>/Sum' incorporates:
   *  DiscreteIntegrator: '<S97>/Integrator'
   *  Gain: '<S102>/Proportional Gain'
   */
  rtb_Saturation = 0.01 * rtb_Integrator_p + rtDW.Integrator_DSTATE;
 800b400:	ed97 7b04 	vldr	d7, [r7, #16]
 800b404:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b5a0 <TPGCI_2_step+0x350>
 800b408:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b40c:	4b6d      	ldr	r3, [pc, #436]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b40e:	ed93 7b02 	vldr	d7, [r3, #8]
 800b412:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b416:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58

  /* Saturate: '<S104>/Saturation' */
  if (rtb_Saturation > 15.0) {
 800b41a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b41e:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 800b422:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42a:	dd05      	ble.n	800b438 <TPGCI_2_step+0x1e8>
    rtb_Saturation = 15.0;
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	4b6b      	ldr	r3, [pc, #428]	@ (800b5e0 <TPGCI_2_step+0x390>)
 800b432:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800b436:	e00d      	b.n	800b454 <TPGCI_2_step+0x204>
  } else if (rtb_Saturation < -15.0) {
 800b438:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b43c:	eeba 6b0e 	vmov.f64	d6, #174	@ 0xc1700000 -15.0
 800b440:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b448:	d504      	bpl.n	800b454 <TPGCI_2_step+0x204>
    rtb_Saturation = -15.0;
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	4b65      	ldr	r3, [pc, #404]	@ (800b5e4 <TPGCI_2_step+0x394>)
 800b450:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  /* Sum: '<S3>/Sum3' incorporates:
   *  Gain: '<S3>/Gain1'
   *  Outport: '<Root>/Iq'
   *  Sum: '<S3>/Sum2'
   */
  rtb_Integrator_j = (0.15707963267948966 * Iq + rtb_Saturation) + rtb_y_d;
 800b454:	4b60      	ldr	r3, [pc, #384]	@ (800b5d8 <TPGCI_2_step+0x388>)
 800b456:	ed93 7b00 	vldr	d7, [r3]
 800b45a:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 800b5a8 <TPGCI_2_step+0x358>
 800b45e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b462:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800b466:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b46a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800b46e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b472:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

  /* Product: '<S3>/Divide' incorporates:
   *  Gain: '<S3>/Gain3'
   *  Inport: '<Root>/VDC'
   */
  rtb_Divide = 2.0 * rtb_Integrator_j / VDC;
 800b476:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800b47a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800b47e:	4b5a      	ldr	r3, [pc, #360]	@ (800b5e8 <TPGCI_2_step+0x398>)
 800b480:	ed93 6b00 	vldr	d6, [r3]
 800b484:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b488:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  /* Sum: '<S3>/Sum4' incorporates:
   *  Inport: '<Root>/Iq_ref'
   *  Outport: '<Root>/Iq'
   */
  rtb_y_d = Iq_ref - Iq;
 800b48c:	4b57      	ldr	r3, [pc, #348]	@ (800b5ec <TPGCI_2_step+0x39c>)
 800b48e:	ed93 6b00 	vldr	d6, [r3]
 800b492:	4b51      	ldr	r3, [pc, #324]	@ (800b5d8 <TPGCI_2_step+0x388>)
 800b494:	ed93 7b00 	vldr	d7, [r3]
 800b498:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b49c:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

  /* Sum: '<S156>/Sum' incorporates:
   *  DiscreteIntegrator: '<S147>/Integrator'
   *  Gain: '<S152>/Proportional Gain'
   */
  rtb_Filter = 0.01 * rtb_y_d + rtDW.Integrator_DSTATE_e;
 800b4a0:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800b4a4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800b5a0 <TPGCI_2_step+0x350>
 800b4a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b4ac:	4b45      	ldr	r3, [pc, #276]	@ (800b5c4 <TPGCI_2_step+0x374>)
 800b4ae:	ed93 7b04 	vldr	d7, [r3, #16]
 800b4b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4b6:	ed87 7b06 	vstr	d7, [r7, #24]

  /* Saturate: '<S154>/Saturation' */
  if (rtb_Filter > 10.0) {
 800b4ba:	ed97 7b06 	vldr	d7, [r7, #24]
 800b4be:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b4c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	dd05      	ble.n	800b4d8 <TPGCI_2_step+0x288>
    rtb_Filter = 10.0;
 800b4cc:	f04f 0200 	mov.w	r2, #0
 800b4d0:	4b47      	ldr	r3, [pc, #284]	@ (800b5f0 <TPGCI_2_step+0x3a0>)
 800b4d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b4d6:	e00d      	b.n	800b4f4 <TPGCI_2_step+0x2a4>
  } else if (rtb_Filter < -10.0) {
 800b4d8:	ed97 7b06 	vldr	d7, [r7, #24]
 800b4dc:	eeba 6b04 	vmov.f64	d6, #164	@ 0xc1200000 -10.0
 800b4e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e8:	d504      	bpl.n	800b4f4 <TPGCI_2_step+0x2a4>
    rtb_Filter = -10.0;
 800b4ea:	f04f 0200 	mov.w	r2, #0
 800b4ee:	4b41      	ldr	r3, [pc, #260]	@ (800b5f4 <TPGCI_2_step+0x3a4>)
 800b4f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   *  Inport: '<Root>/VDC'
   *  Saturate: '<S154>/Saturation'
   *  Sum: '<S3>/Sum5'
   *  Sum: '<S3>/Sum6'
   */
  rtb_Divide1 = ((rtb_Filter - 0.15707963267948966 * rtb_zero_au) + rtb_q_o) *
 800b4f4:	ed97 6b06 	vldr	d6, [r7, #24]
 800b4f8:	ed97 7b00 	vldr	d7, [r7]
 800b4fc:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 800b5a8 <TPGCI_2_step+0x358>
 800b500:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b504:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b508:	ed97 7b02 	vldr	d7, [r7, #8]
 800b50c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b510:	ee37 5b07 	vadd.f64	d5, d7, d7
    2.0 / VDC;
 800b514:	4b34      	ldr	r3, [pc, #208]	@ (800b5e8 <TPGCI_2_step+0x398>)
 800b516:	ed93 6b00 	vldr	d6, [r3]
  rtb_Divide1 = ((rtb_Filter - 0.15707963267948966 * rtb_zero_au) + rtb_q_o) *
 800b51a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b51e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30

  /* Sum: '<S3>/Add' incorporates:
   *  Inport: '<Root>/phasedelay'
   */
  rtb_Add = rtb_Mod + phasedelay;
 800b522:	4b35      	ldr	r3, [pc, #212]	@ (800b5f8 <TPGCI_2_step+0x3a8>)
 800b524:	ed93 7b00 	vldr	d7, [r3]
 800b528:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800b52c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b530:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28

  /* MATLAB Function: '<S3>/dq to abc' */
  rtb_Filter = rtb_Divide * cos(rtb_Add) - rtb_Divide1 * sin(rtb_Add);
 800b534:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800b538:	f000 face 	bl	800bad8 <cos>
 800b53c:	eeb0 6b40 	vmov.f64	d6, d0
 800b540:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b544:	ee26 8b07 	vmul.f64	d8, d6, d7
 800b548:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800b54c:	f000 fb10 	bl	800bb70 <sin>
 800b550:	eeb0 6b40 	vmov.f64	d6, d0
 800b554:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b558:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b55c:	ee38 7b47 	vsub.f64	d7, d8, d7
 800b560:	ed87 7b06 	vstr	d7, [r7, #24]

  /* Saturate: '<S3>/Saturation2' */
  if (rtb_Filter > 0.95) {
 800b564:	ed97 7b06 	vldr	d7, [r7, #24]
 800b568:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 800b5b0 <TPGCI_2_step+0x360>
 800b56c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b574:	dd42      	ble.n	800b5fc <TPGCI_2_step+0x3ac>
    rtb_Filter = 0.95;
 800b576:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5b0 <TPGCI_2_step+0x360>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b580:	e04a      	b.n	800b618 <TPGCI_2_step+0x3c8>
 800b582:	bf00      	nop
 800b584:	f3af 8000 	nop.w
 800b588:	54442d18 	.word	0x54442d18
 800b58c:	c01921fb 	.word	0xc01921fb
 800b590:	d2f1a9fc 	.word	0xd2f1a9fc
 800b594:	3f50624d 	.word	0x3f50624d
 800b598:	d916872b 	.word	0xd916872b
 800b59c:	3feff7ce 	.word	0x3feff7ce
 800b5a0:	47ae147b 	.word	0x47ae147b
 800b5a4:	3f847ae1 	.word	0x3f847ae1
 800b5a8:	769cf0e0 	.word	0x769cf0e0
 800b5ac:	3fc41b2f 	.word	0x3fc41b2f
 800b5b0:	66666666 	.word	0x66666666
 800b5b4:	3fee6666 	.word	0x3fee6666
 800b5b8:	24000600 	.word	0x24000600
 800b5bc:	24000608 	.word	0x24000608
 800b5c0:	24000610 	.word	0x24000610
 800b5c4:	24000618 	.word	0x24000618
 800b5c8:	240005d0 	.word	0x240005d0
 800b5cc:	240005e0 	.word	0x240005e0
 800b5d0:	240005e8 	.word	0x240005e8
 800b5d4:	240005f0 	.word	0x240005f0
 800b5d8:	24000588 	.word	0x24000588
 800b5dc:	24000580 	.word	0x24000580
 800b5e0:	402e0000 	.word	0x402e0000
 800b5e4:	c02e0000 	.word	0xc02e0000
 800b5e8:	240005c8 	.word	0x240005c8
 800b5ec:	24000590 	.word	0x24000590
 800b5f0:	40240000 	.word	0x40240000
 800b5f4:	c0240000 	.word	0xc0240000
 800b5f8:	240005f8 	.word	0x240005f8
  } else if (rtb_Filter < -0.95) {
 800b5fc:	ed97 7b06 	vldr	d7, [r7, #24]
 800b600:	ed9f 6bb5 	vldr	d6, [pc, #724]	@ 800b8d8 <TPGCI_2_step+0x688>
 800b604:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b60c:	d504      	bpl.n	800b618 <TPGCI_2_step+0x3c8>
    rtb_Filter = -0.95;
 800b60e:	a3b2      	add	r3, pc, #712	@ (adr r3, 800b8d8 <TPGCI_2_step+0x688>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	e9c7 2306 	strd	r2, r3, [r7, #24]
   *  Inport: '<Root>/CCR_max'
   *  Product: '<S3>/Divide2'
   *  Product: '<S3>/Product'
   *  Sum: '<S3>/Add1'
   */
  PWMch1 = (rtb_Filter + 1.0) / 2.0 * CCR_max;
 800b618:	ed97 7b06 	vldr	d7, [r7, #24]
 800b61c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b620:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b624:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800b628:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800b62c:	4bb6      	ldr	r3, [pc, #728]	@ (800b908 <TPGCI_2_step+0x6b8>)
 800b62e:	ed93 7b00 	vldr	d7, [r3]
 800b632:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b636:	4bb5      	ldr	r3, [pc, #724]	@ (800b90c <TPGCI_2_step+0x6bc>)
 800b638:	ed83 7b00 	vstr	d7, [r3]

  /* MATLAB Function: '<S3>/dq to abc' */
  rtb_Add_h = cos(rtb_Add - 2.0943951023931948) * rtb_Divide - sin(rtb_Add -
 800b63c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b640:	ed9f 6ba7 	vldr	d6, [pc, #668]	@ 800b8e0 <TPGCI_2_step+0x690>
 800b644:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b648:	eeb0 0b47 	vmov.f64	d0, d7
 800b64c:	f000 fa44 	bl	800bad8 <cos>
 800b650:	eeb0 6b40 	vmov.f64	d6, d0
 800b654:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b658:	ee26 8b07 	vmul.f64	d8, d6, d7
 800b65c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b660:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 800b8e0 <TPGCI_2_step+0x690>
 800b664:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b668:	eeb0 0b47 	vmov.f64	d0, d7
 800b66c:	f000 fa80 	bl	800bb70 <sin>
 800b670:	eeb0 6b40 	vmov.f64	d6, d0
    2.0943951023931948) * rtb_Divide1;
 800b674:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b678:	ee26 7b07 	vmul.f64	d7, d6, d7
  rtb_Add_h = cos(rtb_Add - 2.0943951023931948) * rtb_Divide - sin(rtb_Add -
 800b67c:	ee38 7b47 	vsub.f64	d7, d8, d7
 800b680:	ed87 7b08 	vstr	d7, [r7, #32]

  /* Saturate: '<S3>/Saturation1' */
  if (rtb_Add_h > 0.95) {
 800b684:	ed97 7b08 	vldr	d7, [r7, #32]
 800b688:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b8e8 <TPGCI_2_step+0x698>
 800b68c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	dd05      	ble.n	800b6a2 <TPGCI_2_step+0x452>
    rtb_Add_h = 0.95;
 800b696:	a394      	add	r3, pc, #592	@ (adr r3, 800b8e8 <TPGCI_2_step+0x698>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b6a0:	e00d      	b.n	800b6be <TPGCI_2_step+0x46e>
  } else if (rtb_Add_h < -0.95) {
 800b6a2:	ed97 7b08 	vldr	d7, [r7, #32]
 800b6a6:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 800b8d8 <TPGCI_2_step+0x688>
 800b6aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b2:	d504      	bpl.n	800b6be <TPGCI_2_step+0x46e>
    rtb_Add_h = -0.95;
 800b6b4:	a388      	add	r3, pc, #544	@ (adr r3, 800b8d8 <TPGCI_2_step+0x688>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
   *  Inport: '<Root>/CCR_max'
   *  Product: '<S3>/Divide3'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add2'
   */
  PWMch2 = (rtb_Add_h + 1.0) / 2.0 * CCR_max;
 800b6be:	ed97 7b08 	vldr	d7, [r7, #32]
 800b6c2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b6c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b6ca:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800b6ce:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800b6d2:	4b8d      	ldr	r3, [pc, #564]	@ (800b908 <TPGCI_2_step+0x6b8>)
 800b6d4:	ed93 7b00 	vldr	d7, [r3]
 800b6d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b6dc:	4b8c      	ldr	r3, [pc, #560]	@ (800b910 <TPGCI_2_step+0x6c0>)
 800b6de:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/Mb' */
  Mb = rtb_Add_h;
 800b6e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6e6:	498b      	ldr	r1, [pc, #556]	@ (800b914 <TPGCI_2_step+0x6c4>)
 800b6e8:	e9c1 2300 	strd	r2, r3, [r1]

  /* MATLAB Function: '<S3>/dq to abc' */
  rtb_Add_h = cos(rtb_Add + 2.0943951023931948) * rtb_Divide - sin(rtb_Add +
 800b6ec:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b6f0:	ed9f 6b7b 	vldr	d6, [pc, #492]	@ 800b8e0 <TPGCI_2_step+0x690>
 800b6f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b6f8:	eeb0 0b47 	vmov.f64	d0, d7
 800b6fc:	f000 f9ec 	bl	800bad8 <cos>
 800b700:	eeb0 6b40 	vmov.f64	d6, d0
 800b704:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b708:	ee26 8b07 	vmul.f64	d8, d6, d7
 800b70c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b710:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800b8e0 <TPGCI_2_step+0x690>
 800b714:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b718:	eeb0 0b47 	vmov.f64	d0, d7
 800b71c:	f000 fa28 	bl	800bb70 <sin>
 800b720:	eeb0 6b40 	vmov.f64	d6, d0
    2.0943951023931948) * rtb_Divide1;
 800b724:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800b728:	ee26 7b07 	vmul.f64	d7, d6, d7
  rtb_Add_h = cos(rtb_Add + 2.0943951023931948) * rtb_Divide - sin(rtb_Add +
 800b72c:	ee38 7b47 	vsub.f64	d7, d8, d7
 800b730:	ed87 7b08 	vstr	d7, [r7, #32]

  /* Saturate: '<S3>/Saturation3' */
  if (rtb_Add_h > 0.95) {
 800b734:	ed97 7b08 	vldr	d7, [r7, #32]
 800b738:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 800b8e8 <TPGCI_2_step+0x698>
 800b73c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b744:	dd05      	ble.n	800b752 <TPGCI_2_step+0x502>
    rtb_Add_h = 0.95;
 800b746:	a368      	add	r3, pc, #416	@ (adr r3, 800b8e8 <TPGCI_2_step+0x698>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b750:	e00d      	b.n	800b76e <TPGCI_2_step+0x51e>
  } else if (rtb_Add_h < -0.95) {
 800b752:	ed97 7b08 	vldr	d7, [r7, #32]
 800b756:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 800b8d8 <TPGCI_2_step+0x688>
 800b75a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b762:	d504      	bpl.n	800b76e <TPGCI_2_step+0x51e>
    rtb_Add_h = -0.95;
 800b764:	a35c      	add	r3, pc, #368	@ (adr r3, 800b8d8 <TPGCI_2_step+0x688>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	e9c7 2308 	strd	r2, r3, [r7, #32]
   *  Inport: '<Root>/CCR_max'
   *  Product: '<S3>/Divide4'
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add3'
   */
  PWMch3 = (rtb_Add_h + 1.0) / 2.0 * CCR_max;
 800b76e:	ed97 7b08 	vldr	d7, [r7, #32]
 800b772:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b776:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b77a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800b77e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800b782:	4b61      	ldr	r3, [pc, #388]	@ (800b908 <TPGCI_2_step+0x6b8>)
 800b784:	ed93 7b00 	vldr	d7, [r3]
 800b788:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b78c:	4b62      	ldr	r3, [pc, #392]	@ (800b918 <TPGCI_2_step+0x6c8>)
 800b78e:	ed83 7b00 	vstr	d7, [r3]

  /* Outport: '<Root>/Mc' */
  Mc = rtb_Add_h;
 800b792:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b796:	4961      	ldr	r1, [pc, #388]	@ (800b91c <TPGCI_2_step+0x6cc>)
 800b798:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Ma' */
  Ma = rtb_Filter;
 800b79c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7a0:	495f      	ldr	r1, [pc, #380]	@ (800b920 <TPGCI_2_step+0x6d0>)
 800b7a2:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Vd_pid_out' */
  Vd_pid_out = rtb_Integrator_j;
 800b7a6:	495f      	ldr	r1, [pc, #380]	@ (800b924 <TPGCI_2_step+0x6d4>)
 800b7a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b7ac:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Id_pi_out' */
  Id_pi_out = rtb_Saturation;
 800b7b0:	495d      	ldr	r1, [pc, #372]	@ (800b928 <TPGCI_2_step+0x6d8>)
 800b7b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b7b6:	e9c1 2300 	strd	r2, r3, [r1]

  /* Outport: '<Root>/Id' */
  Id = rtb_zero_au;
 800b7ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7be:	495b      	ldr	r1, [pc, #364]	@ (800b92c <TPGCI_2_step+0x6dc>)
 800b7c0:	e9c1 2300 	strd	r2, r3, [r1]
   *  DiscreteIntegrator: '<S36>/Filter'
   *  Gain: '<S34>/Derivative Gain'
   *  Sum: '<S1>/Add'
   *  Sum: '<S36>/SumD'
   */
  rtb_Filter = ((0.0 - rtb_q_o) * 0.0 - rtDW.Filter_DSTATE) * 100.0;
 800b7c4:	ed97 7b02 	vldr	d7, [r7, #8]
 800b7c8:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 800b8f0 <TPGCI_2_step+0x6a0>
 800b7cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7d0:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 800b8f0 <TPGCI_2_step+0x6a0>
 800b7d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7d8:	4b55      	ldr	r3, [pc, #340]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b7da:	ed93 7b06 	vldr	d7, [r3, #24]
 800b7de:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7e2:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 800b8f8 <TPGCI_2_step+0x6a8>
 800b7e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7ea:	ed87 7b06 	vstr	d7, [r7, #24]

  /* Outport: '<Root>/Grid_wt' */
  Grid_wt = rtb_Mod;
 800b7ee:	4951      	ldr	r1, [pc, #324]	@ (800b934 <TPGCI_2_step+0x6e4>)
 800b7f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b7f4:	e9c1 2300 	strd	r2, r3, [r1]
   *  DiscreteIntegrator: '<S41>/Integrator'
   *  Gain: '<S46>/Proportional Gain'
   *  Sum: '<S1>/Add'
   *  Sum: '<S50>/Sum'
   */
  rtDW.DiscreteTimeIntegrator_DSTATE += (((0.0 - rtb_q_o) * 10.0 +
 800b7f8:	4b4d      	ldr	r3, [pc, #308]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b7fa:	ed93 6b00 	vldr	d6, [r3]
 800b7fe:	ed97 7b02 	vldr	d7, [r7, #8]
 800b802:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 800b8f0 <TPGCI_2_step+0x6a0>
 800b806:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b80a:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800b80e:	ee27 5b05 	vmul.f64	d5, d7, d5
    rtDW.Integrator_DSTATE_p) + rtb_Filter) * 2.0E-5;
 800b812:	4b47      	ldr	r3, [pc, #284]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b814:	ed93 7b08 	vldr	d7, [r3, #32]
  rtDW.DiscreteTimeIntegrator_DSTATE += (((0.0 - rtb_q_o) * 10.0 +
 800b818:	ee35 5b07 	vadd.f64	d5, d5, d7
    rtDW.Integrator_DSTATE_p) + rtb_Filter) * 2.0E-5;
 800b81c:	ed97 7b06 	vldr	d7, [r7, #24]
 800b820:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b824:	ed9f 5b36 	vldr	d5, [pc, #216]	@ 800b900 <TPGCI_2_step+0x6b0>
 800b828:	ee27 7b05 	vmul.f64	d7, d7, d5
  rtDW.DiscreteTimeIntegrator_DSTATE += (((0.0 - rtb_q_o) * 10.0 +
 800b82c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b830:	4b3f      	ldr	r3, [pc, #252]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b832:	ed83 7b00 	vstr	d7, [r3]

  /* Update for DiscreteIntegrator: '<S97>/Integrator' */
  rtDW.Integrator_DSTATE += 2.0E-5 * rtb_Integrator_p;
 800b836:	4b3e      	ldr	r3, [pc, #248]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b838:	ed93 6b02 	vldr	d6, [r3, #8]
 800b83c:	ed97 7b04 	vldr	d7, [r7, #16]
 800b840:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 800b900 <TPGCI_2_step+0x6b0>
 800b844:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b848:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b84c:	4b38      	ldr	r3, [pc, #224]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b84e:	ed83 7b02 	vstr	d7, [r3, #8]
  if (rtDW.Integrator_DSTATE > 15.0) {
 800b852:	4b37      	ldr	r3, [pc, #220]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b854:	ed93 7b02 	vldr	d7, [r3, #8]
 800b858:	eeb2 6b0e 	vmov.f64	d6, #46	@ 0x41700000  15.0
 800b85c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	dd06      	ble.n	800b874 <TPGCI_2_step+0x624>
    rtDW.Integrator_DSTATE = 15.0;
 800b866:	4932      	ldr	r1, [pc, #200]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b868:	f04f 0200 	mov.w	r2, #0
 800b86c:	4b32      	ldr	r3, [pc, #200]	@ (800b938 <TPGCI_2_step+0x6e8>)
 800b86e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b872:	e00f      	b.n	800b894 <TPGCI_2_step+0x644>
  } else if (rtDW.Integrator_DSTATE < -15.0) {
 800b874:	4b2e      	ldr	r3, [pc, #184]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b876:	ed93 7b02 	vldr	d7, [r3, #8]
 800b87a:	eeba 6b0e 	vmov.f64	d6, #174	@ 0xc1700000 -15.0
 800b87e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b886:	d505      	bpl.n	800b894 <TPGCI_2_step+0x644>
    rtDW.Integrator_DSTATE = -15.0;
 800b888:	4929      	ldr	r1, [pc, #164]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b88a:	f04f 0200 	mov.w	r2, #0
 800b88e:	4b2b      	ldr	r3, [pc, #172]	@ (800b93c <TPGCI_2_step+0x6ec>)
 800b890:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }

  /* End of Update for DiscreteIntegrator: '<S97>/Integrator' */

  /* Update for DiscreteIntegrator: '<S147>/Integrator' */
  rtDW.Integrator_DSTATE_e += 2.0E-5 * rtb_y_d;
 800b894:	4b26      	ldr	r3, [pc, #152]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b896:	ed93 6b04 	vldr	d6, [r3, #16]
 800b89a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800b89e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 800b900 <TPGCI_2_step+0x6b0>
 800b8a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b8a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b8aa:	4b21      	ldr	r3, [pc, #132]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b8ac:	ed83 7b04 	vstr	d7, [r3, #16]
  if (rtDW.Integrator_DSTATE_e > 10.0) {
 800b8b0:	4b1f      	ldr	r3, [pc, #124]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b8b2:	ed93 7b04 	vldr	d7, [r3, #16]
 800b8b6:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b8ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c2:	dd3f      	ble.n	800b944 <TPGCI_2_step+0x6f4>
    rtDW.Integrator_DSTATE_e = 10.0;
 800b8c4:	491a      	ldr	r1, [pc, #104]	@ (800b930 <TPGCI_2_step+0x6e0>)
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b940 <TPGCI_2_step+0x6f0>)
 800b8cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b8d0:	e048      	b.n	800b964 <TPGCI_2_step+0x714>
 800b8d2:	bf00      	nop
 800b8d4:	f3af 8000 	nop.w
 800b8d8:	66666666 	.word	0x66666666
 800b8dc:	bfee6666 	.word	0xbfee6666
 800b8e0:	382d7364 	.word	0x382d7364
 800b8e4:	4000c152 	.word	0x4000c152
 800b8e8:	66666666 	.word	0x66666666
 800b8ec:	3fee6666 	.word	0x3fee6666
	...
 800b8fc:	40590000 	.word	0x40590000
 800b900:	88e368f1 	.word	0x88e368f1
 800b904:	3ef4f8b5 	.word	0x3ef4f8b5
 800b908:	24000560 	.word	0x24000560
 800b90c:	240005b0 	.word	0x240005b0
 800b910:	240005b8 	.word	0x240005b8
 800b914:	240005a0 	.word	0x240005a0
 800b918:	240005c0 	.word	0x240005c0
 800b91c:	240005a8 	.word	0x240005a8
 800b920:	24000598 	.word	0x24000598
 800b924:	240005d8 	.word	0x240005d8
 800b928:	24000578 	.word	0x24000578
 800b92c:	24000570 	.word	0x24000570
 800b930:	24000618 	.word	0x24000618
 800b934:	24000568 	.word	0x24000568
 800b938:	402e0000 	.word	0x402e0000
 800b93c:	c02e0000 	.word	0xc02e0000
 800b940:	40240000 	.word	0x40240000
  } else if (rtDW.Integrator_DSTATE_e < -10.0) {
 800b944:	4b22      	ldr	r3, [pc, #136]	@ (800b9d0 <TPGCI_2_step+0x780>)
 800b946:	ed93 7b04 	vldr	d7, [r3, #16]
 800b94a:	eeba 6b04 	vmov.f64	d6, #164	@ 0xc1200000 -10.0
 800b94e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b956:	d505      	bpl.n	800b964 <TPGCI_2_step+0x714>
    rtDW.Integrator_DSTATE_e = -10.0;
 800b958:	491d      	ldr	r1, [pc, #116]	@ (800b9d0 <TPGCI_2_step+0x780>)
 800b95a:	f04f 0200 	mov.w	r2, #0
 800b95e:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d4 <TPGCI_2_step+0x784>)
 800b960:	e9c1 2304 	strd	r2, r3, [r1, #16]
  }

  /* End of Update for DiscreteIntegrator: '<S147>/Integrator' */

  /* Update for DiscreteIntegrator: '<S36>/Filter' */
  rtDW.Filter_DSTATE += 2.0E-5 * rtb_Filter;
 800b964:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d0 <TPGCI_2_step+0x780>)
 800b966:	ed93 6b06 	vldr	d6, [r3, #24]
 800b96a:	ed97 7b06 	vldr	d7, [r7, #24]
 800b96e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 800b9b8 <TPGCI_2_step+0x768>
 800b972:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b976:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b97a:	4b15      	ldr	r3, [pc, #84]	@ (800b9d0 <TPGCI_2_step+0x780>)
 800b97c:	ed83 7b06 	vstr	d7, [r3, #24]
  /* Update for DiscreteIntegrator: '<S41>/Integrator' incorporates:
   *  Constant: '<S1>/Constant'
   *  Gain: '<S38>/Integral Gain'
   *  Sum: '<S1>/Add'
   */
  rtDW.Integrator_DSTATE_p += (0.0 - rtb_q_o) * 1000.0 * 2.0E-5;
 800b980:	4b13      	ldr	r3, [pc, #76]	@ (800b9d0 <TPGCI_2_step+0x780>)
 800b982:	ed93 6b08 	vldr	d6, [r3, #32]
 800b986:	ed97 7b02 	vldr	d7, [r7, #8]
 800b98a:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 800b9c0 <TPGCI_2_step+0x770>
 800b98e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b992:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 800b9c8 <TPGCI_2_step+0x778>
 800b996:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b99a:	ed9f 5b07 	vldr	d5, [pc, #28]	@ 800b9b8 <TPGCI_2_step+0x768>
 800b99e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b9a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <TPGCI_2_step+0x780>)
 800b9a8:	ed83 7b08 	vstr	d7, [r3, #32]
}
 800b9ac:	bf00      	nop
 800b9ae:	3760      	adds	r7, #96	@ 0x60
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	ecbd 8b02 	vpop	{d8}
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	88e368f1 	.word	0x88e368f1
 800b9bc:	3ef4f8b5 	.word	0x3ef4f8b5
	...
 800b9cc:	408f4000 	.word	0x408f4000
 800b9d0:	24000618 	.word	0x24000618
 800b9d4:	c0240000 	.word	0xc0240000

0800b9d8 <TPGCI_2_initialize>:

/* Model initialize function */
void TPGCI_2_initialize(void)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800b9dc:	bf00      	nop
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <memset>:
 800b9e6:	4402      	add	r2, r0
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d100      	bne.n	800b9f0 <memset+0xa>
 800b9ee:	4770      	bx	lr
 800b9f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b9f4:	e7f9      	b.n	800b9ea <memset+0x4>
	...

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	@ (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	24000068 	.word	0x24000068

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4d0d      	ldr	r5, [pc, #52]	@ (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	@ (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1b64      	subs	r4, r4, r5
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2600      	movs	r6, #0
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4d0b      	ldr	r5, [pc, #44]	@ (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	@ (800ba48 <__libc_init_array+0x44>)
 800ba18:	f000 ff84 	bl	800c924 <_init>
 800ba1c:	1b64      	subs	r4, r4, r5
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2600      	movs	r6, #0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2c:	4798      	blx	r3
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba36:	4798      	blx	r3
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800cb40 	.word	0x0800cb40
 800ba40:	0800cb40 	.word	0x0800cb40
 800ba44:	0800cb40 	.word	0x0800cb40
 800ba48:	0800cb44 	.word	0x0800cb44
 800ba4c:	00000000 	.word	0x00000000

0800ba50 <fmod>:
 800ba50:	b508      	push	{r3, lr}
 800ba52:	ed2d 8b04 	vpush	{d8-d9}
 800ba56:	eeb0 9b40 	vmov.f64	d9, d0
 800ba5a:	eeb0 8b41 	vmov.f64	d8, d1
 800ba5e:	f000 fa0f 	bl	800be80 <__ieee754_fmod>
 800ba62:	eeb4 9b48 	vcmp.f64	d9, d8
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	d60c      	bvs.n	800ba86 <fmod+0x36>
 800ba6c:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800ba90 <fmod+0x40>
 800ba70:	eeb4 8b49 	vcmp.f64	d8, d9
 800ba74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba78:	d105      	bne.n	800ba86 <fmod+0x36>
 800ba7a:	f7ff ffbd 	bl	800b9f8 <__errno>
 800ba7e:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ba82:	2321      	movs	r3, #33	@ 0x21
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	ecbd 8b04 	vpop	{d8-d9}
 800ba8a:	bd08      	pop	{r3, pc}
 800ba8c:	f3af 8000 	nop.w
	...

0800ba98 <sqrt>:
 800ba98:	b508      	push	{r3, lr}
 800ba9a:	ed2d 8b04 	vpush	{d8-d9}
 800ba9e:	eeb0 8b40 	vmov.f64	d8, d0
 800baa2:	f000 f8b1 	bl	800bc08 <__ieee754_sqrt>
 800baa6:	eeb4 8b48 	vcmp.f64	d8, d8
 800baaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baae:	d60c      	bvs.n	800baca <sqrt+0x32>
 800bab0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800bad0 <sqrt+0x38>
 800bab4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babc:	d505      	bpl.n	800baca <sqrt+0x32>
 800babe:	f7ff ff9b 	bl	800b9f8 <__errno>
 800bac2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bac6:	2321      	movs	r3, #33	@ 0x21
 800bac8:	6003      	str	r3, [r0, #0]
 800baca:	ecbd 8b04 	vpop	{d8-d9}
 800bace:	bd08      	pop	{r3, pc}
	...

0800bad8 <cos>:
 800bad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bada:	eeb0 7b40 	vmov.f64	d7, d0
 800bade:	ee17 3a90 	vmov	r3, s15
 800bae2:	4a21      	ldr	r2, [pc, #132]	@ (800bb68 <cos+0x90>)
 800bae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bae8:	4293      	cmp	r3, r2
 800baea:	d806      	bhi.n	800bafa <cos+0x22>
 800baec:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800bb60 <cos+0x88>
 800baf0:	b005      	add	sp, #20
 800baf2:	f85d eb04 	ldr.w	lr, [sp], #4
 800baf6:	f000 b903 	b.w	800bd00 <__kernel_cos>
 800bafa:	4a1c      	ldr	r2, [pc, #112]	@ (800bb6c <cos+0x94>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d904      	bls.n	800bb0a <cos+0x32>
 800bb00:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bb04:	b005      	add	sp, #20
 800bb06:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb0a:	4668      	mov	r0, sp
 800bb0c:	f000 fac4 	bl	800c098 <__ieee754_rem_pio2>
 800bb10:	f000 0003 	and.w	r0, r0, #3
 800bb14:	2801      	cmp	r0, #1
 800bb16:	d009      	beq.n	800bb2c <cos+0x54>
 800bb18:	2802      	cmp	r0, #2
 800bb1a:	d010      	beq.n	800bb3e <cos+0x66>
 800bb1c:	b9b0      	cbnz	r0, 800bb4c <cos+0x74>
 800bb1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb22:	ed9d 0b00 	vldr	d0, [sp]
 800bb26:	f000 f8eb 	bl	800bd00 <__kernel_cos>
 800bb2a:	e7eb      	b.n	800bb04 <cos+0x2c>
 800bb2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb30:	ed9d 0b00 	vldr	d0, [sp]
 800bb34:	f000 f94c 	bl	800bdd0 <__kernel_sin>
 800bb38:	eeb1 0b40 	vneg.f64	d0, d0
 800bb3c:	e7e2      	b.n	800bb04 <cos+0x2c>
 800bb3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb42:	ed9d 0b00 	vldr	d0, [sp]
 800bb46:	f000 f8db 	bl	800bd00 <__kernel_cos>
 800bb4a:	e7f5      	b.n	800bb38 <cos+0x60>
 800bb4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb50:	ed9d 0b00 	vldr	d0, [sp]
 800bb54:	2001      	movs	r0, #1
 800bb56:	f000 f93b 	bl	800bdd0 <__kernel_sin>
 800bb5a:	e7d3      	b.n	800bb04 <cos+0x2c>
 800bb5c:	f3af 8000 	nop.w
	...
 800bb68:	3fe921fb 	.word	0x3fe921fb
 800bb6c:	7fefffff 	.word	0x7fefffff

0800bb70 <sin>:
 800bb70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb72:	eeb0 7b40 	vmov.f64	d7, d0
 800bb76:	ee17 3a90 	vmov	r3, s15
 800bb7a:	4a21      	ldr	r2, [pc, #132]	@ (800bc00 <sin+0x90>)
 800bb7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d807      	bhi.n	800bb94 <sin+0x24>
 800bb84:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800bbf8 <sin+0x88>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	b005      	add	sp, #20
 800bb8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb90:	f000 b91e 	b.w	800bdd0 <__kernel_sin>
 800bb94:	4a1b      	ldr	r2, [pc, #108]	@ (800bc04 <sin+0x94>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d904      	bls.n	800bba4 <sin+0x34>
 800bb9a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bb9e:	b005      	add	sp, #20
 800bba0:	f85d fb04 	ldr.w	pc, [sp], #4
 800bba4:	4668      	mov	r0, sp
 800bba6:	f000 fa77 	bl	800c098 <__ieee754_rem_pio2>
 800bbaa:	f000 0003 	and.w	r0, r0, #3
 800bbae:	2801      	cmp	r0, #1
 800bbb0:	d00a      	beq.n	800bbc8 <sin+0x58>
 800bbb2:	2802      	cmp	r0, #2
 800bbb4:	d00f      	beq.n	800bbd6 <sin+0x66>
 800bbb6:	b9c0      	cbnz	r0, 800bbea <sin+0x7a>
 800bbb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbbc:	ed9d 0b00 	vldr	d0, [sp]
 800bbc0:	2001      	movs	r0, #1
 800bbc2:	f000 f905 	bl	800bdd0 <__kernel_sin>
 800bbc6:	e7ea      	b.n	800bb9e <sin+0x2e>
 800bbc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbcc:	ed9d 0b00 	vldr	d0, [sp]
 800bbd0:	f000 f896 	bl	800bd00 <__kernel_cos>
 800bbd4:	e7e3      	b.n	800bb9e <sin+0x2e>
 800bbd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbda:	ed9d 0b00 	vldr	d0, [sp]
 800bbde:	2001      	movs	r0, #1
 800bbe0:	f000 f8f6 	bl	800bdd0 <__kernel_sin>
 800bbe4:	eeb1 0b40 	vneg.f64	d0, d0
 800bbe8:	e7d9      	b.n	800bb9e <sin+0x2e>
 800bbea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbee:	ed9d 0b00 	vldr	d0, [sp]
 800bbf2:	f000 f885 	bl	800bd00 <__kernel_cos>
 800bbf6:	e7f5      	b.n	800bbe4 <sin+0x74>
	...
 800bc00:	3fe921fb 	.word	0x3fe921fb
 800bc04:	7fefffff 	.word	0x7fefffff

0800bc08 <__ieee754_sqrt>:
 800bc08:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800bc0c:	4770      	bx	lr
	...

0800bc10 <floor>:
 800bc10:	ee10 3a90 	vmov	r3, s1
 800bc14:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800bc18:	ee10 2a10 	vmov	r2, s0
 800bc1c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800bc20:	2913      	cmp	r1, #19
 800bc22:	b530      	push	{r4, r5, lr}
 800bc24:	4615      	mov	r5, r2
 800bc26:	dc33      	bgt.n	800bc90 <floor+0x80>
 800bc28:	2900      	cmp	r1, #0
 800bc2a:	da18      	bge.n	800bc5e <floor+0x4e>
 800bc2c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800bcf0 <floor+0xe0>
 800bc30:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bc34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3c:	dd0a      	ble.n	800bc54 <floor+0x44>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	da50      	bge.n	800bce4 <floor+0xd4>
 800bc42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc46:	4313      	orrs	r3, r2
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf8 <floor+0xe8>)
 800bc4e:	bf08      	it	eq
 800bc50:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	ec41 0b10 	vmov	d0, r0, r1
 800bc5c:	e01f      	b.n	800bc9e <floor+0x8e>
 800bc5e:	4827      	ldr	r0, [pc, #156]	@ (800bcfc <floor+0xec>)
 800bc60:	4108      	asrs	r0, r1
 800bc62:	ea03 0400 	and.w	r4, r3, r0
 800bc66:	4314      	orrs	r4, r2
 800bc68:	d019      	beq.n	800bc9e <floor+0x8e>
 800bc6a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bcf0 <floor+0xe0>
 800bc6e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bc72:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7a:	ddeb      	ble.n	800bc54 <floor+0x44>
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bfbe      	ittt	lt
 800bc80:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800bc84:	410a      	asrlt	r2, r1
 800bc86:	189b      	addlt	r3, r3, r2
 800bc88:	ea23 0300 	bic.w	r3, r3, r0
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	e7e1      	b.n	800bc54 <floor+0x44>
 800bc90:	2933      	cmp	r1, #51	@ 0x33
 800bc92:	dd05      	ble.n	800bca0 <floor+0x90>
 800bc94:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc98:	d101      	bne.n	800bc9e <floor+0x8e>
 800bc9a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bc9e:	bd30      	pop	{r4, r5, pc}
 800bca0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800bca4:	f04f 30ff 	mov.w	r0, #4294967295
 800bca8:	40e0      	lsrs	r0, r4
 800bcaa:	4210      	tst	r0, r2
 800bcac:	d0f7      	beq.n	800bc9e <floor+0x8e>
 800bcae:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800bcf0 <floor+0xe0>
 800bcb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bcb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbe:	ddc9      	ble.n	800bc54 <floor+0x44>
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	da02      	bge.n	800bcca <floor+0xba>
 800bcc4:	2914      	cmp	r1, #20
 800bcc6:	d103      	bne.n	800bcd0 <floor+0xc0>
 800bcc8:	3301      	adds	r3, #1
 800bcca:	ea22 0200 	bic.w	r2, r2, r0
 800bcce:	e7c1      	b.n	800bc54 <floor+0x44>
 800bcd0:	2401      	movs	r4, #1
 800bcd2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800bcd6:	fa04 f101 	lsl.w	r1, r4, r1
 800bcda:	440a      	add	r2, r1
 800bcdc:	42aa      	cmp	r2, r5
 800bcde:	bf38      	it	cc
 800bce0:	191b      	addcc	r3, r3, r4
 800bce2:	e7f2      	b.n	800bcca <floor+0xba>
 800bce4:	2200      	movs	r2, #0
 800bce6:	4613      	mov	r3, r2
 800bce8:	e7b4      	b.n	800bc54 <floor+0x44>
 800bcea:	bf00      	nop
 800bcec:	f3af 8000 	nop.w
 800bcf0:	8800759c 	.word	0x8800759c
 800bcf4:	7e37e43c 	.word	0x7e37e43c
 800bcf8:	bff00000 	.word	0xbff00000
 800bcfc:	000fffff 	.word	0x000fffff

0800bd00 <__kernel_cos>:
 800bd00:	eeb0 5b40 	vmov.f64	d5, d0
 800bd04:	ee15 1a90 	vmov	r1, s11
 800bd08:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800bd0c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800bd10:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800bd14:	d204      	bcs.n	800bd20 <__kernel_cos+0x20>
 800bd16:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800bd1a:	ee17 3a90 	vmov	r3, s15
 800bd1e:	b343      	cbz	r3, 800bd72 <__kernel_cos+0x72>
 800bd20:	ee25 6b05 	vmul.f64	d6, d5, d5
 800bd24:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800bd28:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800bd98 <__kernel_cos+0x98>
 800bd2c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800bda0 <__kernel_cos+0xa0>
 800bd30:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bd34:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800bda8 <__kernel_cos+0xa8>
 800bd38:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bd3c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800bdb0 <__kernel_cos+0xb0>
 800bd40:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bd44:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800bdb8 <__kernel_cos+0xb8>
 800bd48:	4b1f      	ldr	r3, [pc, #124]	@ (800bdc8 <__kernel_cos+0xc8>)
 800bd4a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bd4e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800bdc0 <__kernel_cos+0xc0>
 800bd52:	4299      	cmp	r1, r3
 800bd54:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bd58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800bd5c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800bd60:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bd64:	eea6 1b04 	vfma.f64	d1, d6, d4
 800bd68:	d804      	bhi.n	800bd74 <__kernel_cos+0x74>
 800bd6a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800bd6e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800bd72:	4770      	bx	lr
 800bd74:	4b15      	ldr	r3, [pc, #84]	@ (800bdcc <__kernel_cos+0xcc>)
 800bd76:	4299      	cmp	r1, r3
 800bd78:	d809      	bhi.n	800bd8e <__kernel_cos+0x8e>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800bd80:	ec43 2b16 	vmov	d6, r2, r3
 800bd84:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bd88:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd8c:	e7ed      	b.n	800bd6a <__kernel_cos+0x6a>
 800bd8e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800bd92:	e7f7      	b.n	800bd84 <__kernel_cos+0x84>
 800bd94:	f3af 8000 	nop.w
 800bd98:	be8838d4 	.word	0xbe8838d4
 800bd9c:	bda8fae9 	.word	0xbda8fae9
 800bda0:	bdb4b1c4 	.word	0xbdb4b1c4
 800bda4:	3e21ee9e 	.word	0x3e21ee9e
 800bda8:	809c52ad 	.word	0x809c52ad
 800bdac:	be927e4f 	.word	0xbe927e4f
 800bdb0:	19cb1590 	.word	0x19cb1590
 800bdb4:	3efa01a0 	.word	0x3efa01a0
 800bdb8:	16c15177 	.word	0x16c15177
 800bdbc:	bf56c16c 	.word	0xbf56c16c
 800bdc0:	5555554c 	.word	0x5555554c
 800bdc4:	3fa55555 	.word	0x3fa55555
 800bdc8:	3fd33332 	.word	0x3fd33332
 800bdcc:	3fe90000 	.word	0x3fe90000

0800bdd0 <__kernel_sin>:
 800bdd0:	ee10 3a90 	vmov	r3, s1
 800bdd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdd8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bddc:	d204      	bcs.n	800bde8 <__kernel_sin+0x18>
 800bdde:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800bde2:	ee17 3a90 	vmov	r3, s15
 800bde6:	b35b      	cbz	r3, 800be40 <__kernel_sin+0x70>
 800bde8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800bdec:	ee20 5b06 	vmul.f64	d5, d0, d6
 800bdf0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800be48 <__kernel_sin+0x78>
 800bdf4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800be50 <__kernel_sin+0x80>
 800bdf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bdfc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800be58 <__kernel_sin+0x88>
 800be00:	eea4 7b06 	vfma.f64	d7, d4, d6
 800be04:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800be60 <__kernel_sin+0x90>
 800be08:	eea7 4b06 	vfma.f64	d4, d7, d6
 800be0c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800be68 <__kernel_sin+0x98>
 800be10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800be14:	b930      	cbnz	r0, 800be24 <__kernel_sin+0x54>
 800be16:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800be70 <__kernel_sin+0xa0>
 800be1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800be1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800be22:	4770      	bx	lr
 800be24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800be28:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800be2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800be30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800be34:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800be78 <__kernel_sin+0xa8>
 800be38:	eea5 1b07 	vfma.f64	d1, d5, d7
 800be3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	f3af 8000 	nop.w
 800be48:	5acfd57c 	.word	0x5acfd57c
 800be4c:	3de5d93a 	.word	0x3de5d93a
 800be50:	8a2b9ceb 	.word	0x8a2b9ceb
 800be54:	be5ae5e6 	.word	0xbe5ae5e6
 800be58:	57b1fe7d 	.word	0x57b1fe7d
 800be5c:	3ec71de3 	.word	0x3ec71de3
 800be60:	19c161d5 	.word	0x19c161d5
 800be64:	bf2a01a0 	.word	0xbf2a01a0
 800be68:	1110f8a6 	.word	0x1110f8a6
 800be6c:	3f811111 	.word	0x3f811111
 800be70:	55555549 	.word	0x55555549
 800be74:	bfc55555 	.word	0xbfc55555
 800be78:	55555549 	.word	0x55555549
 800be7c:	3fc55555 	.word	0x3fc55555

0800be80 <__ieee754_fmod>:
 800be80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be84:	ed8d 1b00 	vstr	d1, [sp]
 800be88:	e9dd 6500 	ldrd	r6, r5, [sp]
 800be8c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800be90:	ea56 0307 	orrs.w	r3, r6, r7
 800be94:	46b6      	mov	lr, r6
 800be96:	d00d      	beq.n	800beb4 <__ieee754_fmod+0x34>
 800be98:	ee10 ca90 	vmov	ip, s1
 800be9c:	4b78      	ldr	r3, [pc, #480]	@ (800c080 <__ieee754_fmod+0x200>)
 800be9e:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800bea2:	4598      	cmp	r8, r3
 800bea4:	d806      	bhi.n	800beb4 <__ieee754_fmod+0x34>
 800bea6:	4273      	negs	r3, r6
 800bea8:	4a76      	ldr	r2, [pc, #472]	@ (800c084 <__ieee754_fmod+0x204>)
 800beaa:	4333      	orrs	r3, r6
 800beac:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d908      	bls.n	800bec6 <__ieee754_fmod+0x46>
 800beb4:	ed9d 7b00 	vldr	d7, [sp]
 800beb8:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bebc:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800bec0:	b003      	add	sp, #12
 800bec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bec6:	ee10 9a10 	vmov	r9, s0
 800beca:	45b8      	cmp	r8, r7
 800becc:	4649      	mov	r1, r9
 800bece:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800bed2:	dc09      	bgt.n	800bee8 <__ieee754_fmod+0x68>
 800bed4:	dbf4      	blt.n	800bec0 <__ieee754_fmod+0x40>
 800bed6:	454e      	cmp	r6, r9
 800bed8:	d8f2      	bhi.n	800bec0 <__ieee754_fmod+0x40>
 800beda:	d105      	bne.n	800bee8 <__ieee754_fmod+0x68>
 800bedc:	4b6a      	ldr	r3, [pc, #424]	@ (800c088 <__ieee754_fmod+0x208>)
 800bede:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800bee2:	ed93 0b00 	vldr	d0, [r3]
 800bee6:	e7eb      	b.n	800bec0 <__ieee754_fmod+0x40>
 800bee8:	4a66      	ldr	r2, [pc, #408]	@ (800c084 <__ieee754_fmod+0x204>)
 800beea:	ea1c 0f02 	tst.w	ip, r2
 800beee:	d14a      	bne.n	800bf86 <__ieee754_fmod+0x106>
 800bef0:	f1b8 0f00 	cmp.w	r8, #0
 800bef4:	d13f      	bne.n	800bf76 <__ieee754_fmod+0xf6>
 800bef6:	4865      	ldr	r0, [pc, #404]	@ (800c08c <__ieee754_fmod+0x20c>)
 800bef8:	464b      	mov	r3, r9
 800befa:	2b00      	cmp	r3, #0
 800befc:	dc38      	bgt.n	800bf70 <__ieee754_fmod+0xf0>
 800befe:	4215      	tst	r5, r2
 800bf00:	d150      	bne.n	800bfa4 <__ieee754_fmod+0x124>
 800bf02:	2f00      	cmp	r7, #0
 800bf04:	d147      	bne.n	800bf96 <__ieee754_fmod+0x116>
 800bf06:	4a61      	ldr	r2, [pc, #388]	@ (800c08c <__ieee754_fmod+0x20c>)
 800bf08:	4633      	mov	r3, r6
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dc40      	bgt.n	800bf90 <__ieee754_fmod+0x110>
 800bf0e:	4b60      	ldr	r3, [pc, #384]	@ (800c090 <__ieee754_fmod+0x210>)
 800bf10:	4298      	cmp	r0, r3
 800bf12:	db4b      	blt.n	800bfac <__ieee754_fmod+0x12c>
 800bf14:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800bf18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf1c:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800c090 <__ieee754_fmod+0x210>
 800bf20:	4562      	cmp	r2, ip
 800bf22:	db58      	blt.n	800bfd6 <__ieee754_fmod+0x156>
 800bf24:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bf28:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800bf2c:	1a80      	subs	r0, r0, r2
 800bf2e:	1b5e      	subs	r6, r3, r5
 800bf30:	eba1 070e 	sub.w	r7, r1, lr
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d164      	bne.n	800c002 <__ieee754_fmod+0x182>
 800bf38:	4571      	cmp	r1, lr
 800bf3a:	bf38      	it	cc
 800bf3c:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800bf40:	2e00      	cmp	r6, #0
 800bf42:	bfa4      	itt	ge
 800bf44:	4639      	movge	r1, r7
 800bf46:	4633      	movge	r3, r6
 800bf48:	ea53 0001 	orrs.w	r0, r3, r1
 800bf4c:	d0c6      	beq.n	800bedc <__ieee754_fmod+0x5c>
 800bf4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf52:	db6b      	blt.n	800c02c <__ieee754_fmod+0x1ac>
 800bf54:	484e      	ldr	r0, [pc, #312]	@ (800c090 <__ieee754_fmod+0x210>)
 800bf56:	4282      	cmp	r2, r0
 800bf58:	db6e      	blt.n	800c038 <__ieee754_fmod+0x1b8>
 800bf5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bf5e:	4323      	orrs	r3, r4
 800bf60:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800bf64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf68:	460c      	mov	r4, r1
 800bf6a:	ec45 4b10 	vmov	d0, r4, r5
 800bf6e:	e7a7      	b.n	800bec0 <__ieee754_fmod+0x40>
 800bf70:	3801      	subs	r0, #1
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	e7c1      	b.n	800befa <__ieee754_fmod+0x7a>
 800bf76:	4846      	ldr	r0, [pc, #280]	@ (800c090 <__ieee754_fmod+0x210>)
 800bf78:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	ddbe      	ble.n	800befe <__ieee754_fmod+0x7e>
 800bf80:	3801      	subs	r0, #1
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	e7fa      	b.n	800bf7c <__ieee754_fmod+0xfc>
 800bf86:	ea4f 5028 	mov.w	r0, r8, asr #20
 800bf8a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800bf8e:	e7b6      	b.n	800befe <__ieee754_fmod+0x7e>
 800bf90:	3a01      	subs	r2, #1
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	e7b9      	b.n	800bf0a <__ieee754_fmod+0x8a>
 800bf96:	4a3e      	ldr	r2, [pc, #248]	@ (800c090 <__ieee754_fmod+0x210>)
 800bf98:	02fb      	lsls	r3, r7, #11
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	ddb7      	ble.n	800bf0e <__ieee754_fmod+0x8e>
 800bf9e:	3a01      	subs	r2, #1
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	e7fa      	b.n	800bf9a <__ieee754_fmod+0x11a>
 800bfa4:	153a      	asrs	r2, r7, #20
 800bfa6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bfaa:	e7b0      	b.n	800bf0e <__ieee754_fmod+0x8e>
 800bfac:	eba3 0c00 	sub.w	ip, r3, r0
 800bfb0:	f1bc 0f1f 	cmp.w	ip, #31
 800bfb4:	dc09      	bgt.n	800bfca <__ieee754_fmod+0x14a>
 800bfb6:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800bfba:	fa08 f10c 	lsl.w	r1, r8, ip
 800bfbe:	fa29 f303 	lsr.w	r3, r9, r3
 800bfc2:	430b      	orrs	r3, r1
 800bfc4:	fa09 f10c 	lsl.w	r1, r9, ip
 800bfc8:	e7a8      	b.n	800bf1c <__ieee754_fmod+0x9c>
 800bfca:	4b32      	ldr	r3, [pc, #200]	@ (800c094 <__ieee754_fmod+0x214>)
 800bfcc:	1a1b      	subs	r3, r3, r0
 800bfce:	fa09 f303 	lsl.w	r3, r9, r3
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	e7a2      	b.n	800bf1c <__ieee754_fmod+0x9c>
 800bfd6:	ebac 0c02 	sub.w	ip, ip, r2
 800bfda:	f1bc 0f1f 	cmp.w	ip, #31
 800bfde:	dc09      	bgt.n	800bff4 <__ieee754_fmod+0x174>
 800bfe0:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800bfe4:	fa07 f70c 	lsl.w	r7, r7, ip
 800bfe8:	fa26 f505 	lsr.w	r5, r6, r5
 800bfec:	433d      	orrs	r5, r7
 800bfee:	fa06 fe0c 	lsl.w	lr, r6, ip
 800bff2:	e79b      	b.n	800bf2c <__ieee754_fmod+0xac>
 800bff4:	4d27      	ldr	r5, [pc, #156]	@ (800c094 <__ieee754_fmod+0x214>)
 800bff6:	1aad      	subs	r5, r5, r2
 800bff8:	fa06 f505 	lsl.w	r5, r6, r5
 800bffc:	f04f 0e00 	mov.w	lr, #0
 800c000:	e794      	b.n	800bf2c <__ieee754_fmod+0xac>
 800c002:	4571      	cmp	r1, lr
 800c004:	bf38      	it	cc
 800c006:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	da05      	bge.n	800c01a <__ieee754_fmod+0x19a>
 800c00e:	0fce      	lsrs	r6, r1, #31
 800c010:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800c014:	0049      	lsls	r1, r1, #1
 800c016:	3801      	subs	r0, #1
 800c018:	e789      	b.n	800bf2e <__ieee754_fmod+0xae>
 800c01a:	ea56 0307 	orrs.w	r3, r6, r7
 800c01e:	f43f af5d 	beq.w	800bedc <__ieee754_fmod+0x5c>
 800c022:	0ffb      	lsrs	r3, r7, #31
 800c024:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800c028:	0079      	lsls	r1, r7, #1
 800c02a:	e7f4      	b.n	800c016 <__ieee754_fmod+0x196>
 800c02c:	0fc8      	lsrs	r0, r1, #31
 800c02e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c032:	0049      	lsls	r1, r1, #1
 800c034:	3a01      	subs	r2, #1
 800c036:	e78a      	b.n	800bf4e <__ieee754_fmod+0xce>
 800c038:	1a80      	subs	r0, r0, r2
 800c03a:	2814      	cmp	r0, #20
 800c03c:	dc0c      	bgt.n	800c058 <__ieee754_fmod+0x1d8>
 800c03e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c042:	fa03 f202 	lsl.w	r2, r3, r2
 800c046:	40c1      	lsrs	r1, r0
 800c048:	430a      	orrs	r2, r1
 800c04a:	4103      	asrs	r3, r0
 800c04c:	ea43 0104 	orr.w	r1, r3, r4
 800c050:	4610      	mov	r0, r2
 800c052:	ec41 0b10 	vmov	d0, r0, r1
 800c056:	e733      	b.n	800bec0 <__ieee754_fmod+0x40>
 800c058:	281f      	cmp	r0, #31
 800c05a:	dc07      	bgt.n	800c06c <__ieee754_fmod+0x1ec>
 800c05c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c060:	40c1      	lsrs	r1, r0
 800c062:	fa03 f202 	lsl.w	r2, r3, r2
 800c066:	430a      	orrs	r2, r1
 800c068:	4623      	mov	r3, r4
 800c06a:	e7ef      	b.n	800c04c <__ieee754_fmod+0x1cc>
 800c06c:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800c070:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c074:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800c078:	32e2      	adds	r2, #226	@ 0xe2
 800c07a:	fa43 f202 	asr.w	r2, r3, r2
 800c07e:	e7f3      	b.n	800c068 <__ieee754_fmod+0x1e8>
 800c080:	7fefffff 	.word	0x7fefffff
 800c084:	7ff00000 	.word	0x7ff00000
 800c088:	0800c958 	.word	0x0800c958
 800c08c:	fffffbed 	.word	0xfffffbed
 800c090:	fffffc02 	.word	0xfffffc02
 800c094:	fffffbe2 	.word	0xfffffbe2

0800c098 <__ieee754_rem_pio2>:
 800c098:	b570      	push	{r4, r5, r6, lr}
 800c09a:	eeb0 7b40 	vmov.f64	d7, d0
 800c09e:	ee17 5a90 	vmov	r5, s15
 800c0a2:	4b99      	ldr	r3, [pc, #612]	@ (800c308 <__ieee754_rem_pio2+0x270>)
 800c0a4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c0a8:	429e      	cmp	r6, r3
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	d807      	bhi.n	800c0c0 <__ieee754_rem_pio2+0x28>
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	ed84 0b00 	vstr	d0, [r4]
 800c0b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e01b      	b.n	800c0f8 <__ieee754_rem_pio2+0x60>
 800c0c0:	4b92      	ldr	r3, [pc, #584]	@ (800c30c <__ieee754_rem_pio2+0x274>)
 800c0c2:	429e      	cmp	r6, r3
 800c0c4:	d83b      	bhi.n	800c13e <__ieee754_rem_pio2+0xa6>
 800c0c6:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800c0ca:	2d00      	cmp	r5, #0
 800c0cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800c2c8 <__ieee754_rem_pio2+0x230>
 800c0d0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800c0d4:	dd19      	ble.n	800c10a <__ieee754_rem_pio2+0x72>
 800c0d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c0da:	429e      	cmp	r6, r3
 800c0dc:	d00e      	beq.n	800c0fc <__ieee754_rem_pio2+0x64>
 800c0de:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800c2d0 <__ieee754_rem_pio2+0x238>
 800c0e2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800c0e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0ea:	ed84 6b00 	vstr	d6, [r4]
 800c0ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c0f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	b008      	add	sp, #32
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800c2d8 <__ieee754_rem_pio2+0x240>
 800c100:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800c2e0 <__ieee754_rem_pio2+0x248>
 800c104:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c108:	e7eb      	b.n	800c0e2 <__ieee754_rem_pio2+0x4a>
 800c10a:	429e      	cmp	r6, r3
 800c10c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c110:	d00e      	beq.n	800c130 <__ieee754_rem_pio2+0x98>
 800c112:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800c2d0 <__ieee754_rem_pio2+0x238>
 800c116:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c11a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c11e:	ed84 6b00 	vstr	d6, [r4]
 800c122:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c126:	f04f 30ff 	mov.w	r0, #4294967295
 800c12a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c12e:	e7e3      	b.n	800c0f8 <__ieee754_rem_pio2+0x60>
 800c130:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800c2d8 <__ieee754_rem_pio2+0x240>
 800c134:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800c2e0 <__ieee754_rem_pio2+0x248>
 800c138:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c13c:	e7eb      	b.n	800c116 <__ieee754_rem_pio2+0x7e>
 800c13e:	4b74      	ldr	r3, [pc, #464]	@ (800c310 <__ieee754_rem_pio2+0x278>)
 800c140:	429e      	cmp	r6, r3
 800c142:	d870      	bhi.n	800c226 <__ieee754_rem_pio2+0x18e>
 800c144:	f000 f8ec 	bl	800c320 <fabs>
 800c148:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c14c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c2e8 <__ieee754_rem_pio2+0x250>
 800c150:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c154:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c158:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c15c:	ee17 0a90 	vmov	r0, s15
 800c160:	eeb1 4b45 	vneg.f64	d4, d5
 800c164:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800c2c8 <__ieee754_rem_pio2+0x230>
 800c168:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c16c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800c2d0 <__ieee754_rem_pio2+0x238>
 800c170:	281f      	cmp	r0, #31
 800c172:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c176:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c17a:	dc05      	bgt.n	800c188 <__ieee754_rem_pio2+0xf0>
 800c17c:	4b65      	ldr	r3, [pc, #404]	@ (800c314 <__ieee754_rem_pio2+0x27c>)
 800c17e:	1e42      	subs	r2, r0, #1
 800c180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c184:	42b3      	cmp	r3, r6
 800c186:	d109      	bne.n	800c19c <__ieee754_rem_pio2+0x104>
 800c188:	ee16 3a90 	vmov	r3, s13
 800c18c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c190:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c194:	2b10      	cmp	r3, #16
 800c196:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c19a:	dc02      	bgt.n	800c1a2 <__ieee754_rem_pio2+0x10a>
 800c19c:	ed84 6b00 	vstr	d6, [r4]
 800c1a0:	e01a      	b.n	800c1d8 <__ieee754_rem_pio2+0x140>
 800c1a2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800c2d8 <__ieee754_rem_pio2+0x240>
 800c1a6:	eeb0 6b40 	vmov.f64	d6, d0
 800c1aa:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c1ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c1b2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c1b6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800c2e0 <__ieee754_rem_pio2+0x248>
 800c1ba:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c1be:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c1c2:	ee13 3a90 	vmov	r3, s7
 800c1c6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b31      	cmp	r3, #49	@ 0x31
 800c1ce:	dc17      	bgt.n	800c200 <__ieee754_rem_pio2+0x168>
 800c1d0:	eeb0 0b46 	vmov.f64	d0, d6
 800c1d4:	ed84 3b00 	vstr	d3, [r4]
 800c1d8:	ed94 6b00 	vldr	d6, [r4]
 800c1dc:	2d00      	cmp	r5, #0
 800c1de:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c1e2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c1e6:	ed84 0b02 	vstr	d0, [r4, #8]
 800c1ea:	da85      	bge.n	800c0f8 <__ieee754_rem_pio2+0x60>
 800c1ec:	eeb1 6b46 	vneg.f64	d6, d6
 800c1f0:	eeb1 0b40 	vneg.f64	d0, d0
 800c1f4:	ed84 6b00 	vstr	d6, [r4]
 800c1f8:	ed84 0b02 	vstr	d0, [r4, #8]
 800c1fc:	4240      	negs	r0, r0
 800c1fe:	e77b      	b.n	800c0f8 <__ieee754_rem_pio2+0x60>
 800c200:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800c2f0 <__ieee754_rem_pio2+0x258>
 800c204:	eeb0 0b46 	vmov.f64	d0, d6
 800c208:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c20c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800c210:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c214:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800c2f8 <__ieee754_rem_pio2+0x260>
 800c218:	eeb0 7b46 	vmov.f64	d7, d6
 800c21c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800c220:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c224:	e7ba      	b.n	800c19c <__ieee754_rem_pio2+0x104>
 800c226:	4b3c      	ldr	r3, [pc, #240]	@ (800c318 <__ieee754_rem_pio2+0x280>)
 800c228:	429e      	cmp	r6, r3
 800c22a:	d906      	bls.n	800c23a <__ieee754_rem_pio2+0x1a2>
 800c22c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c230:	ed80 7b02 	vstr	d7, [r0, #8]
 800c234:	ed80 7b00 	vstr	d7, [r0]
 800c238:	e740      	b.n	800c0bc <__ieee754_rem_pio2+0x24>
 800c23a:	ee10 3a10 	vmov	r3, s0
 800c23e:	1532      	asrs	r2, r6, #20
 800c240:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800c244:	4618      	mov	r0, r3
 800c246:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c24a:	ec41 0b17 	vmov	d7, r0, r1
 800c24e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c252:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800c300 <__ieee754_rem_pio2+0x268>
 800c256:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c25a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c25e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c262:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c266:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c26a:	a808      	add	r0, sp, #32
 800c26c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c270:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c274:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c278:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c27c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c280:	2103      	movs	r1, #3
 800c282:	ed30 7b02 	vldmdb	r0!, {d7}
 800c286:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28e:	460b      	mov	r3, r1
 800c290:	f101 31ff 	add.w	r1, r1, #4294967295
 800c294:	d0f5      	beq.n	800c282 <__ieee754_rem_pio2+0x1ea>
 800c296:	4921      	ldr	r1, [pc, #132]	@ (800c31c <__ieee754_rem_pio2+0x284>)
 800c298:	9101      	str	r1, [sp, #4]
 800c29a:	2102      	movs	r1, #2
 800c29c:	9100      	str	r1, [sp, #0]
 800c29e:	a802      	add	r0, sp, #8
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	f000 f845 	bl	800c330 <__kernel_rem_pio2>
 800c2a6:	2d00      	cmp	r5, #0
 800c2a8:	f6bf af26 	bge.w	800c0f8 <__ieee754_rem_pio2+0x60>
 800c2ac:	ed94 7b00 	vldr	d7, [r4]
 800c2b0:	eeb1 7b47 	vneg.f64	d7, d7
 800c2b4:	ed84 7b00 	vstr	d7, [r4]
 800c2b8:	ed94 7b02 	vldr	d7, [r4, #8]
 800c2bc:	eeb1 7b47 	vneg.f64	d7, d7
 800c2c0:	ed84 7b02 	vstr	d7, [r4, #8]
 800c2c4:	e79a      	b.n	800c1fc <__ieee754_rem_pio2+0x164>
 800c2c6:	bf00      	nop
 800c2c8:	54400000 	.word	0x54400000
 800c2cc:	3ff921fb 	.word	0x3ff921fb
 800c2d0:	1a626331 	.word	0x1a626331
 800c2d4:	3dd0b461 	.word	0x3dd0b461
 800c2d8:	1a600000 	.word	0x1a600000
 800c2dc:	3dd0b461 	.word	0x3dd0b461
 800c2e0:	2e037073 	.word	0x2e037073
 800c2e4:	3ba3198a 	.word	0x3ba3198a
 800c2e8:	6dc9c883 	.word	0x6dc9c883
 800c2ec:	3fe45f30 	.word	0x3fe45f30
 800c2f0:	2e000000 	.word	0x2e000000
 800c2f4:	3ba3198a 	.word	0x3ba3198a
 800c2f8:	252049c1 	.word	0x252049c1
 800c2fc:	397b839a 	.word	0x397b839a
 800c300:	00000000 	.word	0x00000000
 800c304:	41700000 	.word	0x41700000
 800c308:	3fe921fb 	.word	0x3fe921fb
 800c30c:	4002d97b 	.word	0x4002d97b
 800c310:	413921fb 	.word	0x413921fb
 800c314:	0800c968 	.word	0x0800c968
 800c318:	7fefffff 	.word	0x7fefffff
 800c31c:	0800c9e8 	.word	0x0800c9e8

0800c320 <fabs>:
 800c320:	ec51 0b10 	vmov	r0, r1, d0
 800c324:	4602      	mov	r2, r0
 800c326:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c32a:	ec43 2b10 	vmov	d0, r2, r3
 800c32e:	4770      	bx	lr

0800c330 <__kernel_rem_pio2>:
 800c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	ed2d 8b06 	vpush	{d8-d10}
 800c338:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800c33c:	469b      	mov	fp, r3
 800c33e:	9001      	str	r0, [sp, #4]
 800c340:	4bbb      	ldr	r3, [pc, #748]	@ (800c630 <__kernel_rem_pio2+0x300>)
 800c342:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800c344:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800c348:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800c34c:	f112 0f14 	cmn.w	r2, #20
 800c350:	bfa8      	it	ge
 800c352:	1ed3      	subge	r3, r2, #3
 800c354:	f10b 3aff 	add.w	sl, fp, #4294967295
 800c358:	bfb8      	it	lt
 800c35a:	2300      	movlt	r3, #0
 800c35c:	f06f 0517 	mvn.w	r5, #23
 800c360:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800c618 <__kernel_rem_pio2+0x2e8>
 800c364:	bfa4      	itt	ge
 800c366:	2018      	movge	r0, #24
 800c368:	fb93 f3f0 	sdivge	r3, r3, r0
 800c36c:	fb03 5505 	mla	r5, r3, r5, r5
 800c370:	eba3 040a 	sub.w	r4, r3, sl
 800c374:	4415      	add	r5, r2
 800c376:	460f      	mov	r7, r1
 800c378:	eb09 060a 	add.w	r6, r9, sl
 800c37c:	a81a      	add	r0, sp, #104	@ 0x68
 800c37e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800c382:	2200      	movs	r2, #0
 800c384:	42b2      	cmp	r2, r6
 800c386:	dd0e      	ble.n	800c3a6 <__kernel_rem_pio2+0x76>
 800c388:	aa1a      	add	r2, sp, #104	@ 0x68
 800c38a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c38e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800c392:	2600      	movs	r6, #0
 800c394:	454e      	cmp	r6, r9
 800c396:	dc25      	bgt.n	800c3e4 <__kernel_rem_pio2+0xb4>
 800c398:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800c618 <__kernel_rem_pio2+0x2e8>
 800c39c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c3a0:	4614      	mov	r4, r2
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	e015      	b.n	800c3d2 <__kernel_rem_pio2+0xa2>
 800c3a6:	42d4      	cmn	r4, r2
 800c3a8:	d409      	bmi.n	800c3be <__kernel_rem_pio2+0x8e>
 800c3aa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800c3ae:	ee07 1a90 	vmov	s15, r1
 800c3b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c3b6:	eca0 7b02 	vstmia	r0!, {d7}
 800c3ba:	3201      	adds	r2, #1
 800c3bc:	e7e2      	b.n	800c384 <__kernel_rem_pio2+0x54>
 800c3be:	eeb0 7b46 	vmov.f64	d7, d6
 800c3c2:	e7f8      	b.n	800c3b6 <__kernel_rem_pio2+0x86>
 800c3c4:	ecbc 5b02 	vldmia	ip!, {d5}
 800c3c8:	ed94 6b00 	vldr	d6, [r4]
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c3d2:	4550      	cmp	r0, sl
 800c3d4:	f1a4 0408 	sub.w	r4, r4, #8
 800c3d8:	ddf4      	ble.n	800c3c4 <__kernel_rem_pio2+0x94>
 800c3da:	ecae 7b02 	vstmia	lr!, {d7}
 800c3de:	3601      	adds	r6, #1
 800c3e0:	3208      	adds	r2, #8
 800c3e2:	e7d7      	b.n	800c394 <__kernel_rem_pio2+0x64>
 800c3e4:	aa06      	add	r2, sp, #24
 800c3e6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800c620 <__kernel_rem_pio2+0x2f0>
 800c3ea:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800c628 <__kernel_rem_pio2+0x2f8>
 800c3ee:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c3f2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800c3f6:	9203      	str	r2, [sp, #12]
 800c3f8:	9302      	str	r3, [sp, #8]
 800c3fa:	464c      	mov	r4, r9
 800c3fc:	00e3      	lsls	r3, r4, #3
 800c3fe:	9304      	str	r3, [sp, #16]
 800c400:	ab92      	add	r3, sp, #584	@ 0x248
 800c402:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c406:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800c40a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800c40c:	ab06      	add	r3, sp, #24
 800c40e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c412:	461e      	mov	r6, r3
 800c414:	4620      	mov	r0, r4
 800c416:	2800      	cmp	r0, #0
 800c418:	f1a2 0208 	sub.w	r2, r2, #8
 800c41c:	dc4a      	bgt.n	800c4b4 <__kernel_rem_pio2+0x184>
 800c41e:	4628      	mov	r0, r5
 800c420:	9305      	str	r3, [sp, #20]
 800c422:	f000 fa01 	bl	800c828 <scalbn>
 800c426:	eeb0 8b40 	vmov.f64	d8, d0
 800c42a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800c42e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c432:	f7ff fbed 	bl	800bc10 <floor>
 800c436:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800c43a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c43e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c442:	2d00      	cmp	r5, #0
 800c444:	ee17 8a90 	vmov	r8, s15
 800c448:	9b05      	ldr	r3, [sp, #20]
 800c44a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c44e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c452:	dd41      	ble.n	800c4d8 <__kernel_rem_pio2+0x1a8>
 800c454:	1e60      	subs	r0, r4, #1
 800c456:	aa06      	add	r2, sp, #24
 800c458:	f1c5 0c18 	rsb	ip, r5, #24
 800c45c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800c460:	fa46 f20c 	asr.w	r2, r6, ip
 800c464:	4490      	add	r8, r2
 800c466:	fa02 f20c 	lsl.w	r2, r2, ip
 800c46a:	1ab6      	subs	r6, r6, r2
 800c46c:	aa06      	add	r2, sp, #24
 800c46e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800c472:	f1c5 0217 	rsb	r2, r5, #23
 800c476:	4116      	asrs	r6, r2
 800c478:	2e00      	cmp	r6, #0
 800c47a:	dd3c      	ble.n	800c4f6 <__kernel_rem_pio2+0x1c6>
 800c47c:	f04f 0c00 	mov.w	ip, #0
 800c480:	f108 0801 	add.w	r8, r8, #1
 800c484:	4660      	mov	r0, ip
 800c486:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800c48a:	4564      	cmp	r4, ip
 800c48c:	dc66      	bgt.n	800c55c <__kernel_rem_pio2+0x22c>
 800c48e:	2d00      	cmp	r5, #0
 800c490:	dd03      	ble.n	800c49a <__kernel_rem_pio2+0x16a>
 800c492:	2d01      	cmp	r5, #1
 800c494:	d072      	beq.n	800c57c <__kernel_rem_pio2+0x24c>
 800c496:	2d02      	cmp	r5, #2
 800c498:	d07a      	beq.n	800c590 <__kernel_rem_pio2+0x260>
 800c49a:	2e02      	cmp	r6, #2
 800c49c:	d12b      	bne.n	800c4f6 <__kernel_rem_pio2+0x1c6>
 800c49e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c4a2:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c4a6:	b330      	cbz	r0, 800c4f6 <__kernel_rem_pio2+0x1c6>
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	f000 f9bd 	bl	800c828 <scalbn>
 800c4ae:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c4b2:	e020      	b.n	800c4f6 <__kernel_rem_pio2+0x1c6>
 800c4b4:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c4b8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c4bc:	3801      	subs	r0, #1
 800c4be:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c4c2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c4c6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c4ca:	eca6 0a01 	vstmia	r6!, {s0}
 800c4ce:	ed92 0b00 	vldr	d0, [r2]
 800c4d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c4d6:	e79e      	b.n	800c416 <__kernel_rem_pio2+0xe6>
 800c4d8:	d105      	bne.n	800c4e6 <__kernel_rem_pio2+0x1b6>
 800c4da:	1e62      	subs	r2, r4, #1
 800c4dc:	a906      	add	r1, sp, #24
 800c4de:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800c4e2:	15f6      	asrs	r6, r6, #23
 800c4e4:	e7c8      	b.n	800c478 <__kernel_rem_pio2+0x148>
 800c4e6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c4ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f2:	da31      	bge.n	800c558 <__kernel_rem_pio2+0x228>
 800c4f4:	2600      	movs	r6, #0
 800c4f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fe:	f040 809b 	bne.w	800c638 <__kernel_rem_pio2+0x308>
 800c502:	1e62      	subs	r2, r4, #1
 800c504:	2000      	movs	r0, #0
 800c506:	454a      	cmp	r2, r9
 800c508:	da49      	bge.n	800c59e <__kernel_rem_pio2+0x26e>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d062      	beq.n	800c5d4 <__kernel_rem_pio2+0x2a4>
 800c50e:	3c01      	subs	r4, #1
 800c510:	ab06      	add	r3, sp, #24
 800c512:	3d18      	subs	r5, #24
 800c514:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0f8      	beq.n	800c50e <__kernel_rem_pio2+0x1de>
 800c51c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c520:	4628      	mov	r0, r5
 800c522:	f000 f981 	bl	800c828 <scalbn>
 800c526:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800c620 <__kernel_rem_pio2+0x2f0>
 800c52a:	1c62      	adds	r2, r4, #1
 800c52c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c52e:	00d3      	lsls	r3, r2, #3
 800c530:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c534:	4622      	mov	r2, r4
 800c536:	2a00      	cmp	r2, #0
 800c538:	f280 80a8 	bge.w	800c68c <__kernel_rem_pio2+0x35c>
 800c53c:	4622      	mov	r2, r4
 800c53e:	2a00      	cmp	r2, #0
 800c540:	f2c0 80c6 	blt.w	800c6d0 <__kernel_rem_pio2+0x3a0>
 800c544:	a96a      	add	r1, sp, #424	@ 0x1a8
 800c546:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c54a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800c618 <__kernel_rem_pio2+0x2e8>
 800c54e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800c634 <__kernel_rem_pio2+0x304>
 800c552:	2000      	movs	r0, #0
 800c554:	1aa1      	subs	r1, r4, r2
 800c556:	e0b0      	b.n	800c6ba <__kernel_rem_pio2+0x38a>
 800c558:	2602      	movs	r6, #2
 800c55a:	e78f      	b.n	800c47c <__kernel_rem_pio2+0x14c>
 800c55c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c560:	b948      	cbnz	r0, 800c576 <__kernel_rem_pio2+0x246>
 800c562:	b122      	cbz	r2, 800c56e <__kernel_rem_pio2+0x23e>
 800c564:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800c568:	f843 2c04 	str.w	r2, [r3, #-4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f10c 0c01 	add.w	ip, ip, #1
 800c572:	4610      	mov	r0, r2
 800c574:	e789      	b.n	800c48a <__kernel_rem_pio2+0x15a>
 800c576:	ebae 0202 	sub.w	r2, lr, r2
 800c57a:	e7f5      	b.n	800c568 <__kernel_rem_pio2+0x238>
 800c57c:	1e62      	subs	r2, r4, #1
 800c57e:	ab06      	add	r3, sp, #24
 800c580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c584:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c588:	a906      	add	r1, sp, #24
 800c58a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c58e:	e784      	b.n	800c49a <__kernel_rem_pio2+0x16a>
 800c590:	1e62      	subs	r2, r4, #1
 800c592:	ab06      	add	r3, sp, #24
 800c594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c598:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c59c:	e7f4      	b.n	800c588 <__kernel_rem_pio2+0x258>
 800c59e:	ab06      	add	r3, sp, #24
 800c5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a4:	3a01      	subs	r2, #1
 800c5a6:	4318      	orrs	r0, r3
 800c5a8:	e7ad      	b.n	800c506 <__kernel_rem_pio2+0x1d6>
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d0fa      	beq.n	800c5aa <__kernel_rem_pio2+0x27a>
 800c5b4:	9a04      	ldr	r2, [sp, #16]
 800c5b6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800c5ba:	446a      	add	r2, sp
 800c5bc:	eb04 000b 	add.w	r0, r4, fp
 800c5c0:	a91a      	add	r1, sp, #104	@ 0x68
 800c5c2:	1c66      	adds	r6, r4, #1
 800c5c4:	3a98      	subs	r2, #152	@ 0x98
 800c5c6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800c5ca:	4423      	add	r3, r4
 800c5cc:	42b3      	cmp	r3, r6
 800c5ce:	da04      	bge.n	800c5da <__kernel_rem_pio2+0x2aa>
 800c5d0:	461c      	mov	r4, r3
 800c5d2:	e713      	b.n	800c3fc <__kernel_rem_pio2+0xcc>
 800c5d4:	9a03      	ldr	r2, [sp, #12]
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e7e8      	b.n	800c5ac <__kernel_rem_pio2+0x27c>
 800c5da:	9902      	ldr	r1, [sp, #8]
 800c5dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c5e0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800c5e4:	9104      	str	r1, [sp, #16]
 800c5e6:	ee07 1a90 	vmov	s15, r1
 800c5ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c5ee:	2400      	movs	r4, #0
 800c5f0:	eca0 7b02 	vstmia	r0!, {d7}
 800c5f4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800c618 <__kernel_rem_pio2+0x2e8>
 800c5f8:	4686      	mov	lr, r0
 800c5fa:	4554      	cmp	r4, sl
 800c5fc:	dd03      	ble.n	800c606 <__kernel_rem_pio2+0x2d6>
 800c5fe:	eca2 7b02 	vstmia	r2!, {d7}
 800c602:	3601      	adds	r6, #1
 800c604:	e7e2      	b.n	800c5cc <__kernel_rem_pio2+0x29c>
 800c606:	ecbc 5b02 	vldmia	ip!, {d5}
 800c60a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800c60e:	3401      	adds	r4, #1
 800c610:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c614:	e7f1      	b.n	800c5fa <__kernel_rem_pio2+0x2ca>
 800c616:	bf00      	nop
	...
 800c624:	3e700000 	.word	0x3e700000
 800c628:	00000000 	.word	0x00000000
 800c62c:	41700000 	.word	0x41700000
 800c630:	0800cb30 	.word	0x0800cb30
 800c634:	0800caf0 	.word	0x0800caf0
 800c638:	4268      	negs	r0, r5
 800c63a:	eeb0 0b48 	vmov.f64	d0, d8
 800c63e:	f000 f8f3 	bl	800c828 <scalbn>
 800c642:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800c810 <__kernel_rem_pio2+0x4e0>
 800c646:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64e:	db17      	blt.n	800c680 <__kernel_rem_pio2+0x350>
 800c650:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800c818 <__kernel_rem_pio2+0x4e8>
 800c654:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c658:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c65c:	aa06      	add	r2, sp, #24
 800c65e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c662:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c666:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c66a:	3518      	adds	r5, #24
 800c66c:	ee10 3a10 	vmov	r3, s0
 800c670:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c674:	ee17 3a10 	vmov	r3, s14
 800c678:	3401      	adds	r4, #1
 800c67a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c67e:	e74d      	b.n	800c51c <__kernel_rem_pio2+0x1ec>
 800c680:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c684:	aa06      	add	r2, sp, #24
 800c686:	ee10 3a10 	vmov	r3, s0
 800c68a:	e7f6      	b.n	800c67a <__kernel_rem_pio2+0x34a>
 800c68c:	a806      	add	r0, sp, #24
 800c68e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c692:	9001      	str	r0, [sp, #4]
 800c694:	ee07 0a90 	vmov	s15, r0
 800c698:	3a01      	subs	r2, #1
 800c69a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c69e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c6a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c6a6:	ed21 7b02 	vstmdb	r1!, {d7}
 800c6aa:	e744      	b.n	800c536 <__kernel_rem_pio2+0x206>
 800c6ac:	ecbc 5b02 	vldmia	ip!, {d5}
 800c6b0:	ecb5 6b02 	vldmia	r5!, {d6}
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c6ba:	4548      	cmp	r0, r9
 800c6bc:	dc01      	bgt.n	800c6c2 <__kernel_rem_pio2+0x392>
 800c6be:	4281      	cmp	r1, r0
 800c6c0:	daf4      	bge.n	800c6ac <__kernel_rem_pio2+0x37c>
 800c6c2:	a842      	add	r0, sp, #264	@ 0x108
 800c6c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800c6c8:	ed81 7b00 	vstr	d7, [r1]
 800c6cc:	3a01      	subs	r2, #1
 800c6ce:	e736      	b.n	800c53e <__kernel_rem_pio2+0x20e>
 800c6d0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c6d2:	2a02      	cmp	r2, #2
 800c6d4:	dc0a      	bgt.n	800c6ec <__kernel_rem_pio2+0x3bc>
 800c6d6:	2a00      	cmp	r2, #0
 800c6d8:	dc2d      	bgt.n	800c736 <__kernel_rem_pio2+0x406>
 800c6da:	d046      	beq.n	800c76a <__kernel_rem_pio2+0x43a>
 800c6dc:	f008 0007 	and.w	r0, r8, #7
 800c6e0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800c6e4:	ecbd 8b06 	vpop	{d8-d10}
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ec:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800c6ee:	2a03      	cmp	r2, #3
 800c6f0:	d1f4      	bne.n	800c6dc <__kernel_rem_pio2+0x3ac>
 800c6f2:	a942      	add	r1, sp, #264	@ 0x108
 800c6f4:	f1a3 0208 	sub.w	r2, r3, #8
 800c6f8:	440a      	add	r2, r1
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f1a1 0108 	sub.w	r1, r1, #8
 800c704:	dc52      	bgt.n	800c7ac <__kernel_rem_pio2+0x47c>
 800c706:	4621      	mov	r1, r4
 800c708:	2901      	cmp	r1, #1
 800c70a:	f1a2 0208 	sub.w	r2, r2, #8
 800c70e:	dc5d      	bgt.n	800c7cc <__kernel_rem_pio2+0x49c>
 800c710:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800c820 <__kernel_rem_pio2+0x4f0>
 800c714:	aa42      	add	r2, sp, #264	@ 0x108
 800c716:	4413      	add	r3, r2
 800c718:	2c01      	cmp	r4, #1
 800c71a:	dc67      	bgt.n	800c7ec <__kernel_rem_pio2+0x4bc>
 800c71c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800c720:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800c724:	2e00      	cmp	r6, #0
 800c726:	d167      	bne.n	800c7f8 <__kernel_rem_pio2+0x4c8>
 800c728:	ed87 5b00 	vstr	d5, [r7]
 800c72c:	ed87 6b02 	vstr	d6, [r7, #8]
 800c730:	ed87 7b04 	vstr	d7, [r7, #16]
 800c734:	e7d2      	b.n	800c6dc <__kernel_rem_pio2+0x3ac>
 800c736:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800c820 <__kernel_rem_pio2+0x4f0>
 800c73a:	aa42      	add	r2, sp, #264	@ 0x108
 800c73c:	4413      	add	r3, r2
 800c73e:	4622      	mov	r2, r4
 800c740:	2a00      	cmp	r2, #0
 800c742:	da24      	bge.n	800c78e <__kernel_rem_pio2+0x45e>
 800c744:	b34e      	cbz	r6, 800c79a <__kernel_rem_pio2+0x46a>
 800c746:	eeb1 7b46 	vneg.f64	d7, d6
 800c74a:	ed87 7b00 	vstr	d7, [r7]
 800c74e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800c752:	aa44      	add	r2, sp, #272	@ 0x110
 800c754:	2301      	movs	r3, #1
 800c756:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c75a:	429c      	cmp	r4, r3
 800c75c:	da20      	bge.n	800c7a0 <__kernel_rem_pio2+0x470>
 800c75e:	b10e      	cbz	r6, 800c764 <__kernel_rem_pio2+0x434>
 800c760:	eeb1 7b47 	vneg.f64	d7, d7
 800c764:	ed87 7b02 	vstr	d7, [r7, #8]
 800c768:	e7b8      	b.n	800c6dc <__kernel_rem_pio2+0x3ac>
 800c76a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800c820 <__kernel_rem_pio2+0x4f0>
 800c76e:	aa42      	add	r2, sp, #264	@ 0x108
 800c770:	4413      	add	r3, r2
 800c772:	2c00      	cmp	r4, #0
 800c774:	da05      	bge.n	800c782 <__kernel_rem_pio2+0x452>
 800c776:	b10e      	cbz	r6, 800c77c <__kernel_rem_pio2+0x44c>
 800c778:	eeb1 7b47 	vneg.f64	d7, d7
 800c77c:	ed87 7b00 	vstr	d7, [r7]
 800c780:	e7ac      	b.n	800c6dc <__kernel_rem_pio2+0x3ac>
 800c782:	ed33 6b02 	vldmdb	r3!, {d6}
 800c786:	3c01      	subs	r4, #1
 800c788:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c78c:	e7f1      	b.n	800c772 <__kernel_rem_pio2+0x442>
 800c78e:	ed33 7b02 	vldmdb	r3!, {d7}
 800c792:	3a01      	subs	r2, #1
 800c794:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c798:	e7d2      	b.n	800c740 <__kernel_rem_pio2+0x410>
 800c79a:	eeb0 7b46 	vmov.f64	d7, d6
 800c79e:	e7d4      	b.n	800c74a <__kernel_rem_pio2+0x41a>
 800c7a0:	ecb2 6b02 	vldmia	r2!, {d6}
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c7aa:	e7d6      	b.n	800c75a <__kernel_rem_pio2+0x42a>
 800c7ac:	ed91 7b00 	vldr	d7, [r1]
 800c7b0:	ed91 5b02 	vldr	d5, [r1, #8]
 800c7b4:	3801      	subs	r0, #1
 800c7b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c7ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7be:	ed81 6b00 	vstr	d6, [r1]
 800c7c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7c6:	ed81 7b02 	vstr	d7, [r1, #8]
 800c7ca:	e798      	b.n	800c6fe <__kernel_rem_pio2+0x3ce>
 800c7cc:	ed92 7b00 	vldr	d7, [r2]
 800c7d0:	ed92 5b02 	vldr	d5, [r2, #8]
 800c7d4:	3901      	subs	r1, #1
 800c7d6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c7da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7de:	ed82 6b00 	vstr	d6, [r2]
 800c7e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7e6:	ed82 7b02 	vstr	d7, [r2, #8]
 800c7ea:	e78d      	b.n	800c708 <__kernel_rem_pio2+0x3d8>
 800c7ec:	ed33 6b02 	vldmdb	r3!, {d6}
 800c7f0:	3c01      	subs	r4, #1
 800c7f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c7f6:	e78f      	b.n	800c718 <__kernel_rem_pio2+0x3e8>
 800c7f8:	eeb1 5b45 	vneg.f64	d5, d5
 800c7fc:	eeb1 6b46 	vneg.f64	d6, d6
 800c800:	ed87 5b00 	vstr	d5, [r7]
 800c804:	eeb1 7b47 	vneg.f64	d7, d7
 800c808:	ed87 6b02 	vstr	d6, [r7, #8]
 800c80c:	e790      	b.n	800c730 <__kernel_rem_pio2+0x400>
 800c80e:	bf00      	nop
 800c810:	00000000 	.word	0x00000000
 800c814:	41700000 	.word	0x41700000
 800c818:	00000000 	.word	0x00000000
 800c81c:	3e700000 	.word	0x3e700000
	...

0800c828 <scalbn>:
 800c828:	ee10 1a90 	vmov	r1, s1
 800c82c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c830:	b98b      	cbnz	r3, 800c856 <scalbn+0x2e>
 800c832:	ee10 3a10 	vmov	r3, s0
 800c836:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c83a:	4319      	orrs	r1, r3
 800c83c:	d00a      	beq.n	800c854 <scalbn+0x2c>
 800c83e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800c8f0 <scalbn+0xc8>
 800c842:	4b37      	ldr	r3, [pc, #220]	@ (800c920 <scalbn+0xf8>)
 800c844:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c848:	4298      	cmp	r0, r3
 800c84a:	da0b      	bge.n	800c864 <scalbn+0x3c>
 800c84c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c8f8 <scalbn+0xd0>
 800c850:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c854:	4770      	bx	lr
 800c856:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d107      	bne.n	800c86e <scalbn+0x46>
 800c85e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c862:	4770      	bx	lr
 800c864:	ee10 1a90 	vmov	r1, s1
 800c868:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c86c:	3b36      	subs	r3, #54	@ 0x36
 800c86e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c872:	4290      	cmp	r0, r2
 800c874:	dd0d      	ble.n	800c892 <scalbn+0x6a>
 800c876:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c900 <scalbn+0xd8>
 800c87a:	ee10 3a90 	vmov	r3, s1
 800c87e:	eeb0 6b47 	vmov.f64	d6, d7
 800c882:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800c908 <scalbn+0xe0>
 800c886:	2b00      	cmp	r3, #0
 800c888:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c88c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800c890:	4770      	bx	lr
 800c892:	4418      	add	r0, r3
 800c894:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800c898:	4298      	cmp	r0, r3
 800c89a:	dcec      	bgt.n	800c876 <scalbn+0x4e>
 800c89c:	2800      	cmp	r0, #0
 800c89e:	dd0a      	ble.n	800c8b6 <scalbn+0x8e>
 800c8a0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c8a4:	ec53 2b10 	vmov	r2, r3, d0
 800c8a8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c8ac:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c8b0:	ec43 2b10 	vmov	d0, r2, r3
 800c8b4:	4770      	bx	lr
 800c8b6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800c8ba:	da09      	bge.n	800c8d0 <scalbn+0xa8>
 800c8bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800c8f8 <scalbn+0xd0>
 800c8c0:	ee10 3a90 	vmov	r3, s1
 800c8c4:	eeb0 6b47 	vmov.f64	d6, d7
 800c8c8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800c910 <scalbn+0xe8>
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	e7db      	b.n	800c888 <scalbn+0x60>
 800c8d0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800c8d4:	ec53 2b10 	vmov	r2, r3, d0
 800c8d8:	3036      	adds	r0, #54	@ 0x36
 800c8da:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800c8de:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c8e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c918 <scalbn+0xf0>
 800c8e6:	ec43 2b10 	vmov	d0, r2, r3
 800c8ea:	e7b1      	b.n	800c850 <scalbn+0x28>
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	00000000 	.word	0x00000000
 800c8f4:	43500000 	.word	0x43500000
 800c8f8:	c2f8f359 	.word	0xc2f8f359
 800c8fc:	01a56e1f 	.word	0x01a56e1f
 800c900:	8800759c 	.word	0x8800759c
 800c904:	7e37e43c 	.word	0x7e37e43c
 800c908:	8800759c 	.word	0x8800759c
 800c90c:	fe37e43c 	.word	0xfe37e43c
 800c910:	c2f8f359 	.word	0xc2f8f359
 800c914:	81a56e1f 	.word	0x81a56e1f
 800c918:	00000000 	.word	0x00000000
 800c91c:	3c900000 	.word	0x3c900000
 800c920:	ffff3cb0 	.word	0xffff3cb0

0800c924 <_init>:
 800c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c926:	bf00      	nop
 800c928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92a:	bc08      	pop	{r3}
 800c92c:	469e      	mov	lr, r3
 800c92e:	4770      	bx	lr

0800c930 <_fini>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr
